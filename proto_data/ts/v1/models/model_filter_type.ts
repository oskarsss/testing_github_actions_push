// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_filter_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
// Import the Google API common protos.

/**
 * @generated from protobuf message FilterModel
 */
export interface FilterModel {}
/**
 * @generated from protobuf message FilterModel.Filter
 */
export interface FilterModel_Filter {
    /**
     * @generated from protobuf field: FilterModel.FilterID filter_id = 1;
     */
    filterId: FilterModel_FilterID;
    /**
     * @generated from protobuf field: map<string, int64> counts = 2;
     */
    counts: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: map<string, string> amounts = 3;
     */
    amounts: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf enum FilterModel.FilterID
 */
export enum FilterModel_FilterID {
    /**
     * @generated from protobuf enum value: FILTER_UNSPECIFIED = 0;
     */
    FILTER_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: FILTER_USER = 1;
     */
    FILTER_USER = 1,
    /**
     * @generated from protobuf enum value: FILTER_USER_STATUS = 2;
     */
    FILTER_USER_STATUS = 2,
    /**
     * @generated from protobuf enum value: FILTER_LOAD_STATUS = 3;
     */
    FILTER_LOAD_STATUS = 3,
    /**
     * @generated from protobuf enum value: FILTER_LOAD_INVOICE_STATUS = 4;
     */
    FILTER_LOAD_INVOICE_STATUS = 4,
    /**
     * @generated from protobuf enum value: FILTER_LOAD_FIRST_STOP_APPOINTMENT_DATE_START = 5;
     */
    FILTER_LOAD_FIRST_STOP_APPOINTMENT_DATE_START = 5,
    /**
     * @generated from protobuf enum value: FILTER_LOAD_FIRST_STOP_APPOINTMENT_DATE_END = 6;
     */
    FILTER_LOAD_FIRST_STOP_APPOINTMENT_DATE_END = 6,
    /**
     * @generated from protobuf enum value: FILTER_TRUCK = 7;
     */
    FILTER_TRUCK = 7,
    /**
     * @generated from protobuf enum value: FILTER_TRUCK_STATUS = 8;
     */
    FILTER_TRUCK_STATUS = 8,
    /**
     * @generated from protobuf enum value: FILTER_TRUCK_TYPE = 9;
     */
    FILTER_TRUCK_TYPE = 9,
    /**
     * @generated from protobuf enum value: FILTER_TRUCK_TAGS = 10;
     */
    FILTER_TRUCK_TAGS = 10,
    /**
     * @generated from protobuf enum value: FILTER_TRUCK_USERS = 11;
     */
    FILTER_TRUCK_USERS = 11,
    /**
     * @generated from protobuf enum value: FILTER_TRUCK_YEAR = 12;
     */
    FILTER_TRUCK_YEAR = 12,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER = 13;
     */
    FILTER_TRAILER = 13,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER_STATUS = 14;
     */
    FILTER_TRAILER_STATUS = 14,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER_TYPE = 15;
     */
    FILTER_TRAILER_TYPE = 15,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER_OWNERSHIP_TYPE = 16;
     */
    FILTER_TRAILER_OWNERSHIP_TYPE = 16,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER_TAGS = 17;
     */
    FILTER_TRAILER_TAGS = 17,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER_YEAR = 18;
     */
    FILTER_TRAILER_YEAR = 18,
    /**
     * @generated from protobuf enum value: FILTER_PLATE = 19;
     */
    FILTER_PLATE = 19,
    /**
     * @generated from protobuf enum value: FILTER_PLATE_STATUS = 20;
     */
    FILTER_PLATE_STATUS = 20,
    /**
     * @generated from protobuf enum value: FILTER_PLATE_VEHICLE_TYPE = 21;
     */
    FILTER_PLATE_VEHICLE_TYPE = 21,
    /**
     * @generated from protobuf enum value: FILTER_PLATE_COMPANY = 22;
     */
    FILTER_PLATE_COMPANY = 22,
    /**
     * @generated from protobuf enum value: FILTER_TRAILER_COMPANY = 23;
     */
    FILTER_TRAILER_COMPANY = 23,
    /**
     * @generated from protobuf enum value: FILTER_DRIVER = 24;
     */
    FILTER_DRIVER = 24,
    /**
     * @generated from protobuf enum value: FILTER_DRIVER_STATUS = 25;
     */
    FILTER_DRIVER_STATUS = 25,
    /**
     * @generated from protobuf enum value: FILTER_DRIVER_TYPE = 26;
     */
    FILTER_DRIVER_TYPE = 26,
    /**
     * @generated from protobuf enum value: FILTER_DRIVER_TAGS = 27;
     */
    FILTER_DRIVER_TAGS = 27,
    /**
     * @generated from protobuf enum value: FILTER_DRIVER_AGE = 28;
     */
    FILTER_DRIVER_AGE = 28,
    /**
     * @generated from protobuf enum value: FILTER_DRIVER_HIRE_DATE = 29;
     */
    FILTER_DRIVER_HIRE_DATE = 29,
    /**
     * @generated from protobuf enum value: FILTER_VENDOR = 30;
     */
    FILTER_VENDOR = 30,
    /**
     * @generated from protobuf enum value: FILTER_VENDOR_STATUS = 31;
     */
    FILTER_VENDOR_STATUS = 31,
    /**
     * @generated from protobuf enum value: FILTER_VENDOR_TYPE = 32;
     */
    FILTER_VENDOR_TYPE = 32,
    /**
     * @generated from protobuf enum value: FILTER_SETTLEMENT_STATUS = 33;
     */
    FILTER_SETTLEMENT_STATUS = 33,
    /**
     * @generated from protobuf enum value: FILTER_SETTLEMENT_DRIVER_PAY_AMOUNT_TYPE = 34;
     */
    FILTER_SETTLEMENT_DRIVER_PAY_AMOUNT_TYPE = 34,
    /**
     * @generated from protobuf enum value: FILTER_SETTLEMENT_REVENUE_TYPE = 35;
     */
    FILTER_SETTLEMENT_REVENUE_TYPE = 35,
    /**
     * @generated from protobuf enum value: FILTER_BROKER = 36;
     */
    FILTER_BROKER = 36,
    /**
     * @generated from protobuf enum value: FILTER_CUSTOMER = 37;
     */
    FILTER_CUSTOMER = 37,
    /**
     * @generated from protobuf enum value: FILTER_FUEL_TRANSACTION_VERIFIED = 38;
     */
    FILTER_FUEL_TRANSACTION_VERIFIED = 38,
    /**
     * @generated from protobuf enum value: FILTER_FUEL_SETTLEMENT_STATUS = 39;
     */
    FILTER_FUEL_SETTLEMENT_STATUS = 39,
    /**
     * @generated from protobuf enum value: FILTER_TOLL_SETTLEMENT_STATUS = 40;
     */
    FILTER_TOLL_SETTLEMENT_STATUS = 40
}
// @generated message type with reflection information, may provide speed optimized methods
class FilterModel$Type extends MessageType<FilterModel> {
    constructor() {
        super('FilterModel', []);
    }
    create(value?: PartialMessage<FilterModel>): FilterModel {
        const message = globalThis.Object.create(this.messagePrototype!);
        if (value !== undefined) reflectionMergePartial<FilterModel>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: FilterModel
    ): FilterModel {
        return target ?? this.create();
    }
    internalBinaryWrite(
        message: FilterModel,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FilterModel
 */
export const FilterModel = new FilterModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterModel_Filter$Type extends MessageType<FilterModel_Filter> {
    constructor() {
        super('FilterModel.Filter', [
            {
                no: 1,
                name: 'filter_id',
                kind: 'enum',
                T: () => ['FilterModel.FilterID', FilterModel_FilterID]
            },
            {
                no: 2,
                name: 'counts',
                kind: 'map',
                K: 9 /*ScalarType.STRING*/,
                V: { kind: 'scalar', T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            },
            {
                no: 3,
                name: 'amounts',
                kind: 'map',
                K: 9 /*ScalarType.STRING*/,
                V: { kind: 'scalar', T: 9 /*ScalarType.STRING*/ }
            }
        ]);
    }
    create(value?: PartialMessage<FilterModel_Filter>): FilterModel_Filter {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.filterId = 0;
        message.counts = {};
        message.amounts = {};
        if (value !== undefined) reflectionMergePartial<FilterModel_Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: FilterModel_Filter
    ): FilterModel_Filter {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FilterModel.FilterID filter_id */ 1:
                    message.filterId = reader.int32();
                    break;
                case /* map<string, int64> counts */ 2:
                    this.binaryReadMap2(message.counts, reader, options);
                    break;
                case /* map<string, string> amounts */ 3:
                    this.binaryReadMap3(message.amounts, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        );
            }
        }
        return message;
    }
    private binaryReadMap2(
        map: FilterModel_Filter['counts'],
        reader: IBinaryReader,
        options: BinaryReadOptions
    ): void {
        let len = reader.uint32(),
            end = reader.pos + len,
            key: keyof FilterModel_Filter['counts'] | undefined,
            val: FilterModel_Filter['counts'][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int64().toNumber();
                    break;
                default:
                    throw new globalThis.Error(
                        'unknown map entry field for field FilterModel.Filter.counts'
                    );
            }
        }
        map[key ?? ''] = val ?? 0;
    }
    private binaryReadMap3(
        map: FilterModel_Filter['amounts'],
        reader: IBinaryReader,
        options: BinaryReadOptions
    ): void {
        let len = reader.uint32(),
            end = reader.pos + len,
            key: keyof FilterModel_Filter['amounts'] | undefined,
            val: FilterModel_Filter['amounts'][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default:
                    throw new globalThis.Error(
                        'unknown map entry field for field FilterModel.Filter.amounts'
                    );
            }
        }
        map[key ?? ''] = val ?? '';
    }
    internalBinaryWrite(
        message: FilterModel_Filter,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* FilterModel.FilterID filter_id = 1; */
        if (message.filterId !== 0) writer.tag(1, WireType.Varint).int32(message.filterId);
        /* map<string, int64> counts = 2; */
        for (let k of globalThis.Object.keys(message.counts))
            writer
                .tag(2, WireType.LengthDelimited)
                .fork()
                .tag(1, WireType.LengthDelimited)
                .string(k)
                .tag(2, WireType.Varint)
                .int64(message.counts[k])
                .join();
        /* map<string, string> amounts = 3; */
        for (let k of globalThis.Object.keys(message.amounts))
            writer
                .tag(3, WireType.LengthDelimited)
                .fork()
                .tag(1, WireType.LengthDelimited)
                .string(k)
                .tag(2, WireType.LengthDelimited)
                .string(message.amounts[k])
                .join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FilterModel.Filter
 */
export const FilterModel_Filter = new FilterModel_Filter$Type();
