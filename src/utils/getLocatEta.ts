import { getFirstActiveStop } from '@/@grpcServices/services/manifests-service/utils';
import { ManifestModel_Stop } from '@proto/models/model_manifest';
import moment from 'moment-timezone';

const timeZoneMapping: { [key: string]: string } = {
    ACDT : 'Australia/Adelaide',
    ACST : 'Australia/Darwin',
    ACT  : 'Australia/Darwin',
    ADT  : 'America/Halifax',
    AEDT : 'Australia/Sydney',
    AEST : 'Australia/Brisbane',
    AFT  : 'Asia/Kabul',
    AKDT : 'America/Anchorage',
    AKST : 'America/Anchorage',
    ALMT : 'Asia/Almaty',
    AMST : 'America/Campo_Grande',
    AMT  : 'America/Cuiaba',
    ANAST: 'Asia/Anadyr',
    ANAT : 'Asia/Anadyr',
    AQTT : 'Asia/Aqtobe',
    ART  : 'America/Argentina/Buenos_Aires',
    AST  : 'America/Halifax',
    AWDT : 'Australia/Perth',
    AWST : 'Australia/Perth',
    AZOST: 'Atlantic/Azores',
    AZOT : 'Atlantic/Azores',
    AZST : 'Asia/Baku',
    AZT  : 'Asia/Baku',
    BDT  : 'Asia/Dhaka',
    BIOT : 'Indian/Chagos',
    BIT  : 'Pacific/Pago_Pago',
    BOT  : 'America/La_Paz',
    BRST : 'America/Sao_Paulo',
    BRT  : 'America/Sao_Paulo',
    BST  : 'Europe/London',
    BTT  : 'Asia/Thimphu',
    CAT  : 'Africa/Harare',
    CCT  : 'Indian/Cocos',
    CDT  : 'America/Chicago',
    CEST : 'Europe/Paris',
    CET  : 'Europe/Paris',
    CHADT: 'Pacific/Chatham',
    CHAST: 'Pacific/Chatham',
    CHOT : 'Asia/Choibalsan',
    CHOST: 'Asia/Choibalsan',
    CHST : 'Pacific/Guam',
    CHUT : 'Pacific/Chuuk',
    CIST : 'Pacific/Rarotonga',
    CIT  : 'Asia/Makassar',
    CKT  : 'Pacific/Rarotonga',
    CLST : 'America/Santiago',
    CLT  : 'America/Santiago',
    COST : 'America/Bogota',
    COT  : 'America/Bogota',
    CST  : 'America/Chicago',
    CT   : 'Asia/Shanghai',
    CVT  : 'Atlantic/Cape_Verde',
    CXT  : 'Indian/Christmas',
    DAVT : 'Antarctica/Davis',
    DDUT : 'Antarctica/DumontDUrville',
    DFT  : 'Europe/Paris',
    EASST: 'Pacific/Easter',
    EAST : 'Pacific/Easter',
    EAT  : 'Africa/Nairobi',
    ECT  : 'America/Guayaquil',
    EDT  : 'America/New_York',
    EEST : 'Europe/Istanbul',
    EET  : 'Europe/Istanbul',
    EGST : 'Atlantic/Reykjavik',
    EGT  : 'Atlantic/Reykjavik',
    EST  : 'America/New_York',
    ET   : 'America/New_York',
    FET  : 'Europe/Minsk',
    FJT  : 'Pacific/Fiji',
    FKST : 'Atlantic/Stanley',
    FKT  : 'Atlantic/Stanley',
    FNT  : 'America/Noronha',
    GALT : 'Pacific/Galapagos',
    GAMT : 'Pacific/Gambier',
    GET  : 'Asia/Tbilisi',
    GFT  : 'America/Cayenne',
    GILT : 'Pacific/Tarawa',
    GIT  : 'Pacific/Gambier',
    GMT  : 'Europe/London',
    GST  : 'Asia/Dubai',
    GYT  : 'America/Guyana',
    HDT  : 'Pacific/Honolulu',
    HAEC : 'Europe/Paris',
    HST  : 'Pacific/Honolulu',
    HKT  : 'Asia/Hong_Kong',
    HMT  : 'Asia/Thimphu',
    HOVT : 'Asia/Hovd',
    ICT  : 'Asia/Bangkok',
    IDLW : 'Etc/GMT+12',
    IDT  : 'Asia/Jerusalem',
    IOT  : 'Indian/Chagos',
    IRDT : 'Asia/Tehran',
    IRKT : 'Asia/Irkutsk',
    IRST : 'Asia/Tehran',
    IST  : 'Asia/Kolkata',
    JST  : 'Asia/Tokyo',
    KGT  : 'Asia/Bishkek',
    KOST : 'Pacific/Kosrae',
    KRAT : 'Asia/Krasnoyarsk',
    KST  : 'Asia/Seoul',
    LHST : 'Australia/Lord_Howe',
    LINT : 'Pacific/Kiritimati',
    MAGT : 'Asia/Magadan',
    MART : 'Pacific/Marquesas',
    MAWT : 'Antarctica/Mawson',
    MDT  : 'America/Denver',
    MET  : 'Europe/Paris',
    MEST : 'Europe/Paris',
    MHT  : 'Pacific/Kwajalein',
    MIST : 'Antarctica/Macquarie',
    MIT  : 'Pacific/Apia',
    MMT  : 'Asia/Yangon',
    MSK  : 'Europe/Moscow',
    MST  : 'America/Denver',
    MUT  : 'Indian/Mauritius',
    MVT  : 'Indian/Maldives',
    MYT  : 'Asia/Kuala_Lumpur',
    NCT  : 'Pacific/Noumea',
    NDT  : 'America/St_Johns',
    NFT  : 'Pacific/Norfolk',
    NPT  : 'Asia/Kathmandu',
    NST  : 'America/St_Johns',
    NT   : 'America/St_Johns',
    NUT  : 'Pacific/Niue',
    NZDT : 'Pacific/Auckland',
    NZST : 'Pacific/Auckland',
    OMST : 'Asia/Omsk',
    ORAT : 'Asia/Oral',
    PDT  : 'America/Los_Angeles',
    PET  : 'America/Lima',
    PETT : 'Asia/Kamchatka',
    PGT  : 'Pacific/Port_Moresby',
    PHOT : 'Pacific/Enderbury',
    PHT  : 'Asia/Manila',
    PKT  : 'Asia/Karachi',
    PMDT : 'America/Miquelon',
    PMST : 'America/Miquelon',
    PONT : 'Pacific/Pohnpei',
    PST  : 'America/Los_Angeles',
    PWT  : 'Pacific/Palau',
    PYST : 'America/Asuncion',
    PYT  : 'America/Asuncion',
    RET  : 'Indian/Reunion',
    ROTT : 'Antarctica/Rothera',
    SAKT : 'Asia/Sakhalin',
    SAMT : 'Europe/Samara',
    SAST : 'Africa/Johannesburg',
    SBT  : 'Pacific/Guadalcanal',
    SCT  : 'Indian/Mahe',
    SGT  : 'Asia/Singapore',
    SLST : 'Asia/Colombo',
    SRET : 'Asia/Srednekolymsk',
    SRT  : 'America/Paramaribo',
    SST  : 'Pacific/Pago_Pago',
    SYOT : 'Antarctica/Syowa',
    TAHT : 'Pacific/Tahiti',
    THA  : 'Asia/Bangkok',
    TFT  : 'Indian/Kerguelen',
    TJT  : 'Asia/Dushanbe',
    TKT  : 'Pacific/Fakaofo',
    TLT  : 'Asia/Dili',
    TMT  : 'Asia/Ashgabat',
    TOT  : 'Pacific/Tongatapu',
    TVT  : 'Pacific/Funafuti',
    UCT  : 'Etc/UCT',
    ULAST: 'Asia/Ulaanbaatar',
    ULAT : 'Asia/Ulaanbaatar',
    UTC  : 'Etc/UTC',
    UYST : 'America/Montevideo',
    UYT  : 'America/Montevideo',
    UZT  : 'Asia/Tashkent',
    VET  : 'America/Caracas',
    VLAT : 'Asia/Vladivostok',
    VOLT : 'Europe/Volgograd',
    VOST : 'Antarctica/Vostok',
    VUT  : 'Pacific/Efate',
    WAKT : 'Pacific/Wake',
    WAST : 'Africa/Windhoek',
    WAT  : 'Africa/Lagos',
    WEST : 'Europe/Lisbon',
    WET  : 'Europe/Lisbon',
    WIT  : 'Asia/Jayapura',
    WGST : 'America/Godthab',
    WGT  : 'America/Godthab',
    WST  : 'Australia/Perth',
    YAKT : 'Asia/Yakutsk',
    YEKT : 'Asia/Yekaterinburg'
};

export const getLocalEta = (stops: ManifestModel_Stop[]) => {
    const activeStop = getFirstActiveStop(stops);

    if (!activeStop || !activeStop.appointmentStartAtLocal || !activeStop.location) {
        return {
            lateness : 0,
            earliness: 0,
            eta      : 0
        };
    }

    const {
        appointmentStartAtLocal: appStart,
        location: { timezone }
    } = activeStop;

    const fullTimezone = timeZoneMapping[timezone] || timezone;

    // Current time in the provided timezone
    const currentTime = moment().tz(fullTimezone);

    // Appointment start time in the provided timezone
    const appointmentTime = moment.tz(appStart, fullTimezone);

    // Difference in minutes between now and appointment start time
    const differenceInMinutes = appointmentTime.diff(currentTime, 'minutes');

    const eta = {
        lateness : 0,
        earliness: 0,
        eta      : differenceInMinutes
    };

    if (differenceInMinutes < 0) {
        eta.lateness = Math.abs(differenceInMinutes);
    } else if (differenceInMinutes > 0) {
        eta.earliness = Math.abs(differenceInMinutes);
    }

    return eta;
};
