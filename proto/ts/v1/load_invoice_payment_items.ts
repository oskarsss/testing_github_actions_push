// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_invoice_payment_items.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message LoadInvoicePaymentItemAddRequest
 */
export interface LoadInvoicePaymentItemAddRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: string receiver_entity_type = 3;
     */
    receiverEntityType: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: string paid_on = 5;
     */
    paidOn: string;
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemAddReply
 */
export interface LoadInvoicePaymentItemAddReply {
    /**
     * @generated from protobuf field: string invoice_payment_item_id = 1;
     */
    invoicePaymentItemId: string;
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemUpdateRequest
 */
export interface LoadInvoicePaymentItemUpdateRequest {
    /**
     * @generated from protobuf field: string invoice_payment_item_id = 1;
     */
    invoicePaymentItemId: string;
    /**
     * @generated from protobuf field: string load_id = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf field: double amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string receiver_entity_type = 4;
     */
    receiverEntityType: string;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: string paid_on = 6;
     */
    paidOn: string;
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemUpdateReply
 */
export interface LoadInvoicePaymentItemUpdateReply {
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemDeleteRequest
 */
export interface LoadInvoicePaymentItemDeleteRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string invoice_payment_item_id = 2;
     */
    invoicePaymentItemId: string;
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemDeleteReply
 */
export interface LoadInvoicePaymentItemDeleteReply {
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemGetForLoadRequest
 */
export interface LoadInvoicePaymentItemGetForLoadRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemGetForLoadReply
 */
export interface LoadInvoicePaymentItemGetForLoadReply {
    /**
     * @generated from protobuf field: repeated LoadInvoicePaymentItemGetForLoadReply.InvoicePaymentItem invoice_payment_items = 1;
     */
    invoicePaymentItems: LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem[];
    /**
     * @generated from protobuf field: double invoice_payment_total_amount = 2;
     */
    invoicePaymentTotalAmount: number;
    /**
     * @generated from protobuf field: string invoice_payment_total_amount_formatted = 3;
     */
    invoicePaymentTotalAmountFormatted: string;
}
/**
 * @generated from protobuf message LoadInvoicePaymentItemGetForLoadReply.InvoicePaymentItem
 */
export interface LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem {
    /**
     * @generated from protobuf field: string invoice_payment_item_id = 1;
     */
    invoicePaymentItemId: string;
    /**
     * @generated from protobuf field: double amount_float = 2;
     */
    amountFloat: number;
    /**
     * @generated from protobuf field: string amount = 3;
     */
    amount: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: string paid_on = 5;
     */
    paidOn: string;
    /**
     * @generated from protobuf field: string receiver_entity_type = 6;
     */
    receiverEntityType: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemAddRequest$Type extends MessageType<LoadInvoicePaymentItemAddRequest> {
    constructor() {
        super("LoadInvoicePaymentItemAddRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "receiver_entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "paid_on", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemAddRequest>): LoadInvoicePaymentItemAddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.amount = 0;
        message.receiverEntityType = "";
        message.description = "";
        message.paidOn = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemAddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemAddRequest): LoadInvoicePaymentItemAddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                case /* string receiver_entity_type */ 3:
                    message.receiverEntityType = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string paid_on */ 5:
                    message.paidOn = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemAddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        /* string receiver_entity_type = 3; */
        if (message.receiverEntityType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.receiverEntityType);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string paid_on = 5; */
        if (message.paidOn !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.paidOn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemAddRequest
 */
export const LoadInvoicePaymentItemAddRequest = new LoadInvoicePaymentItemAddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemAddReply$Type extends MessageType<LoadInvoicePaymentItemAddReply> {
    constructor() {
        super("LoadInvoicePaymentItemAddReply", [
            { no: 1, name: "invoice_payment_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemAddReply>): LoadInvoicePaymentItemAddReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoicePaymentItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemAddReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemAddReply): LoadInvoicePaymentItemAddReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invoice_payment_item_id */ 1:
                    message.invoicePaymentItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemAddReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invoice_payment_item_id = 1; */
        if (message.invoicePaymentItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invoicePaymentItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemAddReply
 */
export const LoadInvoicePaymentItemAddReply = new LoadInvoicePaymentItemAddReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemUpdateRequest$Type extends MessageType<LoadInvoicePaymentItemUpdateRequest> {
    constructor() {
        super("LoadInvoicePaymentItemUpdateRequest", [
            { no: 1, name: "invoice_payment_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "receiver_entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "paid_on", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemUpdateRequest>): LoadInvoicePaymentItemUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoicePaymentItemId = "";
        message.loadId = "";
        message.amount = 0;
        message.receiverEntityType = "";
        message.description = "";
        message.paidOn = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemUpdateRequest): LoadInvoicePaymentItemUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invoice_payment_item_id */ 1:
                    message.invoicePaymentItemId = reader.string();
                    break;
                case /* string load_id */ 2:
                    message.loadId = reader.string();
                    break;
                case /* double amount */ 3:
                    message.amount = reader.double();
                    break;
                case /* string receiver_entity_type */ 4:
                    message.receiverEntityType = reader.string();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* string paid_on */ 6:
                    message.paidOn = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invoice_payment_item_id = 1; */
        if (message.invoicePaymentItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invoicePaymentItemId);
        /* string load_id = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* double amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Bit64).double(message.amount);
        /* string receiver_entity_type = 4; */
        if (message.receiverEntityType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.receiverEntityType);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string paid_on = 6; */
        if (message.paidOn !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.paidOn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemUpdateRequest
 */
export const LoadInvoicePaymentItemUpdateRequest = new LoadInvoicePaymentItemUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemUpdateReply$Type extends MessageType<LoadInvoicePaymentItemUpdateReply> {
    constructor() {
        super("LoadInvoicePaymentItemUpdateReply", []);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemUpdateReply>): LoadInvoicePaymentItemUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemUpdateReply): LoadInvoicePaymentItemUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemUpdateReply
 */
export const LoadInvoicePaymentItemUpdateReply = new LoadInvoicePaymentItemUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemDeleteRequest$Type extends MessageType<LoadInvoicePaymentItemDeleteRequest> {
    constructor() {
        super("LoadInvoicePaymentItemDeleteRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_payment_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemDeleteRequest>): LoadInvoicePaymentItemDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoicePaymentItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemDeleteRequest): LoadInvoicePaymentItemDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string invoice_payment_item_id */ 2:
                    message.invoicePaymentItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string invoice_payment_item_id = 2; */
        if (message.invoicePaymentItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoicePaymentItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemDeleteRequest
 */
export const LoadInvoicePaymentItemDeleteRequest = new LoadInvoicePaymentItemDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemDeleteReply$Type extends MessageType<LoadInvoicePaymentItemDeleteReply> {
    constructor() {
        super("LoadInvoicePaymentItemDeleteReply", []);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemDeleteReply>): LoadInvoicePaymentItemDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemDeleteReply): LoadInvoicePaymentItemDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemDeleteReply
 */
export const LoadInvoicePaymentItemDeleteReply = new LoadInvoicePaymentItemDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemGetForLoadRequest$Type extends MessageType<LoadInvoicePaymentItemGetForLoadRequest> {
    constructor() {
        super("LoadInvoicePaymentItemGetForLoadRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemGetForLoadRequest>): LoadInvoicePaymentItemGetForLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemGetForLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemGetForLoadRequest): LoadInvoicePaymentItemGetForLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemGetForLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemGetForLoadRequest
 */
export const LoadInvoicePaymentItemGetForLoadRequest = new LoadInvoicePaymentItemGetForLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemGetForLoadReply$Type extends MessageType<LoadInvoicePaymentItemGetForLoadReply> {
    constructor() {
        super("LoadInvoicePaymentItemGetForLoadReply", [
            { no: 1, name: "invoice_payment_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem },
            { no: 2, name: "invoice_payment_total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "invoice_payment_total_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemGetForLoadReply>): LoadInvoicePaymentItemGetForLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoicePaymentItems = [];
        message.invoicePaymentTotalAmount = 0;
        message.invoicePaymentTotalAmountFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemGetForLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemGetForLoadReply): LoadInvoicePaymentItemGetForLoadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadInvoicePaymentItemGetForLoadReply.InvoicePaymentItem invoice_payment_items */ 1:
                    message.invoicePaymentItems.push(LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double invoice_payment_total_amount */ 2:
                    message.invoicePaymentTotalAmount = reader.double();
                    break;
                case /* string invoice_payment_total_amount_formatted */ 3:
                    message.invoicePaymentTotalAmountFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemGetForLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadInvoicePaymentItemGetForLoadReply.InvoicePaymentItem invoice_payment_items = 1; */
        for (let i = 0; i < message.invoicePaymentItems.length; i++)
            LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem.internalBinaryWrite(message.invoicePaymentItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* double invoice_payment_total_amount = 2; */
        if (message.invoicePaymentTotalAmount !== 0)
            writer.tag(2, WireType.Bit64).double(message.invoicePaymentTotalAmount);
        /* string invoice_payment_total_amount_formatted = 3; */
        if (message.invoicePaymentTotalAmountFormatted !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.invoicePaymentTotalAmountFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemGetForLoadReply
 */
export const LoadInvoicePaymentItemGetForLoadReply = new LoadInvoicePaymentItemGetForLoadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem$Type extends MessageType<LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem> {
    constructor() {
        super("LoadInvoicePaymentItemGetForLoadReply.InvoicePaymentItem", [
            { no: 1, name: "invoice_payment_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount_float", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "paid_on", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "receiver_entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem>): LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoicePaymentItemId = "";
        message.amountFloat = 0;
        message.amount = "";
        message.description = "";
        message.paidOn = "";
        message.receiverEntityType = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem): LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invoice_payment_item_id */ 1:
                    message.invoicePaymentItemId = reader.string();
                    break;
                case /* double amount_float */ 2:
                    message.amountFloat = reader.double();
                    break;
                case /* string amount */ 3:
                    message.amount = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string paid_on */ 5:
                    message.paidOn = reader.string();
                    break;
                case /* string receiver_entity_type */ 6:
                    message.receiverEntityType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invoice_payment_item_id = 1; */
        if (message.invoicePaymentItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invoicePaymentItemId);
        /* double amount_float = 2; */
        if (message.amountFloat !== 0)
            writer.tag(2, WireType.Bit64).double(message.amountFloat);
        /* string amount = 3; */
        if (message.amount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amount);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string paid_on = 5; */
        if (message.paidOn !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.paidOn);
        /* string receiver_entity_type = 6; */
        if (message.receiverEntityType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.receiverEntityType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaymentItemGetForLoadReply.InvoicePaymentItem
 */
export const LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem = new LoadInvoicePaymentItemGetForLoadReply_InvoicePaymentItem$Type();
/**
 * @generated ServiceType for protobuf service LoadInvoicePaymentItemsService
 */
export const LoadInvoicePaymentItemsService = new ServiceType("LoadInvoicePaymentItemsService", [
    { name: "LoadInvoicePaymentItemAdd", options: {}, I: LoadInvoicePaymentItemAddRequest, O: LoadInvoicePaymentItemAddReply },
    { name: "LoadInvoicePaymentItemUpdate", options: {}, I: LoadInvoicePaymentItemUpdateRequest, O: LoadInvoicePaymentItemUpdateReply },
    { name: "LoadInvoicePaymentItemDelete", options: {}, I: LoadInvoicePaymentItemDeleteRequest, O: LoadInvoicePaymentItemDeleteReply },
    { name: "LoadInvoicePaymentItemGetForLoad", options: {}, I: LoadInvoicePaymentItemGetForLoadRequest, O: LoadInvoicePaymentItemGetForLoadReply }
]);
