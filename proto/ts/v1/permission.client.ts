// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/permission.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PermissionService } from "./permission";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PermissionGetReply } from "./permission";
import type { PermissionGetRequest } from "./permission";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service PermissionService
 */
export interface IPermissionServiceClient {
    /**
     * @generated from protobuf rpc: PermissionGet(PermissionGetRequest) returns (PermissionGetReply);
     */
    permissionGet(input: PermissionGetRequest, options?: RpcOptions): UnaryCall<PermissionGetRequest, PermissionGetReply>;
}
/**
 * @generated from protobuf service PermissionService
 */
export class PermissionServiceClient implements IPermissionServiceClient, ServiceInfo {
    typeName = PermissionService.typeName;
    methods = PermissionService.methods;
    options = PermissionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PermissionGet(PermissionGetRequest) returns (PermissionGetReply);
     */
    permissionGet(input: PermissionGetRequest, options?: RpcOptions): UnaryCall<PermissionGetRequest, PermissionGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PermissionGetRequest, PermissionGetReply>("unary", this._transport, method, opt, input);
    }
}
