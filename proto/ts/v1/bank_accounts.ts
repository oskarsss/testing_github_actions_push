// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/bank_accounts.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BankAccountModel_Entity_Type } from "./models/model_bank_account";
/**
 * @generated from protobuf message BankAccount
 */
export interface BankAccount {
    /**
     * @generated from protobuf field: string bank_account_id = 1;
     */
    bankAccountId: string;
    /**
     * @generated from protobuf field: BankAccountModel.Entity.Type entity_type = 2;
     */
    entityType: BankAccountModel_Entity_Type;
    /**
     * @generated from protobuf field: string entity_id = 3;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string bank_name = 4;
     */
    bankName: string;
    /**
     * @generated from protobuf field: string account_holder_name = 5;
     */
    accountHolderName: string;
    /**
     * @generated from protobuf field: string routing_number = 6;
     */
    routingNumber: string;
    /**
     * @generated from protobuf field: string last_four = 7;
     */
    lastFour: string;
    /**
     * @generated from protobuf field: string created_at = 8;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 9;
     */
    deleted: boolean;
}
/**
 * BankAccountRestore
 *
 * @generated from protobuf message BankAccountRestoreRequest
 */
export interface BankAccountRestoreRequest {
    /**
     * @generated from protobuf field: string bank_account_id = 1;
     */
    bankAccountId: string;
}
/**
 * @generated from protobuf message BankAccountRestoreReply
 */
export interface BankAccountRestoreReply {
    /**
     * @generated from protobuf field: BankAccountModel.Entity.Type entity_type = 1;
     */
    entityType: BankAccountModel_Entity_Type;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
}
/**
 * BankAccountCreate
 *
 * @generated from protobuf message BankAccountCreateRequest
 */
export interface BankAccountCreateRequest {
    /**
     * @generated from protobuf field: string routing_number = 1;
     */
    routingNumber: string;
    /**
     * @generated from protobuf field: string account_number = 2;
     */
    accountNumber: string;
    /**
     * @generated from protobuf field: string account_holder_name = 3;
     */
    accountHolderName: string;
    /**
     * @generated from protobuf field: BankAccountModel.Entity.Type entity_type = 4;
     */
    entityType: BankAccountModel_Entity_Type;
    /**
     * @generated from protobuf field: string entity_id = 5;
     */
    entityId: string;
}
/**
 * @generated from protobuf message BankAccountCreateReply
 */
export interface BankAccountCreateReply {
    /**
     * @generated from protobuf field: BankAccount bank_account = 1;
     */
    bankAccount?: BankAccount;
}
/**
 * BankAccountsGet
 *
 * @generated from protobuf message BankAccountGetRequest
 */
export interface BankAccountGetRequest {
    /**
     * @generated from protobuf field: BankAccountModel.Entity.Type filter_by_entity_type = 1;
     */
    filterByEntityType: BankAccountModel_Entity_Type;
    /**
     * @generated from protobuf field: BankAccountGetRequest.DeletedFilter filter_by_deleted = 2;
     */
    filterByDeleted?: BankAccountGetRequest_DeletedFilter;
}
/**
 * @generated from protobuf message BankAccountGetRequest.DeletedFilter
 */
export interface BankAccountGetRequest_DeletedFilter {
    /**
     * @generated from protobuf field: bool deleted = 1;
     */
    deleted: boolean;
}
/**
 * @generated from protobuf message BankAccountGetReply
 */
export interface BankAccountGetReply {
    /**
     * @generated from protobuf field: repeated BankAccount bank_accounts = 1;
     */
    bankAccounts: BankAccount[];
}
/**
 * BankAccountDelete
 *
 * @generated from protobuf message BankAccountDeleteRequest
 */
export interface BankAccountDeleteRequest {
    /**
     * @generated from protobuf field: string bank_account_id = 1;
     */
    bankAccountId: string;
}
/**
 * @generated from protobuf message BankAccountDeleteReply
 */
export interface BankAccountDeleteReply {
    /**
     * @generated from protobuf field: BankAccountModel.Entity.Type entity_type = 1;
     */
    entityType: BankAccountModel_Entity_Type;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
}
/**
 * BankAccountNumberRetrieve
 *
 * @generated from protobuf message BankAccountNumberRetrieveRequest
 */
export interface BankAccountNumberRetrieveRequest {
    /**
     * @generated from protobuf field: string bank_account_id = 1;
     */
    bankAccountId: string;
}
/**
 * @generated from protobuf message BankAccountNumberRetrieveReply
 */
export interface BankAccountNumberRetrieveReply {
    /**
     * @generated from protobuf field: string account_number = 1;
     */
    accountNumber: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BankAccount$Type extends MessageType<BankAccount> {
    constructor() {
        super("BankAccount", [
            { no: 1, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "enum", T: () => ["BankAccountModel.Entity.Type", BankAccountModel_Entity_Type] },
            { no: 3, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bank_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "account_holder_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "routing_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "last_four", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccount>): BankAccount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bankAccountId = "";
        message.entityType = 0;
        message.entityId = "";
        message.bankName = "";
        message.accountHolderName = "";
        message.routingNumber = "";
        message.lastFour = "";
        message.createdAt = "";
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<BankAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccount): BankAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bank_account_id */ 1:
                    message.bankAccountId = reader.string();
                    break;
                case /* BankAccountModel.Entity.Type entity_type */ 2:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 3:
                    message.entityId = reader.string();
                    break;
                case /* string bank_name */ 4:
                    message.bankName = reader.string();
                    break;
                case /* string account_holder_name */ 5:
                    message.accountHolderName = reader.string();
                    break;
                case /* string routing_number */ 6:
                    message.routingNumber = reader.string();
                    break;
                case /* string last_four */ 7:
                    message.lastFour = reader.string();
                    break;
                case /* string created_at */ 8:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 9:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bank_account_id = 1; */
        if (message.bankAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bankAccountId);
        /* BankAccountModel.Entity.Type entity_type = 2; */
        if (message.entityType !== 0)
            writer.tag(2, WireType.Varint).int32(message.entityType);
        /* string entity_id = 3; */
        if (message.entityId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.entityId);
        /* string bank_name = 4; */
        if (message.bankName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bankName);
        /* string account_holder_name = 5; */
        if (message.accountHolderName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.accountHolderName);
        /* string routing_number = 6; */
        if (message.routingNumber !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.routingNumber);
        /* string last_four = 7; */
        if (message.lastFour !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lastFour);
        /* string created_at = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 9; */
        if (message.deleted !== false)
            writer.tag(9, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccount
 */
export const BankAccount = new BankAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountRestoreRequest$Type extends MessageType<BankAccountRestoreRequest> {
    constructor() {
        super("BankAccountRestoreRequest", [
            { no: 1, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountRestoreRequest>): BankAccountRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bankAccountId = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountRestoreRequest): BankAccountRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bank_account_id */ 1:
                    message.bankAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bank_account_id = 1; */
        if (message.bankAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bankAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountRestoreRequest
 */
export const BankAccountRestoreRequest = new BankAccountRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountRestoreReply$Type extends MessageType<BankAccountRestoreReply> {
    constructor() {
        super("BankAccountRestoreReply", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["BankAccountModel.Entity.Type", BankAccountModel_Entity_Type] },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountRestoreReply>): BankAccountRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.entityId = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountRestoreReply): BankAccountRestoreReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BankAccountModel.Entity.Type entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BankAccountModel.Entity.Type entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountRestoreReply
 */
export const BankAccountRestoreReply = new BankAccountRestoreReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountCreateRequest$Type extends MessageType<BankAccountCreateRequest> {
    constructor() {
        super("BankAccountCreateRequest", [
            { no: 1, name: "routing_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "account_holder_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "entity_type", kind: "enum", T: () => ["BankAccountModel.Entity.Type", BankAccountModel_Entity_Type] },
            { no: 5, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountCreateRequest>): BankAccountCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routingNumber = "";
        message.accountNumber = "";
        message.accountHolderName = "";
        message.entityType = 0;
        message.entityId = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountCreateRequest): BankAccountCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string routing_number */ 1:
                    message.routingNumber = reader.string();
                    break;
                case /* string account_number */ 2:
                    message.accountNumber = reader.string();
                    break;
                case /* string account_holder_name */ 3:
                    message.accountHolderName = reader.string();
                    break;
                case /* BankAccountModel.Entity.Type entity_type */ 4:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 5:
                    message.entityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string routing_number = 1; */
        if (message.routingNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.routingNumber);
        /* string account_number = 2; */
        if (message.accountNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountNumber);
        /* string account_holder_name = 3; */
        if (message.accountHolderName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accountHolderName);
        /* BankAccountModel.Entity.Type entity_type = 4; */
        if (message.entityType !== 0)
            writer.tag(4, WireType.Varint).int32(message.entityType);
        /* string entity_id = 5; */
        if (message.entityId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountCreateRequest
 */
export const BankAccountCreateRequest = new BankAccountCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountCreateReply$Type extends MessageType<BankAccountCreateReply> {
    constructor() {
        super("BankAccountCreateReply", [
            { no: 1, name: "bank_account", kind: "message", T: () => BankAccount }
        ]);
    }
    create(value?: PartialMessage<BankAccountCreateReply>): BankAccountCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BankAccountCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountCreateReply): BankAccountCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BankAccount bank_account */ 1:
                    message.bankAccount = BankAccount.internalBinaryRead(reader, reader.uint32(), options, message.bankAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BankAccount bank_account = 1; */
        if (message.bankAccount)
            BankAccount.internalBinaryWrite(message.bankAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountCreateReply
 */
export const BankAccountCreateReply = new BankAccountCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountGetRequest$Type extends MessageType<BankAccountGetRequest> {
    constructor() {
        super("BankAccountGetRequest", [
            { no: 1, name: "filter_by_entity_type", kind: "enum", T: () => ["BankAccountModel.Entity.Type", BankAccountModel_Entity_Type] },
            { no: 2, name: "filter_by_deleted", kind: "message", T: () => BankAccountGetRequest_DeletedFilter }
        ]);
    }
    create(value?: PartialMessage<BankAccountGetRequest>): BankAccountGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filterByEntityType = 0;
        if (value !== undefined)
            reflectionMergePartial<BankAccountGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountGetRequest): BankAccountGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BankAccountModel.Entity.Type filter_by_entity_type */ 1:
                    message.filterByEntityType = reader.int32();
                    break;
                case /* BankAccountGetRequest.DeletedFilter filter_by_deleted */ 2:
                    message.filterByDeleted = BankAccountGetRequest_DeletedFilter.internalBinaryRead(reader, reader.uint32(), options, message.filterByDeleted);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BankAccountModel.Entity.Type filter_by_entity_type = 1; */
        if (message.filterByEntityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.filterByEntityType);
        /* BankAccountGetRequest.DeletedFilter filter_by_deleted = 2; */
        if (message.filterByDeleted)
            BankAccountGetRequest_DeletedFilter.internalBinaryWrite(message.filterByDeleted, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountGetRequest
 */
export const BankAccountGetRequest = new BankAccountGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountGetRequest_DeletedFilter$Type extends MessageType<BankAccountGetRequest_DeletedFilter> {
    constructor() {
        super("BankAccountGetRequest.DeletedFilter", [
            { no: 1, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountGetRequest_DeletedFilter>): BankAccountGetRequest_DeletedFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<BankAccountGetRequest_DeletedFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountGetRequest_DeletedFilter): BankAccountGetRequest_DeletedFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool deleted */ 1:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountGetRequest_DeletedFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool deleted = 1; */
        if (message.deleted !== false)
            writer.tag(1, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountGetRequest.DeletedFilter
 */
export const BankAccountGetRequest_DeletedFilter = new BankAccountGetRequest_DeletedFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountGetReply$Type extends MessageType<BankAccountGetReply> {
    constructor() {
        super("BankAccountGetReply", [
            { no: 1, name: "bank_accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BankAccount }
        ]);
    }
    create(value?: PartialMessage<BankAccountGetReply>): BankAccountGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bankAccounts = [];
        if (value !== undefined)
            reflectionMergePartial<BankAccountGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountGetReply): BankAccountGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated BankAccount bank_accounts */ 1:
                    message.bankAccounts.push(BankAccount.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated BankAccount bank_accounts = 1; */
        for (let i = 0; i < message.bankAccounts.length; i++)
            BankAccount.internalBinaryWrite(message.bankAccounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountGetReply
 */
export const BankAccountGetReply = new BankAccountGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountDeleteRequest$Type extends MessageType<BankAccountDeleteRequest> {
    constructor() {
        super("BankAccountDeleteRequest", [
            { no: 1, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountDeleteRequest>): BankAccountDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bankAccountId = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountDeleteRequest): BankAccountDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bank_account_id */ 1:
                    message.bankAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bank_account_id = 1; */
        if (message.bankAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bankAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountDeleteRequest
 */
export const BankAccountDeleteRequest = new BankAccountDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountDeleteReply$Type extends MessageType<BankAccountDeleteReply> {
    constructor() {
        super("BankAccountDeleteReply", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["BankAccountModel.Entity.Type", BankAccountModel_Entity_Type] },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountDeleteReply>): BankAccountDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.entityId = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountDeleteReply): BankAccountDeleteReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BankAccountModel.Entity.Type entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BankAccountModel.Entity.Type entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountDeleteReply
 */
export const BankAccountDeleteReply = new BankAccountDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountNumberRetrieveRequest$Type extends MessageType<BankAccountNumberRetrieveRequest> {
    constructor() {
        super("BankAccountNumberRetrieveRequest", [
            { no: 1, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountNumberRetrieveRequest>): BankAccountNumberRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bankAccountId = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountNumberRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountNumberRetrieveRequest): BankAccountNumberRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bank_account_id */ 1:
                    message.bankAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountNumberRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bank_account_id = 1; */
        if (message.bankAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bankAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountNumberRetrieveRequest
 */
export const BankAccountNumberRetrieveRequest = new BankAccountNumberRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BankAccountNumberRetrieveReply$Type extends MessageType<BankAccountNumberRetrieveReply> {
    constructor() {
        super("BankAccountNumberRetrieveReply", [
            { no: 1, name: "account_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BankAccountNumberRetrieveReply>): BankAccountNumberRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountNumber = "";
        if (value !== undefined)
            reflectionMergePartial<BankAccountNumberRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BankAccountNumberRetrieveReply): BankAccountNumberRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_number */ 1:
                    message.accountNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BankAccountNumberRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_number = 1; */
        if (message.accountNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BankAccountNumberRetrieveReply
 */
export const BankAccountNumberRetrieveReply = new BankAccountNumberRetrieveReply$Type();
/**
 * @generated ServiceType for protobuf service BankAccountService
 */
export const BankAccountService = new ServiceType("BankAccountService", [
    { name: "BankAccountCreate", options: {}, I: BankAccountCreateRequest, O: BankAccountCreateReply },
    { name: "BankAccountGet", options: {}, I: BankAccountGetRequest, O: BankAccountGetReply },
    { name: "BankAccountDelete", options: {}, I: BankAccountDeleteRequest, O: BankAccountDeleteReply },
    { name: "BankAccountNumberRetrieve", options: {}, I: BankAccountNumberRetrieveRequest, O: BankAccountNumberRetrieveReply },
    { name: "BankAccountRestore", options: {}, I: BankAccountRestoreRequest, O: BankAccountRestoreReply }
]);
