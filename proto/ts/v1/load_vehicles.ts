// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_vehicles.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message LoadVehicleGetForLoadRequest
 */
export interface LoadVehicleGetForLoadRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadVehicleGetForLoadReply
 */
export interface LoadVehicleGetForLoadReply {
    /**
     * @generated from protobuf field: repeated LoadVehicleGetForLoadReply.Vehicle vehicles = 1;
     */
    vehicles: LoadVehicleGetForLoadReply_Vehicle[];
}
/**
 * @generated from protobuf message LoadVehicleGetForLoadReply.Vehicle
 */
export interface LoadVehicleGetForLoadReply_Vehicle {
    /**
     * @generated from protobuf field: string vehicle_id = 1;
     */
    vehicleId: string;
    /**
     * @generated from protobuf field: string make = 2;
     */
    make: string;
    /**
     * @generated from protobuf field: string model = 3;
     */
    model: string;
    /**
     * @generated from protobuf field: int64 year = 4;
     */
    year: number;
    /**
     * @generated from protobuf field: string color = 5;
     */
    color: string;
    /**
     * @generated from protobuf field: string type = 6;
     */
    type: string;
    /**
     * @generated from protobuf field: string lot_number = 7;
     */
    lotNumber: string;
    /**
     * @generated from protobuf field: string vin = 8;
     */
    vin: string;
    /**
     * @generated from protobuf field: bool is_inoperable = 9;
     */
    isInoperable: boolean;
    /**
     * @generated from protobuf field: bool requires_enclosed_trailer = 10;
     */
    requiresEnclosedTrailer: boolean;
    /**
     * @generated from protobuf field: repeated string photos_url = 11;
     */
    photosUrl: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadVehicleGetForLoadRequest$Type extends MessageType<LoadVehicleGetForLoadRequest> {
    constructor() {
        super("LoadVehicleGetForLoadRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadVehicleGetForLoadRequest>): LoadVehicleGetForLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadVehicleGetForLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadVehicleGetForLoadRequest): LoadVehicleGetForLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadVehicleGetForLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadVehicleGetForLoadRequest
 */
export const LoadVehicleGetForLoadRequest = new LoadVehicleGetForLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadVehicleGetForLoadReply$Type extends MessageType<LoadVehicleGetForLoadReply> {
    constructor() {
        super("LoadVehicleGetForLoadReply", [
            { no: 1, name: "vehicles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadVehicleGetForLoadReply_Vehicle }
        ]);
    }
    create(value?: PartialMessage<LoadVehicleGetForLoadReply>): LoadVehicleGetForLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicles = [];
        if (value !== undefined)
            reflectionMergePartial<LoadVehicleGetForLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadVehicleGetForLoadReply): LoadVehicleGetForLoadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadVehicleGetForLoadReply.Vehicle vehicles */ 1:
                    message.vehicles.push(LoadVehicleGetForLoadReply_Vehicle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadVehicleGetForLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadVehicleGetForLoadReply.Vehicle vehicles = 1; */
        for (let i = 0; i < message.vehicles.length; i++)
            LoadVehicleGetForLoadReply_Vehicle.internalBinaryWrite(message.vehicles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadVehicleGetForLoadReply
 */
export const LoadVehicleGetForLoadReply = new LoadVehicleGetForLoadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadVehicleGetForLoadReply_Vehicle$Type extends MessageType<LoadVehicleGetForLoadReply_Vehicle> {
    constructor() {
        super("LoadVehicleGetForLoadReply.Vehicle", [
            { no: 1, name: "vehicle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "make", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "lot_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "vin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "is_inoperable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "requires_enclosed_trailer", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "photos_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadVehicleGetForLoadReply_Vehicle>): LoadVehicleGetForLoadReply_Vehicle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleId = "";
        message.make = "";
        message.model = "";
        message.year = 0;
        message.color = "";
        message.type = "";
        message.lotNumber = "";
        message.vin = "";
        message.isInoperable = false;
        message.requiresEnclosedTrailer = false;
        message.photosUrl = [];
        if (value !== undefined)
            reflectionMergePartial<LoadVehicleGetForLoadReply_Vehicle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadVehicleGetForLoadReply_Vehicle): LoadVehicleGetForLoadReply_Vehicle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_id */ 1:
                    message.vehicleId = reader.string();
                    break;
                case /* string make */ 2:
                    message.make = reader.string();
                    break;
                case /* string model */ 3:
                    message.model = reader.string();
                    break;
                case /* int64 year */ 4:
                    message.year = reader.int64().toNumber();
                    break;
                case /* string color */ 5:
                    message.color = reader.string();
                    break;
                case /* string type */ 6:
                    message.type = reader.string();
                    break;
                case /* string lot_number */ 7:
                    message.lotNumber = reader.string();
                    break;
                case /* string vin */ 8:
                    message.vin = reader.string();
                    break;
                case /* bool is_inoperable */ 9:
                    message.isInoperable = reader.bool();
                    break;
                case /* bool requires_enclosed_trailer */ 10:
                    message.requiresEnclosedTrailer = reader.bool();
                    break;
                case /* repeated string photos_url */ 11:
                    message.photosUrl.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadVehicleGetForLoadReply_Vehicle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_id = 1; */
        if (message.vehicleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleId);
        /* string make = 2; */
        if (message.make !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.make);
        /* string model = 3; */
        if (message.model !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.model);
        /* int64 year = 4; */
        if (message.year !== 0)
            writer.tag(4, WireType.Varint).int64(message.year);
        /* string color = 5; */
        if (message.color !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.color);
        /* string type = 6; */
        if (message.type !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.type);
        /* string lot_number = 7; */
        if (message.lotNumber !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lotNumber);
        /* string vin = 8; */
        if (message.vin !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.vin);
        /* bool is_inoperable = 9; */
        if (message.isInoperable !== false)
            writer.tag(9, WireType.Varint).bool(message.isInoperable);
        /* bool requires_enclosed_trailer = 10; */
        if (message.requiresEnclosedTrailer !== false)
            writer.tag(10, WireType.Varint).bool(message.requiresEnclosedTrailer);
        /* repeated string photos_url = 11; */
        for (let i = 0; i < message.photosUrl.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.photosUrl[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadVehicleGetForLoadReply.Vehicle
 */
export const LoadVehicleGetForLoadReply_Vehicle = new LoadVehicleGetForLoadReply_Vehicle$Type();
/**
 * @generated ServiceType for protobuf service LoadVehiclesService
 */
export const LoadVehiclesService = new ServiceType("LoadVehiclesService", [
    { name: "LoadVehicleGetForLoad", options: {}, I: LoadVehicleGetForLoadRequest, O: LoadVehicleGetForLoadReply }
]);
