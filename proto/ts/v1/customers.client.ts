// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/customers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CustomersService } from "./customers";
import type { InviteCustomerUserReply } from "./customers";
import type { InviteCustomerUserRequest } from "./customers";
import type { DeleteCustomerUserReply } from "./customers";
import type { DeleteCustomerUserRequest } from "./customers";
import type { UpdateCustomerUserReply } from "./customers";
import type { UpdateCustomerUserRequest } from "./customers";
import type { CreateCustomerUserReply } from "./customers";
import type { CreateCustomerUserRequest } from "./customers";
import type { GetCustomerUsersReply } from "./customers";
import type { GetCustomerUsersRequest } from "./customers";
import type { CustomerRetrieveReply } from "./customers";
import type { CustomerRetrieveRequest } from "./customers";
import type { CustomerDeleteReply } from "./customers";
import type { CustomerDeleteRequest } from "./customers";
import type { CustomerUpdateReply } from "./customers";
import type { CustomerUpdateRequest } from "./customers";
import type { CustomerCreateReply } from "./customers";
import type { CustomerCreateRequest } from "./customers";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CustomerGetReply } from "./customers";
import type { CustomerGetRequest } from "./customers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service CustomersService
 */
export interface ICustomersServiceClient {
    /**
     * @generated from protobuf rpc: CustomerGet(CustomerGetRequest) returns (CustomerGetReply);
     */
    customerGet(input: CustomerGetRequest, options?: RpcOptions): UnaryCall<CustomerGetRequest, CustomerGetReply>;
    /**
     * @generated from protobuf rpc: CustomerCreate(CustomerCreateRequest) returns (CustomerCreateReply);
     */
    customerCreate(input: CustomerCreateRequest, options?: RpcOptions): UnaryCall<CustomerCreateRequest, CustomerCreateReply>;
    /**
     * @generated from protobuf rpc: CustomerUpdate(CustomerUpdateRequest) returns (CustomerUpdateReply);
     */
    customerUpdate(input: CustomerUpdateRequest, options?: RpcOptions): UnaryCall<CustomerUpdateRequest, CustomerUpdateReply>;
    /**
     * @generated from protobuf rpc: CustomerDelete(CustomerDeleteRequest) returns (CustomerDeleteReply);
     */
    customerDelete(input: CustomerDeleteRequest, options?: RpcOptions): UnaryCall<CustomerDeleteRequest, CustomerDeleteReply>;
    /**
     * @generated from protobuf rpc: CustomerRetrieve(CustomerRetrieveRequest) returns (CustomerRetrieveReply);
     */
    customerRetrieve(input: CustomerRetrieveRequest, options?: RpcOptions): UnaryCall<CustomerRetrieveRequest, CustomerRetrieveReply>;
    /**
     * Customer Users
     *
     * @generated from protobuf rpc: GetCustomerUsers(GetCustomerUsersRequest) returns (GetCustomerUsersReply);
     */
    getCustomerUsers(input: GetCustomerUsersRequest, options?: RpcOptions): UnaryCall<GetCustomerUsersRequest, GetCustomerUsersReply>;
    /**
     * @generated from protobuf rpc: CreateCustomerUser(CreateCustomerUserRequest) returns (CreateCustomerUserReply);
     */
    createCustomerUser(input: CreateCustomerUserRequest, options?: RpcOptions): UnaryCall<CreateCustomerUserRequest, CreateCustomerUserReply>;
    /**
     * @generated from protobuf rpc: UpdateCustomerUser(UpdateCustomerUserRequest) returns (UpdateCustomerUserReply);
     */
    updateCustomerUser(input: UpdateCustomerUserRequest, options?: RpcOptions): UnaryCall<UpdateCustomerUserRequest, UpdateCustomerUserReply>;
    /**
     * @generated from protobuf rpc: DeleteCustomerUser(DeleteCustomerUserRequest) returns (DeleteCustomerUserReply);
     */
    deleteCustomerUser(input: DeleteCustomerUserRequest, options?: RpcOptions): UnaryCall<DeleteCustomerUserRequest, DeleteCustomerUserReply>;
    /**
     * @generated from protobuf rpc: InviteCustomerUser(InviteCustomerUserRequest) returns (InviteCustomerUserReply);
     */
    inviteCustomerUser(input: InviteCustomerUserRequest, options?: RpcOptions): UnaryCall<InviteCustomerUserRequest, InviteCustomerUserReply>;
}
/**
 * @generated from protobuf service CustomersService
 */
export class CustomersServiceClient implements ICustomersServiceClient, ServiceInfo {
    typeName = CustomersService.typeName;
    methods = CustomersService.methods;
    options = CustomersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CustomerGet(CustomerGetRequest) returns (CustomerGetReply);
     */
    customerGet(input: CustomerGetRequest, options?: RpcOptions): UnaryCall<CustomerGetRequest, CustomerGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomerGetRequest, CustomerGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CustomerCreate(CustomerCreateRequest) returns (CustomerCreateReply);
     */
    customerCreate(input: CustomerCreateRequest, options?: RpcOptions): UnaryCall<CustomerCreateRequest, CustomerCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomerCreateRequest, CustomerCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CustomerUpdate(CustomerUpdateRequest) returns (CustomerUpdateReply);
     */
    customerUpdate(input: CustomerUpdateRequest, options?: RpcOptions): UnaryCall<CustomerUpdateRequest, CustomerUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomerUpdateRequest, CustomerUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CustomerDelete(CustomerDeleteRequest) returns (CustomerDeleteReply);
     */
    customerDelete(input: CustomerDeleteRequest, options?: RpcOptions): UnaryCall<CustomerDeleteRequest, CustomerDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomerDeleteRequest, CustomerDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CustomerRetrieve(CustomerRetrieveRequest) returns (CustomerRetrieveReply);
     */
    customerRetrieve(input: CustomerRetrieveRequest, options?: RpcOptions): UnaryCall<CustomerRetrieveRequest, CustomerRetrieveReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomerRetrieveRequest, CustomerRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * Customer Users
     *
     * @generated from protobuf rpc: GetCustomerUsers(GetCustomerUsersRequest) returns (GetCustomerUsersReply);
     */
    getCustomerUsers(input: GetCustomerUsersRequest, options?: RpcOptions): UnaryCall<GetCustomerUsersRequest, GetCustomerUsersReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCustomerUsersRequest, GetCustomerUsersReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateCustomerUser(CreateCustomerUserRequest) returns (CreateCustomerUserReply);
     */
    createCustomerUser(input: CreateCustomerUserRequest, options?: RpcOptions): UnaryCall<CreateCustomerUserRequest, CreateCustomerUserReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateCustomerUserRequest, CreateCustomerUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateCustomerUser(UpdateCustomerUserRequest) returns (UpdateCustomerUserReply);
     */
    updateCustomerUser(input: UpdateCustomerUserRequest, options?: RpcOptions): UnaryCall<UpdateCustomerUserRequest, UpdateCustomerUserReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateCustomerUserRequest, UpdateCustomerUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteCustomerUser(DeleteCustomerUserRequest) returns (DeleteCustomerUserReply);
     */
    deleteCustomerUser(input: DeleteCustomerUserRequest, options?: RpcOptions): UnaryCall<DeleteCustomerUserRequest, DeleteCustomerUserReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCustomerUserRequest, DeleteCustomerUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteCustomerUser(InviteCustomerUserRequest) returns (InviteCustomerUserReply);
     */
    inviteCustomerUser(input: InviteCustomerUserRequest, options?: RpcOptions): UnaryCall<InviteCustomerUserRequest, InviteCustomerUserReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteCustomerUserRequest, InviteCustomerUserReply>("unary", this._transport, method, opt, input);
    }
}
