// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/integrations.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message IntegrationProvider
 */
export interface IntegrationProvider {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string short_description = 3;
     */
    shortDescription: string;
    /**
     * @generated from protobuf field: string light_logo_url = 4;
     */
    lightLogoUrl: string;
    /**
     * @generated from protobuf field: string dark_logo_url = 5;
     */
    darkLogoUrl: string;
    /**
     * @generated from protobuf field: repeated IntegrationProvider.Category categories = 6;
     */
    categories: IntegrationProvider_Category[];
    /**
     * @generated from protobuf field: bool connected = 7;
     */
    connected: boolean;
    /**
     * @generated from protobuf field: bool oauth_required = 8;
     */
    oauthRequired: boolean;
    /**
     * @generated from protobuf field: bool oauth_connected = 9;
     */
    oauthConnected: boolean;
    /**
     * @generated from protobuf field: repeated IntegrationProvider.Field fields = 10;
     */
    fields: IntegrationProvider_Field[];
    /**
     * @generated from protobuf field: IntegrationProvider.Vehicles vehicles = 11;
     */
    vehicles?: IntegrationProvider_Vehicles;
    /**
     * @generated from protobuf field: IntegrationProvider.Drivers drivers = 12;
     */
    drivers?: IntegrationProvider_Drivers;
}
/**
 * @generated from protobuf message IntegrationProvider.Field
 */
export interface IntegrationProvider_Field {
    /**
     * @generated from protobuf field: string field_id = 1;
     */
    fieldId: string;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: bool private = 4;
     */
    private: boolean;
    /**
     * @generated from protobuf field: bool required = 5;
     */
    required: boolean;
    /**
     * @generated from protobuf field: string type = 6;
     */
    type: string;
    /**
     * @generated from protobuf field: string value = 7;
     */
    value: string;
}
/**
 * @generated from protobuf message IntegrationProvider.Vehicles
 */
export interface IntegrationProvider_Vehicles {
    /**
     * @generated from protobuf field: bool supported = 1;
     */
    supported: boolean;
    /**
     * @generated from protobuf field: bool api_connected = 2;
     */
    apiConnected: boolean;
    /**
     * @generated from protobuf field: repeated IntegrationProvider.Vehicles.Vehicle vehicles = 3;
     */
    vehicles: IntegrationProvider_Vehicles_Vehicle[];
    /**
     * @generated from protobuf field: int64 total = 4;
     */
    total: number;
    /**
     * @generated from protobuf field: int64 total_connected = 5;
     */
    totalConnected: number;
}
/**
 * @generated from protobuf message IntegrationProvider.Vehicles.Vehicle
 */
export interface IntegrationProvider_Vehicles_Vehicle {
    /**
     * @generated from protobuf field: string reference_id = 1;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string entity_type = 3;
     */
    entityType: string;
    /**
     * @generated from protobuf field: string vin = 4;
     */
    vin: string;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string make = 6;
     */
    make: string;
    /**
     * @generated from protobuf field: string model = 7;
     */
    model: string;
    /**
     * @generated from protobuf field: int64 year = 8;
     */
    year: number;
    /**
     * @generated from protobuf field: bool connected = 9;
     */
    connected: boolean;
    /**
     * @generated from protobuf field: string device_serial = 10;
     */
    deviceSerial: string;
}
/**
 * @generated from protobuf message IntegrationProvider.Drivers
 */
export interface IntegrationProvider_Drivers {
    /**
     * @generated from protobuf field: bool supported = 1;
     */
    supported: boolean;
    /**
     * @generated from protobuf field: bool api_connected = 2;
     */
    apiConnected: boolean;
    /**
     * @generated from protobuf field: repeated IntegrationProvider.Drivers.Driver drivers = 3;
     */
    drivers: IntegrationProvider_Drivers_Driver[];
    /**
     * @generated from protobuf field: int64 total = 4;
     */
    total: number;
    /**
     * @generated from protobuf field: int64 total_connected = 5;
     */
    totalConnected: number;
}
/**
 * @generated from protobuf message IntegrationProvider.Drivers.Driver
 */
export interface IntegrationProvider_Drivers_Driver {
    /**
     * @generated from protobuf field: string reference_id = 1;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string phone = 4;
     */
    phone: string;
    /**
     * @generated from protobuf field: string license_number = 5;
     */
    licenseNumber: string;
    /**
     * @generated from protobuf field: string license_state = 6;
     */
    licenseState: string;
    /**
     * @generated from protobuf field: string status = 7;
     */
    status: string;
    /**
     * @generated from protobuf field: string vektor_driver_id = 8;
     */
    vektorDriverId: string;
    /**
     * @generated from protobuf field: string vektor_driver_name = 9;
     */
    vektorDriverName: string;
    /**
     * @generated from protobuf field: string vektor_license_number = 10;
     */
    vektorLicenseNumber: string;
    /**
     * @generated from protobuf field: string vektor_license_state = 11;
     */
    vektorLicenseState: string;
    /**
     * @generated from protobuf field: bool connected = 12;
     */
    connected: boolean;
}
/**
 * @generated from protobuf enum IntegrationProvider.Category
 */
export enum IntegrationProvider_Category {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ELD = 1;
     */
    ELD = 1,
    /**
     * @generated from protobuf enum value: GPS = 2;
     */
    GPS = 2,
    /**
     * @generated from protobuf enum value: Accounting = 3;
     */
    Accounting = 3,
    /**
     * @generated from protobuf enum value: Factoring = 4;
     */
    Factoring = 4,
    /**
     * @generated from protobuf enum value: Fuel = 5;
     */
    Fuel = 5,
    /**
     * @generated from protobuf enum value: Tolls = 6;
     */
    Tolls = 6,
    /**
     * @generated from protobuf enum value: Loadboard = 7;
     */
    Loadboard = 7
}
/**
 * @generated from protobuf message GetIntegrationProvidersRequest
 */
export interface GetIntegrationProvidersRequest {
}
/**
 * @generated from protobuf message GetIntegrationProvidersReply
 */
export interface GetIntegrationProvidersReply {
    /**
     * @generated from protobuf field: repeated IntegrationProvider integration_providers = 1;
     */
    integrationProviders: IntegrationProvider[];
}
/**
 * @generated from protobuf message GetIntegrationProviderRequest
 */
export interface GetIntegrationProviderRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
}
/**
 * @generated from protobuf message GetIntegrationProviderReply
 */
export interface GetIntegrationProviderReply {
    /**
     * @generated from protobuf field: IntegrationProvider integration_provider = 1;
     */
    integrationProvider?: IntegrationProvider;
}
/**
 * Field
 *
 * @generated from protobuf message UpdateIntegrationProviderFieldValueRequest
 */
export interface UpdateIntegrationProviderFieldValueRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
    /**
     * @generated from protobuf field: repeated UpdateIntegrationProviderFieldValueRequest.Field fields = 2;
     */
    fields: UpdateIntegrationProviderFieldValueRequest_Field[];
}
/**
 * @generated from protobuf message UpdateIntegrationProviderFieldValueRequest.Field
 */
export interface UpdateIntegrationProviderFieldValueRequest_Field {
    /**
     * @generated from protobuf field: string field_id = 1;
     */
    fieldId: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message UpdateIntegrationProviderFieldValueReply
 */
export interface UpdateIntegrationProviderFieldValueReply {
}
/**
 * Connect
 *
 * @generated from protobuf message ConnectIntegrationProviderRequest
 */
export interface ConnectIntegrationProviderRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
}
/**
 * @generated from protobuf message ConnectIntegrationProviderReply
 */
export interface ConnectIntegrationProviderReply {
}
/**
 * Disconnect
 *
 * @generated from protobuf message DisconnectIntegrationProviderRequest
 */
export interface DisconnectIntegrationProviderRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
}
/**
 * @generated from protobuf message DisconnectIntegrationProviderReply
 */
export interface DisconnectIntegrationProviderReply {
}
/**
 * Get OAuth URL
 *
 * @generated from protobuf message GetIntegrationProviderOAuthURLRequest
 */
export interface GetIntegrationProviderOAuthURLRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
}
/**
 * @generated from protobuf message GetIntegrationProviderOAuthURLReply
 */
export interface GetIntegrationProviderOAuthURLReply {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * Request Integration
 *
 * @generated from protobuf message RequestIntegrationRequest
 */
export interface RequestIntegrationRequest {
    /**
     * @generated from protobuf field: string integration_name = 1;
     */
    integrationName: string;
    /**
     * @generated from protobuf field: string integration_website = 2;
     */
    integrationWebsite: string;
    /**
     * @generated from protobuf field: string integration_purpose = 3;
     */
    integrationPurpose: string;
    /**
     * @generated from protobuf field: string contact_name = 4;
     */
    contactName: string;
    /**
     * @generated from protobuf field: string contact_email = 5;
     */
    contactEmail: string;
    /**
     * @generated from protobuf field: string contact_phone = 6;
     */
    contactPhone: string;
}
/**
 * @generated from protobuf message RequestIntegrationReply
 */
export interface RequestIntegrationReply {
}
/**
 * Update Driver
 *
 * @generated from protobuf message IntegrationProviderUpdateDriverRequest
 */
export interface IntegrationProviderUpdateDriverRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
    /**
     * @generated from protobuf field: string driver_reference_id = 2;
     */
    driverReferenceId: string;
    /**
     * @generated from protobuf field: string vektor_driver_id = 3;
     */
    vektorDriverId: string;
}
/**
 * @generated from protobuf message IntegrationProviderUpdateDriverReply
 */
export interface IntegrationProviderUpdateDriverReply {
}
/**
 * Update Vehicle
 *
 * @generated from protobuf message IntegrationProviderUpdateVehicleRequest
 */
export interface IntegrationProviderUpdateVehicleRequest {
    /**
     * @generated from protobuf field: string integration_provider_id = 1;
     */
    integrationProviderId: string;
    /**
     * @generated from protobuf field: string vehicle_reference_id = 2;
     */
    vehicleReferenceId: string;
    /**
     * @generated from protobuf field: string vektor_entity_id = 3;
     */
    vektorEntityId: string;
    /**
     * @generated from protobuf field: string vektor_entity_type = 4;
     */
    vektorEntityType: string;
}
/**
 * @generated from protobuf message IntegrationProviderUpdateVehicleReply
 */
export interface IntegrationProviderUpdateVehicleReply {
}
/**
 * Samsara
 *
 * @generated from protobuf message IntegrationProviderSamsaraUpdateOAuthCodeRequest
 */
export interface IntegrationProviderSamsaraUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * @generated from protobuf message IntegrationProviderSamsaraUpdateOAuthCodeReply
 */
export interface IntegrationProviderSamsaraUpdateOAuthCodeReply {
}
/**
 * Motive
 *
 * @generated from protobuf message IntegrationProviderMotiveUpdateOAuthCodeRequest
 */
export interface IntegrationProviderMotiveUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * @generated from protobuf message IntegrationProviderMotiveUpdateOAuthCodeReply
 */
export interface IntegrationProviderMotiveUpdateOAuthCodeReply {
}
/**
 * 123Loadboard
 *
 * @generated from protobuf message IntegrationProviderOttLoadboardUpdateOAuthCodeRequest
 */
export interface IntegrationProviderOttLoadboardUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * @generated from protobuf message IntegrationProviderOttLoadboardUpdateOAuthCodeReply
 */
export interface IntegrationProviderOttLoadboardUpdateOAuthCodeReply {
}
/**
 * Uber
 *
 * @generated from protobuf message IntegrationProviderUberUpdateOAuthCodeRequest
 */
export interface IntegrationProviderUberUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * @generated from protobuf message IntegrationProviderUberUpdateOAuthCodeReply
 */
export interface IntegrationProviderUberUpdateOAuthCodeReply {
}
/**
 * Quickbooks
 *
 * @generated from protobuf message IntegrationProviderQuickbooksUpdateOAuthCodeRequest
 */
export interface IntegrationProviderQuickbooksUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: string realm_id = 3;
     */
    realmId: string;
}
/**
 * @generated from protobuf message IntegrationProviderQuickbooksUpdateOAuthCodeReply
 */
export interface IntegrationProviderQuickbooksUpdateOAuthCodeReply {
}
/**
 * TruckSmarter
 *
 * @generated from protobuf message IntegrationProviderTruckSmarterUpdateOAuthCodeRequest
 */
export interface IntegrationProviderTruckSmarterUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * @generated from protobuf message IntegrationProviderTruckSmarterUpdateOAuthCodeReply
 */
export interface IntegrationProviderTruckSmarterUpdateOAuthCodeReply {
}
/**
 * Apex Capital
 *
 * @generated from protobuf message IntegrationProviderApexCapitalUpdateOAuthCodeRequest
 */
export interface IntegrationProviderApexCapitalUpdateOAuthCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * @generated from protobuf message IntegrationProviderApexCapitalUpdateOAuthCodeReply
 */
export interface IntegrationProviderApexCapitalUpdateOAuthCodeReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProvider$Type extends MessageType<IntegrationProvider> {
    constructor() {
        super("IntegrationProvider", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "short_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "light_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "dark_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "categories", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["IntegrationProvider.Category", IntegrationProvider_Category] },
            { no: 7, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "oauth_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "oauth_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IntegrationProvider_Field },
            { no: 11, name: "vehicles", kind: "message", T: () => IntegrationProvider_Vehicles },
            { no: 12, name: "drivers", kind: "message", T: () => IntegrationProvider_Drivers }
        ]);
    }
    create(value?: PartialMessage<IntegrationProvider>): IntegrationProvider {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.shortDescription = "";
        message.lightLogoUrl = "";
        message.darkLogoUrl = "";
        message.categories = [];
        message.connected = false;
        message.oauthRequired = false;
        message.oauthConnected = false;
        message.fields = [];
        if (value !== undefined)
            reflectionMergePartial<IntegrationProvider>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProvider): IntegrationProvider {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string short_description */ 3:
                    message.shortDescription = reader.string();
                    break;
                case /* string light_logo_url */ 4:
                    message.lightLogoUrl = reader.string();
                    break;
                case /* string dark_logo_url */ 5:
                    message.darkLogoUrl = reader.string();
                    break;
                case /* repeated IntegrationProvider.Category categories */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categories.push(reader.int32());
                    else
                        message.categories.push(reader.int32());
                    break;
                case /* bool connected */ 7:
                    message.connected = reader.bool();
                    break;
                case /* bool oauth_required */ 8:
                    message.oauthRequired = reader.bool();
                    break;
                case /* bool oauth_connected */ 9:
                    message.oauthConnected = reader.bool();
                    break;
                case /* repeated IntegrationProvider.Field fields */ 10:
                    message.fields.push(IntegrationProvider_Field.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* IntegrationProvider.Vehicles vehicles */ 11:
                    message.vehicles = IntegrationProvider_Vehicles.internalBinaryRead(reader, reader.uint32(), options, message.vehicles);
                    break;
                case /* IntegrationProvider.Drivers drivers */ 12:
                    message.drivers = IntegrationProvider_Drivers.internalBinaryRead(reader, reader.uint32(), options, message.drivers);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProvider, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string short_description = 3; */
        if (message.shortDescription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shortDescription);
        /* string light_logo_url = 4; */
        if (message.lightLogoUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lightLogoUrl);
        /* string dark_logo_url = 5; */
        if (message.darkLogoUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.darkLogoUrl);
        /* repeated IntegrationProvider.Category categories = 6; */
        if (message.categories.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categories.length; i++)
                writer.int32(message.categories[i]);
            writer.join();
        }
        /* bool connected = 7; */
        if (message.connected !== false)
            writer.tag(7, WireType.Varint).bool(message.connected);
        /* bool oauth_required = 8; */
        if (message.oauthRequired !== false)
            writer.tag(8, WireType.Varint).bool(message.oauthRequired);
        /* bool oauth_connected = 9; */
        if (message.oauthConnected !== false)
            writer.tag(9, WireType.Varint).bool(message.oauthConnected);
        /* repeated IntegrationProvider.Field fields = 10; */
        for (let i = 0; i < message.fields.length; i++)
            IntegrationProvider_Field.internalBinaryWrite(message.fields[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* IntegrationProvider.Vehicles vehicles = 11; */
        if (message.vehicles)
            IntegrationProvider_Vehicles.internalBinaryWrite(message.vehicles, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* IntegrationProvider.Drivers drivers = 12; */
        if (message.drivers)
            IntegrationProvider_Drivers.internalBinaryWrite(message.drivers, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProvider
 */
export const IntegrationProvider = new IntegrationProvider$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProvider_Field$Type extends MessageType<IntegrationProvider_Field> {
    constructor() {
        super("IntegrationProvider.Field", [
            { no: 1, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProvider_Field>): IntegrationProvider_Field {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fieldId = "";
        message.label = "";
        message.description = "";
        message.private = false;
        message.required = false;
        message.type = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProvider_Field>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProvider_Field): IntegrationProvider_Field {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_id */ 1:
                    message.fieldId = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* bool private */ 4:
                    message.private = reader.bool();
                    break;
                case /* bool required */ 5:
                    message.required = reader.bool();
                    break;
                case /* string type */ 6:
                    message.type = reader.string();
                    break;
                case /* string value */ 7:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProvider_Field, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_id = 1; */
        if (message.fieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fieldId);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* bool private = 4; */
        if (message.private !== false)
            writer.tag(4, WireType.Varint).bool(message.private);
        /* bool required = 5; */
        if (message.required !== false)
            writer.tag(5, WireType.Varint).bool(message.required);
        /* string type = 6; */
        if (message.type !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.type);
        /* string value = 7; */
        if (message.value !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProvider.Field
 */
export const IntegrationProvider_Field = new IntegrationProvider_Field$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProvider_Vehicles$Type extends MessageType<IntegrationProvider_Vehicles> {
    constructor() {
        super("IntegrationProvider.Vehicles", [
            { no: 1, name: "supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "api_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "vehicles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IntegrationProvider_Vehicles_Vehicle },
            { no: 4, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "total_connected", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProvider_Vehicles>): IntegrationProvider_Vehicles {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supported = false;
        message.apiConnected = false;
        message.vehicles = [];
        message.total = 0;
        message.totalConnected = 0;
        if (value !== undefined)
            reflectionMergePartial<IntegrationProvider_Vehicles>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProvider_Vehicles): IntegrationProvider_Vehicles {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool();
                    break;
                case /* bool api_connected */ 2:
                    message.apiConnected = reader.bool();
                    break;
                case /* repeated IntegrationProvider.Vehicles.Vehicle vehicles */ 3:
                    message.vehicles.push(IntegrationProvider_Vehicles_Vehicle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total */ 4:
                    message.total = reader.int64().toNumber();
                    break;
                case /* int64 total_connected */ 5:
                    message.totalConnected = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProvider_Vehicles, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported);
        /* bool api_connected = 2; */
        if (message.apiConnected !== false)
            writer.tag(2, WireType.Varint).bool(message.apiConnected);
        /* repeated IntegrationProvider.Vehicles.Vehicle vehicles = 3; */
        for (let i = 0; i < message.vehicles.length; i++)
            IntegrationProvider_Vehicles_Vehicle.internalBinaryWrite(message.vehicles[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 4; */
        if (message.total !== 0)
            writer.tag(4, WireType.Varint).int64(message.total);
        /* int64 total_connected = 5; */
        if (message.totalConnected !== 0)
            writer.tag(5, WireType.Varint).int64(message.totalConnected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProvider.Vehicles
 */
export const IntegrationProvider_Vehicles = new IntegrationProvider_Vehicles$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProvider_Vehicles_Vehicle$Type extends MessageType<IntegrationProvider_Vehicles_Vehicle> {
    constructor() {
        super("IntegrationProvider.Vehicles.Vehicle", [
            { no: 1, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "make", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "device_serial", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProvider_Vehicles_Vehicle>): IntegrationProvider_Vehicles_Vehicle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.referenceId = "";
        message.entityId = "";
        message.entityType = "";
        message.vin = "";
        message.name = "";
        message.make = "";
        message.model = "";
        message.year = 0;
        message.connected = false;
        message.deviceSerial = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProvider_Vehicles_Vehicle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProvider_Vehicles_Vehicle): IntegrationProvider_Vehicles_Vehicle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reference_id */ 1:
                    message.referenceId = reader.string();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                case /* string entity_type */ 3:
                    message.entityType = reader.string();
                    break;
                case /* string vin */ 4:
                    message.vin = reader.string();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string make */ 6:
                    message.make = reader.string();
                    break;
                case /* string model */ 7:
                    message.model = reader.string();
                    break;
                case /* int64 year */ 8:
                    message.year = reader.int64().toNumber();
                    break;
                case /* bool connected */ 9:
                    message.connected = reader.bool();
                    break;
                case /* string device_serial */ 10:
                    message.deviceSerial = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProvider_Vehicles_Vehicle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reference_id = 1; */
        if (message.referenceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.referenceId);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        /* string entity_type = 3; */
        if (message.entityType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.entityType);
        /* string vin = 4; */
        if (message.vin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vin);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string make = 6; */
        if (message.make !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.make);
        /* string model = 7; */
        if (message.model !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.model);
        /* int64 year = 8; */
        if (message.year !== 0)
            writer.tag(8, WireType.Varint).int64(message.year);
        /* bool connected = 9; */
        if (message.connected !== false)
            writer.tag(9, WireType.Varint).bool(message.connected);
        /* string device_serial = 10; */
        if (message.deviceSerial !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.deviceSerial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProvider.Vehicles.Vehicle
 */
export const IntegrationProvider_Vehicles_Vehicle = new IntegrationProvider_Vehicles_Vehicle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProvider_Drivers$Type extends MessageType<IntegrationProvider_Drivers> {
    constructor() {
        super("IntegrationProvider.Drivers", [
            { no: 1, name: "supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "api_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IntegrationProvider_Drivers_Driver },
            { no: 4, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "total_connected", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProvider_Drivers>): IntegrationProvider_Drivers {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supported = false;
        message.apiConnected = false;
        message.drivers = [];
        message.total = 0;
        message.totalConnected = 0;
        if (value !== undefined)
            reflectionMergePartial<IntegrationProvider_Drivers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProvider_Drivers): IntegrationProvider_Drivers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool();
                    break;
                case /* bool api_connected */ 2:
                    message.apiConnected = reader.bool();
                    break;
                case /* repeated IntegrationProvider.Drivers.Driver drivers */ 3:
                    message.drivers.push(IntegrationProvider_Drivers_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total */ 4:
                    message.total = reader.int64().toNumber();
                    break;
                case /* int64 total_connected */ 5:
                    message.totalConnected = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProvider_Drivers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported);
        /* bool api_connected = 2; */
        if (message.apiConnected !== false)
            writer.tag(2, WireType.Varint).bool(message.apiConnected);
        /* repeated IntegrationProvider.Drivers.Driver drivers = 3; */
        for (let i = 0; i < message.drivers.length; i++)
            IntegrationProvider_Drivers_Driver.internalBinaryWrite(message.drivers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 4; */
        if (message.total !== 0)
            writer.tag(4, WireType.Varint).int64(message.total);
        /* int64 total_connected = 5; */
        if (message.totalConnected !== 0)
            writer.tag(5, WireType.Varint).int64(message.totalConnected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProvider.Drivers
 */
export const IntegrationProvider_Drivers = new IntegrationProvider_Drivers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProvider_Drivers_Driver$Type extends MessageType<IntegrationProvider_Drivers_Driver> {
    constructor() {
        super("IntegrationProvider.Drivers.Driver", [
            { no: 1, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "license_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "license_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "vektor_driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "vektor_driver_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "vektor_license_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "vektor_license_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProvider_Drivers_Driver>): IntegrationProvider_Drivers_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.referenceId = "";
        message.username = "";
        message.name = "";
        message.phone = "";
        message.licenseNumber = "";
        message.licenseState = "";
        message.status = "";
        message.vektorDriverId = "";
        message.vektorDriverName = "";
        message.vektorLicenseNumber = "";
        message.vektorLicenseState = "";
        message.connected = false;
        if (value !== undefined)
            reflectionMergePartial<IntegrationProvider_Drivers_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProvider_Drivers_Driver): IntegrationProvider_Drivers_Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reference_id */ 1:
                    message.referenceId = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string phone */ 4:
                    message.phone = reader.string();
                    break;
                case /* string license_number */ 5:
                    message.licenseNumber = reader.string();
                    break;
                case /* string license_state */ 6:
                    message.licenseState = reader.string();
                    break;
                case /* string status */ 7:
                    message.status = reader.string();
                    break;
                case /* string vektor_driver_id */ 8:
                    message.vektorDriverId = reader.string();
                    break;
                case /* string vektor_driver_name */ 9:
                    message.vektorDriverName = reader.string();
                    break;
                case /* string vektor_license_number */ 10:
                    message.vektorLicenseNumber = reader.string();
                    break;
                case /* string vektor_license_state */ 11:
                    message.vektorLicenseState = reader.string();
                    break;
                case /* bool connected */ 12:
                    message.connected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProvider_Drivers_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reference_id = 1; */
        if (message.referenceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.referenceId);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string phone = 4; */
        if (message.phone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phone);
        /* string license_number = 5; */
        if (message.licenseNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.licenseNumber);
        /* string license_state = 6; */
        if (message.licenseState !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.licenseState);
        /* string status = 7; */
        if (message.status !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.status);
        /* string vektor_driver_id = 8; */
        if (message.vektorDriverId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.vektorDriverId);
        /* string vektor_driver_name = 9; */
        if (message.vektorDriverName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.vektorDriverName);
        /* string vektor_license_number = 10; */
        if (message.vektorLicenseNumber !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.vektorLicenseNumber);
        /* string vektor_license_state = 11; */
        if (message.vektorLicenseState !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.vektorLicenseState);
        /* bool connected = 12; */
        if (message.connected !== false)
            writer.tag(12, WireType.Varint).bool(message.connected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProvider.Drivers.Driver
 */
export const IntegrationProvider_Drivers_Driver = new IntegrationProvider_Drivers_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIntegrationProvidersRequest$Type extends MessageType<GetIntegrationProvidersRequest> {
    constructor() {
        super("GetIntegrationProvidersRequest", []);
    }
    create(value?: PartialMessage<GetIntegrationProvidersRequest>): GetIntegrationProvidersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetIntegrationProvidersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIntegrationProvidersRequest): GetIntegrationProvidersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetIntegrationProvidersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetIntegrationProvidersRequest
 */
export const GetIntegrationProvidersRequest = new GetIntegrationProvidersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIntegrationProvidersReply$Type extends MessageType<GetIntegrationProvidersReply> {
    constructor() {
        super("GetIntegrationProvidersReply", [
            { no: 1, name: "integration_providers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IntegrationProvider }
        ]);
    }
    create(value?: PartialMessage<GetIntegrationProvidersReply>): GetIntegrationProvidersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviders = [];
        if (value !== undefined)
            reflectionMergePartial<GetIntegrationProvidersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIntegrationProvidersReply): GetIntegrationProvidersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IntegrationProvider integration_providers */ 1:
                    message.integrationProviders.push(IntegrationProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIntegrationProvidersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IntegrationProvider integration_providers = 1; */
        for (let i = 0; i < message.integrationProviders.length; i++)
            IntegrationProvider.internalBinaryWrite(message.integrationProviders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetIntegrationProvidersReply
 */
export const GetIntegrationProvidersReply = new GetIntegrationProvidersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIntegrationProviderRequest$Type extends MessageType<GetIntegrationProviderRequest> {
    constructor() {
        super("GetIntegrationProviderRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetIntegrationProviderRequest>): GetIntegrationProviderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<GetIntegrationProviderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIntegrationProviderRequest): GetIntegrationProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIntegrationProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetIntegrationProviderRequest
 */
export const GetIntegrationProviderRequest = new GetIntegrationProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIntegrationProviderReply$Type extends MessageType<GetIntegrationProviderReply> {
    constructor() {
        super("GetIntegrationProviderReply", [
            { no: 1, name: "integration_provider", kind: "message", T: () => IntegrationProvider }
        ]);
    }
    create(value?: PartialMessage<GetIntegrationProviderReply>): GetIntegrationProviderReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetIntegrationProviderReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIntegrationProviderReply): GetIntegrationProviderReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IntegrationProvider integration_provider */ 1:
                    message.integrationProvider = IntegrationProvider.internalBinaryRead(reader, reader.uint32(), options, message.integrationProvider);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIntegrationProviderReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IntegrationProvider integration_provider = 1; */
        if (message.integrationProvider)
            IntegrationProvider.internalBinaryWrite(message.integrationProvider, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetIntegrationProviderReply
 */
export const GetIntegrationProviderReply = new GetIntegrationProviderReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIntegrationProviderFieldValueRequest$Type extends MessageType<UpdateIntegrationProviderFieldValueRequest> {
    constructor() {
        super("UpdateIntegrationProviderFieldValueRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateIntegrationProviderFieldValueRequest_Field }
        ]);
    }
    create(value?: PartialMessage<UpdateIntegrationProviderFieldValueRequest>): UpdateIntegrationProviderFieldValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        message.fields = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateIntegrationProviderFieldValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIntegrationProviderFieldValueRequest): UpdateIntegrationProviderFieldValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                case /* repeated UpdateIntegrationProviderFieldValueRequest.Field fields */ 2:
                    message.fields.push(UpdateIntegrationProviderFieldValueRequest_Field.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateIntegrationProviderFieldValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        /* repeated UpdateIntegrationProviderFieldValueRequest.Field fields = 2; */
        for (let i = 0; i < message.fields.length; i++)
            UpdateIntegrationProviderFieldValueRequest_Field.internalBinaryWrite(message.fields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateIntegrationProviderFieldValueRequest
 */
export const UpdateIntegrationProviderFieldValueRequest = new UpdateIntegrationProviderFieldValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIntegrationProviderFieldValueRequest_Field$Type extends MessageType<UpdateIntegrationProviderFieldValueRequest_Field> {
    constructor() {
        super("UpdateIntegrationProviderFieldValueRequest.Field", [
            { no: 1, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateIntegrationProviderFieldValueRequest_Field>): UpdateIntegrationProviderFieldValueRequest_Field {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fieldId = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateIntegrationProviderFieldValueRequest_Field>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIntegrationProviderFieldValueRequest_Field): UpdateIntegrationProviderFieldValueRequest_Field {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_id */ 1:
                    message.fieldId = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateIntegrationProviderFieldValueRequest_Field, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_id = 1; */
        if (message.fieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fieldId);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateIntegrationProviderFieldValueRequest.Field
 */
export const UpdateIntegrationProviderFieldValueRequest_Field = new UpdateIntegrationProviderFieldValueRequest_Field$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIntegrationProviderFieldValueReply$Type extends MessageType<UpdateIntegrationProviderFieldValueReply> {
    constructor() {
        super("UpdateIntegrationProviderFieldValueReply", []);
    }
    create(value?: PartialMessage<UpdateIntegrationProviderFieldValueReply>): UpdateIntegrationProviderFieldValueReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateIntegrationProviderFieldValueReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIntegrationProviderFieldValueReply): UpdateIntegrationProviderFieldValueReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateIntegrationProviderFieldValueReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateIntegrationProviderFieldValueReply
 */
export const UpdateIntegrationProviderFieldValueReply = new UpdateIntegrationProviderFieldValueReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectIntegrationProviderRequest$Type extends MessageType<ConnectIntegrationProviderRequest> {
    constructor() {
        super("ConnectIntegrationProviderRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectIntegrationProviderRequest>): ConnectIntegrationProviderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectIntegrationProviderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectIntegrationProviderRequest): ConnectIntegrationProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectIntegrationProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConnectIntegrationProviderRequest
 */
export const ConnectIntegrationProviderRequest = new ConnectIntegrationProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectIntegrationProviderReply$Type extends MessageType<ConnectIntegrationProviderReply> {
    constructor() {
        super("ConnectIntegrationProviderReply", []);
    }
    create(value?: PartialMessage<ConnectIntegrationProviderReply>): ConnectIntegrationProviderReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ConnectIntegrationProviderReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectIntegrationProviderReply): ConnectIntegrationProviderReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ConnectIntegrationProviderReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConnectIntegrationProviderReply
 */
export const ConnectIntegrationProviderReply = new ConnectIntegrationProviderReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisconnectIntegrationProviderRequest$Type extends MessageType<DisconnectIntegrationProviderRequest> {
    constructor() {
        super("DisconnectIntegrationProviderRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DisconnectIntegrationProviderRequest>): DisconnectIntegrationProviderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<DisconnectIntegrationProviderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisconnectIntegrationProviderRequest): DisconnectIntegrationProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisconnectIntegrationProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DisconnectIntegrationProviderRequest
 */
export const DisconnectIntegrationProviderRequest = new DisconnectIntegrationProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisconnectIntegrationProviderReply$Type extends MessageType<DisconnectIntegrationProviderReply> {
    constructor() {
        super("DisconnectIntegrationProviderReply", []);
    }
    create(value?: PartialMessage<DisconnectIntegrationProviderReply>): DisconnectIntegrationProviderReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DisconnectIntegrationProviderReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisconnectIntegrationProviderReply): DisconnectIntegrationProviderReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DisconnectIntegrationProviderReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DisconnectIntegrationProviderReply
 */
export const DisconnectIntegrationProviderReply = new DisconnectIntegrationProviderReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIntegrationProviderOAuthURLRequest$Type extends MessageType<GetIntegrationProviderOAuthURLRequest> {
    constructor() {
        super("GetIntegrationProviderOAuthURLRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetIntegrationProviderOAuthURLRequest>): GetIntegrationProviderOAuthURLRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<GetIntegrationProviderOAuthURLRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIntegrationProviderOAuthURLRequest): GetIntegrationProviderOAuthURLRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIntegrationProviderOAuthURLRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetIntegrationProviderOAuthURLRequest
 */
export const GetIntegrationProviderOAuthURLRequest = new GetIntegrationProviderOAuthURLRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIntegrationProviderOAuthURLReply$Type extends MessageType<GetIntegrationProviderOAuthURLReply> {
    constructor() {
        super("GetIntegrationProviderOAuthURLReply", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetIntegrationProviderOAuthURLReply>): GetIntegrationProviderOAuthURLReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<GetIntegrationProviderOAuthURLReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIntegrationProviderOAuthURLReply): GetIntegrationProviderOAuthURLReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIntegrationProviderOAuthURLReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetIntegrationProviderOAuthURLReply
 */
export const GetIntegrationProviderOAuthURLReply = new GetIntegrationProviderOAuthURLReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestIntegrationRequest$Type extends MessageType<RequestIntegrationRequest> {
    constructor() {
        super("RequestIntegrationRequest", [
            { no: 1, name: "integration_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "integration_website", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "integration_purpose", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "contact_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "contact_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "contact_phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestIntegrationRequest>): RequestIntegrationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationName = "";
        message.integrationWebsite = "";
        message.integrationPurpose = "";
        message.contactName = "";
        message.contactEmail = "";
        message.contactPhone = "";
        if (value !== undefined)
            reflectionMergePartial<RequestIntegrationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestIntegrationRequest): RequestIntegrationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_name */ 1:
                    message.integrationName = reader.string();
                    break;
                case /* string integration_website */ 2:
                    message.integrationWebsite = reader.string();
                    break;
                case /* string integration_purpose */ 3:
                    message.integrationPurpose = reader.string();
                    break;
                case /* string contact_name */ 4:
                    message.contactName = reader.string();
                    break;
                case /* string contact_email */ 5:
                    message.contactEmail = reader.string();
                    break;
                case /* string contact_phone */ 6:
                    message.contactPhone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestIntegrationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_name = 1; */
        if (message.integrationName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationName);
        /* string integration_website = 2; */
        if (message.integrationWebsite !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.integrationWebsite);
        /* string integration_purpose = 3; */
        if (message.integrationPurpose !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.integrationPurpose);
        /* string contact_name = 4; */
        if (message.contactName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contactName);
        /* string contact_email = 5; */
        if (message.contactEmail !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.contactEmail);
        /* string contact_phone = 6; */
        if (message.contactPhone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.contactPhone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestIntegrationRequest
 */
export const RequestIntegrationRequest = new RequestIntegrationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestIntegrationReply$Type extends MessageType<RequestIntegrationReply> {
    constructor() {
        super("RequestIntegrationReply", []);
    }
    create(value?: PartialMessage<RequestIntegrationReply>): RequestIntegrationReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestIntegrationReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestIntegrationReply): RequestIntegrationReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RequestIntegrationReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestIntegrationReply
 */
export const RequestIntegrationReply = new RequestIntegrationReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderUpdateDriverRequest$Type extends MessageType<IntegrationProviderUpdateDriverRequest> {
    constructor() {
        super("IntegrationProviderUpdateDriverRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "vektor_driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderUpdateDriverRequest>): IntegrationProviderUpdateDriverRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        message.driverReferenceId = "";
        message.vektorDriverId = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderUpdateDriverRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderUpdateDriverRequest): IntegrationProviderUpdateDriverRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                case /* string driver_reference_id */ 2:
                    message.driverReferenceId = reader.string();
                    break;
                case /* string vektor_driver_id */ 3:
                    message.vektorDriverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderUpdateDriverRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        /* string driver_reference_id = 2; */
        if (message.driverReferenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverReferenceId);
        /* string vektor_driver_id = 3; */
        if (message.vektorDriverId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.vektorDriverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderUpdateDriverRequest
 */
export const IntegrationProviderUpdateDriverRequest = new IntegrationProviderUpdateDriverRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderUpdateDriverReply$Type extends MessageType<IntegrationProviderUpdateDriverReply> {
    constructor() {
        super("IntegrationProviderUpdateDriverReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderUpdateDriverReply>): IntegrationProviderUpdateDriverReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderUpdateDriverReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderUpdateDriverReply): IntegrationProviderUpdateDriverReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderUpdateDriverReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderUpdateDriverReply
 */
export const IntegrationProviderUpdateDriverReply = new IntegrationProviderUpdateDriverReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderUpdateVehicleRequest$Type extends MessageType<IntegrationProviderUpdateVehicleRequest> {
    constructor() {
        super("IntegrationProviderUpdateVehicleRequest", [
            { no: 1, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vehicle_reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "vektor_entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vektor_entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderUpdateVehicleRequest>): IntegrationProviderUpdateVehicleRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.integrationProviderId = "";
        message.vehicleReferenceId = "";
        message.vektorEntityId = "";
        message.vektorEntityType = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderUpdateVehicleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderUpdateVehicleRequest): IntegrationProviderUpdateVehicleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string integration_provider_id */ 1:
                    message.integrationProviderId = reader.string();
                    break;
                case /* string vehicle_reference_id */ 2:
                    message.vehicleReferenceId = reader.string();
                    break;
                case /* string vektor_entity_id */ 3:
                    message.vektorEntityId = reader.string();
                    break;
                case /* string vektor_entity_type */ 4:
                    message.vektorEntityType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderUpdateVehicleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string integration_provider_id = 1; */
        if (message.integrationProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.integrationProviderId);
        /* string vehicle_reference_id = 2; */
        if (message.vehicleReferenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vehicleReferenceId);
        /* string vektor_entity_id = 3; */
        if (message.vektorEntityId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.vektorEntityId);
        /* string vektor_entity_type = 4; */
        if (message.vektorEntityType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vektorEntityType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderUpdateVehicleRequest
 */
export const IntegrationProviderUpdateVehicleRequest = new IntegrationProviderUpdateVehicleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderUpdateVehicleReply$Type extends MessageType<IntegrationProviderUpdateVehicleReply> {
    constructor() {
        super("IntegrationProviderUpdateVehicleReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderUpdateVehicleReply>): IntegrationProviderUpdateVehicleReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderUpdateVehicleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderUpdateVehicleReply): IntegrationProviderUpdateVehicleReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderUpdateVehicleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderUpdateVehicleReply
 */
export const IntegrationProviderUpdateVehicleReply = new IntegrationProviderUpdateVehicleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderSamsaraUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderSamsaraUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderSamsaraUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderSamsaraUpdateOAuthCodeRequest>): IntegrationProviderSamsaraUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderSamsaraUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderSamsaraUpdateOAuthCodeRequest): IntegrationProviderSamsaraUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderSamsaraUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderSamsaraUpdateOAuthCodeRequest
 */
export const IntegrationProviderSamsaraUpdateOAuthCodeRequest = new IntegrationProviderSamsaraUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderSamsaraUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderSamsaraUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderSamsaraUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderSamsaraUpdateOAuthCodeReply>): IntegrationProviderSamsaraUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderSamsaraUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderSamsaraUpdateOAuthCodeReply): IntegrationProviderSamsaraUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderSamsaraUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderSamsaraUpdateOAuthCodeReply
 */
export const IntegrationProviderSamsaraUpdateOAuthCodeReply = new IntegrationProviderSamsaraUpdateOAuthCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderMotiveUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderMotiveUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderMotiveUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderMotiveUpdateOAuthCodeRequest>): IntegrationProviderMotiveUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderMotiveUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderMotiveUpdateOAuthCodeRequest): IntegrationProviderMotiveUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderMotiveUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderMotiveUpdateOAuthCodeRequest
 */
export const IntegrationProviderMotiveUpdateOAuthCodeRequest = new IntegrationProviderMotiveUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderMotiveUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderMotiveUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderMotiveUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderMotiveUpdateOAuthCodeReply>): IntegrationProviderMotiveUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderMotiveUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderMotiveUpdateOAuthCodeReply): IntegrationProviderMotiveUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderMotiveUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderMotiveUpdateOAuthCodeReply
 */
export const IntegrationProviderMotiveUpdateOAuthCodeReply = new IntegrationProviderMotiveUpdateOAuthCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderOttLoadboardUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderOttLoadboardUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderOttLoadboardUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderOttLoadboardUpdateOAuthCodeRequest>): IntegrationProviderOttLoadboardUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderOttLoadboardUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderOttLoadboardUpdateOAuthCodeRequest): IntegrationProviderOttLoadboardUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderOttLoadboardUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderOttLoadboardUpdateOAuthCodeRequest
 */
export const IntegrationProviderOttLoadboardUpdateOAuthCodeRequest = new IntegrationProviderOttLoadboardUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderOttLoadboardUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderOttLoadboardUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderOttLoadboardUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderOttLoadboardUpdateOAuthCodeReply>): IntegrationProviderOttLoadboardUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderOttLoadboardUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderOttLoadboardUpdateOAuthCodeReply): IntegrationProviderOttLoadboardUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderOttLoadboardUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderOttLoadboardUpdateOAuthCodeReply
 */
export const IntegrationProviderOttLoadboardUpdateOAuthCodeReply = new IntegrationProviderOttLoadboardUpdateOAuthCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderUberUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderUberUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderUberUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderUberUpdateOAuthCodeRequest>): IntegrationProviderUberUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderUberUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderUberUpdateOAuthCodeRequest): IntegrationProviderUberUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderUberUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderUberUpdateOAuthCodeRequest
 */
export const IntegrationProviderUberUpdateOAuthCodeRequest = new IntegrationProviderUberUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderUberUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderUberUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderUberUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderUberUpdateOAuthCodeReply>): IntegrationProviderUberUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderUberUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderUberUpdateOAuthCodeReply): IntegrationProviderUberUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderUberUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderUberUpdateOAuthCodeReply
 */
export const IntegrationProviderUberUpdateOAuthCodeReply = new IntegrationProviderUberUpdateOAuthCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderQuickbooksUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderQuickbooksUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderQuickbooksUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "realm_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderQuickbooksUpdateOAuthCodeRequest>): IntegrationProviderQuickbooksUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        message.realmId = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderQuickbooksUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderQuickbooksUpdateOAuthCodeRequest): IntegrationProviderQuickbooksUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* string realm_id */ 3:
                    message.realmId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderQuickbooksUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* string realm_id = 3; */
        if (message.realmId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.realmId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderQuickbooksUpdateOAuthCodeRequest
 */
export const IntegrationProviderQuickbooksUpdateOAuthCodeRequest = new IntegrationProviderQuickbooksUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderQuickbooksUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderQuickbooksUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderQuickbooksUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderQuickbooksUpdateOAuthCodeReply>): IntegrationProviderQuickbooksUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderQuickbooksUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderQuickbooksUpdateOAuthCodeReply): IntegrationProviderQuickbooksUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderQuickbooksUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderQuickbooksUpdateOAuthCodeReply
 */
export const IntegrationProviderQuickbooksUpdateOAuthCodeReply = new IntegrationProviderQuickbooksUpdateOAuthCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderTruckSmarterUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderTruckSmarterUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderTruckSmarterUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderTruckSmarterUpdateOAuthCodeRequest>): IntegrationProviderTruckSmarterUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderTruckSmarterUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderTruckSmarterUpdateOAuthCodeRequest): IntegrationProviderTruckSmarterUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderTruckSmarterUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderTruckSmarterUpdateOAuthCodeRequest
 */
export const IntegrationProviderTruckSmarterUpdateOAuthCodeRequest = new IntegrationProviderTruckSmarterUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderTruckSmarterUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderTruckSmarterUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderTruckSmarterUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderTruckSmarterUpdateOAuthCodeReply>): IntegrationProviderTruckSmarterUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderTruckSmarterUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderTruckSmarterUpdateOAuthCodeReply): IntegrationProviderTruckSmarterUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderTruckSmarterUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderTruckSmarterUpdateOAuthCodeReply
 */
export const IntegrationProviderTruckSmarterUpdateOAuthCodeReply = new IntegrationProviderTruckSmarterUpdateOAuthCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderApexCapitalUpdateOAuthCodeRequest$Type extends MessageType<IntegrationProviderApexCapitalUpdateOAuthCodeRequest> {
    constructor() {
        super("IntegrationProviderApexCapitalUpdateOAuthCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationProviderApexCapitalUpdateOAuthCodeRequest>): IntegrationProviderApexCapitalUpdateOAuthCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderApexCapitalUpdateOAuthCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderApexCapitalUpdateOAuthCodeRequest): IntegrationProviderApexCapitalUpdateOAuthCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationProviderApexCapitalUpdateOAuthCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderApexCapitalUpdateOAuthCodeRequest
 */
export const IntegrationProviderApexCapitalUpdateOAuthCodeRequest = new IntegrationProviderApexCapitalUpdateOAuthCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationProviderApexCapitalUpdateOAuthCodeReply$Type extends MessageType<IntegrationProviderApexCapitalUpdateOAuthCodeReply> {
    constructor() {
        super("IntegrationProviderApexCapitalUpdateOAuthCodeReply", []);
    }
    create(value?: PartialMessage<IntegrationProviderApexCapitalUpdateOAuthCodeReply>): IntegrationProviderApexCapitalUpdateOAuthCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IntegrationProviderApexCapitalUpdateOAuthCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationProviderApexCapitalUpdateOAuthCodeReply): IntegrationProviderApexCapitalUpdateOAuthCodeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IntegrationProviderApexCapitalUpdateOAuthCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IntegrationProviderApexCapitalUpdateOAuthCodeReply
 */
export const IntegrationProviderApexCapitalUpdateOAuthCodeReply = new IntegrationProviderApexCapitalUpdateOAuthCodeReply$Type();
/**
 * @generated ServiceType for protobuf service IntegrationsService
 */
export const IntegrationsService = new ServiceType("IntegrationsService", [
    { name: "GetIntegrationProviders", options: {}, I: GetIntegrationProvidersRequest, O: GetIntegrationProvidersReply },
    { name: "GetIntegrationProvider", options: {}, I: GetIntegrationProviderRequest, O: GetIntegrationProviderReply },
    { name: "UpdateIntegrationProviderFieldValue", options: {}, I: UpdateIntegrationProviderFieldValueRequest, O: UpdateIntegrationProviderFieldValueReply },
    { name: "ConnectIntegrationProvider", options: {}, I: ConnectIntegrationProviderRequest, O: ConnectIntegrationProviderReply },
    { name: "DisconnectIntegrationProvider", options: {}, I: DisconnectIntegrationProviderRequest, O: DisconnectIntegrationProviderReply },
    { name: "GetIntegrationProviderOAuthURL", options: {}, I: GetIntegrationProviderOAuthURLRequest, O: GetIntegrationProviderOAuthURLReply },
    { name: "RequestIntegration", options: {}, I: RequestIntegrationRequest, O: RequestIntegrationReply },
    { name: "IntegrationProviderUpdateDriver", options: {}, I: IntegrationProviderUpdateDriverRequest, O: IntegrationProviderUpdateDriverReply },
    { name: "IntegrationProviderUpdateVehicle", options: {}, I: IntegrationProviderUpdateVehicleRequest, O: IntegrationProviderUpdateVehicleReply },
    { name: "IntegrationProviderSamsaraUpdateOAuthCode", options: {}, I: IntegrationProviderSamsaraUpdateOAuthCodeRequest, O: IntegrationProviderSamsaraUpdateOAuthCodeReply },
    { name: "IntegrationProviderMotiveUpdateOAuthCode", options: {}, I: IntegrationProviderMotiveUpdateOAuthCodeRequest, O: IntegrationProviderMotiveUpdateOAuthCodeReply },
    { name: "IntegrationProviderOttLoadboardUpdateOAuthCode", options: {}, I: IntegrationProviderOttLoadboardUpdateOAuthCodeRequest, O: IntegrationProviderOttLoadboardUpdateOAuthCodeReply },
    { name: "IntegrationProviderUberUpdateOAuthCode", options: {}, I: IntegrationProviderUberUpdateOAuthCodeRequest, O: IntegrationProviderUberUpdateOAuthCodeReply },
    { name: "IntegrationProviderQuickbooksUpdateOAuthCode", options: {}, I: IntegrationProviderQuickbooksUpdateOAuthCodeRequest, O: IntegrationProviderQuickbooksUpdateOAuthCodeReply },
    { name: "IntegrationProviderTruckSmarterUpdateOAuthCode", options: {}, I: IntegrationProviderTruckSmarterUpdateOAuthCodeRequest, O: IntegrationProviderTruckSmarterUpdateOAuthCodeReply },
    { name: "IntegrationProviderApexCapitalUpdateOAuthCode", options: {}, I: IntegrationProviderApexCapitalUpdateOAuthCodeRequest, O: IntegrationProviderApexCapitalUpdateOAuthCodeReply }
]);
