// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_driver_pay_items.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message LoadDriverPayItemAddRequest
 */
export interface LoadDriverPayItemAddRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 3;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: int64 units = 4;
     */
    units: number;
    /**
     * @generated from protobuf field: double amount_per_unit = 5;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemAddReply
 */
export interface LoadDriverPayItemAddReply {
    /**
     * @generated from protobuf field: string load_driver_pay_item_id = 1;
     */
    loadDriverPayItemId: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemUpdateRequest
 */
export interface LoadDriverPayItemUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string load_driver_pay_item_id = 3;
     */
    loadDriverPayItemId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 4;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: int64 units = 5;
     */
    units: number;
    /**
     * @generated from protobuf field: double amount_per_unit = 6;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: string description = 7;
     */
    description: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemUpdateReply
 */
export interface LoadDriverPayItemUpdateReply {
}
/**
 * @generated from protobuf message LoadDriverPayItemDeleteRequest
 */
export interface LoadDriverPayItemDeleteRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string load_driver_pay_item_id = 3;
     */
    loadDriverPayItemId: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemDeleteReply
 */
export interface LoadDriverPayItemDeleteReply {
}
/**
 * @generated from protobuf message LoadDriverPayItemRetrieveRequest
 */
export interface LoadDriverPayItemRetrieveRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string load_driver_pay_item_id = 3;
     */
    loadDriverPayItemId: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemRetrieveReply
 */
export interface LoadDriverPayItemRetrieveReply {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: double amount_per_unit = 2;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: int64 units = 3;
     */
    units: number;
    /**
     * @generated from protobuf field: double total_amount = 4;
     */
    totalAmount: number;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: string updated_at = 6;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 7;
     */
    createdAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemAddRequest$Type extends MessageType<LoadDriverPayItemAddRequest> {
    constructor() {
        super("LoadDriverPayItemAddRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemAddRequest>): LoadDriverPayItemAddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.driverId = "";
        message.driverPayItemCategoryId = "";
        message.units = 0;
        message.amountPerUnit = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemAddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemAddRequest): LoadDriverPayItemAddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string driver_pay_item_category_id */ 3:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* int64 units */ 4:
                    message.units = reader.int64().toNumber();
                    break;
                case /* double amount_per_unit */ 5:
                    message.amountPerUnit = reader.double();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemAddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string driver_pay_item_category_id = 3; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* int64 units = 4; */
        if (message.units !== 0)
            writer.tag(4, WireType.Varint).int64(message.units);
        /* double amount_per_unit = 5; */
        if (message.amountPerUnit !== 0)
            writer.tag(5, WireType.Bit64).double(message.amountPerUnit);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemAddRequest
 */
export const LoadDriverPayItemAddRequest = new LoadDriverPayItemAddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemAddReply$Type extends MessageType<LoadDriverPayItemAddReply> {
    constructor() {
        super("LoadDriverPayItemAddReply", [
            { no: 1, name: "load_driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemAddReply>): LoadDriverPayItemAddReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadDriverPayItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemAddReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemAddReply): LoadDriverPayItemAddReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_driver_pay_item_id */ 1:
                    message.loadDriverPayItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemAddReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_driver_pay_item_id = 1; */
        if (message.loadDriverPayItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadDriverPayItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemAddReply
 */
export const LoadDriverPayItemAddReply = new LoadDriverPayItemAddReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemUpdateRequest$Type extends MessageType<LoadDriverPayItemUpdateRequest> {
    constructor() {
        super("LoadDriverPayItemUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "load_driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemUpdateRequest>): LoadDriverPayItemUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.driverId = "";
        message.loadDriverPayItemId = "";
        message.driverPayItemCategoryId = "";
        message.units = 0;
        message.amountPerUnit = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemUpdateRequest): LoadDriverPayItemUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string load_driver_pay_item_id */ 3:
                    message.loadDriverPayItemId = reader.string();
                    break;
                case /* string driver_pay_item_category_id */ 4:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* int64 units */ 5:
                    message.units = reader.int64().toNumber();
                    break;
                case /* double amount_per_unit */ 6:
                    message.amountPerUnit = reader.double();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string load_driver_pay_item_id = 3; */
        if (message.loadDriverPayItemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loadDriverPayItemId);
        /* string driver_pay_item_category_id = 4; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* int64 units = 5; */
        if (message.units !== 0)
            writer.tag(5, WireType.Varint).int64(message.units);
        /* double amount_per_unit = 6; */
        if (message.amountPerUnit !== 0)
            writer.tag(6, WireType.Bit64).double(message.amountPerUnit);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemUpdateRequest
 */
export const LoadDriverPayItemUpdateRequest = new LoadDriverPayItemUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemUpdateReply$Type extends MessageType<LoadDriverPayItemUpdateReply> {
    constructor() {
        super("LoadDriverPayItemUpdateReply", []);
    }
    create(value?: PartialMessage<LoadDriverPayItemUpdateReply>): LoadDriverPayItemUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemUpdateReply): LoadDriverPayItemUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverPayItemUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemUpdateReply
 */
export const LoadDriverPayItemUpdateReply = new LoadDriverPayItemUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemDeleteRequest$Type extends MessageType<LoadDriverPayItemDeleteRequest> {
    constructor() {
        super("LoadDriverPayItemDeleteRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "load_driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemDeleteRequest>): LoadDriverPayItemDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.driverId = "";
        message.loadDriverPayItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemDeleteRequest): LoadDriverPayItemDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string load_driver_pay_item_id */ 3:
                    message.loadDriverPayItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string load_driver_pay_item_id = 3; */
        if (message.loadDriverPayItemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loadDriverPayItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemDeleteRequest
 */
export const LoadDriverPayItemDeleteRequest = new LoadDriverPayItemDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemDeleteReply$Type extends MessageType<LoadDriverPayItemDeleteReply> {
    constructor() {
        super("LoadDriverPayItemDeleteReply", []);
    }
    create(value?: PartialMessage<LoadDriverPayItemDeleteReply>): LoadDriverPayItemDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemDeleteReply): LoadDriverPayItemDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverPayItemDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemDeleteReply
 */
export const LoadDriverPayItemDeleteReply = new LoadDriverPayItemDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemRetrieveRequest$Type extends MessageType<LoadDriverPayItemRetrieveRequest> {
    constructor() {
        super("LoadDriverPayItemRetrieveRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "load_driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemRetrieveRequest>): LoadDriverPayItemRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.driverId = "";
        message.loadDriverPayItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemRetrieveRequest): LoadDriverPayItemRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string load_driver_pay_item_id */ 3:
                    message.loadDriverPayItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string load_driver_pay_item_id = 3; */
        if (message.loadDriverPayItemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loadDriverPayItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemRetrieveRequest
 */
export const LoadDriverPayItemRetrieveRequest = new LoadDriverPayItemRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemRetrieveReply$Type extends MessageType<LoadDriverPayItemRetrieveReply> {
    constructor() {
        super("LoadDriverPayItemRetrieveReply", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemRetrieveReply>): LoadDriverPayItemRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        message.amountPerUnit = 0;
        message.units = 0;
        message.totalAmount = 0;
        message.description = "";
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemRetrieveReply): LoadDriverPayItemRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* double amount_per_unit */ 2:
                    message.amountPerUnit = reader.double();
                    break;
                case /* int64 units */ 3:
                    message.units = reader.int64().toNumber();
                    break;
                case /* double total_amount */ 4:
                    message.totalAmount = reader.double();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* string updated_at */ 6:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* double amount_per_unit = 2; */
        if (message.amountPerUnit !== 0)
            writer.tag(2, WireType.Bit64).double(message.amountPerUnit);
        /* int64 units = 3; */
        if (message.units !== 0)
            writer.tag(3, WireType.Varint).int64(message.units);
        /* double total_amount = 4; */
        if (message.totalAmount !== 0)
            writer.tag(4, WireType.Bit64).double(message.totalAmount);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string updated_at = 6; */
        if (message.updatedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemRetrieveReply
 */
export const LoadDriverPayItemRetrieveReply = new LoadDriverPayItemRetrieveReply$Type();
/**
 * @generated ServiceType for protobuf service LoadsDriverPayItemsService
 */
export const LoadsDriverPayItemsService = new ServiceType("LoadsDriverPayItemsService", [
    { name: "LoadDriverPayItemAdd", options: {}, I: LoadDriverPayItemAddRequest, O: LoadDriverPayItemAddReply },
    { name: "LoadDriverPayItemUpdate", options: {}, I: LoadDriverPayItemUpdateRequest, O: LoadDriverPayItemUpdateReply },
    { name: "LoadDriverPayItemDelete", options: {}, I: LoadDriverPayItemDeleteRequest, O: LoadDriverPayItemDeleteReply },
    { name: "LoadDriverPayItemRetrieve", options: {}, I: LoadDriverPayItemRetrieveRequest, O: LoadDriverPayItemRetrieveReply }
]);
