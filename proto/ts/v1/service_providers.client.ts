// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_providers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ServiceProvidersService } from "./service_providers";
import type { ServiceProviderDeleteReply } from "./service_providers";
import type { ServiceProviderDeleteRequest } from "./service_providers";
import type { ServiceProviderUpdateReply } from "./service_providers";
import type { ServiceProviderUpdateRequest } from "./service_providers";
import type { ServiceProviderGetReply } from "./service_providers";
import type { ServiceProviderGetRequest } from "./service_providers";
import type { ServiceProviderRetrieveReply } from "./service_providers";
import type { ServiceProviderRetrieveRequest } from "./service_providers";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServiceProviderCreateReply } from "./service_providers";
import type { ServiceProviderCreateRequest } from "./service_providers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ServiceProvidersService
 */
export interface IServiceProvidersServiceClient {
    /**
     * @generated from protobuf rpc: ServiceProviderCreate(ServiceProviderCreateRequest) returns (ServiceProviderCreateReply);
     */
    serviceProviderCreate(input: ServiceProviderCreateRequest, options?: RpcOptions): UnaryCall<ServiceProviderCreateRequest, ServiceProviderCreateReply>;
    /**
     * @generated from protobuf rpc: ServiceProviderRetrieve(ServiceProviderRetrieveRequest) returns (ServiceProviderRetrieveReply);
     */
    serviceProviderRetrieve(input: ServiceProviderRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceProviderRetrieveRequest, ServiceProviderRetrieveReply>;
    /**
     * @generated from protobuf rpc: ServiceProviderGet(ServiceProviderGetRequest) returns (ServiceProviderGetReply);
     */
    serviceProviderGet(input: ServiceProviderGetRequest, options?: RpcOptions): UnaryCall<ServiceProviderGetRequest, ServiceProviderGetReply>;
    /**
     * @generated from protobuf rpc: ServiceProviderUpdate(ServiceProviderUpdateRequest) returns (ServiceProviderUpdateReply);
     */
    serviceProviderUpdate(input: ServiceProviderUpdateRequest, options?: RpcOptions): UnaryCall<ServiceProviderUpdateRequest, ServiceProviderUpdateReply>;
    /**
     * @generated from protobuf rpc: ServiceProviderDelete(ServiceProviderDeleteRequest) returns (ServiceProviderDeleteReply);
     */
    serviceProviderDelete(input: ServiceProviderDeleteRequest, options?: RpcOptions): UnaryCall<ServiceProviderDeleteRequest, ServiceProviderDeleteReply>;
}
/**
 * @generated from protobuf service ServiceProvidersService
 */
export class ServiceProvidersServiceClient implements IServiceProvidersServiceClient, ServiceInfo {
    typeName = ServiceProvidersService.typeName;
    methods = ServiceProvidersService.methods;
    options = ServiceProvidersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ServiceProviderCreate(ServiceProviderCreateRequest) returns (ServiceProviderCreateReply);
     */
    serviceProviderCreate(input: ServiceProviderCreateRequest, options?: RpcOptions): UnaryCall<ServiceProviderCreateRequest, ServiceProviderCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceProviderCreateRequest, ServiceProviderCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceProviderRetrieve(ServiceProviderRetrieveRequest) returns (ServiceProviderRetrieveReply);
     */
    serviceProviderRetrieve(input: ServiceProviderRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceProviderRetrieveRequest, ServiceProviderRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceProviderRetrieveRequest, ServiceProviderRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceProviderGet(ServiceProviderGetRequest) returns (ServiceProviderGetReply);
     */
    serviceProviderGet(input: ServiceProviderGetRequest, options?: RpcOptions): UnaryCall<ServiceProviderGetRequest, ServiceProviderGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceProviderGetRequest, ServiceProviderGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceProviderUpdate(ServiceProviderUpdateRequest) returns (ServiceProviderUpdateReply);
     */
    serviceProviderUpdate(input: ServiceProviderUpdateRequest, options?: RpcOptions): UnaryCall<ServiceProviderUpdateRequest, ServiceProviderUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceProviderUpdateRequest, ServiceProviderUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceProviderDelete(ServiceProviderDeleteRequest) returns (ServiceProviderDeleteReply);
     */
    serviceProviderDelete(input: ServiceProviderDeleteRequest, options?: RpcOptions): UnaryCall<ServiceProviderDeleteRequest, ServiceProviderDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceProviderDeleteRequest, ServiceProviderDeleteReply>("unary", this._transport, method, opt, input);
    }
}
