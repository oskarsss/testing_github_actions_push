// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/dispatchers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadModel_InvoiceStatus } from "./models/model_load";
import { LoadModel_Status } from "./models/model_load";
/**
 * @generated from protobuf message GetDispatchersRequest
 */
export interface GetDispatchersRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
}
/**
 * @generated from protobuf message GetDispatchersReply
 */
export interface GetDispatchersReply {
    /**
     * ===== FIELDS ===== //
     *
     * @generated from protobuf field: repeated GetDispatchersReply.Dispatcher dispatchers = 1;
     */
    dispatchers: GetDispatchersReply_Dispatcher[];
}
/**
 * ====== TYPES ====== //
 *
 * @generated from protobuf message GetDispatchersReply.Dispatcher
 */
export interface GetDispatchersReply_Dispatcher {
    /**
     * ===== FIELDS ====== //
     *
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: GetDispatchersReply.Dispatcher.Stats stats = 2;
     */
    stats?: GetDispatchersReply_Dispatcher_Stats;
    /**
     * @generated from protobuf field: map<string, GetDispatchersReply.Dispatcher.Truck> trucks = 3;
     */
    trucks: {
        [key: string]: GetDispatchersReply_Dispatcher_Truck;
    };
}
/**
 * ====== TYPES ====== //
 *
 * @generated from protobuf message GetDispatchersReply.Dispatcher.Stats
 */
export interface GetDispatchersReply_Dispatcher_Stats {
    /**
     * ===== FIELDS ===== //
     *
     * @generated from protobuf field: double gross_amount = 1;
     */
    grossAmount: number;
    /**
     * @generated from protobuf field: int64 total_miles = 2;
     */
    totalMiles: number;
    /**
     * @generated from protobuf field: int64 empty_miles = 3;
     */
    emptyMiles: number;
    /**
     * @generated from protobuf field: int64 loaded_miles = 4;
     */
    loadedMiles: number;
    /**
     * @generated from protobuf field: double avg_rpm = 5;
     */
    avgRpm: number;
    /**
     * @generated from protobuf field: double avg_gross = 6;
     */
    avgGross: number;
}
/**
 * @generated from protobuf message GetDispatchersReply.Dispatcher.Truck
 */
export interface GetDispatchersReply_Dispatcher_Truck {
    /**
     * ===== FIELDS ===== //
     *
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: GetDispatchersReply.Dispatcher.Stats stats = 2;
     */
    stats?: GetDispatchersReply_Dispatcher_Stats;
    /**
     * @generated from protobuf field: repeated GetDispatchersReply.Dispatcher.Truck.Load loads = 3;
     */
    loads: GetDispatchersReply_Dispatcher_Truck_Load[];
}
/**
 * ====== TYPES ====== //
 *
 * @generated from protobuf message GetDispatchersReply.Dispatcher.Truck.Load
 */
export interface GetDispatchersReply_Dispatcher_Truck_Load {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string dispatcher_id = 2;
     */
    dispatcherId: string;
    /**
     * @generated from protobuf field: string truck_id = 3;
     */
    truckId: string;
    /**
     * @generated from protobuf field: double gross_amount = 4;
     */
    grossAmount: number;
    /**
     * @generated from protobuf field: int64 loaded_miles = 5;
     */
    loadedMiles: number;
    /**
     * @generated from protobuf field: LoadModel.Status status = 6;
     */
    status: LoadModel_Status;
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 7;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
}
/**
 * @generated from protobuf message GetDispatchersStatsRequest
 */
export interface GetDispatchersStatsRequest {
}
/**
 * @generated from protobuf message GetDispatchersStatsReply
 */
export interface GetDispatchersStatsReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersRequest$Type extends MessageType<GetDispatchersRequest> {
    constructor() {
        super("GetDispatchersRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetDispatchersRequest>): GetDispatchersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersRequest): GetDispatchersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersRequest
 */
export const GetDispatchersRequest = new GetDispatchersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersReply$Type extends MessageType<GetDispatchersReply> {
    constructor() {
        super("GetDispatchersReply", [
            { no: 1, name: "dispatchers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetDispatchersReply_Dispatcher }
        ]);
    }
    create(value?: PartialMessage<GetDispatchersReply>): GetDispatchersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dispatchers = [];
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersReply): GetDispatchersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetDispatchersReply.Dispatcher dispatchers */ 1:
                    message.dispatchers.push(GetDispatchersReply_Dispatcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetDispatchersReply.Dispatcher dispatchers = 1; */
        for (let i = 0; i < message.dispatchers.length; i++)
            GetDispatchersReply_Dispatcher.internalBinaryWrite(message.dispatchers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersReply
 */
export const GetDispatchersReply = new GetDispatchersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersReply_Dispatcher$Type extends MessageType<GetDispatchersReply_Dispatcher> {
    constructor() {
        super("GetDispatchersReply.Dispatcher", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stats", kind: "message", T: () => GetDispatchersReply_Dispatcher_Stats },
            { no: 3, name: "trucks", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => GetDispatchersReply_Dispatcher_Truck } }
        ]);
    }
    create(value?: PartialMessage<GetDispatchersReply_Dispatcher>): GetDispatchersReply_Dispatcher {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.trucks = {};
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersReply_Dispatcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersReply_Dispatcher): GetDispatchersReply_Dispatcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* GetDispatchersReply.Dispatcher.Stats stats */ 2:
                    message.stats = GetDispatchersReply_Dispatcher_Stats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* map<string, GetDispatchersReply.Dispatcher.Truck> trucks */ 3:
                    this.binaryReadMap3(message.trucks, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: GetDispatchersReply_Dispatcher["trucks"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetDispatchersReply_Dispatcher["trucks"] | undefined, val: GetDispatchersReply_Dispatcher["trucks"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = GetDispatchersReply_Dispatcher_Truck.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GetDispatchersReply.Dispatcher.trucks");
            }
        }
        map[key ?? ""] = val ?? GetDispatchersReply_Dispatcher_Truck.create();
    }
    internalBinaryWrite(message: GetDispatchersReply_Dispatcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* GetDispatchersReply.Dispatcher.Stats stats = 2; */
        if (message.stats)
            GetDispatchersReply_Dispatcher_Stats.internalBinaryWrite(message.stats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, GetDispatchersReply.Dispatcher.Truck> trucks = 3; */
        for (let k of globalThis.Object.keys(message.trucks)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            GetDispatchersReply_Dispatcher_Truck.internalBinaryWrite(message.trucks[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersReply.Dispatcher
 */
export const GetDispatchersReply_Dispatcher = new GetDispatchersReply_Dispatcher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersReply_Dispatcher_Stats$Type extends MessageType<GetDispatchersReply_Dispatcher_Stats> {
    constructor() {
        super("GetDispatchersReply.Dispatcher.Stats", [
            { no: 1, name: "gross_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "total_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "empty_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "avg_rpm", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "avg_gross", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<GetDispatchersReply_Dispatcher_Stats>): GetDispatchersReply_Dispatcher_Stats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.grossAmount = 0;
        message.totalMiles = 0;
        message.emptyMiles = 0;
        message.loadedMiles = 0;
        message.avgRpm = 0;
        message.avgGross = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersReply_Dispatcher_Stats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersReply_Dispatcher_Stats): GetDispatchersReply_Dispatcher_Stats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double gross_amount */ 1:
                    message.grossAmount = reader.double();
                    break;
                case /* int64 total_miles */ 2:
                    message.totalMiles = reader.int64().toNumber();
                    break;
                case /* int64 empty_miles */ 3:
                    message.emptyMiles = reader.int64().toNumber();
                    break;
                case /* int64 loaded_miles */ 4:
                    message.loadedMiles = reader.int64().toNumber();
                    break;
                case /* double avg_rpm */ 5:
                    message.avgRpm = reader.double();
                    break;
                case /* double avg_gross */ 6:
                    message.avgGross = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchersReply_Dispatcher_Stats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double gross_amount = 1; */
        if (message.grossAmount !== 0)
            writer.tag(1, WireType.Bit64).double(message.grossAmount);
        /* int64 total_miles = 2; */
        if (message.totalMiles !== 0)
            writer.tag(2, WireType.Varint).int64(message.totalMiles);
        /* int64 empty_miles = 3; */
        if (message.emptyMiles !== 0)
            writer.tag(3, WireType.Varint).int64(message.emptyMiles);
        /* int64 loaded_miles = 4; */
        if (message.loadedMiles !== 0)
            writer.tag(4, WireType.Varint).int64(message.loadedMiles);
        /* double avg_rpm = 5; */
        if (message.avgRpm !== 0)
            writer.tag(5, WireType.Bit64).double(message.avgRpm);
        /* double avg_gross = 6; */
        if (message.avgGross !== 0)
            writer.tag(6, WireType.Bit64).double(message.avgGross);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersReply.Dispatcher.Stats
 */
export const GetDispatchersReply_Dispatcher_Stats = new GetDispatchersReply_Dispatcher_Stats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersReply_Dispatcher_Truck$Type extends MessageType<GetDispatchersReply_Dispatcher_Truck> {
    constructor() {
        super("GetDispatchersReply.Dispatcher.Truck", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stats", kind: "message", T: () => GetDispatchersReply_Dispatcher_Stats },
            { no: 3, name: "loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetDispatchersReply_Dispatcher_Truck_Load }
        ]);
    }
    create(value?: PartialMessage<GetDispatchersReply_Dispatcher_Truck>): GetDispatchersReply_Dispatcher_Truck {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.loads = [];
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersReply_Dispatcher_Truck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersReply_Dispatcher_Truck): GetDispatchersReply_Dispatcher_Truck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* GetDispatchersReply.Dispatcher.Stats stats */ 2:
                    message.stats = GetDispatchersReply_Dispatcher_Stats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* repeated GetDispatchersReply.Dispatcher.Truck.Load loads */ 3:
                    message.loads.push(GetDispatchersReply_Dispatcher_Truck_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchersReply_Dispatcher_Truck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* GetDispatchersReply.Dispatcher.Stats stats = 2; */
        if (message.stats)
            GetDispatchersReply_Dispatcher_Stats.internalBinaryWrite(message.stats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetDispatchersReply.Dispatcher.Truck.Load loads = 3; */
        for (let i = 0; i < message.loads.length; i++)
            GetDispatchersReply_Dispatcher_Truck_Load.internalBinaryWrite(message.loads[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersReply.Dispatcher.Truck
 */
export const GetDispatchersReply_Dispatcher_Truck = new GetDispatchersReply_Dispatcher_Truck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersReply_Dispatcher_Truck_Load$Type extends MessageType<GetDispatchersReply_Dispatcher_Truck_Load> {
    constructor() {
        super("GetDispatchersReply.Dispatcher.Truck.Load", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dispatcher_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gross_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 7, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] }
        ]);
    }
    create(value?: PartialMessage<GetDispatchersReply_Dispatcher_Truck_Load>): GetDispatchersReply_Dispatcher_Truck_Load {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.dispatcherId = "";
        message.truckId = "";
        message.grossAmount = 0;
        message.loadedMiles = 0;
        message.status = 0;
        message.invoiceStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersReply_Dispatcher_Truck_Load>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersReply_Dispatcher_Truck_Load): GetDispatchersReply_Dispatcher_Truck_Load {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string dispatcher_id */ 2:
                    message.dispatcherId = reader.string();
                    break;
                case /* string truck_id */ 3:
                    message.truckId = reader.string();
                    break;
                case /* double gross_amount */ 4:
                    message.grossAmount = reader.double();
                    break;
                case /* int64 loaded_miles */ 5:
                    message.loadedMiles = reader.int64().toNumber();
                    break;
                case /* LoadModel.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* LoadModel.InvoiceStatus invoice_status */ 7:
                    message.invoiceStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchersReply_Dispatcher_Truck_Load, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string dispatcher_id = 2; */
        if (message.dispatcherId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dispatcherId);
        /* string truck_id = 3; */
        if (message.truckId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.truckId);
        /* double gross_amount = 4; */
        if (message.grossAmount !== 0)
            writer.tag(4, WireType.Bit64).double(message.grossAmount);
        /* int64 loaded_miles = 5; */
        if (message.loadedMiles !== 0)
            writer.tag(5, WireType.Varint).int64(message.loadedMiles);
        /* LoadModel.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* LoadModel.InvoiceStatus invoice_status = 7; */
        if (message.invoiceStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.invoiceStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersReply.Dispatcher.Truck.Load
 */
export const GetDispatchersReply_Dispatcher_Truck_Load = new GetDispatchersReply_Dispatcher_Truck_Load$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersStatsRequest$Type extends MessageType<GetDispatchersStatsRequest> {
    constructor() {
        super("GetDispatchersStatsRequest", []);
    }
    create(value?: PartialMessage<GetDispatchersStatsRequest>): GetDispatchersStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersStatsRequest): GetDispatchersStatsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetDispatchersStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersStatsRequest
 */
export const GetDispatchersStatsRequest = new GetDispatchersStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchersStatsReply$Type extends MessageType<GetDispatchersStatsReply> {
    constructor() {
        super("GetDispatchersStatsReply", []);
    }
    create(value?: PartialMessage<GetDispatchersStatsReply>): GetDispatchersStatsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetDispatchersStatsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchersStatsReply): GetDispatchersStatsReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetDispatchersStatsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetDispatchersStatsReply
 */
export const GetDispatchersStatsReply = new GetDispatchersStatsReply$Type();
/**
 * @generated ServiceType for protobuf service DispatchersService
 */
export const DispatchersService = new ServiceType("DispatchersService", [
    { name: "GetDispatchers", options: {}, I: GetDispatchersRequest, O: GetDispatchersReply },
    { name: "GetDispatchersStats", options: {}, I: GetDispatchersStatsRequest, O: GetDispatchersStatsReply }
]);
