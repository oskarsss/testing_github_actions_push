// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_drivers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message LoadDriverAddRequest
 */
export interface LoadDriverAddRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message LoadDriverAddReply
 */
export interface LoadDriverAddReply {
}
/**
 * @generated from protobuf message LoadDriverRemoveRequest
 */
export interface LoadDriverRemoveRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message LoadDriverRemoveReply
 */
export interface LoadDriverRemoveReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverAddRequest$Type extends MessageType<LoadDriverAddRequest> {
    constructor() {
        super("LoadDriverAddRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverAddRequest>): LoadDriverAddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverAddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverAddRequest): LoadDriverAddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverAddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverAddRequest
 */
export const LoadDriverAddRequest = new LoadDriverAddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverAddReply$Type extends MessageType<LoadDriverAddReply> {
    constructor() {
        super("LoadDriverAddReply", []);
    }
    create(value?: PartialMessage<LoadDriverAddReply>): LoadDriverAddReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverAddReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverAddReply): LoadDriverAddReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverAddReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverAddReply
 */
export const LoadDriverAddReply = new LoadDriverAddReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverRemoveRequest$Type extends MessageType<LoadDriverRemoveRequest> {
    constructor() {
        super("LoadDriverRemoveRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverRemoveRequest>): LoadDriverRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverRemoveRequest): LoadDriverRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverRemoveRequest
 */
export const LoadDriverRemoveRequest = new LoadDriverRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverRemoveReply$Type extends MessageType<LoadDriverRemoveReply> {
    constructor() {
        super("LoadDriverRemoveReply", []);
    }
    create(value?: PartialMessage<LoadDriverRemoveReply>): LoadDriverRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverRemoveReply): LoadDriverRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverRemoveReply
 */
export const LoadDriverRemoveReply = new LoadDriverRemoveReply$Type();
/**
 * @generated ServiceType for protobuf service LoadDriversService
 */
export const LoadDriversService = new ServiceType("LoadDriversService", [
    { name: "LoadDriverAdd", options: {}, I: LoadDriverAddRequest, O: LoadDriverAddReply },
    { name: "LoadDriverRemove", options: {}, I: LoadDriverRemoveRequest, O: LoadDriverRemoveReply }
]);
