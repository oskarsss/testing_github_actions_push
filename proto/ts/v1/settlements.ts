// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlements.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Settlements_Cycle_Period_Settlement_Trend_AmountTrend } from "./models/model_settlement";
import { Settlements_Cycle_Period_Settlement_Trend_Entity } from "./models/model_settlement";
import { LoadModel_Status } from "./models/model_load";
import { LoadModel_InvoiceStatus } from "./models/model_load";
import { ManifestModel_Status } from "./models/model_manifest";
import { Amount } from "./models/amount";
import { Distance } from "./models/distance";
import { Settlements_Cycle_Period_Settlement_Transaction_Type } from "./models/model_settlement";
import { Settlements_RecurringTransaction_Status } from "./models/model_settlement";
import { Settlements_Cycle_Period_Settlement_Status } from "./models/model_settlement";
/**
 * RetrieveSettlement
 *
 * @generated from protobuf message RetrieveSettlementRequest
 */
export interface RetrieveSettlementRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply
 */
export interface RetrieveSettlementReply {
    /**
     * @generated from protobuf field: RetrieveSettlementReply.Settlement settlement = 1;
     */
    settlement?: RetrieveSettlementReply_Settlement;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Settlement
 */
export interface RetrieveSettlementReply_Settlement {
    /**
     * @generated from protobuf field: string settlement_id = 1;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: optional int64 settlement_friendly_id = 2;
     */
    settlementFriendlyId?: number;
    /**
     * @generated from protobuf field: string total_loads_amount = 3;
     */
    totalLoadsAmount: string;
    /**
     * @generated from protobuf field: string driver_loads_amount = 4;
     */
    driverLoadsAmount: string;
    /**
     * @generated from protobuf field: string tolls_amount = 5;
     */
    tollsAmount: string;
    /**
     * @generated from protobuf field: string fuel_amount = 6;
     */
    fuelAmount: string;
    /**
     * @generated from protobuf field: string debits_amount = 7;
     */
    debitsAmount: string;
    /**
     * @generated from protobuf field: string credits_amount = 8;
     */
    creditsAmount: string;
    /**
     * @generated from protobuf field: string driver_pay_amount = 9;
     */
    driverPayAmount: string;
    /**
     * @generated from protobuf field: string company_net_amount = 10;
     */
    companyNetAmount: string;
    /**
     * @generated from protobuf field: string pay_date = 11;
     */
    payDate: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status status = 12;
     */
    status: Settlements_Cycle_Period_Settlement_Status;
    /**
     * @generated from protobuf field: string created_at = 13;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string avg_rpm = 14;
     */
    avgRpm: string;
    /**
     * @generated from protobuf field: string truck_id = 15;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 16;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string driver_id = 17;
     */
    driverId: string;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.DriverRecurringTransactionsInfo driver_recurring_transactions_info = 18;
     */
    driverRecurringTransactionsInfo?: RetrieveSettlementReply_DriverRecurringTransactionsInfo;
    /**
     * @generated from protobuf field: string vendor_id = 19;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.FuelInfo fuel_info = 20;
     */
    fuelInfo?: RetrieveSettlementReply_FuelInfo;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.TollsInfo tolls_info = 21;
     */
    tollsInfo?: RetrieveSettlementReply_TollsInfo;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.TransactionsInfo transactions_info = 22;
     */
    transactionsInfo?: RetrieveSettlementReply_TransactionsInfo;
    /**
     * @generated from protobuf field: bool driver_pay_deduct_fuel = 23;
     */
    driverPayDeductFuel: boolean;
    /**
     * @generated from protobuf field: bool driver_pay_deduct_tolls = 24;
     */
    driverPayDeductTolls: boolean;
    /**
     * @generated from protobuf field: bool fuel_discounts_enabled = 25;
     */
    fuelDiscountsEnabled: boolean;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.ManifestsInfo manifests_info = 26;
     */
    manifestsInfo?: RetrieveSettlementReply_ManifestsInfo;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Fuel
 */
export interface RetrieveSettlementReply_Fuel {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string datetime = 3;
     */
    datetime: string;
    /**
     * @generated from protobuf field: string unit_number = 4;
     */
    unitNumber: string;
    /**
     * @generated from protobuf field: string driver_name = 5;
     */
    driverName: string;
    /**
     * @generated from protobuf field: string city = 6;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 7;
     */
    state: string;
    /**
     * @generated from protobuf field: string address = 8;
     */
    address: string;
    /**
     * @generated from protobuf field: string chain = 9;
     */
    chain: string;
    /**
     * @generated from protobuf field: string total_discounted_amount = 10;
     */
    totalDiscountedAmount: string;
    /**
     * @generated from protobuf field: string total_amount = 11;
     */
    totalAmount: string;
    /**
     * @generated from protobuf field: string settlement_id = 12;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: bool verified = 13;
     */
    verified: boolean;
    /**
     * @generated from protobuf field: double quantity = 14;
     */
    quantity: number;
    /**
     * @generated from protobuf field: string quantity_formatted = 15;
     */
    quantityFormatted: string;
    /**
     * @generated from protobuf field: string product = 16;
     */
    product: string;
    /**
     * @generated from protobuf field: string truck_stop = 17;
     */
    truckStop: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.FuelInfo
 */
export interface RetrieveSettlementReply_FuelInfo {
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.Fuel fuel = 1;
     */
    fuel: RetrieveSettlementReply_Fuel[];
    /**
     * @generated from protobuf field: RetrieveSettlementReply.FuelInfo.Totals totals = 2;
     */
    totals?: RetrieveSettlementReply_FuelInfo_Totals;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.FuelInfo.Totals
 */
export interface RetrieveSettlementReply_FuelInfo_Totals {
    /**
     * @generated from protobuf field: string assigned_discounted_amount = 1;
     */
    assignedDiscountedAmount: string;
    /**
     * @generated from protobuf field: string assigned_amount = 2;
     */
    assignedAmount: string;
    /**
     * @generated from protobuf field: string unassigned_discounted_amount = 3;
     */
    unassignedDiscountedAmount: string;
    /**
     * @generated from protobuf field: string unassigned_amount = 4;
     */
    unassignedAmount: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Tolls
 */
export interface RetrieveSettlementReply_Tolls {
    /**
     * @generated from protobuf field: string toll_transaction_id = 1;
     */
    tollTransactionId: string;
    /**
     * @generated from protobuf field: string transponder_number = 2;
     */
    transponderNumber: string;
    /**
     * @generated from protobuf field: string plate_number = 3;
     */
    plateNumber: string;
    /**
     * @generated from protobuf field: string agency = 4;
     */
    agency: string;
    /**
     * @generated from protobuf field: string entry_plaza = 5;
     */
    entryPlaza: string;
    /**
     * @generated from protobuf field: string entry_datetime = 6;
     */
    entryDatetime: string;
    /**
     * @generated from protobuf field: string exit_plaza = 7;
     */
    exitPlaza: string;
    /**
     * @generated from protobuf field: string exit_datetime = 8;
     */
    exitDatetime: string;
    /**
     * @generated from protobuf field: string source = 9;
     */
    source: string;
    /**
     * @generated from protobuf field: string posting_date = 10;
     */
    postingDate: string;
    /**
     * @generated from protobuf field: double amount = 11;
     */
    amount: number;
    /**
     * @generated from protobuf field: string settlement_id = 12;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string amount_formatted = 13;
     */
    amountFormatted: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.TollsInfo
 */
export interface RetrieveSettlementReply_TollsInfo {
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.Tolls tolls = 1;
     */
    tolls: RetrieveSettlementReply_Tolls[];
    /**
     * @generated from protobuf field: RetrieveSettlementReply.TollsInfo.Totals totals = 2;
     */
    totals?: RetrieveSettlementReply_TollsInfo_Totals;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.TollsInfo.Totals
 */
export interface RetrieveSettlementReply_TollsInfo_Totals {
    /**
     * @generated from protobuf field: string assigned_amount = 1;
     */
    assignedAmount: string;
    /**
     * @generated from protobuf field: string unassigned_amount = 2;
     */
    unassignedAmount: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.DriverRecurringTransaction
 */
export interface RetrieveSettlementReply_DriverRecurringTransaction {
    /**
     * @generated from protobuf field: string recurring_transaction_id = 1;
     */
    recurringTransactionId: string;
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: double max_total_amount = 3;
     */
    maxTotalAmount: number;
    /**
     * @generated from protobuf field: Settlements.RecurringTransaction.Status status = 4;
     */
    status: Settlements_RecurringTransaction_Status;
    /**
     * @generated from protobuf field: string category_id = 5;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: string amount_formatted = 6;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string max_total_amount_formatted = 7;
     */
    maxTotalAmountFormatted: string;
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.DriverRecurringTransaction.Transaction transactions = 8;
     */
    transactions: RetrieveSettlementReply_DriverRecurringTransaction_Transaction[];
    /**
     * @generated from protobuf field: string total_amount = 9;
     */
    totalAmount: string;
    /**
     * @generated from protobuf field: string charged_amount = 10;
     */
    chargedAmount: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.DriverRecurringTransaction.Transaction
 */
export interface RetrieveSettlementReply_DriverRecurringTransaction_Transaction {
    /**
     * @generated from protobuf field: string transaction_id = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string settlement_id = 2;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: double amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_formatted = 4;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string start_datetime = 5;
     */
    startDatetime: string;
    /**
     * @generated from protobuf field: string end_datetime = 6;
     */
    endDatetime: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Transaction.Type type = 7;
     */
    type: Settlements_Cycle_Period_Settlement_Transaction_Type;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.DriverRecurringTransactionsInfo
 */
export interface RetrieveSettlementReply_DriverRecurringTransactionsInfo {
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.DriverRecurringTransaction recurring_transactions = 1;
     */
    recurringTransactions: RetrieveSettlementReply_DriverRecurringTransaction[];
    /**
     * @generated from protobuf field: string total_amount = 2;
     */
    totalAmount: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Transaction
 */
export interface RetrieveSettlementReply_Transaction {
    /**
     * @generated from protobuf field: string transaction_id = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string settlement_id = 2;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string recurring_transaction_id = 3;
     */
    recurringTransactionId: string;
    /**
     * @generated from protobuf field: string amount = 4;
     */
    amount: string;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Transaction.Type type = 6;
     */
    type: Settlements_Cycle_Period_Settlement_Transaction_Type;
    /**
     * @generated from protobuf field: string category_id = 7;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.Transaction.RecurringTransaction recurring_transaction = 8;
     */
    recurringTransaction?: RetrieveSettlementReply_Transaction_RecurringTransaction;
    /**
     * @generated from protobuf field: string transaction_date = 9;
     */
    transactionDate: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Transaction.RecurringTransaction
 */
export interface RetrieveSettlementReply_Transaction_RecurringTransaction {
    /**
     * @generated from protobuf field: string recurring_transaction_id = 1;
     */
    recurringTransactionId: string;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
    /**
     * @generated from protobuf field: string category_id = 3;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: string charged_amount = 4;
     */
    chargedAmount: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.TransactionsInfo
 */
export interface RetrieveSettlementReply_TransactionsInfo {
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.Transaction transactions = 1;
     */
    transactions: RetrieveSettlementReply_Transaction[];
    /**
     * @generated from protobuf field: RetrieveSettlementReply.TransactionsInfo.Totals totals = 2;
     */
    totals?: RetrieveSettlementReply_TransactionsInfo_Totals;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.TransactionsInfo.Totals
 */
export interface RetrieveSettlementReply_TransactionsInfo_Totals {
    /**
     * @generated from protobuf field: string assigned_amount = 1;
     */
    assignedAmount: string;
    /**
     * @generated from protobuf field: string unassigned_amount = 2;
     */
    unassignedAmount: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Manifest
 */
export interface RetrieveSettlementReply_Manifest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: int64 friendly_id = 2;
     */
    friendlyId: number;
    /**
     * @generated from protobuf field: int64 completed_stops_count = 3;
     */
    completedStopsCount: number;
    /**
     * @generated from protobuf field: int64 total_stops_count = 4;
     */
    totalStopsCount: number;
    /**
     * @generated from protobuf field: Distance total_distance = 5;
     */
    totalDistance?: Distance;
    /**
     * @generated from protobuf field: Distance empty_distance = 6;
     */
    emptyDistance?: Distance;
    /**
     * @generated from protobuf field: Distance loaded_distance = 7;
     */
    loadedDistance?: Distance;
    /**
     * @generated from protobuf field: Distance auto_empty_distance = 8;
     */
    autoEmptyDistance?: Distance;
    /**
     * @generated from protobuf field: Distance auto_loaded_distance = 9;
     */
    autoLoadedDistance?: Distance;
    /**
     * @generated from protobuf field: Amount total_driver_pay = 10;
     */
    totalDriverPay?: Amount;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.Manifest.Stop origin = 11;
     */
    origin?: RetrieveSettlementReply_Manifest_Stop;
    /**
     * @generated from protobuf field: RetrieveSettlementReply.Manifest.Stop destination = 12;
     */
    destination?: RetrieveSettlementReply_Manifest_Stop;
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.Manifest.Load loads = 13;
     */
    loads: RetrieveSettlementReply_Manifest_Load[];
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.Manifest.DriverPayItem driver_pay_items = 14;
     */
    driverPayItems: RetrieveSettlementReply_Manifest_DriverPayItem[];
    /**
     * @generated from protobuf field: Amount gross = 15;
     */
    gross?: Amount;
    /**
     * @generated from protobuf field: string settlement_id = 16;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: ManifestModel.Status status = 17;
     */
    status: ManifestModel_Status;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Manifest.Load
 */
export interface RetrieveSettlementReply_Manifest_Load {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string friendly_id = 2;
     */
    friendlyId: string;
    /**
     * @generated from protobuf field: int64 stops_count = 3;
     */
    stopsCount: number;
    /**
     * @generated from protobuf field: Distance total_distance = 4;
     */
    totalDistance?: Distance;
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 5;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
    /**
     * @generated from protobuf field: LoadModel.Status status = 6;
     */
    status: LoadModel_Status;
    /**
     * @generated from protobuf field: string reference_id = 7;
     */
    referenceId: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Manifest.Stop
 */
export interface RetrieveSettlementReply_Manifest_Stop {
    /**
     * @generated from protobuf field: string appointment_start_at_local = 1;
     */
    appointmentStartAtLocal: string;
    /**
     * @generated from protobuf field: string city = 2;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.Manifest.DriverPayItem
 */
export interface RetrieveSettlementReply_Manifest_DriverPayItem {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_id = 2;
     */
    driverPayItemId: string;
    /**
     * @generated from protobuf field: double amount_per_unit = 3;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: string amount_per_unit_formatted = 4;
     */
    amountPerUnitFormatted: string;
    /**
     * @generated from protobuf field: double units = 5;
     */
    units: number;
    /**
     * @generated from protobuf field: string units_formatted = 6;
     */
    unitsFormatted: string;
    /**
     * @generated from protobuf field: Amount total_amount = 7;
     */
    totalAmount?: Amount;
    /**
     * @generated from protobuf field: string description = 8;
     */
    description: string;
    /**
     * @generated from protobuf field: string category_id = 9;
     */
    categoryId: string;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.ManifestsInfo
 */
export interface RetrieveSettlementReply_ManifestsInfo {
    /**
     * @generated from protobuf field: repeated RetrieveSettlementReply.Manifest manifests = 1;
     */
    manifests: RetrieveSettlementReply_Manifest[];
    /**
     * @generated from protobuf field: RetrieveSettlementReply.ManifestsInfo.Totals totals = 2;
     */
    totals?: RetrieveSettlementReply_ManifestsInfo_Totals;
}
/**
 * @generated from protobuf message RetrieveSettlementReply.ManifestsInfo.Totals
 */
export interface RetrieveSettlementReply_ManifestsInfo_Totals {
    /**
     * @generated from protobuf field: string assigned_gross_amount = 1;
     */
    assignedGrossAmount: string;
    /**
     * @generated from protobuf field: string assigned_driver_net_amount = 2;
     */
    assignedDriverNetAmount: string;
    /**
     * @generated from protobuf field: string unassigned_gross_amount = 3;
     */
    unassignedGrossAmount: string;
    /**
     * @generated from protobuf field: string unassigned_driver_net_amount = 4;
     */
    unassignedDriverNetAmount: string;
}
/**
 * SettlementGet
 *
 * @generated from protobuf message SettlementGetRequest
 */
export interface SettlementGetRequest {
    /**
     * @generated from protobuf field: optional string cycle_id = 1;
     */
    cycleId?: string;
    /**
     * @generated from protobuf field: optional string period_id = 2;
     */
    periodId?: string;
    /**
     * @generated from protobuf field: optional string truck_id = 3;
     */
    truckId?: string;
    /**
     * @generated from protobuf field: optional string driver_id = 4;
     */
    driverId?: string;
}
/**
 * @generated from protobuf message SettlementGetReply
 */
export interface SettlementGetReply {
    /**
     * @generated from protobuf field: repeated SettlementGetReply.Settlement settlements = 1;
     */
    settlements: SettlementGetReply_Settlement[];
}
/**
 * @generated from protobuf message SettlementGetReply.Settlement
 */
export interface SettlementGetReply_Settlement {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string unique_key = 4;
     */
    uniqueKey: string;
    /**
     * @generated from protobuf field: int64 settlement_friendly_id = 5;
     */
    settlementFriendlyId: number;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status status = 6;
     */
    status: Settlements_Cycle_Period_Settlement_Status;
    /**
     * @generated from protobuf field: string driver_id = 7;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string truck_id = 8;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 9;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: double avg_rpm = 10;
     */
    avgRpm: number;
    /**
     * @generated from protobuf field: string avg_rpm_formatted = 11;
     */
    avgRpmFormatted: string;
    /**
     * @generated from protobuf field: double company_net_amount = 12;
     */
    companyNetAmount: number;
    /**
     * @generated from protobuf field: string company_net_amount_formatted = 13;
     */
    companyNetAmountFormatted: string;
    /**
     * @generated from protobuf field: double credits_amount = 14;
     */
    creditsAmount: number;
    /**
     * @generated from protobuf field: string credits_amount_formatted = 15;
     */
    creditsAmountFormatted: string;
    /**
     * @generated from protobuf field: double debits_amount = 16;
     */
    debitsAmount: number;
    /**
     * @generated from protobuf field: string debits_amount_formatted = 17;
     */
    debitsAmountFormatted: string;
    /**
     * @generated from protobuf field: double driver_loads_amount = 18;
     */
    driverLoadsAmount: number;
    /**
     * @generated from protobuf field: string driver_loads_amount_formatted = 19;
     */
    driverLoadsAmountFormatted: string;
    /**
     * @generated from protobuf field: double driver_pay_amount = 20;
     */
    driverPayAmount: number;
    /**
     * @generated from protobuf field: string driver_pay_amount_formatted = 21;
     */
    driverPayAmountFormatted: string;
    /**
     * @generated from protobuf field: string driver_pay_amount_type = 22;
     */
    driverPayAmountType: string;
    /**
     * @generated from protobuf field: double fuel_amount = 23;
     */
    fuelAmount: number;
    /**
     * @generated from protobuf field: string fuel_amount_formatted = 24;
     */
    fuelAmountFormatted: string;
    /**
     * @generated from protobuf field: double one_time_debits_amount = 25;
     */
    oneTimeDebitsAmount: number;
    /**
     * @generated from protobuf field: string one_time_debits_amount_formatted = 26;
     */
    oneTimeDebitsAmountFormatted: string;
    /**
     * @generated from protobuf field: double tolls_amount = 27;
     */
    tollsAmount: number;
    /**
     * @generated from protobuf field: string tolls_amount_formatted = 28;
     */
    tollsAmountFormatted: string;
    /**
     * @generated from protobuf field: double total_loads_amount = 29;
     */
    totalLoadsAmount: number;
    /**
     * @generated from protobuf field: string total_loads_amount_formatted = 30;
     */
    totalLoadsAmountFormatted: string;
    /**
     * @generated from protobuf field: string settlement_driver_pay_amount_type = 31;
     */
    settlementDriverPayAmountType: string;
    /**
     * @generated from protobuf field: repeated SettlementGetReply.Settlement.Trend trends = 32;
     */
    trends: SettlementGetReply_Settlement_Trend[];
    /**
     * @generated from protobuf field: map<string, SettlementGetReply.Settlement.Amount> recurring_transactions = 33;
     */
    recurringTransactions: {
        [key: string]: SettlementGetReply_Settlement_Amount;
    };
}
/**
 * @generated from protobuf message SettlementGetReply.Settlement.Trend
 */
export interface SettlementGetReply_Settlement_Trend {
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Trend.Entity entity = 1;
     */
    entity: Settlements_Cycle_Period_Settlement_Trend_Entity;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Trend.AmountTrend amount_trend = 2;
     */
    amountTrend: Settlements_Cycle_Period_Settlement_Trend_AmountTrend;
    /**
     * @generated from protobuf field: string amount_percentage = 3;
     */
    amountPercentage: string;
    /**
     * @generated from protobuf field: double amount = 4;
     */
    amount: number;
}
/**
 * @generated from protobuf message SettlementGetReply.Settlement.Amount
 */
export interface SettlementGetReply_Settlement_Amount {
    /**
     * @generated from protobuf field: double amount = 1;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_formatted = 2;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: optional string amount_status_class = 3;
     */
    amountStatusClass?: string;
}
/**
 * BatchCreateSettlements
 *
 * @generated from protobuf message BatchCreateSettlementsRequest
 */
export interface BatchCreateSettlementsRequest {
    /**
     * @generated from protobuf field: repeated BatchCreateSettlementsRequest.NewSettlement settlements = 1;
     */
    settlements: BatchCreateSettlementsRequest_NewSettlement[];
}
/**
 * @generated from protobuf message BatchCreateSettlementsRequest.NewSettlement
 */
export interface BatchCreateSettlementsRequest_NewSettlement {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string driver_id = 3;
     */
    driverId: string;
}
/**
 * @generated from protobuf message BatchCreateSettlementsReply
 */
export interface BatchCreateSettlementsReply {
    /**
     * @generated from protobuf field: repeated BatchCreateSettlementsReply.Error errors = 1;
     */
    errors: BatchCreateSettlementsReply_Error[];
}
/**
 * @generated from protobuf message BatchCreateSettlementsReply.Error
 */
export interface BatchCreateSettlementsReply_Error {
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
/**
 * SettlementSync
 *
 * @generated from protobuf message SettlementSyncRequest
 */
export interface SettlementSyncRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementSyncReply
 */
export interface SettlementSyncReply {
}
/**
 * SettlementDelete
 *
 * @generated from protobuf message SettlementDeleteRequest
 */
export interface SettlementDeleteRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementDeleteReply
 */
export interface SettlementDeleteReply {
}
/**
 * SettlementDeleteBatch
 *
 * @generated from protobuf message SettlementDeleteBatchRequest
 */
export interface SettlementDeleteBatchRequest {
    /**
     * @generated from protobuf field: repeated SettlementDeleteBatchRequest.SettlementID settlements = 1;
     */
    settlements: SettlementDeleteBatchRequest_SettlementID[];
}
/**
 * @generated from protobuf message SettlementDeleteBatchRequest.SettlementID
 */
export interface SettlementDeleteBatchRequest_SettlementID {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementDeleteBatchReply
 */
export interface SettlementDeleteBatchReply {
}
/**
 * PeriodSync
 *
 * @generated from protobuf message PeriodSyncRequest
 */
export interface PeriodSyncRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
}
/**
 * @generated from protobuf message PeriodSyncReply
 */
export interface PeriodSyncReply {
}
/**
 * SettlementAssignTruck
 *
 * @generated from protobuf message SettlementAssignTruckRequest
 */
export interface SettlementAssignTruckRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string truck_id = 4;
     */
    truckId: string;
}
/**
 * @generated from protobuf message SettlementAssignTruckReply
 */
export interface SettlementAssignTruckReply {
}
/**
 * SettlementAssignVendor
 *
 * @generated from protobuf message SettlementAssignVendorRequest
 */
export interface SettlementAssignVendorRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string vendor_id = 4;
     */
    vendorId: string;
}
/**
 * @generated from protobuf message SettlementAssignVendorReply
 */
export interface SettlementAssignVendorReply {
}
/**
 * SettlementUnassignVendor
 *
 * @generated from protobuf message SettlementUnassignVendorRequest
 */
export interface SettlementUnassignVendorRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementUnassignVendorReply
 */
export interface SettlementUnassignVendorReply {
}
/**
 * SettlementGeneratePDF
 *
 * @generated from protobuf message SettlementGeneratePDFRequest
 */
export interface SettlementGeneratePDFRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementGeneratePDFReply
 */
export interface SettlementGeneratePDFReply {
    /**
     * @generated from protobuf field: string pdf_url = 1;
     */
    pdfUrl: string;
    /**
     * @generated from protobuf field: string filename = 2;
     */
    filename: string;
}
/**
 * SettlementBatchExport
 *
 * @generated from protobuf message SettlementBatchExportRequest
 */
export interface SettlementBatchExportRequest {
    /**
     * @generated from protobuf field: repeated SettlementBatchExportRequest.SettlementID settlements = 1;
     */
    settlements: SettlementBatchExportRequest_SettlementID[];
}
/**
 * @generated from protobuf message SettlementBatchExportRequest.SettlementID
 */
export interface SettlementBatchExportRequest_SettlementID {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementBatchExportReply
 */
export interface SettlementBatchExportReply {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
}
/**
 * SendSettlement
 *
 * @generated from protobuf message SendSettlementRequest
 */
export interface SendSettlementRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: bool send_to_company_cc_emails = 6;
     */
    sendToCompanyCcEmails: boolean;
    /**
     * @generated from protobuf field: bool attach_documents = 9;
     */
    attachDocuments: boolean;
    /**
     * @generated from protobuf field: optional SendSettlementRequest.Recipient recipient_driver = 10;
     */
    recipientDriver?: SendSettlementRequest_Recipient;
    /**
     * @generated from protobuf field: optional SendSettlementRequest.Recipient recipient_vendor = 11;
     */
    recipientVendor?: SendSettlementRequest_Recipient;
}
/**
 * @generated from protobuf message SendSettlementRequest.Recipient
 */
export interface SendSettlementRequest_Recipient {
    /**
     * @generated from protobuf field: optional string email = 4;
     */
    email?: string;
    /**
     * @generated from protobuf field: optional string phone_number = 5;
     */
    phoneNumber?: string;
    /**
     * @generated from protobuf field: string subject = 7;
     */
    subject: string;
    /**
     * @generated from protobuf field: string body = 8;
     */
    body: string;
}
/**
 * @generated from protobuf message SendSettlementReply
 */
export interface SendSettlementReply {
}
/**
 * SettlementSendBatchPreview
 *
 * @generated from protobuf message SettlementSendBatchPreviewRequest
 */
export interface SettlementSendBatchPreviewRequest {
    /**
     * @generated from protobuf field: repeated SettlementSendBatchPreviewRequest.SettlementID settlements = 1;
     */
    settlements: SettlementSendBatchPreviewRequest_SettlementID[];
}
/**
 * @generated from protobuf message SettlementSendBatchPreviewRequest.SettlementID
 */
export interface SettlementSendBatchPreviewRequest_SettlementID {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementSendBatchPreviewReply
 */
export interface SettlementSendBatchPreviewReply {
    /**
     * @generated from protobuf field: repeated SettlementSendBatchPreviewReply.Preview previews = 1;
     */
    previews: SettlementSendBatchPreviewReply_Preview[];
}
/**
 * @generated from protobuf message SettlementSendBatchPreviewReply.Preview
 */
export interface SettlementSendBatchPreviewReply_Preview {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status status = 4;
     */
    status: Settlements_Cycle_Period_Settlement_Status;
    /**
     * @generated from protobuf field: int64 friendly_id = 5;
     */
    friendlyId: number;
    /**
     * @generated from protobuf field: string driver_id = 6;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string truck_id = 7;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string vendor_id = 8;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: SettlementSendBatchPreviewReply.Preview.Recipient recipient = 11;
     */
    recipient: SettlementSendBatchPreviewReply_Preview_Recipient;
}
/**
 * @generated from protobuf enum SettlementSendBatchPreviewReply.Preview.Recipient
 */
export enum SettlementSendBatchPreviewReply_Preview_Recipient {
    /**
     * @generated from protobuf enum value: RECIPIENT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RECIPIENT_VENDOR = 1;
     */
    VENDOR = 1,
    /**
     * @generated from protobuf enum value: RECIPIENT_DRIVER = 2;
     */
    DRIVER = 2
}
/**
 * SettlementSendBatch
 *
 * @generated from protobuf message SettlementSendBatchRequest
 */
export interface SettlementSendBatchRequest {
    /**
     * @generated from protobuf field: repeated SettlementSendBatchRequest.Send sends = 1;
     */
    sends: SettlementSendBatchRequest_Send[];
}
/**
 * @generated from protobuf message SettlementSendBatchRequest.Send
 */
export interface SettlementSendBatchRequest_Send {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * if email is empty, not sending to email
     *
     * @generated from protobuf field: string to_email = 4;
     */
    toEmail: string;
    /**
     * if phone_number is empty, not sending to phone
     *
     * @generated from protobuf field: string to_phone = 5;
     */
    toPhone: string;
    /**
     * @generated from protobuf field: string email_subject = 7;
     */
    emailSubject: string;
    /**
     * @generated from protobuf field: string email_body = 8;
     */
    emailBody: string;
}
/**
 * @generated from protobuf message SettlementSendBatchReply
 */
export interface SettlementSendBatchReply {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: SettlementSendBatchReply.SendStatus send_status = 4;
     */
    sendStatus: SettlementSendBatchReply_SendStatus;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status new_settlement_status = 5;
     */
    newSettlementStatus: Settlements_Cycle_Period_Settlement_Status;
    /**
     * @generated from protobuf field: optional string error_message = 6;
     */
    errorMessage?: string;
}
/**
 * @generated from protobuf enum SettlementSendBatchReply.SendStatus
 */
export enum SettlementSendBatchReply_SendStatus {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    STATUS_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_OK = 1;
     */
    STATUS_OK = 1,
    /**
     * @generated from protobuf enum value: STATUS_FAILED = 2;
     */
    STATUS_FAILED = 2
}
/**
 * SettlementAssignLoad
 *
 * @generated from protobuf message SettlementAssignLoadRequest
 */
export interface SettlementAssignLoadRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string load_id = 4;
     */
    loadId: string;
}
/**
 * @generated from protobuf message SettlementAssignLoadReply
 */
export interface SettlementAssignLoadReply {
}
/**
 * SettlementRemoveLoad
 *
 * @generated from protobuf message SettlementRemoveLoadRequest
 */
export interface SettlementRemoveLoadRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string load_id = 4;
     */
    loadId: string;
}
/**
 * @generated from protobuf message SettlementRemoveLoadReply
 */
export interface SettlementRemoveLoadReply {
}
/**
 * SettlementUpdateStatus
 *
 * @generated from protobuf message SettlementUpdateStatusRequest
 */
export interface SettlementUpdateStatusRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status status = 4;
     */
    status: Settlements_Cycle_Period_Settlement_Status;
}
/**
 * @generated from protobuf message SettlementUpdateStatusReply
 */
export interface SettlementUpdateStatusReply {
}
/**
 * SettlementBatchUpdateStatus
 *
 * @generated from protobuf message SettlementBatchUpdateStatusRequest
 */
export interface SettlementBatchUpdateStatusRequest {
    /**
     * @generated from protobuf field: repeated SettlementBatchUpdateStatusRequest.SettlementUpdate settlements = 1;
     */
    settlements: SettlementBatchUpdateStatusRequest_SettlementUpdate[];
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status status = 2;
     */
    status: Settlements_Cycle_Period_Settlement_Status;
}
/**
 * @generated from protobuf message SettlementBatchUpdateStatusRequest.SettlementUpdate
 */
export interface SettlementBatchUpdateStatusRequest_SettlementUpdate {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message SettlementBatchUpdateStatusReply
 */
export interface SettlementBatchUpdateStatusReply {
}
/**
 * SettlementDriverPayDeductFuelUpdate
 *
 * @generated from protobuf message SettlementDriverPayDeductFuelUpdateRequest
 */
export interface SettlementDriverPayDeductFuelUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: bool driver_pay_deduct_fuel = 4;
     */
    driverPayDeductFuel: boolean;
}
/**
 * @generated from protobuf message SettlementDriverPayDeductFuelUpdateReply
 */
export interface SettlementDriverPayDeductFuelUpdateReply {
}
/**
 * SettlementDriverPayDeductTollsUpdate
 *
 * @generated from protobuf message SettlementDriverPayDeductTollsUpdateRequest
 */
export interface SettlementDriverPayDeductTollsUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: bool driver_pay_deduct_tolls = 4;
     */
    driverPayDeductTolls: boolean;
}
/**
 * @generated from protobuf message SettlementDriverPayDeductTollsUpdateReply
 */
export interface SettlementDriverPayDeductTollsUpdateReply {
}
/**
 * SettlementFuelDiscountsEnabledUpdate
 *
 * @generated from protobuf message SettlementFuelDiscountsEnabledUpdateRequest
 */
export interface SettlementFuelDiscountsEnabledUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: bool fuel_discounts_enabled = 4;
     */
    fuelDiscountsEnabled: boolean;
}
/**
 * @generated from protobuf message SettlementFuelDiscountsEnabledUpdateReply
 */
export interface SettlementFuelDiscountsEnabledUpdateReply {
}
/**
 * SettlementPayDateUpdate
 *
 * @generated from protobuf message SettlementPayDateUpdateRequest
 */
export interface SettlementPayDateUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string pay_date = 4;
     */
    payDate: string;
}
/**
 * @generated from protobuf message SettlementPayDateUpdateReply
 */
export interface SettlementPayDateUpdateReply {
}
/**
 * SettlementTollAssign
 *
 * @generated from protobuf message SettlementTollAssignRequest
 */
export interface SettlementTollAssignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string toll_transaction_id = 4;
     */
    tollTransactionId: string;
}
/**
 * @generated from protobuf message SettlementTollAssignReply
 */
export interface SettlementTollAssignReply {
}
/**
 * SettlementTollUnassign
 *
 * @generated from protobuf message SettlementTollUnassignRequest
 */
export interface SettlementTollUnassignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string toll_transaction_id = 4;
     */
    tollTransactionId: string;
}
/**
 * @generated from protobuf message SettlementTollUnassignReply
 */
export interface SettlementTollUnassignReply {
}
/**
 * SettlementManifestAssign
 *
 * @generated from protobuf message SettlementManifestAssignRequest
 */
export interface SettlementManifestAssignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string manifest_id = 4;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message SettlementManifestAssignReply
 */
export interface SettlementManifestAssignReply {
}
/**
 * SettlementManifestUnassign
 *
 * @generated from protobuf message SettlementManifestUnassignRequest
 */
export interface SettlementManifestUnassignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string manifest_id = 4;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message SettlementManifestUnassignReply
 */
export interface SettlementManifestUnassignReply {
}
/**
 * SettlementFuelAssign
 *
 * @generated from protobuf message SettlementFuelTransactionAssignRequest
 */
export interface SettlementFuelTransactionAssignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string fuel_transaction_id = 4;
     */
    fuelTransactionId: string;
}
/**
 * @generated from protobuf message SettlementFuelTransactionAssignReply
 */
export interface SettlementFuelTransactionAssignReply {
}
/**
 * SettlementFuelUnassign
 *
 * @generated from protobuf message SettlementFuelTransactionUnassignRequest
 */
export interface SettlementFuelTransactionUnassignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string fuel_transaction_id = 4;
     */
    fuelTransactionId: string;
}
/**
 * @generated from protobuf message SettlementFuelTransactionUnassignReply
 */
export interface SettlementFuelTransactionUnassignReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementRequest$Type extends MessageType<RetrieveSettlementRequest> {
    constructor() {
        super("RetrieveSettlementRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementRequest>): RetrieveSettlementRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementRequest): RetrieveSettlementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementRequest
 */
export const RetrieveSettlementRequest = new RetrieveSettlementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply$Type extends MessageType<RetrieveSettlementReply> {
    constructor() {
        super("RetrieveSettlementReply", [
            { no: 1, name: "settlement", kind: "message", T: () => RetrieveSettlementReply_Settlement }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply>): RetrieveSettlementReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply): RetrieveSettlementReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* RetrieveSettlementReply.Settlement settlement */ 1:
                    message.settlement = RetrieveSettlementReply_Settlement.internalBinaryRead(reader, reader.uint32(), options, message.settlement);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* RetrieveSettlementReply.Settlement settlement = 1; */
        if (message.settlement)
            RetrieveSettlementReply_Settlement.internalBinaryWrite(message.settlement, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply
 */
export const RetrieveSettlementReply = new RetrieveSettlementReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Settlement$Type extends MessageType<RetrieveSettlementReply_Settlement> {
    constructor() {
        super("RetrieveSettlementReply.Settlement", [
            { no: 1, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settlement_friendly_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "total_loads_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_loads_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tolls_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fuel_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "debits_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "credits_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "driver_pay_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "company_net_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "pay_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] },
            { no: 13, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "avg_rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "driver_recurring_transactions_info", kind: "message", T: () => RetrieveSettlementReply_DriverRecurringTransactionsInfo },
            { no: 19, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "fuel_info", kind: "message", T: () => RetrieveSettlementReply_FuelInfo },
            { no: 21, name: "tolls_info", kind: "message", T: () => RetrieveSettlementReply_TollsInfo },
            { no: 22, name: "transactions_info", kind: "message", T: () => RetrieveSettlementReply_TransactionsInfo },
            { no: 23, name: "driver_pay_deduct_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "driver_pay_deduct_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 25, name: "fuel_discounts_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "manifests_info", kind: "message", T: () => RetrieveSettlementReply_ManifestsInfo }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Settlement>): RetrieveSettlementReply_Settlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementId = "";
        message.totalLoadsAmount = "";
        message.driverLoadsAmount = "";
        message.tollsAmount = "";
        message.fuelAmount = "";
        message.debitsAmount = "";
        message.creditsAmount = "";
        message.driverPayAmount = "";
        message.companyNetAmount = "";
        message.payDate = "";
        message.status = 0;
        message.createdAt = "";
        message.avgRpm = "";
        message.truckId = "";
        message.trailerId = "";
        message.driverId = "";
        message.vendorId = "";
        message.driverPayDeductFuel = false;
        message.driverPayDeductTolls = false;
        message.fuelDiscountsEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Settlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Settlement): RetrieveSettlementReply_Settlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string settlement_id */ 1:
                    message.settlementId = reader.string();
                    break;
                case /* optional int64 settlement_friendly_id */ 2:
                    message.settlementFriendlyId = reader.int64().toNumber();
                    break;
                case /* string total_loads_amount */ 3:
                    message.totalLoadsAmount = reader.string();
                    break;
                case /* string driver_loads_amount */ 4:
                    message.driverLoadsAmount = reader.string();
                    break;
                case /* string tolls_amount */ 5:
                    message.tollsAmount = reader.string();
                    break;
                case /* string fuel_amount */ 6:
                    message.fuelAmount = reader.string();
                    break;
                case /* string debits_amount */ 7:
                    message.debitsAmount = reader.string();
                    break;
                case /* string credits_amount */ 8:
                    message.creditsAmount = reader.string();
                    break;
                case /* string driver_pay_amount */ 9:
                    message.driverPayAmount = reader.string();
                    break;
                case /* string company_net_amount */ 10:
                    message.companyNetAmount = reader.string();
                    break;
                case /* string pay_date */ 11:
                    message.payDate = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status status */ 12:
                    message.status = reader.int32();
                    break;
                case /* string created_at */ 13:
                    message.createdAt = reader.string();
                    break;
                case /* string avg_rpm */ 14:
                    message.avgRpm = reader.string();
                    break;
                case /* string truck_id */ 15:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 16:
                    message.trailerId = reader.string();
                    break;
                case /* string driver_id */ 17:
                    message.driverId = reader.string();
                    break;
                case /* RetrieveSettlementReply.DriverRecurringTransactionsInfo driver_recurring_transactions_info */ 18:
                    message.driverRecurringTransactionsInfo = RetrieveSettlementReply_DriverRecurringTransactionsInfo.internalBinaryRead(reader, reader.uint32(), options, message.driverRecurringTransactionsInfo);
                    break;
                case /* string vendor_id */ 19:
                    message.vendorId = reader.string();
                    break;
                case /* RetrieveSettlementReply.FuelInfo fuel_info */ 20:
                    message.fuelInfo = RetrieveSettlementReply_FuelInfo.internalBinaryRead(reader, reader.uint32(), options, message.fuelInfo);
                    break;
                case /* RetrieveSettlementReply.TollsInfo tolls_info */ 21:
                    message.tollsInfo = RetrieveSettlementReply_TollsInfo.internalBinaryRead(reader, reader.uint32(), options, message.tollsInfo);
                    break;
                case /* RetrieveSettlementReply.TransactionsInfo transactions_info */ 22:
                    message.transactionsInfo = RetrieveSettlementReply_TransactionsInfo.internalBinaryRead(reader, reader.uint32(), options, message.transactionsInfo);
                    break;
                case /* bool driver_pay_deduct_fuel */ 23:
                    message.driverPayDeductFuel = reader.bool();
                    break;
                case /* bool driver_pay_deduct_tolls */ 24:
                    message.driverPayDeductTolls = reader.bool();
                    break;
                case /* bool fuel_discounts_enabled */ 25:
                    message.fuelDiscountsEnabled = reader.bool();
                    break;
                case /* RetrieveSettlementReply.ManifestsInfo manifests_info */ 26:
                    message.manifestsInfo = RetrieveSettlementReply_ManifestsInfo.internalBinaryRead(reader, reader.uint32(), options, message.manifestsInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Settlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string settlement_id = 1; */
        if (message.settlementId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.settlementId);
        /* optional int64 settlement_friendly_id = 2; */
        if (message.settlementFriendlyId !== undefined)
            writer.tag(2, WireType.Varint).int64(message.settlementFriendlyId);
        /* string total_loads_amount = 3; */
        if (message.totalLoadsAmount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalLoadsAmount);
        /* string driver_loads_amount = 4; */
        if (message.driverLoadsAmount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.driverLoadsAmount);
        /* string tolls_amount = 5; */
        if (message.tollsAmount !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tollsAmount);
        /* string fuel_amount = 6; */
        if (message.fuelAmount !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fuelAmount);
        /* string debits_amount = 7; */
        if (message.debitsAmount !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.debitsAmount);
        /* string credits_amount = 8; */
        if (message.creditsAmount !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.creditsAmount);
        /* string driver_pay_amount = 9; */
        if (message.driverPayAmount !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.driverPayAmount);
        /* string company_net_amount = 10; */
        if (message.companyNetAmount !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.companyNetAmount);
        /* string pay_date = 11; */
        if (message.payDate !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.payDate);
        /* Settlements.Cycle.Period.Settlement.Status status = 12; */
        if (message.status !== 0)
            writer.tag(12, WireType.Varint).int32(message.status);
        /* string created_at = 13; */
        if (message.createdAt !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.createdAt);
        /* string avg_rpm = 14; */
        if (message.avgRpm !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.avgRpm);
        /* string truck_id = 15; */
        if (message.truckId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 16; */
        if (message.trailerId !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.trailerId);
        /* string driver_id = 17; */
        if (message.driverId !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.driverId);
        /* RetrieveSettlementReply.DriverRecurringTransactionsInfo driver_recurring_transactions_info = 18; */
        if (message.driverRecurringTransactionsInfo)
            RetrieveSettlementReply_DriverRecurringTransactionsInfo.internalBinaryWrite(message.driverRecurringTransactionsInfo, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* string vendor_id = 19; */
        if (message.vendorId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.vendorId);
        /* RetrieveSettlementReply.FuelInfo fuel_info = 20; */
        if (message.fuelInfo)
            RetrieveSettlementReply_FuelInfo.internalBinaryWrite(message.fuelInfo, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.TollsInfo tolls_info = 21; */
        if (message.tollsInfo)
            RetrieveSettlementReply_TollsInfo.internalBinaryWrite(message.tollsInfo, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.TransactionsInfo transactions_info = 22; */
        if (message.transactionsInfo)
            RetrieveSettlementReply_TransactionsInfo.internalBinaryWrite(message.transactionsInfo, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bool driver_pay_deduct_fuel = 23; */
        if (message.driverPayDeductFuel !== false)
            writer.tag(23, WireType.Varint).bool(message.driverPayDeductFuel);
        /* bool driver_pay_deduct_tolls = 24; */
        if (message.driverPayDeductTolls !== false)
            writer.tag(24, WireType.Varint).bool(message.driverPayDeductTolls);
        /* bool fuel_discounts_enabled = 25; */
        if (message.fuelDiscountsEnabled !== false)
            writer.tag(25, WireType.Varint).bool(message.fuelDiscountsEnabled);
        /* RetrieveSettlementReply.ManifestsInfo manifests_info = 26; */
        if (message.manifestsInfo)
            RetrieveSettlementReply_ManifestsInfo.internalBinaryWrite(message.manifestsInfo, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Settlement
 */
export const RetrieveSettlementReply_Settlement = new RetrieveSettlementReply_Settlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Fuel$Type extends MessageType<RetrieveSettlementReply_Fuel> {
    constructor() {
        super("RetrieveSettlementReply.Fuel", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unit_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "driver_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "total_discounted_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "quantity_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "truck_stop", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Fuel>): RetrieveSettlementReply_Fuel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        message.referenceId = "";
        message.datetime = "";
        message.unitNumber = "";
        message.driverName = "";
        message.city = "";
        message.state = "";
        message.address = "";
        message.chain = "";
        message.totalDiscountedAmount = "";
        message.totalAmount = "";
        message.settlementId = "";
        message.verified = false;
        message.quantity = 0;
        message.quantityFormatted = "";
        message.product = "";
        message.truckStop = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Fuel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Fuel): RetrieveSettlementReply_Fuel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string datetime */ 3:
                    message.datetime = reader.string();
                    break;
                case /* string unit_number */ 4:
                    message.unitNumber = reader.string();
                    break;
                case /* string driver_name */ 5:
                    message.driverName = reader.string();
                    break;
                case /* string city */ 6:
                    message.city = reader.string();
                    break;
                case /* string state */ 7:
                    message.state = reader.string();
                    break;
                case /* string address */ 8:
                    message.address = reader.string();
                    break;
                case /* string chain */ 9:
                    message.chain = reader.string();
                    break;
                case /* string total_discounted_amount */ 10:
                    message.totalDiscountedAmount = reader.string();
                    break;
                case /* string total_amount */ 11:
                    message.totalAmount = reader.string();
                    break;
                case /* string settlement_id */ 12:
                    message.settlementId = reader.string();
                    break;
                case /* bool verified */ 13:
                    message.verified = reader.bool();
                    break;
                case /* double quantity */ 14:
                    message.quantity = reader.double();
                    break;
                case /* string quantity_formatted */ 15:
                    message.quantityFormatted = reader.string();
                    break;
                case /* string product */ 16:
                    message.product = reader.string();
                    break;
                case /* string truck_stop */ 17:
                    message.truckStop = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Fuel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string datetime = 3; */
        if (message.datetime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.datetime);
        /* string unit_number = 4; */
        if (message.unitNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.unitNumber);
        /* string driver_name = 5; */
        if (message.driverName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.driverName);
        /* string city = 6; */
        if (message.city !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.city);
        /* string state = 7; */
        if (message.state !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.state);
        /* string address = 8; */
        if (message.address !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.address);
        /* string chain = 9; */
        if (message.chain !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.chain);
        /* string total_discounted_amount = 10; */
        if (message.totalDiscountedAmount !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.totalDiscountedAmount);
        /* string total_amount = 11; */
        if (message.totalAmount !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.totalAmount);
        /* string settlement_id = 12; */
        if (message.settlementId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.settlementId);
        /* bool verified = 13; */
        if (message.verified !== false)
            writer.tag(13, WireType.Varint).bool(message.verified);
        /* double quantity = 14; */
        if (message.quantity !== 0)
            writer.tag(14, WireType.Bit64).double(message.quantity);
        /* string quantity_formatted = 15; */
        if (message.quantityFormatted !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.quantityFormatted);
        /* string product = 16; */
        if (message.product !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.product);
        /* string truck_stop = 17; */
        if (message.truckStop !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.truckStop);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Fuel
 */
export const RetrieveSettlementReply_Fuel = new RetrieveSettlementReply_Fuel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_FuelInfo$Type extends MessageType<RetrieveSettlementReply_FuelInfo> {
    constructor() {
        super("RetrieveSettlementReply.FuelInfo", [
            { no: 1, name: "fuel", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_Fuel },
            { no: 2, name: "totals", kind: "message", T: () => RetrieveSettlementReply_FuelInfo_Totals }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_FuelInfo>): RetrieveSettlementReply_FuelInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuel = [];
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_FuelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_FuelInfo): RetrieveSettlementReply_FuelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RetrieveSettlementReply.Fuel fuel */ 1:
                    message.fuel.push(RetrieveSettlementReply_Fuel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* RetrieveSettlementReply.FuelInfo.Totals totals */ 2:
                    message.totals = RetrieveSettlementReply_FuelInfo_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_FuelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RetrieveSettlementReply.Fuel fuel = 1; */
        for (let i = 0; i < message.fuel.length; i++)
            RetrieveSettlementReply_Fuel.internalBinaryWrite(message.fuel[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.FuelInfo.Totals totals = 2; */
        if (message.totals)
            RetrieveSettlementReply_FuelInfo_Totals.internalBinaryWrite(message.totals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.FuelInfo
 */
export const RetrieveSettlementReply_FuelInfo = new RetrieveSettlementReply_FuelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_FuelInfo_Totals$Type extends MessageType<RetrieveSettlementReply_FuelInfo_Totals> {
    constructor() {
        super("RetrieveSettlementReply.FuelInfo.Totals", [
            { no: 1, name: "assigned_discounted_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "assigned_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "unassigned_discounted_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unassigned_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_FuelInfo_Totals>): RetrieveSettlementReply_FuelInfo_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.assignedDiscountedAmount = "";
        message.assignedAmount = "";
        message.unassignedDiscountedAmount = "";
        message.unassignedAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_FuelInfo_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_FuelInfo_Totals): RetrieveSettlementReply_FuelInfo_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string assigned_discounted_amount */ 1:
                    message.assignedDiscountedAmount = reader.string();
                    break;
                case /* string assigned_amount */ 2:
                    message.assignedAmount = reader.string();
                    break;
                case /* string unassigned_discounted_amount */ 3:
                    message.unassignedDiscountedAmount = reader.string();
                    break;
                case /* string unassigned_amount */ 4:
                    message.unassignedAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_FuelInfo_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string assigned_discounted_amount = 1; */
        if (message.assignedDiscountedAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.assignedDiscountedAmount);
        /* string assigned_amount = 2; */
        if (message.assignedAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.assignedAmount);
        /* string unassigned_discounted_amount = 3; */
        if (message.unassignedDiscountedAmount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.unassignedDiscountedAmount);
        /* string unassigned_amount = 4; */
        if (message.unassignedAmount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.unassignedAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.FuelInfo.Totals
 */
export const RetrieveSettlementReply_FuelInfo_Totals = new RetrieveSettlementReply_FuelInfo_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Tolls$Type extends MessageType<RetrieveSettlementReply_Tolls> {
    constructor() {
        super("RetrieveSettlementReply.Tolls", [
            { no: 1, name: "toll_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transponder_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "plate_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "agency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "entry_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "entry_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "exit_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "exit_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "posting_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Tolls>): RetrieveSettlementReply_Tolls {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollTransactionId = "";
        message.transponderNumber = "";
        message.plateNumber = "";
        message.agency = "";
        message.entryPlaza = "";
        message.entryDatetime = "";
        message.exitPlaza = "";
        message.exitDatetime = "";
        message.source = "";
        message.postingDate = "";
        message.amount = 0;
        message.settlementId = "";
        message.amountFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Tolls>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Tolls): RetrieveSettlementReply_Tolls {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toll_transaction_id */ 1:
                    message.tollTransactionId = reader.string();
                    break;
                case /* string transponder_number */ 2:
                    message.transponderNumber = reader.string();
                    break;
                case /* string plate_number */ 3:
                    message.plateNumber = reader.string();
                    break;
                case /* string agency */ 4:
                    message.agency = reader.string();
                    break;
                case /* string entry_plaza */ 5:
                    message.entryPlaza = reader.string();
                    break;
                case /* string entry_datetime */ 6:
                    message.entryDatetime = reader.string();
                    break;
                case /* string exit_plaza */ 7:
                    message.exitPlaza = reader.string();
                    break;
                case /* string exit_datetime */ 8:
                    message.exitDatetime = reader.string();
                    break;
                case /* string source */ 9:
                    message.source = reader.string();
                    break;
                case /* string posting_date */ 10:
                    message.postingDate = reader.string();
                    break;
                case /* double amount */ 11:
                    message.amount = reader.double();
                    break;
                case /* string settlement_id */ 12:
                    message.settlementId = reader.string();
                    break;
                case /* string amount_formatted */ 13:
                    message.amountFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Tolls, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toll_transaction_id = 1; */
        if (message.tollTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tollTransactionId);
        /* string transponder_number = 2; */
        if (message.transponderNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transponderNumber);
        /* string plate_number = 3; */
        if (message.plateNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.plateNumber);
        /* string agency = 4; */
        if (message.agency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.agency);
        /* string entry_plaza = 5; */
        if (message.entryPlaza !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.entryPlaza);
        /* string entry_datetime = 6; */
        if (message.entryDatetime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.entryDatetime);
        /* string exit_plaza = 7; */
        if (message.exitPlaza !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.exitPlaza);
        /* string exit_datetime = 8; */
        if (message.exitDatetime !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.exitDatetime);
        /* string source = 9; */
        if (message.source !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.source);
        /* string posting_date = 10; */
        if (message.postingDate !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.postingDate);
        /* double amount = 11; */
        if (message.amount !== 0)
            writer.tag(11, WireType.Bit64).double(message.amount);
        /* string settlement_id = 12; */
        if (message.settlementId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.settlementId);
        /* string amount_formatted = 13; */
        if (message.amountFormatted !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.amountFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Tolls
 */
export const RetrieveSettlementReply_Tolls = new RetrieveSettlementReply_Tolls$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_TollsInfo$Type extends MessageType<RetrieveSettlementReply_TollsInfo> {
    constructor() {
        super("RetrieveSettlementReply.TollsInfo", [
            { no: 1, name: "tolls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_Tolls },
            { no: 2, name: "totals", kind: "message", T: () => RetrieveSettlementReply_TollsInfo_Totals }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_TollsInfo>): RetrieveSettlementReply_TollsInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tolls = [];
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_TollsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_TollsInfo): RetrieveSettlementReply_TollsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RetrieveSettlementReply.Tolls tolls */ 1:
                    message.tolls.push(RetrieveSettlementReply_Tolls.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* RetrieveSettlementReply.TollsInfo.Totals totals */ 2:
                    message.totals = RetrieveSettlementReply_TollsInfo_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_TollsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RetrieveSettlementReply.Tolls tolls = 1; */
        for (let i = 0; i < message.tolls.length; i++)
            RetrieveSettlementReply_Tolls.internalBinaryWrite(message.tolls[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.TollsInfo.Totals totals = 2; */
        if (message.totals)
            RetrieveSettlementReply_TollsInfo_Totals.internalBinaryWrite(message.totals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.TollsInfo
 */
export const RetrieveSettlementReply_TollsInfo = new RetrieveSettlementReply_TollsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_TollsInfo_Totals$Type extends MessageType<RetrieveSettlementReply_TollsInfo_Totals> {
    constructor() {
        super("RetrieveSettlementReply.TollsInfo.Totals", [
            { no: 1, name: "assigned_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "unassigned_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_TollsInfo_Totals>): RetrieveSettlementReply_TollsInfo_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.assignedAmount = "";
        message.unassignedAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_TollsInfo_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_TollsInfo_Totals): RetrieveSettlementReply_TollsInfo_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string assigned_amount */ 1:
                    message.assignedAmount = reader.string();
                    break;
                case /* string unassigned_amount */ 2:
                    message.unassignedAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_TollsInfo_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string assigned_amount = 1; */
        if (message.assignedAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.assignedAmount);
        /* string unassigned_amount = 2; */
        if (message.unassignedAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.unassignedAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.TollsInfo.Totals
 */
export const RetrieveSettlementReply_TollsInfo_Totals = new RetrieveSettlementReply_TollsInfo_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_DriverRecurringTransaction$Type extends MessageType<RetrieveSettlementReply_DriverRecurringTransaction> {
    constructor() {
        super("RetrieveSettlementReply.DriverRecurringTransaction", [
            { no: 1, name: "recurring_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "max_total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["Settlements.RecurringTransaction.Status", Settlements_RecurringTransaction_Status] },
            { no: 5, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "max_total_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_DriverRecurringTransaction_Transaction },
            { no: 9, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "charged_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_DriverRecurringTransaction>): RetrieveSettlementReply_DriverRecurringTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recurringTransactionId = "";
        message.amount = 0;
        message.maxTotalAmount = 0;
        message.status = 0;
        message.categoryId = "";
        message.amountFormatted = "";
        message.maxTotalAmountFormatted = "";
        message.transactions = [];
        message.totalAmount = "";
        message.chargedAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_DriverRecurringTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_DriverRecurringTransaction): RetrieveSettlementReply_DriverRecurringTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recurring_transaction_id */ 1:
                    message.recurringTransactionId = reader.string();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                case /* double max_total_amount */ 3:
                    message.maxTotalAmount = reader.double();
                    break;
                case /* Settlements.RecurringTransaction.Status status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string category_id */ 5:
                    message.categoryId = reader.string();
                    break;
                case /* string amount_formatted */ 6:
                    message.amountFormatted = reader.string();
                    break;
                case /* string max_total_amount_formatted */ 7:
                    message.maxTotalAmountFormatted = reader.string();
                    break;
                case /* repeated RetrieveSettlementReply.DriverRecurringTransaction.Transaction transactions */ 8:
                    message.transactions.push(RetrieveSettlementReply_DriverRecurringTransaction_Transaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string total_amount */ 9:
                    message.totalAmount = reader.string();
                    break;
                case /* string charged_amount */ 10:
                    message.chargedAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_DriverRecurringTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string recurring_transaction_id = 1; */
        if (message.recurringTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recurringTransactionId);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        /* double max_total_amount = 3; */
        if (message.maxTotalAmount !== 0)
            writer.tag(3, WireType.Bit64).double(message.maxTotalAmount);
        /* Settlements.RecurringTransaction.Status status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string category_id = 5; */
        if (message.categoryId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.categoryId);
        /* string amount_formatted = 6; */
        if (message.amountFormatted !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.amountFormatted);
        /* string max_total_amount_formatted = 7; */
        if (message.maxTotalAmountFormatted !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.maxTotalAmountFormatted);
        /* repeated RetrieveSettlementReply.DriverRecurringTransaction.Transaction transactions = 8; */
        for (let i = 0; i < message.transactions.length; i++)
            RetrieveSettlementReply_DriverRecurringTransaction_Transaction.internalBinaryWrite(message.transactions[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string total_amount = 9; */
        if (message.totalAmount !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.totalAmount);
        /* string charged_amount = 10; */
        if (message.chargedAmount !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.chargedAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.DriverRecurringTransaction
 */
export const RetrieveSettlementReply_DriverRecurringTransaction = new RetrieveSettlementReply_DriverRecurringTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_DriverRecurringTransaction_Transaction$Type extends MessageType<RetrieveSettlementReply_DriverRecurringTransaction_Transaction> {
    constructor() {
        super("RetrieveSettlementReply.DriverRecurringTransaction.Transaction", [
            { no: 1, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "start_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "end_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "type", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Transaction.Type", Settlements_Cycle_Period_Settlement_Transaction_Type] }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_DriverRecurringTransaction_Transaction>): RetrieveSettlementReply_DriverRecurringTransaction_Transaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactionId = "";
        message.settlementId = "";
        message.amount = 0;
        message.amountFormatted = "";
        message.startDatetime = "";
        message.endDatetime = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_DriverRecurringTransaction_Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_DriverRecurringTransaction_Transaction): RetrieveSettlementReply_DriverRecurringTransaction_Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_id */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* string settlement_id */ 2:
                    message.settlementId = reader.string();
                    break;
                case /* double amount */ 3:
                    message.amount = reader.double();
                    break;
                case /* string amount_formatted */ 4:
                    message.amountFormatted = reader.string();
                    break;
                case /* string start_datetime */ 5:
                    message.startDatetime = reader.string();
                    break;
                case /* string end_datetime */ 6:
                    message.endDatetime = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Transaction.Type type */ 7:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_DriverRecurringTransaction_Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_id = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* string settlement_id = 2; */
        if (message.settlementId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.settlementId);
        /* double amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Bit64).double(message.amount);
        /* string amount_formatted = 4; */
        if (message.amountFormatted !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amountFormatted);
        /* string start_datetime = 5; */
        if (message.startDatetime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startDatetime);
        /* string end_datetime = 6; */
        if (message.endDatetime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.endDatetime);
        /* Settlements.Cycle.Period.Settlement.Transaction.Type type = 7; */
        if (message.type !== 0)
            writer.tag(7, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.DriverRecurringTransaction.Transaction
 */
export const RetrieveSettlementReply_DriverRecurringTransaction_Transaction = new RetrieveSettlementReply_DriverRecurringTransaction_Transaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_DriverRecurringTransactionsInfo$Type extends MessageType<RetrieveSettlementReply_DriverRecurringTransactionsInfo> {
    constructor() {
        super("RetrieveSettlementReply.DriverRecurringTransactionsInfo", [
            { no: 1, name: "recurring_transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_DriverRecurringTransaction },
            { no: 2, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_DriverRecurringTransactionsInfo>): RetrieveSettlementReply_DriverRecurringTransactionsInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recurringTransactions = [];
        message.totalAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_DriverRecurringTransactionsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_DriverRecurringTransactionsInfo): RetrieveSettlementReply_DriverRecurringTransactionsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RetrieveSettlementReply.DriverRecurringTransaction recurring_transactions */ 1:
                    message.recurringTransactions.push(RetrieveSettlementReply_DriverRecurringTransaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string total_amount */ 2:
                    message.totalAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_DriverRecurringTransactionsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RetrieveSettlementReply.DriverRecurringTransaction recurring_transactions = 1; */
        for (let i = 0; i < message.recurringTransactions.length; i++)
            RetrieveSettlementReply_DriverRecurringTransaction.internalBinaryWrite(message.recurringTransactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string total_amount = 2; */
        if (message.totalAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.DriverRecurringTransactionsInfo
 */
export const RetrieveSettlementReply_DriverRecurringTransactionsInfo = new RetrieveSettlementReply_DriverRecurringTransactionsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Transaction$Type extends MessageType<RetrieveSettlementReply_Transaction> {
    constructor() {
        super("RetrieveSettlementReply.Transaction", [
            { no: 1, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "recurring_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "type", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Transaction.Type", Settlements_Cycle_Period_Settlement_Transaction_Type] },
            { no: 7, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "recurring_transaction", kind: "message", T: () => RetrieveSettlementReply_Transaction_RecurringTransaction },
            { no: 9, name: "transaction_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Transaction>): RetrieveSettlementReply_Transaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactionId = "";
        message.settlementId = "";
        message.recurringTransactionId = "";
        message.amount = "";
        message.description = "";
        message.type = 0;
        message.categoryId = "";
        message.transactionDate = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Transaction): RetrieveSettlementReply_Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_id */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* string settlement_id */ 2:
                    message.settlementId = reader.string();
                    break;
                case /* string recurring_transaction_id */ 3:
                    message.recurringTransactionId = reader.string();
                    break;
                case /* string amount */ 4:
                    message.amount = reader.string();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Transaction.Type type */ 6:
                    message.type = reader.int32();
                    break;
                case /* string category_id */ 7:
                    message.categoryId = reader.string();
                    break;
                case /* RetrieveSettlementReply.Transaction.RecurringTransaction recurring_transaction */ 8:
                    message.recurringTransaction = RetrieveSettlementReply_Transaction_RecurringTransaction.internalBinaryRead(reader, reader.uint32(), options, message.recurringTransaction);
                    break;
                case /* string transaction_date */ 9:
                    message.transactionDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_id = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* string settlement_id = 2; */
        if (message.settlementId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.settlementId);
        /* string recurring_transaction_id = 3; */
        if (message.recurringTransactionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recurringTransactionId);
        /* string amount = 4; */
        if (message.amount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amount);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* Settlements.Cycle.Period.Settlement.Transaction.Type type = 6; */
        if (message.type !== 0)
            writer.tag(6, WireType.Varint).int32(message.type);
        /* string category_id = 7; */
        if (message.categoryId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.categoryId);
        /* RetrieveSettlementReply.Transaction.RecurringTransaction recurring_transaction = 8; */
        if (message.recurringTransaction)
            RetrieveSettlementReply_Transaction_RecurringTransaction.internalBinaryWrite(message.recurringTransaction, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string transaction_date = 9; */
        if (message.transactionDate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.transactionDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Transaction
 */
export const RetrieveSettlementReply_Transaction = new RetrieveSettlementReply_Transaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Transaction_RecurringTransaction$Type extends MessageType<RetrieveSettlementReply_Transaction_RecurringTransaction> {
    constructor() {
        super("RetrieveSettlementReply.Transaction.RecurringTransaction", [
            { no: 1, name: "recurring_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "charged_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Transaction_RecurringTransaction>): RetrieveSettlementReply_Transaction_RecurringTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recurringTransactionId = "";
        message.amount = "";
        message.categoryId = "";
        message.chargedAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Transaction_RecurringTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Transaction_RecurringTransaction): RetrieveSettlementReply_Transaction_RecurringTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recurring_transaction_id */ 1:
                    message.recurringTransactionId = reader.string();
                    break;
                case /* string amount */ 2:
                    message.amount = reader.string();
                    break;
                case /* string category_id */ 3:
                    message.categoryId = reader.string();
                    break;
                case /* string charged_amount */ 4:
                    message.chargedAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Transaction_RecurringTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string recurring_transaction_id = 1; */
        if (message.recurringTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recurringTransactionId);
        /* string amount = 2; */
        if (message.amount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amount);
        /* string category_id = 3; */
        if (message.categoryId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.categoryId);
        /* string charged_amount = 4; */
        if (message.chargedAmount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.chargedAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Transaction.RecurringTransaction
 */
export const RetrieveSettlementReply_Transaction_RecurringTransaction = new RetrieveSettlementReply_Transaction_RecurringTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_TransactionsInfo$Type extends MessageType<RetrieveSettlementReply_TransactionsInfo> {
    constructor() {
        super("RetrieveSettlementReply.TransactionsInfo", [
            { no: 1, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_Transaction },
            { no: 2, name: "totals", kind: "message", T: () => RetrieveSettlementReply_TransactionsInfo_Totals }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_TransactionsInfo>): RetrieveSettlementReply_TransactionsInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactions = [];
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_TransactionsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_TransactionsInfo): RetrieveSettlementReply_TransactionsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RetrieveSettlementReply.Transaction transactions */ 1:
                    message.transactions.push(RetrieveSettlementReply_Transaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* RetrieveSettlementReply.TransactionsInfo.Totals totals */ 2:
                    message.totals = RetrieveSettlementReply_TransactionsInfo_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_TransactionsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RetrieveSettlementReply.Transaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            RetrieveSettlementReply_Transaction.internalBinaryWrite(message.transactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.TransactionsInfo.Totals totals = 2; */
        if (message.totals)
            RetrieveSettlementReply_TransactionsInfo_Totals.internalBinaryWrite(message.totals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.TransactionsInfo
 */
export const RetrieveSettlementReply_TransactionsInfo = new RetrieveSettlementReply_TransactionsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_TransactionsInfo_Totals$Type extends MessageType<RetrieveSettlementReply_TransactionsInfo_Totals> {
    constructor() {
        super("RetrieveSettlementReply.TransactionsInfo.Totals", [
            { no: 1, name: "assigned_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "unassigned_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_TransactionsInfo_Totals>): RetrieveSettlementReply_TransactionsInfo_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.assignedAmount = "";
        message.unassignedAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_TransactionsInfo_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_TransactionsInfo_Totals): RetrieveSettlementReply_TransactionsInfo_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string assigned_amount */ 1:
                    message.assignedAmount = reader.string();
                    break;
                case /* string unassigned_amount */ 2:
                    message.unassignedAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_TransactionsInfo_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string assigned_amount = 1; */
        if (message.assignedAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.assignedAmount);
        /* string unassigned_amount = 2; */
        if (message.unassignedAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.unassignedAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.TransactionsInfo.Totals
 */
export const RetrieveSettlementReply_TransactionsInfo_Totals = new RetrieveSettlementReply_TransactionsInfo_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Manifest$Type extends MessageType<RetrieveSettlementReply_Manifest> {
    constructor() {
        super("RetrieveSettlementReply.Manifest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "completed_stops_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "total_stops_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "total_distance", kind: "message", T: () => Distance },
            { no: 6, name: "empty_distance", kind: "message", T: () => Distance },
            { no: 7, name: "loaded_distance", kind: "message", T: () => Distance },
            { no: 8, name: "auto_empty_distance", kind: "message", T: () => Distance },
            { no: 9, name: "auto_loaded_distance", kind: "message", T: () => Distance },
            { no: 10, name: "total_driver_pay", kind: "message", T: () => Amount },
            { no: 11, name: "origin", kind: "message", T: () => RetrieveSettlementReply_Manifest_Stop },
            { no: 12, name: "destination", kind: "message", T: () => RetrieveSettlementReply_Manifest_Stop },
            { no: 13, name: "loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_Manifest_Load },
            { no: 14, name: "driver_pay_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_Manifest_DriverPayItem },
            { no: 15, name: "gross", kind: "message", T: () => Amount },
            { no: 16, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "status", kind: "enum", T: () => ["ManifestModel.Status", ManifestModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Manifest>): RetrieveSettlementReply_Manifest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.friendlyId = 0;
        message.completedStopsCount = 0;
        message.totalStopsCount = 0;
        message.loads = [];
        message.driverPayItems = [];
        message.settlementId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Manifest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Manifest): RetrieveSettlementReply_Manifest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* int64 friendly_id */ 2:
                    message.friendlyId = reader.int64().toNumber();
                    break;
                case /* int64 completed_stops_count */ 3:
                    message.completedStopsCount = reader.int64().toNumber();
                    break;
                case /* int64 total_stops_count */ 4:
                    message.totalStopsCount = reader.int64().toNumber();
                    break;
                case /* Distance total_distance */ 5:
                    message.totalDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.totalDistance);
                    break;
                case /* Distance empty_distance */ 6:
                    message.emptyDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.emptyDistance);
                    break;
                case /* Distance loaded_distance */ 7:
                    message.loadedDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.loadedDistance);
                    break;
                case /* Distance auto_empty_distance */ 8:
                    message.autoEmptyDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.autoEmptyDistance);
                    break;
                case /* Distance auto_loaded_distance */ 9:
                    message.autoLoadedDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.autoLoadedDistance);
                    break;
                case /* Amount total_driver_pay */ 10:
                    message.totalDriverPay = Amount.internalBinaryRead(reader, reader.uint32(), options, message.totalDriverPay);
                    break;
                case /* RetrieveSettlementReply.Manifest.Stop origin */ 11:
                    message.origin = RetrieveSettlementReply_Manifest_Stop.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                case /* RetrieveSettlementReply.Manifest.Stop destination */ 12:
                    message.destination = RetrieveSettlementReply_Manifest_Stop.internalBinaryRead(reader, reader.uint32(), options, message.destination);
                    break;
                case /* repeated RetrieveSettlementReply.Manifest.Load loads */ 13:
                    message.loads.push(RetrieveSettlementReply_Manifest_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated RetrieveSettlementReply.Manifest.DriverPayItem driver_pay_items */ 14:
                    message.driverPayItems.push(RetrieveSettlementReply_Manifest_DriverPayItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Amount gross */ 15:
                    message.gross = Amount.internalBinaryRead(reader, reader.uint32(), options, message.gross);
                    break;
                case /* string settlement_id */ 16:
                    message.settlementId = reader.string();
                    break;
                case /* ManifestModel.Status status */ 17:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Manifest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* int64 friendly_id = 2; */
        if (message.friendlyId !== 0)
            writer.tag(2, WireType.Varint).int64(message.friendlyId);
        /* int64 completed_stops_count = 3; */
        if (message.completedStopsCount !== 0)
            writer.tag(3, WireType.Varint).int64(message.completedStopsCount);
        /* int64 total_stops_count = 4; */
        if (message.totalStopsCount !== 0)
            writer.tag(4, WireType.Varint).int64(message.totalStopsCount);
        /* Distance total_distance = 5; */
        if (message.totalDistance)
            Distance.internalBinaryWrite(message.totalDistance, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Distance empty_distance = 6; */
        if (message.emptyDistance)
            Distance.internalBinaryWrite(message.emptyDistance, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Distance loaded_distance = 7; */
        if (message.loadedDistance)
            Distance.internalBinaryWrite(message.loadedDistance, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Distance auto_empty_distance = 8; */
        if (message.autoEmptyDistance)
            Distance.internalBinaryWrite(message.autoEmptyDistance, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* Distance auto_loaded_distance = 9; */
        if (message.autoLoadedDistance)
            Distance.internalBinaryWrite(message.autoLoadedDistance, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* Amount total_driver_pay = 10; */
        if (message.totalDriverPay)
            Amount.internalBinaryWrite(message.totalDriverPay, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.Manifest.Stop origin = 11; */
        if (message.origin)
            RetrieveSettlementReply_Manifest_Stop.internalBinaryWrite(message.origin, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.Manifest.Stop destination = 12; */
        if (message.destination)
            RetrieveSettlementReply_Manifest_Stop.internalBinaryWrite(message.destination, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated RetrieveSettlementReply.Manifest.Load loads = 13; */
        for (let i = 0; i < message.loads.length; i++)
            RetrieveSettlementReply_Manifest_Load.internalBinaryWrite(message.loads[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated RetrieveSettlementReply.Manifest.DriverPayItem driver_pay_items = 14; */
        for (let i = 0; i < message.driverPayItems.length; i++)
            RetrieveSettlementReply_Manifest_DriverPayItem.internalBinaryWrite(message.driverPayItems[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* Amount gross = 15; */
        if (message.gross)
            Amount.internalBinaryWrite(message.gross, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string settlement_id = 16; */
        if (message.settlementId !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.settlementId);
        /* ManifestModel.Status status = 17; */
        if (message.status !== 0)
            writer.tag(17, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Manifest
 */
export const RetrieveSettlementReply_Manifest = new RetrieveSettlementReply_Manifest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Manifest_Load$Type extends MessageType<RetrieveSettlementReply_Manifest_Load> {
    constructor() {
        super("RetrieveSettlementReply.Manifest.Load", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stops_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "total_distance", kind: "message", T: () => Distance },
            { no: 5, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 6, name: "status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 7, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Manifest_Load>): RetrieveSettlementReply_Manifest_Load {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.friendlyId = "";
        message.stopsCount = 0;
        message.invoiceStatus = 0;
        message.status = 0;
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Manifest_Load>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Manifest_Load): RetrieveSettlementReply_Manifest_Load {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string friendly_id */ 2:
                    message.friendlyId = reader.string();
                    break;
                case /* int64 stops_count */ 3:
                    message.stopsCount = reader.int64().toNumber();
                    break;
                case /* Distance total_distance */ 4:
                    message.totalDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.totalDistance);
                    break;
                case /* LoadModel.InvoiceStatus invoice_status */ 5:
                    message.invoiceStatus = reader.int32();
                    break;
                case /* LoadModel.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* string reference_id */ 7:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Manifest_Load, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string friendly_id = 2; */
        if (message.friendlyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyId);
        /* int64 stops_count = 3; */
        if (message.stopsCount !== 0)
            writer.tag(3, WireType.Varint).int64(message.stopsCount);
        /* Distance total_distance = 4; */
        if (message.totalDistance)
            Distance.internalBinaryWrite(message.totalDistance, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* LoadModel.InvoiceStatus invoice_status = 5; */
        if (message.invoiceStatus !== 0)
            writer.tag(5, WireType.Varint).int32(message.invoiceStatus);
        /* LoadModel.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* string reference_id = 7; */
        if (message.referenceId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Manifest.Load
 */
export const RetrieveSettlementReply_Manifest_Load = new RetrieveSettlementReply_Manifest_Load$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Manifest_Stop$Type extends MessageType<RetrieveSettlementReply_Manifest_Stop> {
    constructor() {
        super("RetrieveSettlementReply.Manifest.Stop", [
            { no: 1, name: "appointment_start_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Manifest_Stop>): RetrieveSettlementReply_Manifest_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appointmentStartAtLocal = "";
        message.city = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Manifest_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Manifest_Stop): RetrieveSettlementReply_Manifest_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string appointment_start_at_local */ 1:
                    message.appointmentStartAtLocal = reader.string();
                    break;
                case /* string city */ 2:
                    message.city = reader.string();
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Manifest_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string appointment_start_at_local = 1; */
        if (message.appointmentStartAtLocal !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appointmentStartAtLocal);
        /* string city = 2; */
        if (message.city !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.city);
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Manifest.Stop
 */
export const RetrieveSettlementReply_Manifest_Stop = new RetrieveSettlementReply_Manifest_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_Manifest_DriverPayItem$Type extends MessageType<RetrieveSettlementReply_Manifest_DriverPayItem> {
    constructor() {
        super("RetrieveSettlementReply.Manifest.DriverPayItem", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "amount_per_unit_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "units", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "units_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "total_amount", kind: "message", T: () => Amount },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_Manifest_DriverPayItem>): RetrieveSettlementReply_Manifest_DriverPayItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.driverPayItemId = "";
        message.amountPerUnit = 0;
        message.amountPerUnitFormatted = "";
        message.units = 0;
        message.unitsFormatted = "";
        message.description = "";
        message.categoryId = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_Manifest_DriverPayItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_Manifest_DriverPayItem): RetrieveSettlementReply_Manifest_DriverPayItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string driver_pay_item_id */ 2:
                    message.driverPayItemId = reader.string();
                    break;
                case /* double amount_per_unit */ 3:
                    message.amountPerUnit = reader.double();
                    break;
                case /* string amount_per_unit_formatted */ 4:
                    message.amountPerUnitFormatted = reader.string();
                    break;
                case /* double units */ 5:
                    message.units = reader.double();
                    break;
                case /* string units_formatted */ 6:
                    message.unitsFormatted = reader.string();
                    break;
                case /* Amount total_amount */ 7:
                    message.totalAmount = Amount.internalBinaryRead(reader, reader.uint32(), options, message.totalAmount);
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                case /* string category_id */ 9:
                    message.categoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_Manifest_DriverPayItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string driver_pay_item_id = 2; */
        if (message.driverPayItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverPayItemId);
        /* double amount_per_unit = 3; */
        if (message.amountPerUnit !== 0)
            writer.tag(3, WireType.Bit64).double(message.amountPerUnit);
        /* string amount_per_unit_formatted = 4; */
        if (message.amountPerUnitFormatted !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amountPerUnitFormatted);
        /* double units = 5; */
        if (message.units !== 0)
            writer.tag(5, WireType.Bit64).double(message.units);
        /* string units_formatted = 6; */
        if (message.unitsFormatted !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.unitsFormatted);
        /* Amount total_amount = 7; */
        if (message.totalAmount)
            Amount.internalBinaryWrite(message.totalAmount, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* string category_id = 9; */
        if (message.categoryId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.categoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.Manifest.DriverPayItem
 */
export const RetrieveSettlementReply_Manifest_DriverPayItem = new RetrieveSettlementReply_Manifest_DriverPayItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_ManifestsInfo$Type extends MessageType<RetrieveSettlementReply_ManifestsInfo> {
    constructor() {
        super("RetrieveSettlementReply.ManifestsInfo", [
            { no: 1, name: "manifests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RetrieveSettlementReply_Manifest },
            { no: 2, name: "totals", kind: "message", T: () => RetrieveSettlementReply_ManifestsInfo_Totals }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_ManifestsInfo>): RetrieveSettlementReply_ManifestsInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifests = [];
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_ManifestsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_ManifestsInfo): RetrieveSettlementReply_ManifestsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RetrieveSettlementReply.Manifest manifests */ 1:
                    message.manifests.push(RetrieveSettlementReply_Manifest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* RetrieveSettlementReply.ManifestsInfo.Totals totals */ 2:
                    message.totals = RetrieveSettlementReply_ManifestsInfo_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_ManifestsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RetrieveSettlementReply.Manifest manifests = 1; */
        for (let i = 0; i < message.manifests.length; i++)
            RetrieveSettlementReply_Manifest.internalBinaryWrite(message.manifests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* RetrieveSettlementReply.ManifestsInfo.Totals totals = 2; */
        if (message.totals)
            RetrieveSettlementReply_ManifestsInfo_Totals.internalBinaryWrite(message.totals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.ManifestsInfo
 */
export const RetrieveSettlementReply_ManifestsInfo = new RetrieveSettlementReply_ManifestsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveSettlementReply_ManifestsInfo_Totals$Type extends MessageType<RetrieveSettlementReply_ManifestsInfo_Totals> {
    constructor() {
        super("RetrieveSettlementReply.ManifestsInfo.Totals", [
            { no: 1, name: "assigned_gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "assigned_driver_net_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "unassigned_gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unassigned_driver_net_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveSettlementReply_ManifestsInfo_Totals>): RetrieveSettlementReply_ManifestsInfo_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.assignedGrossAmount = "";
        message.assignedDriverNetAmount = "";
        message.unassignedGrossAmount = "";
        message.unassignedDriverNetAmount = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveSettlementReply_ManifestsInfo_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveSettlementReply_ManifestsInfo_Totals): RetrieveSettlementReply_ManifestsInfo_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string assigned_gross_amount */ 1:
                    message.assignedGrossAmount = reader.string();
                    break;
                case /* string assigned_driver_net_amount */ 2:
                    message.assignedDriverNetAmount = reader.string();
                    break;
                case /* string unassigned_gross_amount */ 3:
                    message.unassignedGrossAmount = reader.string();
                    break;
                case /* string unassigned_driver_net_amount */ 4:
                    message.unassignedDriverNetAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveSettlementReply_ManifestsInfo_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string assigned_gross_amount = 1; */
        if (message.assignedGrossAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.assignedGrossAmount);
        /* string assigned_driver_net_amount = 2; */
        if (message.assignedDriverNetAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.assignedDriverNetAmount);
        /* string unassigned_gross_amount = 3; */
        if (message.unassignedGrossAmount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.unassignedGrossAmount);
        /* string unassigned_driver_net_amount = 4; */
        if (message.unassignedDriverNetAmount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.unassignedDriverNetAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveSettlementReply.ManifestsInfo.Totals
 */
export const RetrieveSettlementReply_ManifestsInfo_Totals = new RetrieveSettlementReply_ManifestsInfo_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGetRequest$Type extends MessageType<SettlementGetRequest> {
    constructor() {
        super("SettlementGetRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementGetRequest>): SettlementGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGetRequest): SettlementGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* optional string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* optional string truck_id */ 3:
                    message.truckId = reader.string();
                    break;
                case /* optional string driver_id */ 4:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string cycle_id = 1; */
        if (message.cycleId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* optional string period_id = 2; */
        if (message.periodId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* optional string truck_id = 3; */
        if (message.truckId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.truckId);
        /* optional string driver_id = 4; */
        if (message.driverId !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGetRequest
 */
export const SettlementGetRequest = new SettlementGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGetReply$Type extends MessageType<SettlementGetReply> {
    constructor() {
        super("SettlementGetReply", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementGetReply_Settlement }
        ]);
    }
    create(value?: PartialMessage<SettlementGetReply>): SettlementGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGetReply): SettlementGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementGetReply.Settlement settlements */ 1:
                    message.settlements.push(SettlementGetReply_Settlement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementGetReply.Settlement settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            SettlementGetReply_Settlement.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGetReply
 */
export const SettlementGetReply = new SettlementGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGetReply_Settlement$Type extends MessageType<SettlementGetReply_Settlement> {
    constructor() {
        super("SettlementGetReply.Settlement", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unique_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "settlement_friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] },
            { no: 7, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "avg_rpm", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "avg_rpm_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "company_net_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "company_net_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "credits_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "credits_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "debits_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "debits_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "driver_loads_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "driver_loads_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "driver_pay_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "driver_pay_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "driver_pay_amount_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "fuel_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 24, name: "fuel_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "one_time_debits_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 26, name: "one_time_debits_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "tolls_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 28, name: "tolls_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "total_loads_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 30, name: "total_loads_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "settlement_driver_pay_amount_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "trends", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementGetReply_Settlement_Trend },
            { no: 33, name: "recurring_transactions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => SettlementGetReply_Settlement_Amount } }
        ]);
    }
    create(value?: PartialMessage<SettlementGetReply_Settlement>): SettlementGetReply_Settlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.uniqueKey = "";
        message.settlementFriendlyId = 0;
        message.status = 0;
        message.driverId = "";
        message.truckId = "";
        message.trailerId = "";
        message.avgRpm = 0;
        message.avgRpmFormatted = "";
        message.companyNetAmount = 0;
        message.companyNetAmountFormatted = "";
        message.creditsAmount = 0;
        message.creditsAmountFormatted = "";
        message.debitsAmount = 0;
        message.debitsAmountFormatted = "";
        message.driverLoadsAmount = 0;
        message.driverLoadsAmountFormatted = "";
        message.driverPayAmount = 0;
        message.driverPayAmountFormatted = "";
        message.driverPayAmountType = "";
        message.fuelAmount = 0;
        message.fuelAmountFormatted = "";
        message.oneTimeDebitsAmount = 0;
        message.oneTimeDebitsAmountFormatted = "";
        message.tollsAmount = 0;
        message.tollsAmountFormatted = "";
        message.totalLoadsAmount = 0;
        message.totalLoadsAmountFormatted = "";
        message.settlementDriverPayAmountType = "";
        message.trends = [];
        message.recurringTransactions = {};
        if (value !== undefined)
            reflectionMergePartial<SettlementGetReply_Settlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGetReply_Settlement): SettlementGetReply_Settlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string unique_key */ 4:
                    message.uniqueKey = reader.string();
                    break;
                case /* int64 settlement_friendly_id */ 5:
                    message.settlementFriendlyId = reader.int64().toNumber();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* string driver_id */ 7:
                    message.driverId = reader.string();
                    break;
                case /* string truck_id */ 8:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 9:
                    message.trailerId = reader.string();
                    break;
                case /* double avg_rpm */ 10:
                    message.avgRpm = reader.double();
                    break;
                case /* string avg_rpm_formatted */ 11:
                    message.avgRpmFormatted = reader.string();
                    break;
                case /* double company_net_amount */ 12:
                    message.companyNetAmount = reader.double();
                    break;
                case /* string company_net_amount_formatted */ 13:
                    message.companyNetAmountFormatted = reader.string();
                    break;
                case /* double credits_amount */ 14:
                    message.creditsAmount = reader.double();
                    break;
                case /* string credits_amount_formatted */ 15:
                    message.creditsAmountFormatted = reader.string();
                    break;
                case /* double debits_amount */ 16:
                    message.debitsAmount = reader.double();
                    break;
                case /* string debits_amount_formatted */ 17:
                    message.debitsAmountFormatted = reader.string();
                    break;
                case /* double driver_loads_amount */ 18:
                    message.driverLoadsAmount = reader.double();
                    break;
                case /* string driver_loads_amount_formatted */ 19:
                    message.driverLoadsAmountFormatted = reader.string();
                    break;
                case /* double driver_pay_amount */ 20:
                    message.driverPayAmount = reader.double();
                    break;
                case /* string driver_pay_amount_formatted */ 21:
                    message.driverPayAmountFormatted = reader.string();
                    break;
                case /* string driver_pay_amount_type */ 22:
                    message.driverPayAmountType = reader.string();
                    break;
                case /* double fuel_amount */ 23:
                    message.fuelAmount = reader.double();
                    break;
                case /* string fuel_amount_formatted */ 24:
                    message.fuelAmountFormatted = reader.string();
                    break;
                case /* double one_time_debits_amount */ 25:
                    message.oneTimeDebitsAmount = reader.double();
                    break;
                case /* string one_time_debits_amount_formatted */ 26:
                    message.oneTimeDebitsAmountFormatted = reader.string();
                    break;
                case /* double tolls_amount */ 27:
                    message.tollsAmount = reader.double();
                    break;
                case /* string tolls_amount_formatted */ 28:
                    message.tollsAmountFormatted = reader.string();
                    break;
                case /* double total_loads_amount */ 29:
                    message.totalLoadsAmount = reader.double();
                    break;
                case /* string total_loads_amount_formatted */ 30:
                    message.totalLoadsAmountFormatted = reader.string();
                    break;
                case /* string settlement_driver_pay_amount_type */ 31:
                    message.settlementDriverPayAmountType = reader.string();
                    break;
                case /* repeated SettlementGetReply.Settlement.Trend trends */ 32:
                    message.trends.push(SettlementGetReply_Settlement_Trend.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, SettlementGetReply.Settlement.Amount> recurring_transactions */ 33:
                    this.binaryReadMap33(message.recurringTransactions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap33(map: SettlementGetReply_Settlement["recurringTransactions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SettlementGetReply_Settlement["recurringTransactions"] | undefined, val: SettlementGetReply_Settlement["recurringTransactions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = SettlementGetReply_Settlement_Amount.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field SettlementGetReply.Settlement.recurring_transactions");
            }
        }
        map[key ?? ""] = val ?? SettlementGetReply_Settlement_Amount.create();
    }
    internalBinaryWrite(message: SettlementGetReply_Settlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string unique_key = 4; */
        if (message.uniqueKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uniqueKey);
        /* int64 settlement_friendly_id = 5; */
        if (message.settlementFriendlyId !== 0)
            writer.tag(5, WireType.Varint).int64(message.settlementFriendlyId);
        /* Settlements.Cycle.Period.Settlement.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* string driver_id = 7; */
        if (message.driverId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.driverId);
        /* string truck_id = 8; */
        if (message.truckId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 9; */
        if (message.trailerId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.trailerId);
        /* double avg_rpm = 10; */
        if (message.avgRpm !== 0)
            writer.tag(10, WireType.Bit64).double(message.avgRpm);
        /* string avg_rpm_formatted = 11; */
        if (message.avgRpmFormatted !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.avgRpmFormatted);
        /* double company_net_amount = 12; */
        if (message.companyNetAmount !== 0)
            writer.tag(12, WireType.Bit64).double(message.companyNetAmount);
        /* string company_net_amount_formatted = 13; */
        if (message.companyNetAmountFormatted !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.companyNetAmountFormatted);
        /* double credits_amount = 14; */
        if (message.creditsAmount !== 0)
            writer.tag(14, WireType.Bit64).double(message.creditsAmount);
        /* string credits_amount_formatted = 15; */
        if (message.creditsAmountFormatted !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.creditsAmountFormatted);
        /* double debits_amount = 16; */
        if (message.debitsAmount !== 0)
            writer.tag(16, WireType.Bit64).double(message.debitsAmount);
        /* string debits_amount_formatted = 17; */
        if (message.debitsAmountFormatted !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.debitsAmountFormatted);
        /* double driver_loads_amount = 18; */
        if (message.driverLoadsAmount !== 0)
            writer.tag(18, WireType.Bit64).double(message.driverLoadsAmount);
        /* string driver_loads_amount_formatted = 19; */
        if (message.driverLoadsAmountFormatted !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.driverLoadsAmountFormatted);
        /* double driver_pay_amount = 20; */
        if (message.driverPayAmount !== 0)
            writer.tag(20, WireType.Bit64).double(message.driverPayAmount);
        /* string driver_pay_amount_formatted = 21; */
        if (message.driverPayAmountFormatted !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.driverPayAmountFormatted);
        /* string driver_pay_amount_type = 22; */
        if (message.driverPayAmountType !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.driverPayAmountType);
        /* double fuel_amount = 23; */
        if (message.fuelAmount !== 0)
            writer.tag(23, WireType.Bit64).double(message.fuelAmount);
        /* string fuel_amount_formatted = 24; */
        if (message.fuelAmountFormatted !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.fuelAmountFormatted);
        /* double one_time_debits_amount = 25; */
        if (message.oneTimeDebitsAmount !== 0)
            writer.tag(25, WireType.Bit64).double(message.oneTimeDebitsAmount);
        /* string one_time_debits_amount_formatted = 26; */
        if (message.oneTimeDebitsAmountFormatted !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.oneTimeDebitsAmountFormatted);
        /* double tolls_amount = 27; */
        if (message.tollsAmount !== 0)
            writer.tag(27, WireType.Bit64).double(message.tollsAmount);
        /* string tolls_amount_formatted = 28; */
        if (message.tollsAmountFormatted !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.tollsAmountFormatted);
        /* double total_loads_amount = 29; */
        if (message.totalLoadsAmount !== 0)
            writer.tag(29, WireType.Bit64).double(message.totalLoadsAmount);
        /* string total_loads_amount_formatted = 30; */
        if (message.totalLoadsAmountFormatted !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.totalLoadsAmountFormatted);
        /* string settlement_driver_pay_amount_type = 31; */
        if (message.settlementDriverPayAmountType !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.settlementDriverPayAmountType);
        /* repeated SettlementGetReply.Settlement.Trend trends = 32; */
        for (let i = 0; i < message.trends.length; i++)
            SettlementGetReply_Settlement_Trend.internalBinaryWrite(message.trends[i], writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* map<string, SettlementGetReply.Settlement.Amount> recurring_transactions = 33; */
        for (let k of globalThis.Object.keys(message.recurringTransactions)) {
            writer.tag(33, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            SettlementGetReply_Settlement_Amount.internalBinaryWrite(message.recurringTransactions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGetReply.Settlement
 */
export const SettlementGetReply_Settlement = new SettlementGetReply_Settlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGetReply_Settlement_Trend$Type extends MessageType<SettlementGetReply_Settlement_Trend> {
    constructor() {
        super("SettlementGetReply.Settlement.Trend", [
            { no: 1, name: "entity", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Trend.Entity", Settlements_Cycle_Period_Settlement_Trend_Entity] },
            { no: 2, name: "amount_trend", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Trend.AmountTrend", Settlements_Cycle_Period_Settlement_Trend_AmountTrend] },
            { no: 3, name: "amount_percentage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementGetReply_Settlement_Trend>): SettlementGetReply_Settlement_Trend {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entity = 0;
        message.amountTrend = 0;
        message.amountPercentage = "";
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementGetReply_Settlement_Trend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGetReply_Settlement_Trend): SettlementGetReply_Settlement_Trend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Settlements.Cycle.Period.Settlement.Trend.Entity entity */ 1:
                    message.entity = reader.int32();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Trend.AmountTrend amount_trend */ 2:
                    message.amountTrend = reader.int32();
                    break;
                case /* string amount_percentage */ 3:
                    message.amountPercentage = reader.string();
                    break;
                case /* double amount */ 4:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementGetReply_Settlement_Trend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Settlements.Cycle.Period.Settlement.Trend.Entity entity = 1; */
        if (message.entity !== 0)
            writer.tag(1, WireType.Varint).int32(message.entity);
        /* Settlements.Cycle.Period.Settlement.Trend.AmountTrend amount_trend = 2; */
        if (message.amountTrend !== 0)
            writer.tag(2, WireType.Varint).int32(message.amountTrend);
        /* string amount_percentage = 3; */
        if (message.amountPercentage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amountPercentage);
        /* double amount = 4; */
        if (message.amount !== 0)
            writer.tag(4, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGetReply.Settlement.Trend
 */
export const SettlementGetReply_Settlement_Trend = new SettlementGetReply_Settlement_Trend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGetReply_Settlement_Amount$Type extends MessageType<SettlementGetReply_Settlement_Amount> {
    constructor() {
        super("SettlementGetReply.Settlement.Amount", [
            { no: 1, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount_status_class", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementGetReply_Settlement_Amount>): SettlementGetReply_Settlement_Amount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0;
        message.amountFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementGetReply_Settlement_Amount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGetReply_Settlement_Amount): SettlementGetReply_Settlement_Amount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double amount */ 1:
                    message.amount = reader.double();
                    break;
                case /* string amount_formatted */ 2:
                    message.amountFormatted = reader.string();
                    break;
                case /* optional string amount_status_class */ 3:
                    message.amountStatusClass = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementGetReply_Settlement_Amount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double amount = 1; */
        if (message.amount !== 0)
            writer.tag(1, WireType.Bit64).double(message.amount);
        /* string amount_formatted = 2; */
        if (message.amountFormatted !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amountFormatted);
        /* optional string amount_status_class = 3; */
        if (message.amountStatusClass !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.amountStatusClass);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGetReply.Settlement.Amount
 */
export const SettlementGetReply_Settlement_Amount = new SettlementGetReply_Settlement_Amount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchCreateSettlementsRequest$Type extends MessageType<BatchCreateSettlementsRequest> {
    constructor() {
        super("BatchCreateSettlementsRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BatchCreateSettlementsRequest_NewSettlement }
        ]);
    }
    create(value?: PartialMessage<BatchCreateSettlementsRequest>): BatchCreateSettlementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<BatchCreateSettlementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchCreateSettlementsRequest): BatchCreateSettlementsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated BatchCreateSettlementsRequest.NewSettlement settlements */ 1:
                    message.settlements.push(BatchCreateSettlementsRequest_NewSettlement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchCreateSettlementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated BatchCreateSettlementsRequest.NewSettlement settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            BatchCreateSettlementsRequest_NewSettlement.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BatchCreateSettlementsRequest
 */
export const BatchCreateSettlementsRequest = new BatchCreateSettlementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchCreateSettlementsRequest_NewSettlement$Type extends MessageType<BatchCreateSettlementsRequest_NewSettlement> {
    constructor() {
        super("BatchCreateSettlementsRequest.NewSettlement", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchCreateSettlementsRequest_NewSettlement>): BatchCreateSettlementsRequest_NewSettlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<BatchCreateSettlementsRequest_NewSettlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchCreateSettlementsRequest_NewSettlement): BatchCreateSettlementsRequest_NewSettlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string driver_id */ 3:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchCreateSettlementsRequest_NewSettlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string driver_id = 3; */
        if (message.driverId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BatchCreateSettlementsRequest.NewSettlement
 */
export const BatchCreateSettlementsRequest_NewSettlement = new BatchCreateSettlementsRequest_NewSettlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchCreateSettlementsReply$Type extends MessageType<BatchCreateSettlementsReply> {
    constructor() {
        super("BatchCreateSettlementsReply", [
            { no: 1, name: "errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BatchCreateSettlementsReply_Error }
        ]);
    }
    create(value?: PartialMessage<BatchCreateSettlementsReply>): BatchCreateSettlementsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.errors = [];
        if (value !== undefined)
            reflectionMergePartial<BatchCreateSettlementsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchCreateSettlementsReply): BatchCreateSettlementsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated BatchCreateSettlementsReply.Error errors */ 1:
                    message.errors.push(BatchCreateSettlementsReply_Error.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchCreateSettlementsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated BatchCreateSettlementsReply.Error errors = 1; */
        for (let i = 0; i < message.errors.length; i++)
            BatchCreateSettlementsReply_Error.internalBinaryWrite(message.errors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BatchCreateSettlementsReply
 */
export const BatchCreateSettlementsReply = new BatchCreateSettlementsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchCreateSettlementsReply_Error$Type extends MessageType<BatchCreateSettlementsReply_Error> {
    constructor() {
        super("BatchCreateSettlementsReply.Error", [
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchCreateSettlementsReply_Error>): BatchCreateSettlementsReply_Error {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<BatchCreateSettlementsReply_Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchCreateSettlementsReply_Error): BatchCreateSettlementsReply_Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchCreateSettlementsReply_Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BatchCreateSettlementsReply.Error
 */
export const BatchCreateSettlementsReply_Error = new BatchCreateSettlementsReply_Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSyncRequest$Type extends MessageType<SettlementSyncRequest> {
    constructor() {
        super("SettlementSyncRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementSyncRequest>): SettlementSyncRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementSyncRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSyncRequest): SettlementSyncRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSyncRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSyncRequest
 */
export const SettlementSyncRequest = new SettlementSyncRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSyncReply$Type extends MessageType<SettlementSyncReply> {
    constructor() {
        super("SettlementSyncReply", []);
    }
    create(value?: PartialMessage<SettlementSyncReply>): SettlementSyncReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementSyncReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSyncReply): SettlementSyncReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementSyncReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSyncReply
 */
export const SettlementSyncReply = new SettlementSyncReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDeleteRequest$Type extends MessageType<SettlementDeleteRequest> {
    constructor() {
        super("SettlementDeleteRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementDeleteRequest>): SettlementDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDeleteRequest): SettlementDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDeleteRequest
 */
export const SettlementDeleteRequest = new SettlementDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDeleteReply$Type extends MessageType<SettlementDeleteReply> {
    constructor() {
        super("SettlementDeleteReply", []);
    }
    create(value?: PartialMessage<SettlementDeleteReply>): SettlementDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDeleteReply): SettlementDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDeleteReply
 */
export const SettlementDeleteReply = new SettlementDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDeleteBatchRequest$Type extends MessageType<SettlementDeleteBatchRequest> {
    constructor() {
        super("SettlementDeleteBatchRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementDeleteBatchRequest_SettlementID }
        ]);
    }
    create(value?: PartialMessage<SettlementDeleteBatchRequest>): SettlementDeleteBatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementDeleteBatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDeleteBatchRequest): SettlementDeleteBatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementDeleteBatchRequest.SettlementID settlements */ 1:
                    message.settlements.push(SettlementDeleteBatchRequest_SettlementID.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementDeleteBatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementDeleteBatchRequest.SettlementID settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            SettlementDeleteBatchRequest_SettlementID.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDeleteBatchRequest
 */
export const SettlementDeleteBatchRequest = new SettlementDeleteBatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDeleteBatchRequest_SettlementID$Type extends MessageType<SettlementDeleteBatchRequest_SettlementID> {
    constructor() {
        super("SettlementDeleteBatchRequest.SettlementID", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementDeleteBatchRequest_SettlementID>): SettlementDeleteBatchRequest_SettlementID {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementDeleteBatchRequest_SettlementID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDeleteBatchRequest_SettlementID): SettlementDeleteBatchRequest_SettlementID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementDeleteBatchRequest_SettlementID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDeleteBatchRequest.SettlementID
 */
export const SettlementDeleteBatchRequest_SettlementID = new SettlementDeleteBatchRequest_SettlementID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDeleteBatchReply$Type extends MessageType<SettlementDeleteBatchReply> {
    constructor() {
        super("SettlementDeleteBatchReply", []);
    }
    create(value?: PartialMessage<SettlementDeleteBatchReply>): SettlementDeleteBatchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementDeleteBatchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDeleteBatchReply): SettlementDeleteBatchReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementDeleteBatchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDeleteBatchReply
 */
export const SettlementDeleteBatchReply = new SettlementDeleteBatchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeriodSyncRequest$Type extends MessageType<PeriodSyncRequest> {
    constructor() {
        super("PeriodSyncRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PeriodSyncRequest>): PeriodSyncRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<PeriodSyncRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeriodSyncRequest): PeriodSyncRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeriodSyncRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeriodSyncRequest
 */
export const PeriodSyncRequest = new PeriodSyncRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeriodSyncReply$Type extends MessageType<PeriodSyncReply> {
    constructor() {
        super("PeriodSyncReply", []);
    }
    create(value?: PartialMessage<PeriodSyncReply>): PeriodSyncReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PeriodSyncReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeriodSyncReply): PeriodSyncReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PeriodSyncReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeriodSyncReply
 */
export const PeriodSyncReply = new PeriodSyncReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementAssignTruckRequest$Type extends MessageType<SettlementAssignTruckRequest> {
    constructor() {
        super("SettlementAssignTruckRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementAssignTruckRequest>): SettlementAssignTruckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementAssignTruckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementAssignTruckRequest): SettlementAssignTruckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string truck_id */ 4:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementAssignTruckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string truck_id = 4; */
        if (message.truckId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementAssignTruckRequest
 */
export const SettlementAssignTruckRequest = new SettlementAssignTruckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementAssignTruckReply$Type extends MessageType<SettlementAssignTruckReply> {
    constructor() {
        super("SettlementAssignTruckReply", []);
    }
    create(value?: PartialMessage<SettlementAssignTruckReply>): SettlementAssignTruckReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementAssignTruckReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementAssignTruckReply): SettlementAssignTruckReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementAssignTruckReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementAssignTruckReply
 */
export const SettlementAssignTruckReply = new SettlementAssignTruckReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementAssignVendorRequest$Type extends MessageType<SettlementAssignVendorRequest> {
    constructor() {
        super("SettlementAssignVendorRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementAssignVendorRequest>): SettlementAssignVendorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.vendorId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementAssignVendorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementAssignVendorRequest): SettlementAssignVendorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string vendor_id */ 4:
                    message.vendorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementAssignVendorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string vendor_id = 4; */
        if (message.vendorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vendorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementAssignVendorRequest
 */
export const SettlementAssignVendorRequest = new SettlementAssignVendorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementAssignVendorReply$Type extends MessageType<SettlementAssignVendorReply> {
    constructor() {
        super("SettlementAssignVendorReply", []);
    }
    create(value?: PartialMessage<SettlementAssignVendorReply>): SettlementAssignVendorReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementAssignVendorReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementAssignVendorReply): SettlementAssignVendorReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementAssignVendorReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementAssignVendorReply
 */
export const SettlementAssignVendorReply = new SettlementAssignVendorReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementUnassignVendorRequest$Type extends MessageType<SettlementUnassignVendorRequest> {
    constructor() {
        super("SettlementUnassignVendorRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementUnassignVendorRequest>): SettlementUnassignVendorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementUnassignVendorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementUnassignVendorRequest): SettlementUnassignVendorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementUnassignVendorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementUnassignVendorRequest
 */
export const SettlementUnassignVendorRequest = new SettlementUnassignVendorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementUnassignVendorReply$Type extends MessageType<SettlementUnassignVendorReply> {
    constructor() {
        super("SettlementUnassignVendorReply", []);
    }
    create(value?: PartialMessage<SettlementUnassignVendorReply>): SettlementUnassignVendorReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementUnassignVendorReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementUnassignVendorReply): SettlementUnassignVendorReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementUnassignVendorReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementUnassignVendorReply
 */
export const SettlementUnassignVendorReply = new SettlementUnassignVendorReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGeneratePDFRequest$Type extends MessageType<SettlementGeneratePDFRequest> {
    constructor() {
        super("SettlementGeneratePDFRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementGeneratePDFRequest>): SettlementGeneratePDFRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementGeneratePDFRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGeneratePDFRequest): SettlementGeneratePDFRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementGeneratePDFRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGeneratePDFRequest
 */
export const SettlementGeneratePDFRequest = new SettlementGeneratePDFRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementGeneratePDFReply$Type extends MessageType<SettlementGeneratePDFReply> {
    constructor() {
        super("SettlementGeneratePDFReply", [
            { no: 1, name: "pdf_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementGeneratePDFReply>): SettlementGeneratePDFReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pdfUrl = "";
        message.filename = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementGeneratePDFReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementGeneratePDFReply): SettlementGeneratePDFReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pdf_url */ 1:
                    message.pdfUrl = reader.string();
                    break;
                case /* string filename */ 2:
                    message.filename = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementGeneratePDFReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pdf_url = 1; */
        if (message.pdfUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pdfUrl);
        /* string filename = 2; */
        if (message.filename !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementGeneratePDFReply
 */
export const SettlementGeneratePDFReply = new SettlementGeneratePDFReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementBatchExportRequest$Type extends MessageType<SettlementBatchExportRequest> {
    constructor() {
        super("SettlementBatchExportRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementBatchExportRequest_SettlementID }
        ]);
    }
    create(value?: PartialMessage<SettlementBatchExportRequest>): SettlementBatchExportRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementBatchExportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementBatchExportRequest): SettlementBatchExportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementBatchExportRequest.SettlementID settlements */ 1:
                    message.settlements.push(SettlementBatchExportRequest_SettlementID.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementBatchExportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementBatchExportRequest.SettlementID settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            SettlementBatchExportRequest_SettlementID.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementBatchExportRequest
 */
export const SettlementBatchExportRequest = new SettlementBatchExportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementBatchExportRequest_SettlementID$Type extends MessageType<SettlementBatchExportRequest_SettlementID> {
    constructor() {
        super("SettlementBatchExportRequest.SettlementID", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementBatchExportRequest_SettlementID>): SettlementBatchExportRequest_SettlementID {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementBatchExportRequest_SettlementID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementBatchExportRequest_SettlementID): SettlementBatchExportRequest_SettlementID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementBatchExportRequest_SettlementID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementBatchExportRequest.SettlementID
 */
export const SettlementBatchExportRequest_SettlementID = new SettlementBatchExportRequest_SettlementID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementBatchExportReply$Type extends MessageType<SettlementBatchExportReply> {
    constructor() {
        super("SettlementBatchExportReply", [
            { no: 1, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementBatchExportReply>): SettlementBatchExportReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementBatchExportReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementBatchExportReply): SettlementBatchExportReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_id */ 1:
                    message.fileId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementBatchExportReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_id = 1; */
        if (message.fileId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementBatchExportReply
 */
export const SettlementBatchExportReply = new SettlementBatchExportReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendSettlementRequest$Type extends MessageType<SendSettlementRequest> {
    constructor() {
        super("SendSettlementRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "send_to_company_cc_emails", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "attach_documents", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "recipient_driver", kind: "message", T: () => SendSettlementRequest_Recipient },
            { no: 11, name: "recipient_vendor", kind: "message", T: () => SendSettlementRequest_Recipient }
        ]);
    }
    create(value?: PartialMessage<SendSettlementRequest>): SendSettlementRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.sendToCompanyCcEmails = false;
        message.attachDocuments = false;
        if (value !== undefined)
            reflectionMergePartial<SendSettlementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendSettlementRequest): SendSettlementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* bool send_to_company_cc_emails */ 6:
                    message.sendToCompanyCcEmails = reader.bool();
                    break;
                case /* bool attach_documents */ 9:
                    message.attachDocuments = reader.bool();
                    break;
                case /* optional SendSettlementRequest.Recipient recipient_driver */ 10:
                    message.recipientDriver = SendSettlementRequest_Recipient.internalBinaryRead(reader, reader.uint32(), options, message.recipientDriver);
                    break;
                case /* optional SendSettlementRequest.Recipient recipient_vendor */ 11:
                    message.recipientVendor = SendSettlementRequest_Recipient.internalBinaryRead(reader, reader.uint32(), options, message.recipientVendor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendSettlementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* bool send_to_company_cc_emails = 6; */
        if (message.sendToCompanyCcEmails !== false)
            writer.tag(6, WireType.Varint).bool(message.sendToCompanyCcEmails);
        /* bool attach_documents = 9; */
        if (message.attachDocuments !== false)
            writer.tag(9, WireType.Varint).bool(message.attachDocuments);
        /* optional SendSettlementRequest.Recipient recipient_driver = 10; */
        if (message.recipientDriver)
            SendSettlementRequest_Recipient.internalBinaryWrite(message.recipientDriver, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional SendSettlementRequest.Recipient recipient_vendor = 11; */
        if (message.recipientVendor)
            SendSettlementRequest_Recipient.internalBinaryWrite(message.recipientVendor, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendSettlementRequest
 */
export const SendSettlementRequest = new SendSettlementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendSettlementRequest_Recipient$Type extends MessageType<SendSettlementRequest_Recipient> {
    constructor() {
        super("SendSettlementRequest.Recipient", [
            { no: 4, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "phone_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "subject", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendSettlementRequest_Recipient>): SendSettlementRequest_Recipient {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subject = "";
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<SendSettlementRequest_Recipient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendSettlementRequest_Recipient): SendSettlementRequest_Recipient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string email */ 4:
                    message.email = reader.string();
                    break;
                case /* optional string phone_number */ 5:
                    message.phoneNumber = reader.string();
                    break;
                case /* string subject */ 7:
                    message.subject = reader.string();
                    break;
                case /* string body */ 8:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendSettlementRequest_Recipient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string email = 4; */
        if (message.email !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* optional string phone_number = 5; */
        if (message.phoneNumber !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.phoneNumber);
        /* string subject = 7; */
        if (message.subject !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.subject);
        /* string body = 8; */
        if (message.body !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendSettlementRequest.Recipient
 */
export const SendSettlementRequest_Recipient = new SendSettlementRequest_Recipient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendSettlementReply$Type extends MessageType<SendSettlementReply> {
    constructor() {
        super("SendSettlementReply", []);
    }
    create(value?: PartialMessage<SendSettlementReply>): SendSettlementReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendSettlementReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendSettlementReply): SendSettlementReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendSettlementReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendSettlementReply
 */
export const SendSettlementReply = new SendSettlementReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchPreviewRequest$Type extends MessageType<SettlementSendBatchPreviewRequest> {
    constructor() {
        super("SettlementSendBatchPreviewRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementSendBatchPreviewRequest_SettlementID }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchPreviewRequest>): SettlementSendBatchPreviewRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchPreviewRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchPreviewRequest): SettlementSendBatchPreviewRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementSendBatchPreviewRequest.SettlementID settlements */ 1:
                    message.settlements.push(SettlementSendBatchPreviewRequest_SettlementID.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchPreviewRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementSendBatchPreviewRequest.SettlementID settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            SettlementSendBatchPreviewRequest_SettlementID.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchPreviewRequest
 */
export const SettlementSendBatchPreviewRequest = new SettlementSendBatchPreviewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchPreviewRequest_SettlementID$Type extends MessageType<SettlementSendBatchPreviewRequest_SettlementID> {
    constructor() {
        super("SettlementSendBatchPreviewRequest.SettlementID", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchPreviewRequest_SettlementID>): SettlementSendBatchPreviewRequest_SettlementID {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchPreviewRequest_SettlementID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchPreviewRequest_SettlementID): SettlementSendBatchPreviewRequest_SettlementID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchPreviewRequest_SettlementID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchPreviewRequest.SettlementID
 */
export const SettlementSendBatchPreviewRequest_SettlementID = new SettlementSendBatchPreviewRequest_SettlementID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchPreviewReply$Type extends MessageType<SettlementSendBatchPreviewReply> {
    constructor() {
        super("SettlementSendBatchPreviewReply", [
            { no: 1, name: "previews", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementSendBatchPreviewReply_Preview }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchPreviewReply>): SettlementSendBatchPreviewReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.previews = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchPreviewReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchPreviewReply): SettlementSendBatchPreviewReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementSendBatchPreviewReply.Preview previews */ 1:
                    message.previews.push(SettlementSendBatchPreviewReply_Preview.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchPreviewReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementSendBatchPreviewReply.Preview previews = 1; */
        for (let i = 0; i < message.previews.length; i++)
            SettlementSendBatchPreviewReply_Preview.internalBinaryWrite(message.previews[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchPreviewReply
 */
export const SettlementSendBatchPreviewReply = new SettlementSendBatchPreviewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchPreviewReply_Preview$Type extends MessageType<SettlementSendBatchPreviewReply_Preview> {
    constructor() {
        super("SettlementSendBatchPreviewReply.Preview", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] },
            { no: 5, name: "friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "recipient", kind: "enum", T: () => ["SettlementSendBatchPreviewReply.Preview.Recipient", SettlementSendBatchPreviewReply_Preview_Recipient, "RECIPIENT_"] }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchPreviewReply_Preview>): SettlementSendBatchPreviewReply_Preview {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.status = 0;
        message.friendlyId = 0;
        message.driverId = "";
        message.truckId = "";
        message.vendorId = "";
        message.recipient = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchPreviewReply_Preview>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchPreviewReply_Preview): SettlementSendBatchPreviewReply_Preview {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status status */ 4:
                    message.status = reader.int32();
                    break;
                case /* int64 friendly_id */ 5:
                    message.friendlyId = reader.int64().toNumber();
                    break;
                case /* string driver_id */ 6:
                    message.driverId = reader.string();
                    break;
                case /* string truck_id */ 7:
                    message.truckId = reader.string();
                    break;
                case /* string vendor_id */ 8:
                    message.vendorId = reader.string();
                    break;
                case /* SettlementSendBatchPreviewReply.Preview.Recipient recipient */ 11:
                    message.recipient = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchPreviewReply_Preview, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* Settlements.Cycle.Period.Settlement.Status status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* int64 friendly_id = 5; */
        if (message.friendlyId !== 0)
            writer.tag(5, WireType.Varint).int64(message.friendlyId);
        /* string driver_id = 6; */
        if (message.driverId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.driverId);
        /* string truck_id = 7; */
        if (message.truckId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.truckId);
        /* string vendor_id = 8; */
        if (message.vendorId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.vendorId);
        /* SettlementSendBatchPreviewReply.Preview.Recipient recipient = 11; */
        if (message.recipient !== 0)
            writer.tag(11, WireType.Varint).int32(message.recipient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchPreviewReply.Preview
 */
export const SettlementSendBatchPreviewReply_Preview = new SettlementSendBatchPreviewReply_Preview$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchRequest$Type extends MessageType<SettlementSendBatchRequest> {
    constructor() {
        super("SettlementSendBatchRequest", [
            { no: 1, name: "sends", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementSendBatchRequest_Send }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchRequest>): SettlementSendBatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sends = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchRequest): SettlementSendBatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementSendBatchRequest.Send sends */ 1:
                    message.sends.push(SettlementSendBatchRequest_Send.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementSendBatchRequest.Send sends = 1; */
        for (let i = 0; i < message.sends.length; i++)
            SettlementSendBatchRequest_Send.internalBinaryWrite(message.sends[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchRequest
 */
export const SettlementSendBatchRequest = new SettlementSendBatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchRequest_Send$Type extends MessageType<SettlementSendBatchRequest_Send> {
    constructor() {
        super("SettlementSendBatchRequest.Send", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "to_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "to_phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "email_subject", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchRequest_Send>): SettlementSendBatchRequest_Send {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.toEmail = "";
        message.toPhone = "";
        message.emailSubject = "";
        message.emailBody = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchRequest_Send>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchRequest_Send): SettlementSendBatchRequest_Send {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string to_email */ 4:
                    message.toEmail = reader.string();
                    break;
                case /* string to_phone */ 5:
                    message.toPhone = reader.string();
                    break;
                case /* string email_subject */ 7:
                    message.emailSubject = reader.string();
                    break;
                case /* string email_body */ 8:
                    message.emailBody = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchRequest_Send, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string to_email = 4; */
        if (message.toEmail !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toEmail);
        /* string to_phone = 5; */
        if (message.toPhone !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toPhone);
        /* string email_subject = 7; */
        if (message.emailSubject !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.emailSubject);
        /* string email_body = 8; */
        if (message.emailBody !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.emailBody);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchRequest.Send
 */
export const SettlementSendBatchRequest_Send = new SettlementSendBatchRequest_Send$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementSendBatchReply$Type extends MessageType<SettlementSendBatchReply> {
    constructor() {
        super("SettlementSendBatchReply", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "send_status", kind: "enum", T: () => ["SettlementSendBatchReply.SendStatus", SettlementSendBatchReply_SendStatus] },
            { no: 5, name: "new_settlement_status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] },
            { no: 6, name: "error_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementSendBatchReply>): SettlementSendBatchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.sendStatus = 0;
        message.newSettlementStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementSendBatchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementSendBatchReply): SettlementSendBatchReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* SettlementSendBatchReply.SendStatus send_status */ 4:
                    message.sendStatus = reader.int32();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status new_settlement_status */ 5:
                    message.newSettlementStatus = reader.int32();
                    break;
                case /* optional string error_message */ 6:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementSendBatchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* SettlementSendBatchReply.SendStatus send_status = 4; */
        if (message.sendStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.sendStatus);
        /* Settlements.Cycle.Period.Settlement.Status new_settlement_status = 5; */
        if (message.newSettlementStatus !== 0)
            writer.tag(5, WireType.Varint).int32(message.newSettlementStatus);
        /* optional string error_message = 6; */
        if (message.errorMessage !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementSendBatchReply
 */
export const SettlementSendBatchReply = new SettlementSendBatchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementAssignLoadRequest$Type extends MessageType<SettlementAssignLoadRequest> {
    constructor() {
        super("SettlementAssignLoadRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementAssignLoadRequest>): SettlementAssignLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementAssignLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementAssignLoadRequest): SettlementAssignLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string load_id */ 4:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementAssignLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string load_id = 4; */
        if (message.loadId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementAssignLoadRequest
 */
export const SettlementAssignLoadRequest = new SettlementAssignLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementAssignLoadReply$Type extends MessageType<SettlementAssignLoadReply> {
    constructor() {
        super("SettlementAssignLoadReply", []);
    }
    create(value?: PartialMessage<SettlementAssignLoadReply>): SettlementAssignLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementAssignLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementAssignLoadReply): SettlementAssignLoadReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementAssignLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementAssignLoadReply
 */
export const SettlementAssignLoadReply = new SettlementAssignLoadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRemoveLoadRequest$Type extends MessageType<SettlementRemoveLoadRequest> {
    constructor() {
        super("SettlementRemoveLoadRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementRemoveLoadRequest>): SettlementRemoveLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementRemoveLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRemoveLoadRequest): SettlementRemoveLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string load_id */ 4:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRemoveLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string load_id = 4; */
        if (message.loadId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRemoveLoadRequest
 */
export const SettlementRemoveLoadRequest = new SettlementRemoveLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRemoveLoadReply$Type extends MessageType<SettlementRemoveLoadReply> {
    constructor() {
        super("SettlementRemoveLoadReply", []);
    }
    create(value?: PartialMessage<SettlementRemoveLoadReply>): SettlementRemoveLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementRemoveLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRemoveLoadReply): SettlementRemoveLoadReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementRemoveLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRemoveLoadReply
 */
export const SettlementRemoveLoadReply = new SettlementRemoveLoadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementUpdateStatusRequest$Type extends MessageType<SettlementUpdateStatusRequest> {
    constructor() {
        super("SettlementUpdateStatusRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] }
        ]);
    }
    create(value?: PartialMessage<SettlementUpdateStatusRequest>): SettlementUpdateStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementUpdateStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementUpdateStatusRequest): SettlementUpdateStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status status */ 4:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementUpdateStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* Settlements.Cycle.Period.Settlement.Status status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementUpdateStatusRequest
 */
export const SettlementUpdateStatusRequest = new SettlementUpdateStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementUpdateStatusReply$Type extends MessageType<SettlementUpdateStatusReply> {
    constructor() {
        super("SettlementUpdateStatusReply", []);
    }
    create(value?: PartialMessage<SettlementUpdateStatusReply>): SettlementUpdateStatusReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementUpdateStatusReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementUpdateStatusReply): SettlementUpdateStatusReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementUpdateStatusReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementUpdateStatusReply
 */
export const SettlementUpdateStatusReply = new SettlementUpdateStatusReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementBatchUpdateStatusRequest$Type extends MessageType<SettlementBatchUpdateStatusRequest> {
    constructor() {
        super("SettlementBatchUpdateStatusRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementBatchUpdateStatusRequest_SettlementUpdate },
            { no: 2, name: "status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] }
        ]);
    }
    create(value?: PartialMessage<SettlementBatchUpdateStatusRequest>): SettlementBatchUpdateStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementBatchUpdateStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementBatchUpdateStatusRequest): SettlementBatchUpdateStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementBatchUpdateStatusRequest.SettlementUpdate settlements */ 1:
                    message.settlements.push(SettlementBatchUpdateStatusRequest_SettlementUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementBatchUpdateStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementBatchUpdateStatusRequest.SettlementUpdate settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            SettlementBatchUpdateStatusRequest_SettlementUpdate.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Settlements.Cycle.Period.Settlement.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementBatchUpdateStatusRequest
 */
export const SettlementBatchUpdateStatusRequest = new SettlementBatchUpdateStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementBatchUpdateStatusRequest_SettlementUpdate$Type extends MessageType<SettlementBatchUpdateStatusRequest_SettlementUpdate> {
    constructor() {
        super("SettlementBatchUpdateStatusRequest.SettlementUpdate", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementBatchUpdateStatusRequest_SettlementUpdate>): SettlementBatchUpdateStatusRequest_SettlementUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementBatchUpdateStatusRequest_SettlementUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementBatchUpdateStatusRequest_SettlementUpdate): SettlementBatchUpdateStatusRequest_SettlementUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementBatchUpdateStatusRequest_SettlementUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementBatchUpdateStatusRequest.SettlementUpdate
 */
export const SettlementBatchUpdateStatusRequest_SettlementUpdate = new SettlementBatchUpdateStatusRequest_SettlementUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementBatchUpdateStatusReply$Type extends MessageType<SettlementBatchUpdateStatusReply> {
    constructor() {
        super("SettlementBatchUpdateStatusReply", []);
    }
    create(value?: PartialMessage<SettlementBatchUpdateStatusReply>): SettlementBatchUpdateStatusReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementBatchUpdateStatusReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementBatchUpdateStatusReply): SettlementBatchUpdateStatusReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementBatchUpdateStatusReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementBatchUpdateStatusReply
 */
export const SettlementBatchUpdateStatusReply = new SettlementBatchUpdateStatusReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDriverPayDeductFuelUpdateRequest$Type extends MessageType<SettlementDriverPayDeductFuelUpdateRequest> {
    constructor() {
        super("SettlementDriverPayDeductFuelUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_pay_deduct_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementDriverPayDeductFuelUpdateRequest>): SettlementDriverPayDeductFuelUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.driverPayDeductFuel = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementDriverPayDeductFuelUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDriverPayDeductFuelUpdateRequest): SettlementDriverPayDeductFuelUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* bool driver_pay_deduct_fuel */ 4:
                    message.driverPayDeductFuel = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementDriverPayDeductFuelUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* bool driver_pay_deduct_fuel = 4; */
        if (message.driverPayDeductFuel !== false)
            writer.tag(4, WireType.Varint).bool(message.driverPayDeductFuel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDriverPayDeductFuelUpdateRequest
 */
export const SettlementDriverPayDeductFuelUpdateRequest = new SettlementDriverPayDeductFuelUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDriverPayDeductFuelUpdateReply$Type extends MessageType<SettlementDriverPayDeductFuelUpdateReply> {
    constructor() {
        super("SettlementDriverPayDeductFuelUpdateReply", []);
    }
    create(value?: PartialMessage<SettlementDriverPayDeductFuelUpdateReply>): SettlementDriverPayDeductFuelUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementDriverPayDeductFuelUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDriverPayDeductFuelUpdateReply): SettlementDriverPayDeductFuelUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementDriverPayDeductFuelUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDriverPayDeductFuelUpdateReply
 */
export const SettlementDriverPayDeductFuelUpdateReply = new SettlementDriverPayDeductFuelUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDriverPayDeductTollsUpdateRequest$Type extends MessageType<SettlementDriverPayDeductTollsUpdateRequest> {
    constructor() {
        super("SettlementDriverPayDeductTollsUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_pay_deduct_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementDriverPayDeductTollsUpdateRequest>): SettlementDriverPayDeductTollsUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.driverPayDeductTolls = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementDriverPayDeductTollsUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDriverPayDeductTollsUpdateRequest): SettlementDriverPayDeductTollsUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* bool driver_pay_deduct_tolls */ 4:
                    message.driverPayDeductTolls = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementDriverPayDeductTollsUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* bool driver_pay_deduct_tolls = 4; */
        if (message.driverPayDeductTolls !== false)
            writer.tag(4, WireType.Varint).bool(message.driverPayDeductTolls);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDriverPayDeductTollsUpdateRequest
 */
export const SettlementDriverPayDeductTollsUpdateRequest = new SettlementDriverPayDeductTollsUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementDriverPayDeductTollsUpdateReply$Type extends MessageType<SettlementDriverPayDeductTollsUpdateReply> {
    constructor() {
        super("SettlementDriverPayDeductTollsUpdateReply", []);
    }
    create(value?: PartialMessage<SettlementDriverPayDeductTollsUpdateReply>): SettlementDriverPayDeductTollsUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementDriverPayDeductTollsUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementDriverPayDeductTollsUpdateReply): SettlementDriverPayDeductTollsUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementDriverPayDeductTollsUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementDriverPayDeductTollsUpdateReply
 */
export const SettlementDriverPayDeductTollsUpdateReply = new SettlementDriverPayDeductTollsUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementFuelDiscountsEnabledUpdateRequest$Type extends MessageType<SettlementFuelDiscountsEnabledUpdateRequest> {
    constructor() {
        super("SettlementFuelDiscountsEnabledUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fuel_discounts_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementFuelDiscountsEnabledUpdateRequest>): SettlementFuelDiscountsEnabledUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.fuelDiscountsEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementFuelDiscountsEnabledUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementFuelDiscountsEnabledUpdateRequest): SettlementFuelDiscountsEnabledUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* bool fuel_discounts_enabled */ 4:
                    message.fuelDiscountsEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementFuelDiscountsEnabledUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* bool fuel_discounts_enabled = 4; */
        if (message.fuelDiscountsEnabled !== false)
            writer.tag(4, WireType.Varint).bool(message.fuelDiscountsEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementFuelDiscountsEnabledUpdateRequest
 */
export const SettlementFuelDiscountsEnabledUpdateRequest = new SettlementFuelDiscountsEnabledUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementFuelDiscountsEnabledUpdateReply$Type extends MessageType<SettlementFuelDiscountsEnabledUpdateReply> {
    constructor() {
        super("SettlementFuelDiscountsEnabledUpdateReply", []);
    }
    create(value?: PartialMessage<SettlementFuelDiscountsEnabledUpdateReply>): SettlementFuelDiscountsEnabledUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementFuelDiscountsEnabledUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementFuelDiscountsEnabledUpdateReply): SettlementFuelDiscountsEnabledUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementFuelDiscountsEnabledUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementFuelDiscountsEnabledUpdateReply
 */
export const SettlementFuelDiscountsEnabledUpdateReply = new SettlementFuelDiscountsEnabledUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementPayDateUpdateRequest$Type extends MessageType<SettlementPayDateUpdateRequest> {
    constructor() {
        super("SettlementPayDateUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pay_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementPayDateUpdateRequest>): SettlementPayDateUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.payDate = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementPayDateUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementPayDateUpdateRequest): SettlementPayDateUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string pay_date */ 4:
                    message.payDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementPayDateUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string pay_date = 4; */
        if (message.payDate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.payDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementPayDateUpdateRequest
 */
export const SettlementPayDateUpdateRequest = new SettlementPayDateUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementPayDateUpdateReply$Type extends MessageType<SettlementPayDateUpdateReply> {
    constructor() {
        super("SettlementPayDateUpdateReply", []);
    }
    create(value?: PartialMessage<SettlementPayDateUpdateReply>): SettlementPayDateUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementPayDateUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementPayDateUpdateReply): SettlementPayDateUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementPayDateUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementPayDateUpdateReply
 */
export const SettlementPayDateUpdateReply = new SettlementPayDateUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTollAssignRequest$Type extends MessageType<SettlementTollAssignRequest> {
    constructor() {
        super("SettlementTollAssignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "toll_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTollAssignRequest>): SettlementTollAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.tollTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTollAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTollAssignRequest): SettlementTollAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string toll_transaction_id */ 4:
                    message.tollTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTollAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string toll_transaction_id = 4; */
        if (message.tollTransactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tollTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTollAssignRequest
 */
export const SettlementTollAssignRequest = new SettlementTollAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTollAssignReply$Type extends MessageType<SettlementTollAssignReply> {
    constructor() {
        super("SettlementTollAssignReply", []);
    }
    create(value?: PartialMessage<SettlementTollAssignReply>): SettlementTollAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTollAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTollAssignReply): SettlementTollAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTollAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTollAssignReply
 */
export const SettlementTollAssignReply = new SettlementTollAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTollUnassignRequest$Type extends MessageType<SettlementTollUnassignRequest> {
    constructor() {
        super("SettlementTollUnassignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "toll_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTollUnassignRequest>): SettlementTollUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.tollTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTollUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTollUnassignRequest): SettlementTollUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string toll_transaction_id */ 4:
                    message.tollTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTollUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string toll_transaction_id = 4; */
        if (message.tollTransactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tollTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTollUnassignRequest
 */
export const SettlementTollUnassignRequest = new SettlementTollUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTollUnassignReply$Type extends MessageType<SettlementTollUnassignReply> {
    constructor() {
        super("SettlementTollUnassignReply", []);
    }
    create(value?: PartialMessage<SettlementTollUnassignReply>): SettlementTollUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTollUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTollUnassignReply): SettlementTollUnassignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTollUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTollUnassignReply
 */
export const SettlementTollUnassignReply = new SettlementTollUnassignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementManifestAssignRequest$Type extends MessageType<SettlementManifestAssignRequest> {
    constructor() {
        super("SettlementManifestAssignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementManifestAssignRequest>): SettlementManifestAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementManifestAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementManifestAssignRequest): SettlementManifestAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string manifest_id */ 4:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementManifestAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string manifest_id = 4; */
        if (message.manifestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementManifestAssignRequest
 */
export const SettlementManifestAssignRequest = new SettlementManifestAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementManifestAssignReply$Type extends MessageType<SettlementManifestAssignReply> {
    constructor() {
        super("SettlementManifestAssignReply", []);
    }
    create(value?: PartialMessage<SettlementManifestAssignReply>): SettlementManifestAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementManifestAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementManifestAssignReply): SettlementManifestAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementManifestAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementManifestAssignReply
 */
export const SettlementManifestAssignReply = new SettlementManifestAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementManifestUnassignRequest$Type extends MessageType<SettlementManifestUnassignRequest> {
    constructor() {
        super("SettlementManifestUnassignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementManifestUnassignRequest>): SettlementManifestUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementManifestUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementManifestUnassignRequest): SettlementManifestUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string manifest_id */ 4:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementManifestUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string manifest_id = 4; */
        if (message.manifestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementManifestUnassignRequest
 */
export const SettlementManifestUnassignRequest = new SettlementManifestUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementManifestUnassignReply$Type extends MessageType<SettlementManifestUnassignReply> {
    constructor() {
        super("SettlementManifestUnassignReply", []);
    }
    create(value?: PartialMessage<SettlementManifestUnassignReply>): SettlementManifestUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementManifestUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementManifestUnassignReply): SettlementManifestUnassignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementManifestUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementManifestUnassignReply
 */
export const SettlementManifestUnassignReply = new SettlementManifestUnassignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementFuelTransactionAssignRequest$Type extends MessageType<SettlementFuelTransactionAssignRequest> {
    constructor() {
        super("SettlementFuelTransactionAssignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementFuelTransactionAssignRequest>): SettlementFuelTransactionAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.fuelTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementFuelTransactionAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementFuelTransactionAssignRequest): SettlementFuelTransactionAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string fuel_transaction_id */ 4:
                    message.fuelTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementFuelTransactionAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string fuel_transaction_id = 4; */
        if (message.fuelTransactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fuelTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementFuelTransactionAssignRequest
 */
export const SettlementFuelTransactionAssignRequest = new SettlementFuelTransactionAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementFuelTransactionAssignReply$Type extends MessageType<SettlementFuelTransactionAssignReply> {
    constructor() {
        super("SettlementFuelTransactionAssignReply", []);
    }
    create(value?: PartialMessage<SettlementFuelTransactionAssignReply>): SettlementFuelTransactionAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementFuelTransactionAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementFuelTransactionAssignReply): SettlementFuelTransactionAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementFuelTransactionAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementFuelTransactionAssignReply
 */
export const SettlementFuelTransactionAssignReply = new SettlementFuelTransactionAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementFuelTransactionUnassignRequest$Type extends MessageType<SettlementFuelTransactionUnassignRequest> {
    constructor() {
        super("SettlementFuelTransactionUnassignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementFuelTransactionUnassignRequest>): SettlementFuelTransactionUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.fuelTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementFuelTransactionUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementFuelTransactionUnassignRequest): SettlementFuelTransactionUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string fuel_transaction_id */ 4:
                    message.fuelTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementFuelTransactionUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string fuel_transaction_id = 4; */
        if (message.fuelTransactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fuelTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementFuelTransactionUnassignRequest
 */
export const SettlementFuelTransactionUnassignRequest = new SettlementFuelTransactionUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementFuelTransactionUnassignReply$Type extends MessageType<SettlementFuelTransactionUnassignReply> {
    constructor() {
        super("SettlementFuelTransactionUnassignReply", []);
    }
    create(value?: PartialMessage<SettlementFuelTransactionUnassignReply>): SettlementFuelTransactionUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementFuelTransactionUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementFuelTransactionUnassignReply): SettlementFuelTransactionUnassignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementFuelTransactionUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementFuelTransactionUnassignReply
 */
export const SettlementFuelTransactionUnassignReply = new SettlementFuelTransactionUnassignReply$Type();
/**
 * @generated ServiceType for protobuf service SettlementsService
 */
export const SettlementsService = new ServiceType("SettlementsService", [
    { name: "RetrieveSettlement", options: {}, I: RetrieveSettlementRequest, O: RetrieveSettlementReply },
    { name: "SettlementGet", options: {}, I: SettlementGetRequest, O: SettlementGetReply },
    { name: "BatchCreateSettlements", options: {}, I: BatchCreateSettlementsRequest, O: BatchCreateSettlementsReply },
    { name: "PeriodSync", options: {}, I: PeriodSyncRequest, O: PeriodSyncReply },
    { name: "Sync", options: {}, I: SettlementSyncRequest, O: SettlementSyncReply },
    { name: "Delete", options: {}, I: SettlementDeleteRequest, O: SettlementDeleteReply },
    { name: "SettlementDeleteBatch", options: {}, I: SettlementDeleteBatchRequest, O: SettlementDeleteBatchReply },
    { name: "AssignTruck", options: {}, I: SettlementAssignTruckRequest, O: SettlementAssignTruckReply },
    { name: "AssignVendor", options: {}, I: SettlementAssignVendorRequest, O: SettlementAssignVendorReply },
    { name: "UnassignVendor", options: {}, I: SettlementUnassignVendorRequest, O: SettlementUnassignVendorReply },
    { name: "SettlementGeneratePDF", options: {}, I: SettlementGeneratePDFRequest, O: SettlementGeneratePDFReply },
    { name: "SettlementBatchExport", options: {}, I: SettlementBatchExportRequest, O: SettlementBatchExportReply },
    { name: "SendSettlement", options: {}, I: SendSettlementRequest, O: SendSettlementReply },
    { name: "SettlementSendBatchPreview", options: {}, I: SettlementSendBatchPreviewRequest, O: SettlementSendBatchPreviewReply },
    { name: "SettlementSendBatch", serverStreaming: true, options: {}, I: SettlementSendBatchRequest, O: SettlementSendBatchReply },
    { name: "AssignLoad", options: {}, I: SettlementAssignLoadRequest, O: SettlementAssignLoadReply },
    { name: "RemoveLoad", options: {}, I: SettlementRemoveLoadRequest, O: SettlementRemoveLoadReply },
    { name: "SettlementUpdateStatus", options: {}, I: SettlementUpdateStatusRequest, O: SettlementUpdateStatusReply },
    { name: "SettlementBatchUpdateStatus", options: {}, I: SettlementBatchUpdateStatusRequest, O: SettlementBatchUpdateStatusReply },
    { name: "SettlementDriverPayDeductFuelUpdate", options: {}, I: SettlementDriverPayDeductFuelUpdateRequest, O: SettlementDriverPayDeductFuelUpdateReply },
    { name: "SettlementDriverPayDeductTollsUpdate", options: {}, I: SettlementDriverPayDeductTollsUpdateRequest, O: SettlementDriverPayDeductTollsUpdateReply },
    { name: "SettlementFuelDiscountsEnabledUpdate", options: {}, I: SettlementFuelDiscountsEnabledUpdateRequest, O: SettlementFuelDiscountsEnabledUpdateReply },
    { name: "SettlementPayDateUpdate", options: {}, I: SettlementPayDateUpdateRequest, O: SettlementPayDateUpdateReply },
    { name: "TollAssign", options: {}, I: SettlementTollAssignRequest, O: SettlementTollAssignReply },
    { name: "TollUnassign", options: {}, I: SettlementTollUnassignRequest, O: SettlementTollUnassignReply },
    { name: "SettlementManifestAssign", options: {}, I: SettlementManifestAssignRequest, O: SettlementManifestAssignReply },
    { name: "SettlementManifestUnassign", options: {}, I: SettlementManifestUnassignRequest, O: SettlementManifestUnassignReply },
    { name: "SettlementFuelTransactionAssign", options: {}, I: SettlementFuelTransactionAssignRequest, O: SettlementFuelTransactionAssignReply },
    { name: "SettlementFuelTransactionUnassign", options: {}, I: SettlementFuelTransactionUnassignRequest, O: SettlementFuelTransactionUnassignReply }
]);
