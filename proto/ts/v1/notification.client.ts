// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/notification.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NotificationService } from "./notification";
import type { NotificationRetrieveReply } from "./notification";
import type { NotificationRetrieveRequest } from "./notification";
import type { NotificationMarkAsReadReply } from "./notification";
import type { NotificationMarkAsReadRequest } from "./notification";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { NotificationGetReply } from "./notification";
import type { NotificationGetRequest } from "./notification";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service NotificationService
 */
export interface INotificationServiceClient {
    /**
     * @generated from protobuf rpc: NotificationGet(NotificationGetRequest) returns (NotificationGetReply);
     */
    notificationGet(input: NotificationGetRequest, options?: RpcOptions): UnaryCall<NotificationGetRequest, NotificationGetReply>;
    /**
     * @generated from protobuf rpc: NotificationMarkAsRead(NotificationMarkAsReadRequest) returns (NotificationMarkAsReadReply);
     */
    notificationMarkAsRead(input: NotificationMarkAsReadRequest, options?: RpcOptions): UnaryCall<NotificationMarkAsReadRequest, NotificationMarkAsReadReply>;
    /**
     * @generated from protobuf rpc: NotificationRetrieve(NotificationRetrieveRequest) returns (NotificationRetrieveReply);
     */
    notificationRetrieve(input: NotificationRetrieveRequest, options?: RpcOptions): UnaryCall<NotificationRetrieveRequest, NotificationRetrieveReply>;
}
/**
 * @generated from protobuf service NotificationService
 */
export class NotificationServiceClient implements INotificationServiceClient, ServiceInfo {
    typeName = NotificationService.typeName;
    methods = NotificationService.methods;
    options = NotificationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: NotificationGet(NotificationGetRequest) returns (NotificationGetReply);
     */
    notificationGet(input: NotificationGetRequest, options?: RpcOptions): UnaryCall<NotificationGetRequest, NotificationGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<NotificationGetRequest, NotificationGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: NotificationMarkAsRead(NotificationMarkAsReadRequest) returns (NotificationMarkAsReadReply);
     */
    notificationMarkAsRead(input: NotificationMarkAsReadRequest, options?: RpcOptions): UnaryCall<NotificationMarkAsReadRequest, NotificationMarkAsReadReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<NotificationMarkAsReadRequest, NotificationMarkAsReadReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: NotificationRetrieve(NotificationRetrieveRequest) returns (NotificationRetrieveReply);
     */
    notificationRetrieve(input: NotificationRetrieveRequest, options?: RpcOptions): UnaryCall<NotificationRetrieveRequest, NotificationRetrieveReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<NotificationRetrieveRequest, NotificationRetrieveReply>("unary", this._transport, method, opt, input);
    }
}
