// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_log.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FilterModel_Filter } from "./models/model_filter_type";
import { ServiceLogModel_ServiceLogType } from "./models/model_service_log";
import { ServiceLogModel_ServiceLogRead } from "./models/model_service_log";
import { ServiceLogModel_ServiceLogWrite } from "./models/model_service_log";
/**
 * Create
 *
 * @generated from protobuf message ServiceLogCreateRequest
 */
export interface ServiceLogCreateRequest {
    /**
     * @generated from protobuf field: ServiceLogModel.ServiceLogWrite log = 1;
     */
    log?: ServiceLogModel_ServiceLogWrite;
}
/**
 * @generated from protobuf message ServiceLogCreateReply
 */
export interface ServiceLogCreateReply {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
}
/**
 * Update
 *
 * @generated from protobuf message ServiceLogUpdateRequest
 */
export interface ServiceLogUpdateRequest {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
    /**
     * @generated from protobuf field: ServiceLogModel.ServiceLogWrite log = 2;
     */
    log?: ServiceLogModel_ServiceLogWrite;
}
/**
 * @generated from protobuf message ServiceLogUpdateReply
 */
export interface ServiceLogUpdateReply {
}
/**
 * Retrieve
 *
 * @generated from protobuf message ServiceLogRetrieveRequest
 */
export interface ServiceLogRetrieveRequest {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
}
/**
 * @generated from protobuf message ServiceLogRetrieveReply
 */
export interface ServiceLogRetrieveReply {
    /**
     * @generated from protobuf field: ServiceLogModel.ServiceLogRead log = 1;
     */
    log?: ServiceLogModel_ServiceLogRead;
}
/**
 * Get
 *
 * @generated from protobuf message ServiceLogGetRequest
 */
export interface ServiceLogGetRequest {
    /**
     * @generated from protobuf field: int64 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int64 per_page = 2;
     */
    perPage: number;
    /**
     * @generated from protobuf field: ServiceLogGetRequest.SortType sort_type = 3;
     */
    sortType: ServiceLogGetRequest_SortType;
    /**
     * @generated from protobuf field: optional string search = 4;
     */
    search?: string;
    /**
     * @generated from protobuf field: string start_date = 5;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 6;
     */
    endDate: string;
    /**
     * @generated from protobuf field: repeated string provider_ids = 7;
     */
    providerIds: string[];
    /**
     * @generated from protobuf field: repeated string truck_ids = 8;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 9;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: repeated string driver_ids = 10;
     */
    driverIds: string[];
    /**
     * @generated from protobuf field: repeated ServiceLogModel.ServiceLogType types = 11;
     */
    types: ServiceLogModel_ServiceLogType[];
}
/**
 * @generated from protobuf enum ServiceLogGetRequest.SortType
 */
export enum ServiceLogGetRequest_SortType {
    /**
     * @generated from protobuf enum value: SORT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * default
     *
     * @generated from protobuf enum value: SORT_TYPE_LATEST = 1;
     */
    LATEST = 1,
    /**
     * used for active loads
     *
     * @generated from protobuf enum value: SORT_TYPE_OLDEST = 2;
     */
    OLDEST = 2,
    /**
     * @generated from protobuf enum value: SORT_TYPE_START_DATE_DESC = 3;
     */
    START_DATE_DESC = 3,
    /**
     * @generated from protobuf enum value: SORT_TYPE_START_DATE_ASC = 4;
     */
    START_DATE_ASC = 4,
    /**
     * @generated from protobuf enum value: SORT_TYPE_ORDER_NUMBER_DESC = 5;
     */
    ORDER_NUMBER_DESC = 5,
    /**
     * @generated from protobuf enum value: SORT_TYPE_ORDER_NUMBER_ASC = 6;
     */
    ORDER_NUMBER_ASC = 6,
    /**
     * @generated from protobuf enum value: SORT_TYPE_TOTAL_AMOUNT_DESC = 7;
     */
    TOTAL_AMOUNT_DESC = 7,
    /**
     * @generated from protobuf enum value: SORT_TYPE_TOTAL_AMOUNT_ASC = 8;
     */
    TOTAL_AMOUNT_ASC = 8,
    /**
     * @generated from protobuf enum value: SORT_TYPE_ODOMETER_MIlES_DESC = 9;
     */
    ODOMETER_MIlES_DESC = 9,
    /**
     * @generated from protobuf enum value: SORT_TYPE_ODOMETER_MIlES_ASC = 10;
     */
    ODOMETER_MIlES_ASC = 10,
    /**
     * @generated from protobuf enum value: SORT_TYPE_ENGINE_HOURS_DESC = 11;
     */
    ENGINE_HOURS_DESC = 11,
    /**
     * @generated from protobuf enum value: SORT_TYPE_ENGINE_HOURS_ASC = 12;
     */
    ENGINE_HOURS_ASC = 12,
    /**
     * @generated from protobuf enum value: SORT_TYPE_LOG_TYPE_ASC = 13;
     */
    LOG_TYPE_ASC = 13,
    /**
     * @generated from protobuf enum value: SORT_TYPE_LOG_TYPE_DESC = 14;
     */
    LOG_TYPE_DESC = 14
}
/**
 * @generated from protobuf message ServiceLogGetReply
 */
export interface ServiceLogGetReply {
    /**
     * @generated from protobuf field: repeated ServiceLogModel.ServiceLogRead logs = 1;
     */
    logs: ServiceLogModel_ServiceLogRead[];
}
/**
 * Delete
 *
 * @generated from protobuf message ServiceLogDeleteRequest
 */
export interface ServiceLogDeleteRequest {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
}
/**
 * @generated from protobuf message ServiceLogDeleteReply
 */
export interface ServiceLogDeleteReply {
}
/**
 * Provider stats
 *
 * @generated from protobuf message ServiceLogStatsRetrieveRequest
 */
export interface ServiceLogStatsRetrieveRequest {
    /**
     * @generated from protobuf field: optional string date = 1;
     */
    date?: string; // if empty or unspecified, then it will be the current date. Specify the date only for testing purposes.
    /**
     * @generated from protobuf field: optional string provider_id = 2;
     */
    providerId?: string;
}
/**
 * @generated from protobuf message ServiceLogStatsRetrieveReply
 */
export interface ServiceLogStatsRetrieveReply {
    /**
     * @generated from protobuf field: int64 services_total_count = 1;
     */
    servicesTotalCount: number;
    /**
     * @generated from protobuf field: double services_total_amount = 2;
     */
    servicesTotalAmount: number;
    /**
     * @generated from protobuf field: int64 delta_month_count = 3;
     */
    deltaMonthCount: number;
    /**
     * @generated from protobuf field: double delta_month_count_percent = 4;
     */
    deltaMonthCountPercent: number;
    /**
     * @generated from protobuf field: double delta_month_amount = 5;
     */
    deltaMonthAmount: number;
    /**
     * @generated from protobuf field: double delta_month_amount_percent = 6;
     */
    deltaMonthAmountPercent: number;
}
/**
 * Filter stats
 *
 * @generated from protobuf message ServiceLogStatsGetRequest
 */
export interface ServiceLogStatsGetRequest {
    /**
     * @generated from protobuf field: optional string search = 1;
     */
    search?: string;
    /**
     * @generated from protobuf field: string start_date = 2;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 3;
     */
    endDate: string;
    /**
     * @generated from protobuf field: repeated string provider_ids = 4;
     */
    providerIds: string[];
    /**
     * @generated from protobuf field: repeated string truck_ids = 5;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 6;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: repeated string driver_ids = 7;
     */
    driverIds: string[];
    /**
     * @generated from protobuf field: repeated ServiceLogModel.ServiceLogType types = 8;
     */
    types: ServiceLogModel_ServiceLogType[];
}
/**
 * @generated from protobuf message ServiceLogStatsGetReply
 */
export interface ServiceLogStatsGetReply {
    /**
     * @generated from protobuf field: int64 total_service_log_count = 1;
     */
    totalServiceLogCount: number;
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogCreateRequest$Type extends MessageType<ServiceLogCreateRequest> {
    constructor() {
        super("ServiceLogCreateRequest", [
            { no: 1, name: "log", kind: "message", T: () => ServiceLogModel_ServiceLogWrite }
        ]);
    }
    create(value?: PartialMessage<ServiceLogCreateRequest>): ServiceLogCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogCreateRequest): ServiceLogCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceLogModel.ServiceLogWrite log */ 1:
                    message.log = ServiceLogModel_ServiceLogWrite.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceLogModel.ServiceLogWrite log = 1; */
        if (message.log)
            ServiceLogModel_ServiceLogWrite.internalBinaryWrite(message.log, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogCreateRequest
 */
export const ServiceLogCreateRequest = new ServiceLogCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogCreateReply$Type extends MessageType<ServiceLogCreateReply> {
    constructor() {
        super("ServiceLogCreateReply", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogCreateReply>): ServiceLogCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogCreateReply): ServiceLogCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogCreateReply
 */
export const ServiceLogCreateReply = new ServiceLogCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogUpdateRequest$Type extends MessageType<ServiceLogUpdateRequest> {
    constructor() {
        super("ServiceLogUpdateRequest", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "log", kind: "message", T: () => ServiceLogModel_ServiceLogWrite }
        ]);
    }
    create(value?: PartialMessage<ServiceLogUpdateRequest>): ServiceLogUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogUpdateRequest): ServiceLogUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                case /* ServiceLogModel.ServiceLogWrite log */ 2:
                    message.log = ServiceLogModel_ServiceLogWrite.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        /* ServiceLogModel.ServiceLogWrite log = 2; */
        if (message.log)
            ServiceLogModel_ServiceLogWrite.internalBinaryWrite(message.log, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogUpdateRequest
 */
export const ServiceLogUpdateRequest = new ServiceLogUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogUpdateReply$Type extends MessageType<ServiceLogUpdateReply> {
    constructor() {
        super("ServiceLogUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceLogUpdateReply>): ServiceLogUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogUpdateReply): ServiceLogUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogUpdateReply
 */
export const ServiceLogUpdateReply = new ServiceLogUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogRetrieveRequest$Type extends MessageType<ServiceLogRetrieveRequest> {
    constructor() {
        super("ServiceLogRetrieveRequest", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogRetrieveRequest>): ServiceLogRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogRetrieveRequest): ServiceLogRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogRetrieveRequest
 */
export const ServiceLogRetrieveRequest = new ServiceLogRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogRetrieveReply$Type extends MessageType<ServiceLogRetrieveReply> {
    constructor() {
        super("ServiceLogRetrieveReply", [
            { no: 1, name: "log", kind: "message", T: () => ServiceLogModel_ServiceLogRead }
        ]);
    }
    create(value?: PartialMessage<ServiceLogRetrieveReply>): ServiceLogRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogRetrieveReply): ServiceLogRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceLogModel.ServiceLogRead log */ 1:
                    message.log = ServiceLogModel_ServiceLogRead.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceLogModel.ServiceLogRead log = 1; */
        if (message.log)
            ServiceLogModel_ServiceLogRead.internalBinaryWrite(message.log, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogRetrieveReply
 */
export const ServiceLogRetrieveReply = new ServiceLogRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogGetRequest$Type extends MessageType<ServiceLogGetRequest> {
    constructor() {
        super("ServiceLogGetRequest", [
            { no: 1, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "per_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "sort_type", kind: "enum", T: () => ["ServiceLogGetRequest.SortType", ServiceLogGetRequest_SortType, "SORT_TYPE_"] },
            { no: 4, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "provider_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["ServiceLogModel.ServiceLogType", ServiceLogModel_ServiceLogType, "SERVICE_LOG_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ServiceLogGetRequest>): ServiceLogGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.perPage = 0;
        message.sortType = 0;
        message.startDate = "";
        message.endDate = "";
        message.providerIds = [];
        message.truckIds = [];
        message.trailerIds = [];
        message.driverIds = [];
        message.types = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogGetRequest): ServiceLogGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page */ 1:
                    message.page = reader.int64().toNumber();
                    break;
                case /* int64 per_page */ 2:
                    message.perPage = reader.int64().toNumber();
                    break;
                case /* ServiceLogGetRequest.SortType sort_type */ 3:
                    message.sortType = reader.int32();
                    break;
                case /* optional string search */ 4:
                    message.search = reader.string();
                    break;
                case /* string start_date */ 5:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 6:
                    message.endDate = reader.string();
                    break;
                case /* repeated string provider_ids */ 7:
                    message.providerIds.push(reader.string());
                    break;
                case /* repeated string truck_ids */ 8:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 9:
                    message.trailerIds.push(reader.string());
                    break;
                case /* repeated string driver_ids */ 10:
                    message.driverIds.push(reader.string());
                    break;
                case /* repeated ServiceLogModel.ServiceLogType types */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.types.push(reader.int32());
                    else
                        message.types.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int64(message.page);
        /* int64 per_page = 2; */
        if (message.perPage !== 0)
            writer.tag(2, WireType.Varint).int64(message.perPage);
        /* ServiceLogGetRequest.SortType sort_type = 3; */
        if (message.sortType !== 0)
            writer.tag(3, WireType.Varint).int32(message.sortType);
        /* optional string search = 4; */
        if (message.search !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.search);
        /* string start_date = 5; */
        if (message.startDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 6; */
        if (message.endDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.endDate);
        /* repeated string provider_ids = 7; */
        for (let i = 0; i < message.providerIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.providerIds[i]);
        /* repeated string truck_ids = 8; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string trailer_ids = 9; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* repeated string driver_ids = 10; */
        for (let i = 0; i < message.driverIds.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.driverIds[i]);
        /* repeated ServiceLogModel.ServiceLogType types = 11; */
        if (message.types.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.types.length; i++)
                writer.int32(message.types[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogGetRequest
 */
export const ServiceLogGetRequest = new ServiceLogGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogGetReply$Type extends MessageType<ServiceLogGetReply> {
    constructor() {
        super("ServiceLogGetReply", [
            { no: 1, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceLogModel_ServiceLogRead }
        ]);
    }
    create(value?: PartialMessage<ServiceLogGetReply>): ServiceLogGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logs = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogGetReply): ServiceLogGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceLogModel.ServiceLogRead logs */ 1:
                    message.logs.push(ServiceLogModel_ServiceLogRead.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceLogModel.ServiceLogRead logs = 1; */
        for (let i = 0; i < message.logs.length; i++)
            ServiceLogModel_ServiceLogRead.internalBinaryWrite(message.logs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogGetReply
 */
export const ServiceLogGetReply = new ServiceLogGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDeleteRequest$Type extends MessageType<ServiceLogDeleteRequest> {
    constructor() {
        super("ServiceLogDeleteRequest", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDeleteRequest>): ServiceLogDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDeleteRequest): ServiceLogDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDeleteRequest
 */
export const ServiceLogDeleteRequest = new ServiceLogDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDeleteReply$Type extends MessageType<ServiceLogDeleteReply> {
    constructor() {
        super("ServiceLogDeleteReply", []);
    }
    create(value?: PartialMessage<ServiceLogDeleteReply>): ServiceLogDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDeleteReply): ServiceLogDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDeleteReply
 */
export const ServiceLogDeleteReply = new ServiceLogDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogStatsRetrieveRequest$Type extends MessageType<ServiceLogStatsRetrieveRequest> {
    constructor() {
        super("ServiceLogStatsRetrieveRequest", [
            { no: 1, name: "date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "provider_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogStatsRetrieveRequest>): ServiceLogStatsRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogStatsRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogStatsRetrieveRequest): ServiceLogStatsRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string date */ 1:
                    message.date = reader.string();
                    break;
                case /* optional string provider_id */ 2:
                    message.providerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogStatsRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string date = 1; */
        if (message.date !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.date);
        /* optional string provider_id = 2; */
        if (message.providerId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.providerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogStatsRetrieveRequest
 */
export const ServiceLogStatsRetrieveRequest = new ServiceLogStatsRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogStatsRetrieveReply$Type extends MessageType<ServiceLogStatsRetrieveReply> {
    constructor() {
        super("ServiceLogStatsRetrieveReply", [
            { no: 1, name: "services_total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "services_total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "delta_month_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "delta_month_count_percent", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "delta_month_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "delta_month_amount_percent", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogStatsRetrieveReply>): ServiceLogStatsRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.servicesTotalCount = 0;
        message.servicesTotalAmount = 0;
        message.deltaMonthCount = 0;
        message.deltaMonthCountPercent = 0;
        message.deltaMonthAmount = 0;
        message.deltaMonthAmountPercent = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogStatsRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogStatsRetrieveReply): ServiceLogStatsRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 services_total_count */ 1:
                    message.servicesTotalCount = reader.int64().toNumber();
                    break;
                case /* double services_total_amount */ 2:
                    message.servicesTotalAmount = reader.double();
                    break;
                case /* int64 delta_month_count */ 3:
                    message.deltaMonthCount = reader.int64().toNumber();
                    break;
                case /* double delta_month_count_percent */ 4:
                    message.deltaMonthCountPercent = reader.double();
                    break;
                case /* double delta_month_amount */ 5:
                    message.deltaMonthAmount = reader.double();
                    break;
                case /* double delta_month_amount_percent */ 6:
                    message.deltaMonthAmountPercent = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogStatsRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 services_total_count = 1; */
        if (message.servicesTotalCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.servicesTotalCount);
        /* double services_total_amount = 2; */
        if (message.servicesTotalAmount !== 0)
            writer.tag(2, WireType.Bit64).double(message.servicesTotalAmount);
        /* int64 delta_month_count = 3; */
        if (message.deltaMonthCount !== 0)
            writer.tag(3, WireType.Varint).int64(message.deltaMonthCount);
        /* double delta_month_count_percent = 4; */
        if (message.deltaMonthCountPercent !== 0)
            writer.tag(4, WireType.Bit64).double(message.deltaMonthCountPercent);
        /* double delta_month_amount = 5; */
        if (message.deltaMonthAmount !== 0)
            writer.tag(5, WireType.Bit64).double(message.deltaMonthAmount);
        /* double delta_month_amount_percent = 6; */
        if (message.deltaMonthAmountPercent !== 0)
            writer.tag(6, WireType.Bit64).double(message.deltaMonthAmountPercent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogStatsRetrieveReply
 */
export const ServiceLogStatsRetrieveReply = new ServiceLogStatsRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogStatsGetRequest$Type extends MessageType<ServiceLogStatsGetRequest> {
    constructor() {
        super("ServiceLogStatsGetRequest", [
            { no: 1, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "provider_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["ServiceLogModel.ServiceLogType", ServiceLogModel_ServiceLogType, "SERVICE_LOG_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ServiceLogStatsGetRequest>): ServiceLogStatsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.startDate = "";
        message.endDate = "";
        message.providerIds = [];
        message.truckIds = [];
        message.trailerIds = [];
        message.driverIds = [];
        message.types = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogStatsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogStatsGetRequest): ServiceLogStatsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string search */ 1:
                    message.search = reader.string();
                    break;
                case /* string start_date */ 2:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 3:
                    message.endDate = reader.string();
                    break;
                case /* repeated string provider_ids */ 4:
                    message.providerIds.push(reader.string());
                    break;
                case /* repeated string truck_ids */ 5:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 6:
                    message.trailerIds.push(reader.string());
                    break;
                case /* repeated string driver_ids */ 7:
                    message.driverIds.push(reader.string());
                    break;
                case /* repeated ServiceLogModel.ServiceLogType types */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.types.push(reader.int32());
                    else
                        message.types.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogStatsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string search = 1; */
        if (message.search !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.search);
        /* string start_date = 2; */
        if (message.startDate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 3; */
        if (message.endDate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.endDate);
        /* repeated string provider_ids = 4; */
        for (let i = 0; i < message.providerIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.providerIds[i]);
        /* repeated string truck_ids = 5; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string trailer_ids = 6; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* repeated string driver_ids = 7; */
        for (let i = 0; i < message.driverIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.driverIds[i]);
        /* repeated ServiceLogModel.ServiceLogType types = 8; */
        if (message.types.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.types.length; i++)
                writer.int32(message.types[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogStatsGetRequest
 */
export const ServiceLogStatsGetRequest = new ServiceLogStatsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogStatsGetReply$Type extends MessageType<ServiceLogStatsGetReply> {
    constructor() {
        super("ServiceLogStatsGetReply", [
            { no: 1, name: "total_service_log_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<ServiceLogStatsGetReply>): ServiceLogStatsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalServiceLogCount = 0;
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogStatsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogStatsGetReply): ServiceLogStatsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_service_log_count */ 1:
                    message.totalServiceLogCount = reader.int64().toNumber();
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogStatsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_service_log_count = 1; */
        if (message.totalServiceLogCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalServiceLogCount);
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogStatsGetReply
 */
export const ServiceLogStatsGetReply = new ServiceLogStatsGetReply$Type();
/**
 * @generated ServiceType for protobuf service ServiceLogService
 */
export const ServiceLogService = new ServiceType("ServiceLogService", [
    { name: "ServiceLogCreate", options: {}, I: ServiceLogCreateRequest, O: ServiceLogCreateReply },
    { name: "ServiceLogUpdate", options: {}, I: ServiceLogUpdateRequest, O: ServiceLogUpdateReply },
    { name: "ServiceLogRetrieve", options: {}, I: ServiceLogRetrieveRequest, O: ServiceLogRetrieveReply },
    { name: "ServiceLogGet", options: {}, I: ServiceLogGetRequest, O: ServiceLogGetReply },
    { name: "ServiceLogDelete", options: {}, I: ServiceLogDeleteRequest, O: ServiceLogDeleteReply },
    { name: "ServiceLogStatsRetrieve", options: {}, I: ServiceLogStatsRetrieveRequest, O: ServiceLogStatsRetrieveReply },
    { name: "ServiceLogStatsGet", options: {}, I: ServiceLogStatsGetRequest, O: ServiceLogStatsGetReply }
]);
