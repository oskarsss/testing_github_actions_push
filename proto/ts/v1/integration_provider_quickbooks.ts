// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/integration_provider_quickbooks.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QuickBooksModel_Account_Type } from "./models/model_quickbooks";
/**
 * Quickbooks - Sign Up
 *
 * @generated from protobuf message IP_Quickbooks_SignUpRequest
 */
export interface IP_Quickbooks_SignUpRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: string realm_id = 3;
     */
    realmId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_SignUpReply
 */
export interface IP_Quickbooks_SignUpReply {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
    /**
     * @generated from protobuf field: IP_Quickbooks_SignUpReply.Action action = 4;
     */
    action: IP_Quickbooks_SignUpReply_Action;
}
/**
 * @generated from protobuf enum IP_Quickbooks_SignUpReply.Action
 */
export enum IP_Quickbooks_SignUpReply_Action {
    /**
     * @generated from protobuf enum value: ACTION_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ACTION_UPDATE_PASSWORD = 1;
     */
    UPDATE_PASSWORD = 1,
    /**
     * @generated from protobuf enum value: ACTION_LOGIN = 2;
     */
    LOGIN = 2
}
/**
 * @generated from protobuf message IP_Quickbooks_GetDisconnectOAuthURLRequest
 */
export interface IP_Quickbooks_GetDisconnectOAuthURLRequest {
    /**
     * @generated from protobuf field: string realm_id = 1;
     */
    realmId: string;
    /**
     * @generated from protobuf field: bool development = 2;
     */
    development: boolean;
}
/**
 * @generated from protobuf message IP_Quickbooks_GetDisconnectOAuthURLReply
 */
export interface IP_Quickbooks_GetDisconnectOAuthURLReply {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_DisconnectByCodeRequest
 */
export interface IP_Quickbooks_DisconnectByCodeRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: bool development = 3;
     */
    development: boolean;
}
/**
 * @generated from protobuf message IP_Quickbooks_DisconnectByCodeReply
 */
export interface IP_Quickbooks_DisconnectByCodeReply {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
}
/**
 * Quickbooks - Get Oauth URL Without Company
 *
 * @generated from protobuf message IP_Quickbooks_GetOauthURLWithoutCompanyRequest
 */
export interface IP_Quickbooks_GetOauthURLWithoutCompanyRequest {
    /**
     * @generated from protobuf field: bool development = 1;
     */
    development: boolean;
}
/**
 * @generated from protobuf message IP_Quickbooks_GetOauthURLWithoutCompanyReply
 */
export interface IP_Quickbooks_GetOauthURLWithoutCompanyReply {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * Quickbooks - Get Items
 *
 * @generated from protobuf message IP_Quickbooks_GetItemsRequest
 */
export interface IP_Quickbooks_GetItemsRequest {
}
/**
 * @generated from protobuf message IP_Quickbooks_GetItemsReply
 */
export interface IP_Quickbooks_GetItemsReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_GetItemsReply.Item items = 1;
     */
    items: IP_Quickbooks_GetItemsReply_Item[];
}
/**
 * @generated from protobuf message IP_Quickbooks_GetItemsReply.Item
 */
export interface IP_Quickbooks_GetItemsReply_Item {
    /**
     * @generated from protobuf field: string quickbooks_item_id = 1;
     */
    quickbooksItemId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: bool active = 5;
     */
    active: boolean;
    /**
     * @generated from protobuf field: repeated string system_load_invoice_item_category_ids = 6;
     */
    systemLoadInvoiceItemCategoryIds: string[];
}
/**
 * Quickbooks - Item - Update Load Invoice Item Category
 *
 * @generated from protobuf message IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest
 */
export interface IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest {
    /**
     * @generated from protobuf field: string quickbooks_item_id = 1;
     */
    quickbooksItemId: string;
    /**
     * @generated from protobuf field: string system_load_invoice_item_category_id = 2;
     */
    systemLoadInvoiceItemCategoryId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply
 */
export interface IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply {
}
/**
 * Quickbooks - Account - Update Settlement Transaction Category
 *
 * @generated from protobuf message IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest
 */
export interface IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest {
    /**
     * @generated from protobuf field: string quickbooks_expense_account_id = 1;
     */
    quickbooksExpenseAccountId: string;
    /**
     * @generated from protobuf field: string system_settlement_transaction_category_id = 2;
     */
    systemSettlementTransactionCategoryId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply
 */
export interface IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply {
}
/**
 * @generated from protobuf message IP_Quickbooks_Account_UpdateBankAccountRequest
 */
export interface IP_Quickbooks_Account_UpdateBankAccountRequest {
    /**
     * @generated from protobuf field: string quickbooks_account_id = 1;
     */
    quickbooksAccountId: string;
    /**
     * @generated from protobuf field: string system_bank_account_id = 2;
     */
    systemBankAccountId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Account_UpdateBankAccountReply
 */
export interface IP_Quickbooks_Account_UpdateBankAccountReply {
}
/**
 * Quickbooks - GetClasses
 *
 * @generated from protobuf message IP_Quickbooks_GetClassesRequest
 */
export interface IP_Quickbooks_GetClassesRequest {
}
/**
 * @generated from protobuf message IP_Quickbooks_GetClassesReply
 */
export interface IP_Quickbooks_GetClassesReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_GetClassesReply.Class classes = 1;
     */
    classes: IP_Quickbooks_GetClassesReply_Class[];
}
/**
 * @generated from protobuf message IP_Quickbooks_GetClassesReply.Class
 */
export interface IP_Quickbooks_GetClassesReply_Class {
    /**
     * @generated from protobuf field: string quickbooks_class_id = 1;
     */
    quickbooksClassId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string fully_qualified_name = 3;
     */
    fullyQualifiedName: string;
    /**
     * @generated from protobuf field: bool active = 4;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string parent_class_id = 5;
     */
    parentClassId: string;
    /**
     * @generated from protobuf field: repeated string system_truck_ids = 6;
     */
    systemTruckIds: string[];
}
/**
 * Quickbooks - Class - Update Truck
 *
 * @generated from protobuf message IP_Quickbooks_Class_UpdateTruckRequest
 */
export interface IP_Quickbooks_Class_UpdateTruckRequest {
    /**
     * @generated from protobuf field: string quickbooks_class_id = 1;
     */
    quickbooksClassId: string;
    /**
     * @generated from protobuf field: string system_truck_id = 2;
     */
    systemTruckId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Class_UpdateTruckReply
 */
export interface IP_Quickbooks_Class_UpdateTruckReply {
}
/**
 * Quickbooks - Get Customers
 *
 * @generated from protobuf message IP_Quickbooks_GetCustomersRequest
 */
export interface IP_Quickbooks_GetCustomersRequest {
}
/**
 * @generated from protobuf message IP_Quickbooks_GetCustomersReply
 */
export interface IP_Quickbooks_GetCustomersReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_GetCustomersReply.Customer customers = 1;
     */
    customers: IP_Quickbooks_GetCustomersReply_Customer[];
}
/**
 * @generated from protobuf message IP_Quickbooks_GetCustomersReply.Customer
 */
export interface IP_Quickbooks_GetCustomersReply_Customer {
    /**
     * @generated from protobuf field: string quickbooks_customer_id = 1;
     */
    quickbooksCustomerId: string;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string company_name = 3;
     */
    companyName: string;
    /**
     * @generated from protobuf field: bool active = 4;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string phone = 5;
     */
    phone: string;
    /**
     * @generated from protobuf field: repeated string system_customer_id = 6;
     */
    systemCustomerId: string[];
    /**
     * @generated from protobuf field: repeated string system_broker_id = 7;
     */
    systemBrokerId: string[];
}
/**
 * // When QB Customer is System-Customer
 *
 * @generated from protobuf message IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest
 */
export interface IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest {
    /**
     * @generated from protobuf field: string quickbooks_customer_id = 1;
     */
    quickbooksCustomerId: string;
    /**
     * @generated from protobuf field: string system_customer_id = 2;
     */
    systemCustomerId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Customer_UpdateSystemCustomerIDReply
 */
export interface IP_Quickbooks_Customer_UpdateSystemCustomerIDReply {
}
/**
 * When QB Customer is System-Broker
 *
 * @generated from protobuf message IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest
 */
export interface IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest {
    /**
     * @generated from protobuf field: string quickbooks_customer_id = 1;
     */
    quickbooksCustomerId: string;
    /**
     * @generated from protobuf field: string system_broker_id = 2;
     */
    systemBrokerId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Customer_UpdateSystemBrokerIDReply
 */
export interface IP_Quickbooks_Customer_UpdateSystemBrokerIDReply {
}
/**
 * Invoices - Create
 *
 * @generated from protobuf message IP_Quickbooks_Invoice_CreateRequest
 */
export interface IP_Quickbooks_Invoice_CreateRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_CreateReply
 */
export interface IP_Quickbooks_Invoice_CreateReply {
}
/**
 * Invoices - Get
 *
 * @generated from protobuf message IP_Quickbooks_Invoice_GetRequest
 */
export interface IP_Quickbooks_Invoice_GetRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_GetReply
 */
export interface IP_Quickbooks_Invoice_GetReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_Invoice_GetReply.QuickbooksInvoice invoices = 1;
     */
    invoices: IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_GetReply.QuickbooksInvoice
 */
export interface IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice {
    /**
     * @generated from protobuf field: string quickbooks_invoice_id = 1;
     */
    quickbooksInvoiceId: string;
    /**
     * @generated from protobuf field: string doc_number = 2;
     */
    docNumber: string;
    /**
     * @generated from protobuf field: string total_amount = 3;
     */
    totalAmount: string;
    /**
     * @generated from protobuf field: string balance = 4;
     */
    balance: string;
    /**
     * @generated from protobuf field: bool allow_online_credit_card_payment = 5;
     */
    allowOnlineCreditCardPayment: boolean;
    /**
     * @generated from protobuf field: bool allow_online_ach_payment = 6;
     */
    allowOnlineAchPayment: boolean;
    /**
     * @generated from protobuf field: string print_status = 7;
     */
    printStatus: string;
    /**
     * @generated from protobuf field: string email_status = 8;
     */
    emailStatus: string;
    /**
     * @generated from protobuf field: string invoice_pdf_path = 9;
     */
    invoicePdfPath: string;
    /**
     * @generated from protobuf field: string invoice_link = 10;
     */
    invoiceLink: string;
    /**
     * @generated from protobuf field: string updated_at = 11;
     */
    updatedAt: string;
}
/**
 * Invoices - Sync
 *
 * @generated from protobuf message IP_Quickbooks_Invoice_SyncRequest
 */
export interface IP_Quickbooks_Invoice_SyncRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_SyncReply
 */
export interface IP_Quickbooks_Invoice_SyncReply {
}
/**
 * Invoices - Send
 *
 * @generated from protobuf message IP_Quickbooks_Invoice_SendRequest
 */
export interface IP_Quickbooks_Invoice_SendRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_SendReply
 */
export interface IP_Quickbooks_Invoice_SendReply {
}
/**
 * Invoices - Void
 *
 * @generated from protobuf message IP_Quickbooks_Invoice_VoidRequest
 */
export interface IP_Quickbooks_Invoice_VoidRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_VoidReply
 */
export interface IP_Quickbooks_Invoice_VoidReply {
}
/**
 * Invoices - Delete
 *
 * @generated from protobuf message IP_Quickbooks_Invoice_DeleteRequest
 */
export interface IP_Quickbooks_Invoice_DeleteRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Invoice_DeleteReply
 */
export interface IP_Quickbooks_Invoice_DeleteReply {
}
/**
 * Bills - Create
 *
 * @generated from protobuf message IP_Quickbooks_Bill_CreateRequest
 */
export interface IP_Quickbooks_Bill_CreateRequest {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_Bill_CreateRequest.Settlement settlements = 1;
     */
    settlements: IP_Quickbooks_Bill_CreateRequest_Settlement[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_CreateRequest.Settlement
 */
export interface IP_Quickbooks_Bill_CreateRequest_Settlement {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_CreateReply
 */
export interface IP_Quickbooks_Bill_CreateReply {
}
/**
 * Bills - Get
 *
 * @generated from protobuf message IP_Quickbooks_Bill_GetRequest
 */
export interface IP_Quickbooks_Bill_GetRequest {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_Bill_GetRequest.Settlement settlements = 1;
     */
    settlements: IP_Quickbooks_Bill_GetRequest_Settlement[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_GetRequest.Settlement
 */
export interface IP_Quickbooks_Bill_GetRequest_Settlement {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_GetReply
 */
export interface IP_Quickbooks_Bill_GetReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_Bill_GetReply.Bill bills = 1;
     */
    bills: IP_Quickbooks_Bill_GetReply_Bill[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_GetReply.Bill
 */
export interface IP_Quickbooks_Bill_GetReply_Bill {
    /**
     * @generated from protobuf field: string quickbooks_bill_id = 1;
     */
    quickbooksBillId: string;
    /**
     * @generated from protobuf field: string doc_number = 2;
     */
    docNumber: string;
    /**
     * @generated from protobuf field: string total_amount = 3;
     */
    totalAmount: string;
    /**
     * @generated from protobuf field: string balance = 4;
     */
    balance: string;
    /**
     * @generated from protobuf field: string due_date = 5;
     */
    dueDate: string;
    /**
     * @generated from protobuf field: string updated_at = 6;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string system_cycle_id = 7;
     */
    systemCycleId: string;
    /**
     * @generated from protobuf field: string system_period_id = 8;
     */
    systemPeriodId: string;
    /**
     * @generated from protobuf field: string system_settlement_id = 9;
     */
    systemSettlementId: string;
}
/**
 * Bills - Sync
 *
 * @generated from protobuf message IP_Quickbooks_Bill_SyncRequest
 */
export interface IP_Quickbooks_Bill_SyncRequest {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_Bill_SyncRequest.Settlement settlements = 3;
     */
    settlements: IP_Quickbooks_Bill_SyncRequest_Settlement[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_SyncRequest.Settlement
 */
export interface IP_Quickbooks_Bill_SyncRequest_Settlement {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_SyncReply
 */
export interface IP_Quickbooks_Bill_SyncReply {
}
/**
 * Bills - Delete
 *
 * @generated from protobuf message IP_Quickbooks_Bill_DeleteRequest
 */
export interface IP_Quickbooks_Bill_DeleteRequest {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_Bill_DeleteRequest.Settlement settlements = 1;
     */
    settlements: IP_Quickbooks_Bill_DeleteRequest_Settlement[];
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_DeleteRequest.Settlement
 */
export interface IP_Quickbooks_Bill_DeleteRequest_Settlement {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Bill_DeleteReply
 */
export interface IP_Quickbooks_Bill_DeleteReply {
}
/**
 * BillPayments - Create
 *
 * @generated from protobuf message IP_Quickbooks_BillPayment_CreateRequest
 */
export interface IP_Quickbooks_BillPayment_CreateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string payout_id = 4;
     */
    payoutId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_BillPayment_CreateReply
 */
export interface IP_Quickbooks_BillPayment_CreateReply {
    /**
     * @generated from protobuf field: string qb_billpayment_id = 1;
     */
    qbBillpaymentId: string;
}
/**
 * BillPayments - Get
 *
 * @generated from protobuf message IP_Quickbooks_BillPayment_GetRequest
 */
export interface IP_Quickbooks_BillPayment_GetRequest {
    /**
     * @generated from protobuf field: repeated string payout_ids = 1;
     */
    payoutIds: string[];
}
/**
 * @generated from protobuf message IP_Quickbooks_BillPayment_GetReply
 */
export interface IP_Quickbooks_BillPayment_GetReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_BillPayment_GetReply.BillPayment bill_payments = 1;
     */
    billPayments: IP_Quickbooks_BillPayment_GetReply_BillPayment[];
}
/**
 * @generated from protobuf message IP_Quickbooks_BillPayment_GetReply.BillPayment
 */
export interface IP_Quickbooks_BillPayment_GetReply_BillPayment {
    /**
     * @generated from protobuf field: string quickbooks_bill_payment_id = 1;
     */
    quickbooksBillPaymentId: string;
    /**
     * @generated from protobuf field: string doc_number = 2;
     */
    docNumber: string;
    /**
     * @generated from protobuf field: double total_amount = 3;
     */
    totalAmount: number;
    /**
     * @generated from protobuf field: string total_amount_formatted = 4;
     */
    totalAmountFormatted: string;
    /**
     * @generated from protobuf field: string updated_at = 5;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string system_payout_id = 6;
     */
    systemPayoutId: string;
}
/**
 * BillPayments - Sync
 *
 * @generated from protobuf message IP_Quickbooks_BillPayment_SyncRequest
 */
export interface IP_Quickbooks_BillPayment_SyncRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_BillPayment_SyncReply
 */
export interface IP_Quickbooks_BillPayment_SyncReply {
}
/**
 * BillPayments - Void
 *
 * @generated from protobuf message IP_Quickbooks_BillPayment_VoidRequest
 */
export interface IP_Quickbooks_BillPayment_VoidRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_BillPayment_VoidReply
 */
export interface IP_Quickbooks_BillPayment_VoidReply {
}
/**
 * BillPayments - Delete
 *
 * @generated from protobuf message IP_Quickbooks_BillPayment_DeleteRequest
 */
export interface IP_Quickbooks_BillPayment_DeleteRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_BillPayment_DeleteReply
 */
export interface IP_Quickbooks_BillPayment_DeleteReply {
}
/**
 * Quickbooks - Get Vendors
 *
 * @generated from protobuf message IP_Quickbooks_GetVendorsRequest
 */
export interface IP_Quickbooks_GetVendorsRequest {
}
/**
 * @generated from protobuf message IP_Quickbooks_GetVendorsReply
 */
export interface IP_Quickbooks_GetVendorsReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_GetVendorsReply.Vendor vendors = 1;
     */
    vendors: IP_Quickbooks_GetVendorsReply_Vendor[];
}
/**
 * @generated from protobuf message IP_Quickbooks_GetVendorsReply.Vendor
 */
export interface IP_Quickbooks_GetVendorsReply_Vendor {
    /**
     * @generated from protobuf field: string quickbooks_vendor_id = 1;
     */
    quickbooksVendorId: string;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string print_on_check_name = 3;
     */
    printOnCheckName: string;
    /**
     * @generated from protobuf field: string company_name = 4;
     */
    companyName: string;
    /**
     * @generated from protobuf field: bool active = 5;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: repeated string system_driver_id = 7;
     */
    systemDriverId: string[];
    /**
     * @generated from protobuf field: repeated string system_vendor_id = 8;
     */
    systemVendorId: string[];
}
/**
 * Vendor - Update System Driver ID
 *
 * @generated from protobuf message IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest
 */
export interface IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest {
    /**
     * @generated from protobuf field: string quickbooks_vendor_id = 1;
     */
    quickbooksVendorId: string;
    /**
     * @generated from protobuf field: string system_driver_id = 2;
     */
    systemDriverId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Vendor_UpdateSystemDriverIDReply
 */
export interface IP_Quickbooks_Vendor_UpdateSystemDriverIDReply {
}
/**
 * Vendor - Update System Vendor ID
 *
 * @generated from protobuf message IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest
 */
export interface IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest {
    /**
     * @generated from protobuf field: string quickbooks_vendor_id = 1;
     */
    quickbooksVendorId: string;
    /**
     * @generated from protobuf field: string system_vendor_id = 2;
     */
    systemVendorId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Vendor_UpdateSystemVendorIDReply
 */
export interface IP_Quickbooks_Vendor_UpdateSystemVendorIDReply {
}
/**
 * Quickbooks - Get Items
 *
 * @generated from protobuf message IP_Quickbooks_GetAccountsRequest
 */
export interface IP_Quickbooks_GetAccountsRequest {
    /**
     * @generated from protobuf field: QuickBooksModel.Account.Type filter_by_type = 1;
     */
    filterByType: QuickBooksModel_Account_Type;
}
/**
 * @generated from protobuf message IP_Quickbooks_GetAccountsReply
 */
export interface IP_Quickbooks_GetAccountsReply {
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_GetAccountsReply.Account accounts = 1;
     */
    accounts: IP_Quickbooks_GetAccountsReply_Account[];
}
/**
 * @generated from protobuf message IP_Quickbooks_GetAccountsReply.Account
 */
export interface IP_Quickbooks_GetAccountsReply_Account {
    /**
     * @generated from protobuf field: string quickbooks_account_id = 1;
     */
    quickbooksAccountId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string full_qualified_name = 3;
     */
    fullQualifiedName: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: QuickBooksModel.Account.Type type = 5;
     */
    type: QuickBooksModel_Account_Type;
    /**
     * @generated from protobuf field: bool active = 6;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string parent_account_id = 7;
     */
    parentAccountId: string;
    /**
     * @generated from protobuf field: repeated string system_settlement_transaction_category_ids = 9;
     */
    systemSettlementTransactionCategoryIds: string[];
    /**
     * @generated from protobuf field: repeated IP_Quickbooks_GetAccountsReply.Account.SystemRevenueType system_revenue_types = 10;
     */
    systemRevenueTypes: IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType[];
    /**
     * @generated from protobuf field: repeated string system_bank_account_ids = 8;
     */
    systemBankAccountIds: string[];
    /**
     * @generated from protobuf field: string account_type = 11;
     */
    accountType: string;
    /**
     * @generated from protobuf field: string account_sub_type = 12;
     */
    accountSubType: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_GetAccountsReply.Account.SystemRevenueType
 */
export interface IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: bool linked_to_total_loads_amount = 2;
     */
    linkedToTotalLoadsAmount: boolean;
    /**
     * @generated from protobuf field: bool linked_to_fuel_amount = 3;
     */
    linkedToFuelAmount: boolean;
    /**
     * @generated from protobuf field: bool linked_to_tolls_amount = 4;
     */
    linkedToTollsAmount: boolean;
}
/**
 * @generated from protobuf message IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest
 */
export interface IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: string total_loads_amount_quickbooks_expense_account_id = 2;
     */
    totalLoadsAmountQuickbooksExpenseAccountId: string;
    /**
     * @generated from protobuf field: string fuel_amount_quickbooks_expense_account_id = 3;
     */
    fuelAmountQuickbooksExpenseAccountId: string;
    /**
     * @generated from protobuf field: string tolls_amount_quickbooks_expense_account_id = 4;
     */
    tollsAmountQuickbooksExpenseAccountId: string;
}
/**
 * @generated from protobuf message IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply
 */
export interface IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_SignUpRequest$Type extends MessageType<IP_Quickbooks_SignUpRequest> {
    constructor() {
        super("IP_Quickbooks_SignUpRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "realm_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_SignUpRequest>): IP_Quickbooks_SignUpRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        message.realmId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_SignUpRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_SignUpRequest): IP_Quickbooks_SignUpRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* string realm_id */ 3:
                    message.realmId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_SignUpRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* string realm_id = 3; */
        if (message.realmId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.realmId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_SignUpRequest
 */
export const IP_Quickbooks_SignUpRequest = new IP_Quickbooks_SignUpRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_SignUpReply$Type extends MessageType<IP_Quickbooks_SignUpReply> {
    constructor() {
        super("IP_Quickbooks_SignUpReply", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action", kind: "enum", T: () => ["IP_Quickbooks_SignUpReply.Action", IP_Quickbooks_SignUpReply_Action, "ACTION_"] }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_SignUpReply>): IP_Quickbooks_SignUpReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.userId = "";
        message.token = "";
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_SignUpReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_SignUpReply): IP_Quickbooks_SignUpReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                case /* IP_Quickbooks_SignUpReply.Action action */ 4:
                    message.action = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_SignUpReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        /* IP_Quickbooks_SignUpReply.Action action = 4; */
        if (message.action !== 0)
            writer.tag(4, WireType.Varint).int32(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_SignUpReply
 */
export const IP_Quickbooks_SignUpReply = new IP_Quickbooks_SignUpReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetDisconnectOAuthURLRequest$Type extends MessageType<IP_Quickbooks_GetDisconnectOAuthURLRequest> {
    constructor() {
        super("IP_Quickbooks_GetDisconnectOAuthURLRequest", [
            { no: 1, name: "realm_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "development", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetDisconnectOAuthURLRequest>): IP_Quickbooks_GetDisconnectOAuthURLRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.realmId = "";
        message.development = false;
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetDisconnectOAuthURLRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetDisconnectOAuthURLRequest): IP_Quickbooks_GetDisconnectOAuthURLRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string realm_id */ 1:
                    message.realmId = reader.string();
                    break;
                case /* bool development */ 2:
                    message.development = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetDisconnectOAuthURLRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string realm_id = 1; */
        if (message.realmId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.realmId);
        /* bool development = 2; */
        if (message.development !== false)
            writer.tag(2, WireType.Varint).bool(message.development);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetDisconnectOAuthURLRequest
 */
export const IP_Quickbooks_GetDisconnectOAuthURLRequest = new IP_Quickbooks_GetDisconnectOAuthURLRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetDisconnectOAuthURLReply$Type extends MessageType<IP_Quickbooks_GetDisconnectOAuthURLReply> {
    constructor() {
        super("IP_Quickbooks_GetDisconnectOAuthURLReply", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetDisconnectOAuthURLReply>): IP_Quickbooks_GetDisconnectOAuthURLReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetDisconnectOAuthURLReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetDisconnectOAuthURLReply): IP_Quickbooks_GetDisconnectOAuthURLReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetDisconnectOAuthURLReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetDisconnectOAuthURLReply
 */
export const IP_Quickbooks_GetDisconnectOAuthURLReply = new IP_Quickbooks_GetDisconnectOAuthURLReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_DisconnectByCodeRequest$Type extends MessageType<IP_Quickbooks_DisconnectByCodeRequest> {
    constructor() {
        super("IP_Quickbooks_DisconnectByCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "development", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_DisconnectByCodeRequest>): IP_Quickbooks_DisconnectByCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.state = "";
        message.development = false;
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_DisconnectByCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_DisconnectByCodeRequest): IP_Quickbooks_DisconnectByCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* bool development */ 3:
                    message.development = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_DisconnectByCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* bool development = 3; */
        if (message.development !== false)
            writer.tag(3, WireType.Varint).bool(message.development);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_DisconnectByCodeRequest
 */
export const IP_Quickbooks_DisconnectByCodeRequest = new IP_Quickbooks_DisconnectByCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_DisconnectByCodeReply$Type extends MessageType<IP_Quickbooks_DisconnectByCodeReply> {
    constructor() {
        super("IP_Quickbooks_DisconnectByCodeReply", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_DisconnectByCodeReply>): IP_Quickbooks_DisconnectByCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.userId = "";
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_DisconnectByCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_DisconnectByCodeReply): IP_Quickbooks_DisconnectByCodeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_DisconnectByCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_DisconnectByCodeReply
 */
export const IP_Quickbooks_DisconnectByCodeReply = new IP_Quickbooks_DisconnectByCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetOauthURLWithoutCompanyRequest$Type extends MessageType<IP_Quickbooks_GetOauthURLWithoutCompanyRequest> {
    constructor() {
        super("IP_Quickbooks_GetOauthURLWithoutCompanyRequest", [
            { no: 1, name: "development", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetOauthURLWithoutCompanyRequest>): IP_Quickbooks_GetOauthURLWithoutCompanyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.development = false;
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetOauthURLWithoutCompanyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetOauthURLWithoutCompanyRequest): IP_Quickbooks_GetOauthURLWithoutCompanyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool development */ 1:
                    message.development = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetOauthURLWithoutCompanyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool development = 1; */
        if (message.development !== false)
            writer.tag(1, WireType.Varint).bool(message.development);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetOauthURLWithoutCompanyRequest
 */
export const IP_Quickbooks_GetOauthURLWithoutCompanyRequest = new IP_Quickbooks_GetOauthURLWithoutCompanyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetOauthURLWithoutCompanyReply$Type extends MessageType<IP_Quickbooks_GetOauthURLWithoutCompanyReply> {
    constructor() {
        super("IP_Quickbooks_GetOauthURLWithoutCompanyReply", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetOauthURLWithoutCompanyReply>): IP_Quickbooks_GetOauthURLWithoutCompanyReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetOauthURLWithoutCompanyReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetOauthURLWithoutCompanyReply): IP_Quickbooks_GetOauthURLWithoutCompanyReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetOauthURLWithoutCompanyReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetOauthURLWithoutCompanyReply
 */
export const IP_Quickbooks_GetOauthURLWithoutCompanyReply = new IP_Quickbooks_GetOauthURLWithoutCompanyReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetItemsRequest$Type extends MessageType<IP_Quickbooks_GetItemsRequest> {
    constructor() {
        super("IP_Quickbooks_GetItemsRequest", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetItemsRequest>): IP_Quickbooks_GetItemsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetItemsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetItemsRequest): IP_Quickbooks_GetItemsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_GetItemsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetItemsRequest
 */
export const IP_Quickbooks_GetItemsRequest = new IP_Quickbooks_GetItemsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetItemsReply$Type extends MessageType<IP_Quickbooks_GetItemsReply> {
    constructor() {
        super("IP_Quickbooks_GetItemsReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_GetItemsReply_Item }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetItemsReply>): IP_Quickbooks_GetItemsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetItemsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetItemsReply): IP_Quickbooks_GetItemsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_GetItemsReply.Item items */ 1:
                    message.items.push(IP_Quickbooks_GetItemsReply_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetItemsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_GetItemsReply.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            IP_Quickbooks_GetItemsReply_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetItemsReply
 */
export const IP_Quickbooks_GetItemsReply = new IP_Quickbooks_GetItemsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetItemsReply_Item$Type extends MessageType<IP_Quickbooks_GetItemsReply_Item> {
    constructor() {
        super("IP_Quickbooks_GetItemsReply.Item", [
            { no: 1, name: "quickbooks_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "system_load_invoice_item_category_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetItemsReply_Item>): IP_Quickbooks_GetItemsReply_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksItemId = "";
        message.name = "";
        message.description = "";
        message.type = "";
        message.active = false;
        message.systemLoadInvoiceItemCategoryIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetItemsReply_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetItemsReply_Item): IP_Quickbooks_GetItemsReply_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_item_id */ 1:
                    message.quickbooksItemId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* bool active */ 5:
                    message.active = reader.bool();
                    break;
                case /* repeated string system_load_invoice_item_category_ids */ 6:
                    message.systemLoadInvoiceItemCategoryIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetItemsReply_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_item_id = 1; */
        if (message.quickbooksItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksItemId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* bool active = 5; */
        if (message.active !== false)
            writer.tag(5, WireType.Varint).bool(message.active);
        /* repeated string system_load_invoice_item_category_ids = 6; */
        for (let i = 0; i < message.systemLoadInvoiceItemCategoryIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.systemLoadInvoiceItemCategoryIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetItemsReply.Item
 */
export const IP_Quickbooks_GetItemsReply_Item = new IP_Quickbooks_GetItemsReply_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest$Type extends MessageType<IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest> {
    constructor() {
        super("IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest", [
            { no: 1, name: "quickbooks_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_load_invoice_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest>): IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksItemId = "";
        message.systemLoadInvoiceItemCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest): IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_item_id */ 1:
                    message.quickbooksItemId = reader.string();
                    break;
                case /* string system_load_invoice_item_category_id */ 2:
                    message.systemLoadInvoiceItemCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_item_id = 1; */
        if (message.quickbooksItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksItemId);
        /* string system_load_invoice_item_category_id = 2; */
        if (message.systemLoadInvoiceItemCategoryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemLoadInvoiceItemCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest
 */
export const IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest = new IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply$Type extends MessageType<IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply> {
    constructor() {
        super("IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply>): IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply): IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply
 */
export const IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply = new IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest$Type extends MessageType<IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest> {
    constructor() {
        super("IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest", [
            { no: 1, name: "quickbooks_expense_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_settlement_transaction_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest>): IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksExpenseAccountId = "";
        message.systemSettlementTransactionCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest): IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_expense_account_id */ 1:
                    message.quickbooksExpenseAccountId = reader.string();
                    break;
                case /* string system_settlement_transaction_category_id */ 2:
                    message.systemSettlementTransactionCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_expense_account_id = 1; */
        if (message.quickbooksExpenseAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksExpenseAccountId);
        /* string system_settlement_transaction_category_id = 2; */
        if (message.systemSettlementTransactionCategoryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemSettlementTransactionCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest
 */
export const IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest = new IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply$Type extends MessageType<IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply> {
    constructor() {
        super("IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply>): IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply): IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply
 */
export const IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply = new IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Account_UpdateBankAccountRequest$Type extends MessageType<IP_Quickbooks_Account_UpdateBankAccountRequest> {
    constructor() {
        super("IP_Quickbooks_Account_UpdateBankAccountRequest", [
            { no: 1, name: "quickbooks_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Account_UpdateBankAccountRequest>): IP_Quickbooks_Account_UpdateBankAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksAccountId = "";
        message.systemBankAccountId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Account_UpdateBankAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Account_UpdateBankAccountRequest): IP_Quickbooks_Account_UpdateBankAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_account_id */ 1:
                    message.quickbooksAccountId = reader.string();
                    break;
                case /* string system_bank_account_id */ 2:
                    message.systemBankAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Account_UpdateBankAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_account_id = 1; */
        if (message.quickbooksAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksAccountId);
        /* string system_bank_account_id = 2; */
        if (message.systemBankAccountId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemBankAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Account_UpdateBankAccountRequest
 */
export const IP_Quickbooks_Account_UpdateBankAccountRequest = new IP_Quickbooks_Account_UpdateBankAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Account_UpdateBankAccountReply$Type extends MessageType<IP_Quickbooks_Account_UpdateBankAccountReply> {
    constructor() {
        super("IP_Quickbooks_Account_UpdateBankAccountReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Account_UpdateBankAccountReply>): IP_Quickbooks_Account_UpdateBankAccountReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Account_UpdateBankAccountReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Account_UpdateBankAccountReply): IP_Quickbooks_Account_UpdateBankAccountReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Account_UpdateBankAccountReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Account_UpdateBankAccountReply
 */
export const IP_Quickbooks_Account_UpdateBankAccountReply = new IP_Quickbooks_Account_UpdateBankAccountReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetClassesRequest$Type extends MessageType<IP_Quickbooks_GetClassesRequest> {
    constructor() {
        super("IP_Quickbooks_GetClassesRequest", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetClassesRequest>): IP_Quickbooks_GetClassesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetClassesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetClassesRequest): IP_Quickbooks_GetClassesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_GetClassesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetClassesRequest
 */
export const IP_Quickbooks_GetClassesRequest = new IP_Quickbooks_GetClassesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetClassesReply$Type extends MessageType<IP_Quickbooks_GetClassesReply> {
    constructor() {
        super("IP_Quickbooks_GetClassesReply", [
            { no: 1, name: "classes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_GetClassesReply_Class }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetClassesReply>): IP_Quickbooks_GetClassesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.classes = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetClassesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetClassesReply): IP_Quickbooks_GetClassesReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_GetClassesReply.Class classes */ 1:
                    message.classes.push(IP_Quickbooks_GetClassesReply_Class.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetClassesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_GetClassesReply.Class classes = 1; */
        for (let i = 0; i < message.classes.length; i++)
            IP_Quickbooks_GetClassesReply_Class.internalBinaryWrite(message.classes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetClassesReply
 */
export const IP_Quickbooks_GetClassesReply = new IP_Quickbooks_GetClassesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetClassesReply_Class$Type extends MessageType<IP_Quickbooks_GetClassesReply_Class> {
    constructor() {
        super("IP_Quickbooks_GetClassesReply.Class", [
            { no: 1, name: "quickbooks_class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fully_qualified_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "parent_class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "system_truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetClassesReply_Class>): IP_Quickbooks_GetClassesReply_Class {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksClassId = "";
        message.name = "";
        message.fullyQualifiedName = "";
        message.active = false;
        message.parentClassId = "";
        message.systemTruckIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetClassesReply_Class>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetClassesReply_Class): IP_Quickbooks_GetClassesReply_Class {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_class_id */ 1:
                    message.quickbooksClassId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string fully_qualified_name */ 3:
                    message.fullyQualifiedName = reader.string();
                    break;
                case /* bool active */ 4:
                    message.active = reader.bool();
                    break;
                case /* string parent_class_id */ 5:
                    message.parentClassId = reader.string();
                    break;
                case /* repeated string system_truck_ids */ 6:
                    message.systemTruckIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetClassesReply_Class, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_class_id = 1; */
        if (message.quickbooksClassId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksClassId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string fully_qualified_name = 3; */
        if (message.fullyQualifiedName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullyQualifiedName);
        /* bool active = 4; */
        if (message.active !== false)
            writer.tag(4, WireType.Varint).bool(message.active);
        /* string parent_class_id = 5; */
        if (message.parentClassId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.parentClassId);
        /* repeated string system_truck_ids = 6; */
        for (let i = 0; i < message.systemTruckIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.systemTruckIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetClassesReply.Class
 */
export const IP_Quickbooks_GetClassesReply_Class = new IP_Quickbooks_GetClassesReply_Class$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Class_UpdateTruckRequest$Type extends MessageType<IP_Quickbooks_Class_UpdateTruckRequest> {
    constructor() {
        super("IP_Quickbooks_Class_UpdateTruckRequest", [
            { no: 1, name: "quickbooks_class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Class_UpdateTruckRequest>): IP_Quickbooks_Class_UpdateTruckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksClassId = "";
        message.systemTruckId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Class_UpdateTruckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Class_UpdateTruckRequest): IP_Quickbooks_Class_UpdateTruckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_class_id */ 1:
                    message.quickbooksClassId = reader.string();
                    break;
                case /* string system_truck_id */ 2:
                    message.systemTruckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Class_UpdateTruckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_class_id = 1; */
        if (message.quickbooksClassId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksClassId);
        /* string system_truck_id = 2; */
        if (message.systemTruckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemTruckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Class_UpdateTruckRequest
 */
export const IP_Quickbooks_Class_UpdateTruckRequest = new IP_Quickbooks_Class_UpdateTruckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Class_UpdateTruckReply$Type extends MessageType<IP_Quickbooks_Class_UpdateTruckReply> {
    constructor() {
        super("IP_Quickbooks_Class_UpdateTruckReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Class_UpdateTruckReply>): IP_Quickbooks_Class_UpdateTruckReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Class_UpdateTruckReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Class_UpdateTruckReply): IP_Quickbooks_Class_UpdateTruckReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Class_UpdateTruckReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Class_UpdateTruckReply
 */
export const IP_Quickbooks_Class_UpdateTruckReply = new IP_Quickbooks_Class_UpdateTruckReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetCustomersRequest$Type extends MessageType<IP_Quickbooks_GetCustomersRequest> {
    constructor() {
        super("IP_Quickbooks_GetCustomersRequest", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetCustomersRequest>): IP_Quickbooks_GetCustomersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetCustomersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetCustomersRequest): IP_Quickbooks_GetCustomersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_GetCustomersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetCustomersRequest
 */
export const IP_Quickbooks_GetCustomersRequest = new IP_Quickbooks_GetCustomersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetCustomersReply$Type extends MessageType<IP_Quickbooks_GetCustomersReply> {
    constructor() {
        super("IP_Quickbooks_GetCustomersReply", [
            { no: 1, name: "customers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_GetCustomersReply_Customer }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetCustomersReply>): IP_Quickbooks_GetCustomersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customers = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetCustomersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetCustomersReply): IP_Quickbooks_GetCustomersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_GetCustomersReply.Customer customers */ 1:
                    message.customers.push(IP_Quickbooks_GetCustomersReply_Customer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetCustomersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_GetCustomersReply.Customer customers = 1; */
        for (let i = 0; i < message.customers.length; i++)
            IP_Quickbooks_GetCustomersReply_Customer.internalBinaryWrite(message.customers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetCustomersReply
 */
export const IP_Quickbooks_GetCustomersReply = new IP_Quickbooks_GetCustomersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetCustomersReply_Customer$Type extends MessageType<IP_Quickbooks_GetCustomersReply_Customer> {
    constructor() {
        super("IP_Quickbooks_GetCustomersReply.Customer", [
            { no: 1, name: "quickbooks_customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "system_customer_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "system_broker_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetCustomersReply_Customer>): IP_Quickbooks_GetCustomersReply_Customer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksCustomerId = "";
        message.displayName = "";
        message.companyName = "";
        message.active = false;
        message.phone = "";
        message.systemCustomerId = [];
        message.systemBrokerId = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetCustomersReply_Customer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetCustomersReply_Customer): IP_Quickbooks_GetCustomersReply_Customer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_customer_id */ 1:
                    message.quickbooksCustomerId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string company_name */ 3:
                    message.companyName = reader.string();
                    break;
                case /* bool active */ 4:
                    message.active = reader.bool();
                    break;
                case /* string phone */ 5:
                    message.phone = reader.string();
                    break;
                case /* repeated string system_customer_id */ 6:
                    message.systemCustomerId.push(reader.string());
                    break;
                case /* repeated string system_broker_id */ 7:
                    message.systemBrokerId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetCustomersReply_Customer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_customer_id = 1; */
        if (message.quickbooksCustomerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksCustomerId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string company_name = 3; */
        if (message.companyName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.companyName);
        /* bool active = 4; */
        if (message.active !== false)
            writer.tag(4, WireType.Varint).bool(message.active);
        /* string phone = 5; */
        if (message.phone !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.phone);
        /* repeated string system_customer_id = 6; */
        for (let i = 0; i < message.systemCustomerId.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.systemCustomerId[i]);
        /* repeated string system_broker_id = 7; */
        for (let i = 0; i < message.systemBrokerId.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.systemBrokerId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetCustomersReply.Customer
 */
export const IP_Quickbooks_GetCustomersReply_Customer = new IP_Quickbooks_GetCustomersReply_Customer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest$Type extends MessageType<IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest> {
    constructor() {
        super("IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest", [
            { no: 1, name: "quickbooks_customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest>): IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksCustomerId = "";
        message.systemCustomerId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest): IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_customer_id */ 1:
                    message.quickbooksCustomerId = reader.string();
                    break;
                case /* string system_customer_id */ 2:
                    message.systemCustomerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_customer_id = 1; */
        if (message.quickbooksCustomerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksCustomerId);
        /* string system_customer_id = 2; */
        if (message.systemCustomerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemCustomerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest
 */
export const IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest = new IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Customer_UpdateSystemCustomerIDReply$Type extends MessageType<IP_Quickbooks_Customer_UpdateSystemCustomerIDReply> {
    constructor() {
        super("IP_Quickbooks_Customer_UpdateSystemCustomerIDReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Customer_UpdateSystemCustomerIDReply>): IP_Quickbooks_Customer_UpdateSystemCustomerIDReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Customer_UpdateSystemCustomerIDReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Customer_UpdateSystemCustomerIDReply): IP_Quickbooks_Customer_UpdateSystemCustomerIDReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Customer_UpdateSystemCustomerIDReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Customer_UpdateSystemCustomerIDReply
 */
export const IP_Quickbooks_Customer_UpdateSystemCustomerIDReply = new IP_Quickbooks_Customer_UpdateSystemCustomerIDReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest$Type extends MessageType<IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest> {
    constructor() {
        super("IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest", [
            { no: 1, name: "quickbooks_customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest>): IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksCustomerId = "";
        message.systemBrokerId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest): IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_customer_id */ 1:
                    message.quickbooksCustomerId = reader.string();
                    break;
                case /* string system_broker_id */ 2:
                    message.systemBrokerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_customer_id = 1; */
        if (message.quickbooksCustomerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksCustomerId);
        /* string system_broker_id = 2; */
        if (message.systemBrokerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemBrokerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest
 */
export const IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest = new IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Customer_UpdateSystemBrokerIDReply$Type extends MessageType<IP_Quickbooks_Customer_UpdateSystemBrokerIDReply> {
    constructor() {
        super("IP_Quickbooks_Customer_UpdateSystemBrokerIDReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Customer_UpdateSystemBrokerIDReply>): IP_Quickbooks_Customer_UpdateSystemBrokerIDReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Customer_UpdateSystemBrokerIDReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Customer_UpdateSystemBrokerIDReply): IP_Quickbooks_Customer_UpdateSystemBrokerIDReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Customer_UpdateSystemBrokerIDReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Customer_UpdateSystemBrokerIDReply
 */
export const IP_Quickbooks_Customer_UpdateSystemBrokerIDReply = new IP_Quickbooks_Customer_UpdateSystemBrokerIDReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_CreateRequest$Type extends MessageType<IP_Quickbooks_Invoice_CreateRequest> {
    constructor() {
        super("IP_Quickbooks_Invoice_CreateRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_CreateRequest>): IP_Quickbooks_Invoice_CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_CreateRequest): IP_Quickbooks_Invoice_CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_CreateRequest
 */
export const IP_Quickbooks_Invoice_CreateRequest = new IP_Quickbooks_Invoice_CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_CreateReply$Type extends MessageType<IP_Quickbooks_Invoice_CreateReply> {
    constructor() {
        super("IP_Quickbooks_Invoice_CreateReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_CreateReply>): IP_Quickbooks_Invoice_CreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_CreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_CreateReply): IP_Quickbooks_Invoice_CreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_CreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_CreateReply
 */
export const IP_Quickbooks_Invoice_CreateReply = new IP_Quickbooks_Invoice_CreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_GetRequest$Type extends MessageType<IP_Quickbooks_Invoice_GetRequest> {
    constructor() {
        super("IP_Quickbooks_Invoice_GetRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_GetRequest>): IP_Quickbooks_Invoice_GetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_GetRequest): IP_Quickbooks_Invoice_GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_GetRequest
 */
export const IP_Quickbooks_Invoice_GetRequest = new IP_Quickbooks_Invoice_GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_GetReply$Type extends MessageType<IP_Quickbooks_Invoice_GetReply> {
    constructor() {
        super("IP_Quickbooks_Invoice_GetReply", [
            { no: 1, name: "invoices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_GetReply>): IP_Quickbooks_Invoice_GetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoices = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_GetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_GetReply): IP_Quickbooks_Invoice_GetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_Invoice_GetReply.QuickbooksInvoice invoices */ 1:
                    message.invoices.push(IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_GetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_Invoice_GetReply.QuickbooksInvoice invoices = 1; */
        for (let i = 0; i < message.invoices.length; i++)
            IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice.internalBinaryWrite(message.invoices[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_GetReply
 */
export const IP_Quickbooks_Invoice_GetReply = new IP_Quickbooks_Invoice_GetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice$Type extends MessageType<IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice> {
    constructor() {
        super("IP_Quickbooks_Invoice_GetReply.QuickbooksInvoice", [
            { no: 1, name: "quickbooks_invoice_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "doc_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "allow_online_credit_card_payment", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "allow_online_ach_payment", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "print_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "invoice_pdf_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "invoice_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice>): IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksInvoiceId = "";
        message.docNumber = "";
        message.totalAmount = "";
        message.balance = "";
        message.allowOnlineCreditCardPayment = false;
        message.allowOnlineAchPayment = false;
        message.printStatus = "";
        message.emailStatus = "";
        message.invoicePdfPath = "";
        message.invoiceLink = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice): IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_invoice_id */ 1:
                    message.quickbooksInvoiceId = reader.string();
                    break;
                case /* string doc_number */ 2:
                    message.docNumber = reader.string();
                    break;
                case /* string total_amount */ 3:
                    message.totalAmount = reader.string();
                    break;
                case /* string balance */ 4:
                    message.balance = reader.string();
                    break;
                case /* bool allow_online_credit_card_payment */ 5:
                    message.allowOnlineCreditCardPayment = reader.bool();
                    break;
                case /* bool allow_online_ach_payment */ 6:
                    message.allowOnlineAchPayment = reader.bool();
                    break;
                case /* string print_status */ 7:
                    message.printStatus = reader.string();
                    break;
                case /* string email_status */ 8:
                    message.emailStatus = reader.string();
                    break;
                case /* string invoice_pdf_path */ 9:
                    message.invoicePdfPath = reader.string();
                    break;
                case /* string invoice_link */ 10:
                    message.invoiceLink = reader.string();
                    break;
                case /* string updated_at */ 11:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_invoice_id = 1; */
        if (message.quickbooksInvoiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksInvoiceId);
        /* string doc_number = 2; */
        if (message.docNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.docNumber);
        /* string total_amount = 3; */
        if (message.totalAmount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalAmount);
        /* string balance = 4; */
        if (message.balance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.balance);
        /* bool allow_online_credit_card_payment = 5; */
        if (message.allowOnlineCreditCardPayment !== false)
            writer.tag(5, WireType.Varint).bool(message.allowOnlineCreditCardPayment);
        /* bool allow_online_ach_payment = 6; */
        if (message.allowOnlineAchPayment !== false)
            writer.tag(6, WireType.Varint).bool(message.allowOnlineAchPayment);
        /* string print_status = 7; */
        if (message.printStatus !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.printStatus);
        /* string email_status = 8; */
        if (message.emailStatus !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.emailStatus);
        /* string invoice_pdf_path = 9; */
        if (message.invoicePdfPath !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.invoicePdfPath);
        /* string invoice_link = 10; */
        if (message.invoiceLink !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.invoiceLink);
        /* string updated_at = 11; */
        if (message.updatedAt !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_GetReply.QuickbooksInvoice
 */
export const IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice = new IP_Quickbooks_Invoice_GetReply_QuickbooksInvoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_SyncRequest$Type extends MessageType<IP_Quickbooks_Invoice_SyncRequest> {
    constructor() {
        super("IP_Quickbooks_Invoice_SyncRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_SyncRequest>): IP_Quickbooks_Invoice_SyncRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_SyncRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_SyncRequest): IP_Quickbooks_Invoice_SyncRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_SyncRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_SyncRequest
 */
export const IP_Quickbooks_Invoice_SyncRequest = new IP_Quickbooks_Invoice_SyncRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_SyncReply$Type extends MessageType<IP_Quickbooks_Invoice_SyncReply> {
    constructor() {
        super("IP_Quickbooks_Invoice_SyncReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_SyncReply>): IP_Quickbooks_Invoice_SyncReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_SyncReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_SyncReply): IP_Quickbooks_Invoice_SyncReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_SyncReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_SyncReply
 */
export const IP_Quickbooks_Invoice_SyncReply = new IP_Quickbooks_Invoice_SyncReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_SendRequest$Type extends MessageType<IP_Quickbooks_Invoice_SendRequest> {
    constructor() {
        super("IP_Quickbooks_Invoice_SendRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_SendRequest>): IP_Quickbooks_Invoice_SendRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_SendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_SendRequest): IP_Quickbooks_Invoice_SendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_SendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_SendRequest
 */
export const IP_Quickbooks_Invoice_SendRequest = new IP_Quickbooks_Invoice_SendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_SendReply$Type extends MessageType<IP_Quickbooks_Invoice_SendReply> {
    constructor() {
        super("IP_Quickbooks_Invoice_SendReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_SendReply>): IP_Quickbooks_Invoice_SendReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_SendReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_SendReply): IP_Quickbooks_Invoice_SendReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_SendReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_SendReply
 */
export const IP_Quickbooks_Invoice_SendReply = new IP_Quickbooks_Invoice_SendReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_VoidRequest$Type extends MessageType<IP_Quickbooks_Invoice_VoidRequest> {
    constructor() {
        super("IP_Quickbooks_Invoice_VoidRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_VoidRequest>): IP_Quickbooks_Invoice_VoidRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_VoidRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_VoidRequest): IP_Quickbooks_Invoice_VoidRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_VoidRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_VoidRequest
 */
export const IP_Quickbooks_Invoice_VoidRequest = new IP_Quickbooks_Invoice_VoidRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_VoidReply$Type extends MessageType<IP_Quickbooks_Invoice_VoidReply> {
    constructor() {
        super("IP_Quickbooks_Invoice_VoidReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_VoidReply>): IP_Quickbooks_Invoice_VoidReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_VoidReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_VoidReply): IP_Quickbooks_Invoice_VoidReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_VoidReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_VoidReply
 */
export const IP_Quickbooks_Invoice_VoidReply = new IP_Quickbooks_Invoice_VoidReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_DeleteRequest$Type extends MessageType<IP_Quickbooks_Invoice_DeleteRequest> {
    constructor() {
        super("IP_Quickbooks_Invoice_DeleteRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_DeleteRequest>): IP_Quickbooks_Invoice_DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_DeleteRequest): IP_Quickbooks_Invoice_DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_DeleteRequest
 */
export const IP_Quickbooks_Invoice_DeleteRequest = new IP_Quickbooks_Invoice_DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Invoice_DeleteReply$Type extends MessageType<IP_Quickbooks_Invoice_DeleteReply> {
    constructor() {
        super("IP_Quickbooks_Invoice_DeleteReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Invoice_DeleteReply>): IP_Quickbooks_Invoice_DeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Invoice_DeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Invoice_DeleteReply): IP_Quickbooks_Invoice_DeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Invoice_DeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Invoice_DeleteReply
 */
export const IP_Quickbooks_Invoice_DeleteReply = new IP_Quickbooks_Invoice_DeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_CreateRequest$Type extends MessageType<IP_Quickbooks_Bill_CreateRequest> {
    constructor() {
        super("IP_Quickbooks_Bill_CreateRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_Bill_CreateRequest_Settlement }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_CreateRequest>): IP_Quickbooks_Bill_CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_CreateRequest): IP_Quickbooks_Bill_CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_Bill_CreateRequest.Settlement settlements */ 1:
                    message.settlements.push(IP_Quickbooks_Bill_CreateRequest_Settlement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_Bill_CreateRequest.Settlement settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            IP_Quickbooks_Bill_CreateRequest_Settlement.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_CreateRequest
 */
export const IP_Quickbooks_Bill_CreateRequest = new IP_Quickbooks_Bill_CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_CreateRequest_Settlement$Type extends MessageType<IP_Quickbooks_Bill_CreateRequest_Settlement> {
    constructor() {
        super("IP_Quickbooks_Bill_CreateRequest.Settlement", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_CreateRequest_Settlement>): IP_Quickbooks_Bill_CreateRequest_Settlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_CreateRequest_Settlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_CreateRequest_Settlement): IP_Quickbooks_Bill_CreateRequest_Settlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_CreateRequest_Settlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_CreateRequest.Settlement
 */
export const IP_Quickbooks_Bill_CreateRequest_Settlement = new IP_Quickbooks_Bill_CreateRequest_Settlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_CreateReply$Type extends MessageType<IP_Quickbooks_Bill_CreateReply> {
    constructor() {
        super("IP_Quickbooks_Bill_CreateReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_CreateReply>): IP_Quickbooks_Bill_CreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_CreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_CreateReply): IP_Quickbooks_Bill_CreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_CreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_CreateReply
 */
export const IP_Quickbooks_Bill_CreateReply = new IP_Quickbooks_Bill_CreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_GetRequest$Type extends MessageType<IP_Quickbooks_Bill_GetRequest> {
    constructor() {
        super("IP_Quickbooks_Bill_GetRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_Bill_GetRequest_Settlement }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_GetRequest>): IP_Quickbooks_Bill_GetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_GetRequest): IP_Quickbooks_Bill_GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_Bill_GetRequest.Settlement settlements */ 1:
                    message.settlements.push(IP_Quickbooks_Bill_GetRequest_Settlement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_Bill_GetRequest.Settlement settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            IP_Quickbooks_Bill_GetRequest_Settlement.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_GetRequest
 */
export const IP_Quickbooks_Bill_GetRequest = new IP_Quickbooks_Bill_GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_GetRequest_Settlement$Type extends MessageType<IP_Quickbooks_Bill_GetRequest_Settlement> {
    constructor() {
        super("IP_Quickbooks_Bill_GetRequest.Settlement", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_GetRequest_Settlement>): IP_Quickbooks_Bill_GetRequest_Settlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_GetRequest_Settlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_GetRequest_Settlement): IP_Quickbooks_Bill_GetRequest_Settlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_GetRequest_Settlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_GetRequest.Settlement
 */
export const IP_Quickbooks_Bill_GetRequest_Settlement = new IP_Quickbooks_Bill_GetRequest_Settlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_GetReply$Type extends MessageType<IP_Quickbooks_Bill_GetReply> {
    constructor() {
        super("IP_Quickbooks_Bill_GetReply", [
            { no: 1, name: "bills", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_Bill_GetReply_Bill }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_GetReply>): IP_Quickbooks_Bill_GetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bills = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_GetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_GetReply): IP_Quickbooks_Bill_GetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_Bill_GetReply.Bill bills */ 1:
                    message.bills.push(IP_Quickbooks_Bill_GetReply_Bill.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_GetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_Bill_GetReply.Bill bills = 1; */
        for (let i = 0; i < message.bills.length; i++)
            IP_Quickbooks_Bill_GetReply_Bill.internalBinaryWrite(message.bills[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_GetReply
 */
export const IP_Quickbooks_Bill_GetReply = new IP_Quickbooks_Bill_GetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_GetReply_Bill$Type extends MessageType<IP_Quickbooks_Bill_GetReply_Bill> {
    constructor() {
        super("IP_Quickbooks_Bill_GetReply.Bill", [
            { no: 1, name: "quickbooks_bill_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "doc_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "due_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "system_cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "system_period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "system_settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_GetReply_Bill>): IP_Quickbooks_Bill_GetReply_Bill {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksBillId = "";
        message.docNumber = "";
        message.totalAmount = "";
        message.balance = "";
        message.dueDate = "";
        message.updatedAt = "";
        message.systemCycleId = "";
        message.systemPeriodId = "";
        message.systemSettlementId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_GetReply_Bill>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_GetReply_Bill): IP_Quickbooks_Bill_GetReply_Bill {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_bill_id */ 1:
                    message.quickbooksBillId = reader.string();
                    break;
                case /* string doc_number */ 2:
                    message.docNumber = reader.string();
                    break;
                case /* string total_amount */ 3:
                    message.totalAmount = reader.string();
                    break;
                case /* string balance */ 4:
                    message.balance = reader.string();
                    break;
                case /* string due_date */ 5:
                    message.dueDate = reader.string();
                    break;
                case /* string updated_at */ 6:
                    message.updatedAt = reader.string();
                    break;
                case /* string system_cycle_id */ 7:
                    message.systemCycleId = reader.string();
                    break;
                case /* string system_period_id */ 8:
                    message.systemPeriodId = reader.string();
                    break;
                case /* string system_settlement_id */ 9:
                    message.systemSettlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_GetReply_Bill, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_bill_id = 1; */
        if (message.quickbooksBillId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksBillId);
        /* string doc_number = 2; */
        if (message.docNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.docNumber);
        /* string total_amount = 3; */
        if (message.totalAmount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalAmount);
        /* string balance = 4; */
        if (message.balance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.balance);
        /* string due_date = 5; */
        if (message.dueDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.dueDate);
        /* string updated_at = 6; */
        if (message.updatedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.updatedAt);
        /* string system_cycle_id = 7; */
        if (message.systemCycleId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.systemCycleId);
        /* string system_period_id = 8; */
        if (message.systemPeriodId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.systemPeriodId);
        /* string system_settlement_id = 9; */
        if (message.systemSettlementId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.systemSettlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_GetReply.Bill
 */
export const IP_Quickbooks_Bill_GetReply_Bill = new IP_Quickbooks_Bill_GetReply_Bill$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_SyncRequest$Type extends MessageType<IP_Quickbooks_Bill_SyncRequest> {
    constructor() {
        super("IP_Quickbooks_Bill_SyncRequest", [
            { no: 3, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_Bill_SyncRequest_Settlement }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_SyncRequest>): IP_Quickbooks_Bill_SyncRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_SyncRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_SyncRequest): IP_Quickbooks_Bill_SyncRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_Bill_SyncRequest.Settlement settlements */ 3:
                    message.settlements.push(IP_Quickbooks_Bill_SyncRequest_Settlement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_SyncRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_Bill_SyncRequest.Settlement settlements = 3; */
        for (let i = 0; i < message.settlements.length; i++)
            IP_Quickbooks_Bill_SyncRequest_Settlement.internalBinaryWrite(message.settlements[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_SyncRequest
 */
export const IP_Quickbooks_Bill_SyncRequest = new IP_Quickbooks_Bill_SyncRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_SyncRequest_Settlement$Type extends MessageType<IP_Quickbooks_Bill_SyncRequest_Settlement> {
    constructor() {
        super("IP_Quickbooks_Bill_SyncRequest.Settlement", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_SyncRequest_Settlement>): IP_Quickbooks_Bill_SyncRequest_Settlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_SyncRequest_Settlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_SyncRequest_Settlement): IP_Quickbooks_Bill_SyncRequest_Settlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_SyncRequest_Settlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_SyncRequest.Settlement
 */
export const IP_Quickbooks_Bill_SyncRequest_Settlement = new IP_Quickbooks_Bill_SyncRequest_Settlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_SyncReply$Type extends MessageType<IP_Quickbooks_Bill_SyncReply> {
    constructor() {
        super("IP_Quickbooks_Bill_SyncReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_SyncReply>): IP_Quickbooks_Bill_SyncReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_SyncReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_SyncReply): IP_Quickbooks_Bill_SyncReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_SyncReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_SyncReply
 */
export const IP_Quickbooks_Bill_SyncReply = new IP_Quickbooks_Bill_SyncReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_DeleteRequest$Type extends MessageType<IP_Quickbooks_Bill_DeleteRequest> {
    constructor() {
        super("IP_Quickbooks_Bill_DeleteRequest", [
            { no: 1, name: "settlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_Bill_DeleteRequest_Settlement }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_DeleteRequest>): IP_Quickbooks_Bill_DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_DeleteRequest): IP_Quickbooks_Bill_DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_Bill_DeleteRequest.Settlement settlements */ 1:
                    message.settlements.push(IP_Quickbooks_Bill_DeleteRequest_Settlement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_Bill_DeleteRequest.Settlement settlements = 1; */
        for (let i = 0; i < message.settlements.length; i++)
            IP_Quickbooks_Bill_DeleteRequest_Settlement.internalBinaryWrite(message.settlements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_DeleteRequest
 */
export const IP_Quickbooks_Bill_DeleteRequest = new IP_Quickbooks_Bill_DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_DeleteRequest_Settlement$Type extends MessageType<IP_Quickbooks_Bill_DeleteRequest_Settlement> {
    constructor() {
        super("IP_Quickbooks_Bill_DeleteRequest.Settlement", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_DeleteRequest_Settlement>): IP_Quickbooks_Bill_DeleteRequest_Settlement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_DeleteRequest_Settlement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_DeleteRequest_Settlement): IP_Quickbooks_Bill_DeleteRequest_Settlement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_DeleteRequest_Settlement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_DeleteRequest.Settlement
 */
export const IP_Quickbooks_Bill_DeleteRequest_Settlement = new IP_Quickbooks_Bill_DeleteRequest_Settlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Bill_DeleteReply$Type extends MessageType<IP_Quickbooks_Bill_DeleteReply> {
    constructor() {
        super("IP_Quickbooks_Bill_DeleteReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Bill_DeleteReply>): IP_Quickbooks_Bill_DeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Bill_DeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Bill_DeleteReply): IP_Quickbooks_Bill_DeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Bill_DeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Bill_DeleteReply
 */
export const IP_Quickbooks_Bill_DeleteReply = new IP_Quickbooks_Bill_DeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_CreateRequest$Type extends MessageType<IP_Quickbooks_BillPayment_CreateRequest> {
    constructor() {
        super("IP_Quickbooks_BillPayment_CreateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_CreateRequest>): IP_Quickbooks_BillPayment_CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.payoutId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_CreateRequest): IP_Quickbooks_BillPayment_CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string payout_id */ 4:
                    message.payoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string payout_id = 4; */
        if (message.payoutId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.payoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_CreateRequest
 */
export const IP_Quickbooks_BillPayment_CreateRequest = new IP_Quickbooks_BillPayment_CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_CreateReply$Type extends MessageType<IP_Quickbooks_BillPayment_CreateReply> {
    constructor() {
        super("IP_Quickbooks_BillPayment_CreateReply", [
            { no: 1, name: "qb_billpayment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_CreateReply>): IP_Quickbooks_BillPayment_CreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qbBillpaymentId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_CreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_CreateReply): IP_Quickbooks_BillPayment_CreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string qb_billpayment_id */ 1:
                    message.qbBillpaymentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_CreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string qb_billpayment_id = 1; */
        if (message.qbBillpaymentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.qbBillpaymentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_CreateReply
 */
export const IP_Quickbooks_BillPayment_CreateReply = new IP_Quickbooks_BillPayment_CreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_GetRequest$Type extends MessageType<IP_Quickbooks_BillPayment_GetRequest> {
    constructor() {
        super("IP_Quickbooks_BillPayment_GetRequest", [
            { no: 1, name: "payout_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_GetRequest>): IP_Quickbooks_BillPayment_GetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_GetRequest): IP_Quickbooks_BillPayment_GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string payout_ids */ 1:
                    message.payoutIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string payout_ids = 1; */
        for (let i = 0; i < message.payoutIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.payoutIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_GetRequest
 */
export const IP_Quickbooks_BillPayment_GetRequest = new IP_Quickbooks_BillPayment_GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_GetReply$Type extends MessageType<IP_Quickbooks_BillPayment_GetReply> {
    constructor() {
        super("IP_Quickbooks_BillPayment_GetReply", [
            { no: 1, name: "bill_payments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_BillPayment_GetReply_BillPayment }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_GetReply>): IP_Quickbooks_BillPayment_GetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.billPayments = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_GetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_GetReply): IP_Quickbooks_BillPayment_GetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_BillPayment_GetReply.BillPayment bill_payments */ 1:
                    message.billPayments.push(IP_Quickbooks_BillPayment_GetReply_BillPayment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_GetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_BillPayment_GetReply.BillPayment bill_payments = 1; */
        for (let i = 0; i < message.billPayments.length; i++)
            IP_Quickbooks_BillPayment_GetReply_BillPayment.internalBinaryWrite(message.billPayments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_GetReply
 */
export const IP_Quickbooks_BillPayment_GetReply = new IP_Quickbooks_BillPayment_GetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_GetReply_BillPayment$Type extends MessageType<IP_Quickbooks_BillPayment_GetReply_BillPayment> {
    constructor() {
        super("IP_Quickbooks_BillPayment_GetReply.BillPayment", [
            { no: 1, name: "quickbooks_bill_payment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "doc_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "total_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "system_payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_GetReply_BillPayment>): IP_Quickbooks_BillPayment_GetReply_BillPayment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksBillPaymentId = "";
        message.docNumber = "";
        message.totalAmount = 0;
        message.totalAmountFormatted = "";
        message.updatedAt = "";
        message.systemPayoutId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_GetReply_BillPayment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_GetReply_BillPayment): IP_Quickbooks_BillPayment_GetReply_BillPayment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_bill_payment_id */ 1:
                    message.quickbooksBillPaymentId = reader.string();
                    break;
                case /* string doc_number */ 2:
                    message.docNumber = reader.string();
                    break;
                case /* double total_amount */ 3:
                    message.totalAmount = reader.double();
                    break;
                case /* string total_amount_formatted */ 4:
                    message.totalAmountFormatted = reader.string();
                    break;
                case /* string updated_at */ 5:
                    message.updatedAt = reader.string();
                    break;
                case /* string system_payout_id */ 6:
                    message.systemPayoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_GetReply_BillPayment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_bill_payment_id = 1; */
        if (message.quickbooksBillPaymentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksBillPaymentId);
        /* string doc_number = 2; */
        if (message.docNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.docNumber);
        /* double total_amount = 3; */
        if (message.totalAmount !== 0)
            writer.tag(3, WireType.Bit64).double(message.totalAmount);
        /* string total_amount_formatted = 4; */
        if (message.totalAmountFormatted !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.totalAmountFormatted);
        /* string updated_at = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        /* string system_payout_id = 6; */
        if (message.systemPayoutId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.systemPayoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_GetReply.BillPayment
 */
export const IP_Quickbooks_BillPayment_GetReply_BillPayment = new IP_Quickbooks_BillPayment_GetReply_BillPayment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_SyncRequest$Type extends MessageType<IP_Quickbooks_BillPayment_SyncRequest> {
    constructor() {
        super("IP_Quickbooks_BillPayment_SyncRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_SyncRequest>): IP_Quickbooks_BillPayment_SyncRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_SyncRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_SyncRequest): IP_Quickbooks_BillPayment_SyncRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_SyncRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_SyncRequest
 */
export const IP_Quickbooks_BillPayment_SyncRequest = new IP_Quickbooks_BillPayment_SyncRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_SyncReply$Type extends MessageType<IP_Quickbooks_BillPayment_SyncReply> {
    constructor() {
        super("IP_Quickbooks_BillPayment_SyncReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_SyncReply>): IP_Quickbooks_BillPayment_SyncReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_SyncReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_SyncReply): IP_Quickbooks_BillPayment_SyncReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_SyncReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_SyncReply
 */
export const IP_Quickbooks_BillPayment_SyncReply = new IP_Quickbooks_BillPayment_SyncReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_VoidRequest$Type extends MessageType<IP_Quickbooks_BillPayment_VoidRequest> {
    constructor() {
        super("IP_Quickbooks_BillPayment_VoidRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_VoidRequest>): IP_Quickbooks_BillPayment_VoidRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_VoidRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_VoidRequest): IP_Quickbooks_BillPayment_VoidRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_VoidRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_VoidRequest
 */
export const IP_Quickbooks_BillPayment_VoidRequest = new IP_Quickbooks_BillPayment_VoidRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_VoidReply$Type extends MessageType<IP_Quickbooks_BillPayment_VoidReply> {
    constructor() {
        super("IP_Quickbooks_BillPayment_VoidReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_VoidReply>): IP_Quickbooks_BillPayment_VoidReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_VoidReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_VoidReply): IP_Quickbooks_BillPayment_VoidReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_VoidReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_VoidReply
 */
export const IP_Quickbooks_BillPayment_VoidReply = new IP_Quickbooks_BillPayment_VoidReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_DeleteRequest$Type extends MessageType<IP_Quickbooks_BillPayment_DeleteRequest> {
    constructor() {
        super("IP_Quickbooks_BillPayment_DeleteRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_DeleteRequest>): IP_Quickbooks_BillPayment_DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_DeleteRequest): IP_Quickbooks_BillPayment_DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_DeleteRequest
 */
export const IP_Quickbooks_BillPayment_DeleteRequest = new IP_Quickbooks_BillPayment_DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_BillPayment_DeleteReply$Type extends MessageType<IP_Quickbooks_BillPayment_DeleteReply> {
    constructor() {
        super("IP_Quickbooks_BillPayment_DeleteReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_BillPayment_DeleteReply>): IP_Quickbooks_BillPayment_DeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_BillPayment_DeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_BillPayment_DeleteReply): IP_Quickbooks_BillPayment_DeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_BillPayment_DeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_BillPayment_DeleteReply
 */
export const IP_Quickbooks_BillPayment_DeleteReply = new IP_Quickbooks_BillPayment_DeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetVendorsRequest$Type extends MessageType<IP_Quickbooks_GetVendorsRequest> {
    constructor() {
        super("IP_Quickbooks_GetVendorsRequest", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetVendorsRequest>): IP_Quickbooks_GetVendorsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetVendorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetVendorsRequest): IP_Quickbooks_GetVendorsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_GetVendorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetVendorsRequest
 */
export const IP_Quickbooks_GetVendorsRequest = new IP_Quickbooks_GetVendorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetVendorsReply$Type extends MessageType<IP_Quickbooks_GetVendorsReply> {
    constructor() {
        super("IP_Quickbooks_GetVendorsReply", [
            { no: 1, name: "vendors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_GetVendorsReply_Vendor }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetVendorsReply>): IP_Quickbooks_GetVendorsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vendors = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetVendorsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetVendorsReply): IP_Quickbooks_GetVendorsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_GetVendorsReply.Vendor vendors */ 1:
                    message.vendors.push(IP_Quickbooks_GetVendorsReply_Vendor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetVendorsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_GetVendorsReply.Vendor vendors = 1; */
        for (let i = 0; i < message.vendors.length; i++)
            IP_Quickbooks_GetVendorsReply_Vendor.internalBinaryWrite(message.vendors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetVendorsReply
 */
export const IP_Quickbooks_GetVendorsReply = new IP_Quickbooks_GetVendorsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetVendorsReply_Vendor$Type extends MessageType<IP_Quickbooks_GetVendorsReply_Vendor> {
    constructor() {
        super("IP_Quickbooks_GetVendorsReply.Vendor", [
            { no: 1, name: "quickbooks_vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "print_on_check_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "system_driver_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "system_vendor_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetVendorsReply_Vendor>): IP_Quickbooks_GetVendorsReply_Vendor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksVendorId = "";
        message.displayName = "";
        message.printOnCheckName = "";
        message.companyName = "";
        message.active = false;
        message.phone = "";
        message.systemDriverId = [];
        message.systemVendorId = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetVendorsReply_Vendor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetVendorsReply_Vendor): IP_Quickbooks_GetVendorsReply_Vendor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_vendor_id */ 1:
                    message.quickbooksVendorId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string print_on_check_name */ 3:
                    message.printOnCheckName = reader.string();
                    break;
                case /* string company_name */ 4:
                    message.companyName = reader.string();
                    break;
                case /* bool active */ 5:
                    message.active = reader.bool();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* repeated string system_driver_id */ 7:
                    message.systemDriverId.push(reader.string());
                    break;
                case /* repeated string system_vendor_id */ 8:
                    message.systemVendorId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetVendorsReply_Vendor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_vendor_id = 1; */
        if (message.quickbooksVendorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksVendorId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string print_on_check_name = 3; */
        if (message.printOnCheckName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.printOnCheckName);
        /* string company_name = 4; */
        if (message.companyName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.companyName);
        /* bool active = 5; */
        if (message.active !== false)
            writer.tag(5, WireType.Varint).bool(message.active);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* repeated string system_driver_id = 7; */
        for (let i = 0; i < message.systemDriverId.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.systemDriverId[i]);
        /* repeated string system_vendor_id = 8; */
        for (let i = 0; i < message.systemVendorId.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.systemVendorId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetVendorsReply.Vendor
 */
export const IP_Quickbooks_GetVendorsReply_Vendor = new IP_Quickbooks_GetVendorsReply_Vendor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest$Type extends MessageType<IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest> {
    constructor() {
        super("IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest", [
            { no: 1, name: "quickbooks_vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest>): IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksVendorId = "";
        message.systemDriverId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest): IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_vendor_id */ 1:
                    message.quickbooksVendorId = reader.string();
                    break;
                case /* string system_driver_id */ 2:
                    message.systemDriverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_vendor_id = 1; */
        if (message.quickbooksVendorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksVendorId);
        /* string system_driver_id = 2; */
        if (message.systemDriverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemDriverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest
 */
export const IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest = new IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Vendor_UpdateSystemDriverIDReply$Type extends MessageType<IP_Quickbooks_Vendor_UpdateSystemDriverIDReply> {
    constructor() {
        super("IP_Quickbooks_Vendor_UpdateSystemDriverIDReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Vendor_UpdateSystemDriverIDReply>): IP_Quickbooks_Vendor_UpdateSystemDriverIDReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Vendor_UpdateSystemDriverIDReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Vendor_UpdateSystemDriverIDReply): IP_Quickbooks_Vendor_UpdateSystemDriverIDReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Vendor_UpdateSystemDriverIDReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Vendor_UpdateSystemDriverIDReply
 */
export const IP_Quickbooks_Vendor_UpdateSystemDriverIDReply = new IP_Quickbooks_Vendor_UpdateSystemDriverIDReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest$Type extends MessageType<IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest> {
    constructor() {
        super("IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest", [
            { no: 1, name: "quickbooks_vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest>): IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksVendorId = "";
        message.systemVendorId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest): IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_vendor_id */ 1:
                    message.quickbooksVendorId = reader.string();
                    break;
                case /* string system_vendor_id */ 2:
                    message.systemVendorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_vendor_id = 1; */
        if (message.quickbooksVendorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksVendorId);
        /* string system_vendor_id = 2; */
        if (message.systemVendorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemVendorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest
 */
export const IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest = new IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Vendor_UpdateSystemVendorIDReply$Type extends MessageType<IP_Quickbooks_Vendor_UpdateSystemVendorIDReply> {
    constructor() {
        super("IP_Quickbooks_Vendor_UpdateSystemVendorIDReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Vendor_UpdateSystemVendorIDReply>): IP_Quickbooks_Vendor_UpdateSystemVendorIDReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Vendor_UpdateSystemVendorIDReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Vendor_UpdateSystemVendorIDReply): IP_Quickbooks_Vendor_UpdateSystemVendorIDReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Vendor_UpdateSystemVendorIDReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Vendor_UpdateSystemVendorIDReply
 */
export const IP_Quickbooks_Vendor_UpdateSystemVendorIDReply = new IP_Quickbooks_Vendor_UpdateSystemVendorIDReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetAccountsRequest$Type extends MessageType<IP_Quickbooks_GetAccountsRequest> {
    constructor() {
        super("IP_Quickbooks_GetAccountsRequest", [
            { no: 1, name: "filter_by_type", kind: "enum", T: () => ["QuickBooksModel.Account.Type", QuickBooksModel_Account_Type, "TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetAccountsRequest>): IP_Quickbooks_GetAccountsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filterByType = 0;
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetAccountsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetAccountsRequest): IP_Quickbooks_GetAccountsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QuickBooksModel.Account.Type filter_by_type */ 1:
                    message.filterByType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetAccountsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QuickBooksModel.Account.Type filter_by_type = 1; */
        if (message.filterByType !== 0)
            writer.tag(1, WireType.Varint).int32(message.filterByType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetAccountsRequest
 */
export const IP_Quickbooks_GetAccountsRequest = new IP_Quickbooks_GetAccountsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetAccountsReply$Type extends MessageType<IP_Quickbooks_GetAccountsReply> {
    constructor() {
        super("IP_Quickbooks_GetAccountsReply", [
            { no: 1, name: "accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_GetAccountsReply_Account }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetAccountsReply>): IP_Quickbooks_GetAccountsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accounts = [];
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetAccountsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetAccountsReply): IP_Quickbooks_GetAccountsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_Quickbooks_GetAccountsReply.Account accounts */ 1:
                    message.accounts.push(IP_Quickbooks_GetAccountsReply_Account.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetAccountsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_Quickbooks_GetAccountsReply.Account accounts = 1; */
        for (let i = 0; i < message.accounts.length; i++)
            IP_Quickbooks_GetAccountsReply_Account.internalBinaryWrite(message.accounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetAccountsReply
 */
export const IP_Quickbooks_GetAccountsReply = new IP_Quickbooks_GetAccountsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetAccountsReply_Account$Type extends MessageType<IP_Quickbooks_GetAccountsReply_Account> {
    constructor() {
        super("IP_Quickbooks_GetAccountsReply.Account", [
            { no: 1, name: "quickbooks_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "full_qualified_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["QuickBooksModel.Account.Type", QuickBooksModel_Account_Type, "TYPE_"] },
            { no: 6, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "parent_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "system_settlement_transaction_category_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "system_revenue_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType },
            { no: 8, name: "system_bank_account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "account_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "account_sub_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetAccountsReply_Account>): IP_Quickbooks_GetAccountsReply_Account {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quickbooksAccountId = "";
        message.name = "";
        message.fullQualifiedName = "";
        message.description = "";
        message.type = 0;
        message.active = false;
        message.parentAccountId = "";
        message.systemSettlementTransactionCategoryIds = [];
        message.systemRevenueTypes = [];
        message.systemBankAccountIds = [];
        message.accountType = "";
        message.accountSubType = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetAccountsReply_Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetAccountsReply_Account): IP_Quickbooks_GetAccountsReply_Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quickbooks_account_id */ 1:
                    message.quickbooksAccountId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string full_qualified_name */ 3:
                    message.fullQualifiedName = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* QuickBooksModel.Account.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* bool active */ 6:
                    message.active = reader.bool();
                    break;
                case /* string parent_account_id */ 7:
                    message.parentAccountId = reader.string();
                    break;
                case /* repeated string system_settlement_transaction_category_ids */ 9:
                    message.systemSettlementTransactionCategoryIds.push(reader.string());
                    break;
                case /* repeated IP_Quickbooks_GetAccountsReply.Account.SystemRevenueType system_revenue_types */ 10:
                    message.systemRevenueTypes.push(IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string system_bank_account_ids */ 8:
                    message.systemBankAccountIds.push(reader.string());
                    break;
                case /* string account_type */ 11:
                    message.accountType = reader.string();
                    break;
                case /* string account_sub_type */ 12:
                    message.accountSubType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetAccountsReply_Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quickbooks_account_id = 1; */
        if (message.quickbooksAccountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quickbooksAccountId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string full_qualified_name = 3; */
        if (message.fullQualifiedName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullQualifiedName);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* QuickBooksModel.Account.Type type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* bool active = 6; */
        if (message.active !== false)
            writer.tag(6, WireType.Varint).bool(message.active);
        /* string parent_account_id = 7; */
        if (message.parentAccountId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.parentAccountId);
        /* repeated string system_settlement_transaction_category_ids = 9; */
        for (let i = 0; i < message.systemSettlementTransactionCategoryIds.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.systemSettlementTransactionCategoryIds[i]);
        /* repeated IP_Quickbooks_GetAccountsReply.Account.SystemRevenueType system_revenue_types = 10; */
        for (let i = 0; i < message.systemRevenueTypes.length; i++)
            IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType.internalBinaryWrite(message.systemRevenueTypes[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated string system_bank_account_ids = 8; */
        for (let i = 0; i < message.systemBankAccountIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.systemBankAccountIds[i]);
        /* string account_type = 11; */
        if (message.accountType !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.accountType);
        /* string account_sub_type = 12; */
        if (message.accountSubType !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.accountSubType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetAccountsReply.Account
 */
export const IP_Quickbooks_GetAccountsReply_Account = new IP_Quickbooks_GetAccountsReply_Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType$Type extends MessageType<IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType> {
    constructor() {
        super("IP_Quickbooks_GetAccountsReply.Account.SystemRevenueType", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "linked_to_total_loads_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "linked_to_fuel_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "linked_to_tolls_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType>): IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.linkedToTotalLoadsAmount = false;
        message.linkedToFuelAmount = false;
        message.linkedToTollsAmount = false;
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType): IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* bool linked_to_total_loads_amount */ 2:
                    message.linkedToTotalLoadsAmount = reader.bool();
                    break;
                case /* bool linked_to_fuel_amount */ 3:
                    message.linkedToFuelAmount = reader.bool();
                    break;
                case /* bool linked_to_tolls_amount */ 4:
                    message.linkedToTollsAmount = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* bool linked_to_total_loads_amount = 2; */
        if (message.linkedToTotalLoadsAmount !== false)
            writer.tag(2, WireType.Varint).bool(message.linkedToTotalLoadsAmount);
        /* bool linked_to_fuel_amount = 3; */
        if (message.linkedToFuelAmount !== false)
            writer.tag(3, WireType.Varint).bool(message.linkedToFuelAmount);
        /* bool linked_to_tolls_amount = 4; */
        if (message.linkedToTollsAmount !== false)
            writer.tag(4, WireType.Varint).bool(message.linkedToTollsAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_GetAccountsReply.Account.SystemRevenueType
 */
export const IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType = new IP_Quickbooks_GetAccountsReply_Account_SystemRevenueType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest$Type extends MessageType<IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest> {
    constructor() {
        super("IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_loads_amount_quickbooks_expense_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fuel_amount_quickbooks_expense_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tolls_amount_quickbooks_expense_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest>): IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.totalLoadsAmountQuickbooksExpenseAccountId = "";
        message.fuelAmountQuickbooksExpenseAccountId = "";
        message.tollsAmountQuickbooksExpenseAccountId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest): IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* string total_loads_amount_quickbooks_expense_account_id */ 2:
                    message.totalLoadsAmountQuickbooksExpenseAccountId = reader.string();
                    break;
                case /* string fuel_amount_quickbooks_expense_account_id */ 3:
                    message.fuelAmountQuickbooksExpenseAccountId = reader.string();
                    break;
                case /* string tolls_amount_quickbooks_expense_account_id */ 4:
                    message.tollsAmountQuickbooksExpenseAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* string total_loads_amount_quickbooks_expense_account_id = 2; */
        if (message.totalLoadsAmountQuickbooksExpenseAccountId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalLoadsAmountQuickbooksExpenseAccountId);
        /* string fuel_amount_quickbooks_expense_account_id = 3; */
        if (message.fuelAmountQuickbooksExpenseAccountId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fuelAmountQuickbooksExpenseAccountId);
        /* string tolls_amount_quickbooks_expense_account_id = 4; */
        if (message.tollsAmountQuickbooksExpenseAccountId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tollsAmountQuickbooksExpenseAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest
 */
export const IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest = new IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply$Type extends MessageType<IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply> {
    constructor() {
        super("IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply", []);
    }
    create(value?: PartialMessage<IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply>): IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply): IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply
 */
export const IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply = new IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply$Type();
/**
 * @generated ServiceType for protobuf service IntegrationProviderQuickbooksService
 */
export const IntegrationProviderQuickbooksService = new ServiceType("IntegrationProviderQuickbooksService", [
    { name: "IP_Quickbooks_SignUp", options: {}, I: IP_Quickbooks_SignUpRequest, O: IP_Quickbooks_SignUpReply },
    { name: "IP_Quickbooks_GetDisconnectOAuthURL", options: {}, I: IP_Quickbooks_GetDisconnectOAuthURLRequest, O: IP_Quickbooks_GetDisconnectOAuthURLReply },
    { name: "IP_Quickbooks_DisconnectByCode", options: {}, I: IP_Quickbooks_DisconnectByCodeRequest, O: IP_Quickbooks_DisconnectByCodeReply },
    { name: "IP_Quickbooks_GetOauthURLWithoutCompany", options: {}, I: IP_Quickbooks_GetOauthURLWithoutCompanyRequest, O: IP_Quickbooks_GetOauthURLWithoutCompanyReply },
    { name: "IP_Quickbooks_GetAccounts", options: {}, I: IP_Quickbooks_GetAccountsRequest, O: IP_Quickbooks_GetAccountsReply },
    { name: "IP_Quickbooks_Account_UpdateSettlementRevenueType", options: {}, I: IP_Quickbooks_Account_UpdateSettlementRevenueTypeRequest, O: IP_Quickbooks_Account_UpdateSettlementRevenueTypeReply },
    { name: "IP_Quickbooks_Account_UpdateSettlementTransactionCategory", options: {}, I: IP_Quickbooks_Account_UpdateSettlementTransactionCategoryRequest, O: IP_Quickbooks_Account_UpdateSettlementTransactionCategoryReply },
    { name: "IP_Quickbooks_Account_UpdateBankAccount", options: {}, I: IP_Quickbooks_Account_UpdateBankAccountRequest, O: IP_Quickbooks_Account_UpdateBankAccountReply },
    { name: "IP_Quickbooks_GetClasses", options: {}, I: IP_Quickbooks_GetClassesRequest, O: IP_Quickbooks_GetClassesReply },
    { name: "IP_Quickbooks_Class_UpdateTruck", options: {}, I: IP_Quickbooks_Class_UpdateTruckRequest, O: IP_Quickbooks_Class_UpdateTruckReply },
    { name: "IP_Quickbooks_GetItems", options: {}, I: IP_Quickbooks_GetItemsRequest, O: IP_Quickbooks_GetItemsReply },
    { name: "IP_Quickbooks_Item_UpdateLoadInvoiceItemCategory", options: {}, I: IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryRequest, O: IP_Quickbooks_Item_UpdateLoadInvoiceItemCategoryReply },
    { name: "IP_Quickbooks_GetCustomers", options: {}, I: IP_Quickbooks_GetCustomersRequest, O: IP_Quickbooks_GetCustomersReply },
    { name: "IP_Quickbooks_Customer_UpdateSystemCustomerID", options: {}, I: IP_Quickbooks_Customer_UpdateSystemCustomerIDRequest, O: IP_Quickbooks_Customer_UpdateSystemCustomerIDReply },
    { name: "IP_Quickbooks_Customer_UpdateSystemBrokerID", options: {}, I: IP_Quickbooks_Customer_UpdateSystemBrokerIDRequest, O: IP_Quickbooks_Customer_UpdateSystemBrokerIDReply },
    { name: "IP_Quickbooks_GetVendors", options: {}, I: IP_Quickbooks_GetVendorsRequest, O: IP_Quickbooks_GetVendorsReply },
    { name: "IP_Quickbooks_Vendor_UpdateSystemDriverID", options: {}, I: IP_Quickbooks_Vendor_UpdateSystemDriverIDRequest, O: IP_Quickbooks_Vendor_UpdateSystemDriverIDReply },
    { name: "IP_Quickbooks_Vendor_UpdateSystemVendorID", options: {}, I: IP_Quickbooks_Vendor_UpdateSystemVendorIDRequest, O: IP_Quickbooks_Vendor_UpdateSystemVendorIDReply },
    { name: "IP_Quickbooks_Invoice_Create", options: {}, I: IP_Quickbooks_Invoice_CreateRequest, O: IP_Quickbooks_Invoice_CreateReply },
    { name: "IP_Quickbooks_Invoice_Get", options: {}, I: IP_Quickbooks_Invoice_GetRequest, O: IP_Quickbooks_Invoice_GetReply },
    { name: "IP_Quickbooks_Invoice_Sync", options: {}, I: IP_Quickbooks_Invoice_SyncRequest, O: IP_Quickbooks_Invoice_SyncReply },
    { name: "IP_Quickbooks_Invoice_Send", options: {}, I: IP_Quickbooks_Invoice_SendRequest, O: IP_Quickbooks_Invoice_SendReply },
    { name: "IP_Quickbooks_Invoice_Void", options: {}, I: IP_Quickbooks_Invoice_VoidRequest, O: IP_Quickbooks_Invoice_VoidReply },
    { name: "IP_Quickbooks_Invoice_Delete", options: {}, I: IP_Quickbooks_Invoice_DeleteRequest, O: IP_Quickbooks_Invoice_DeleteReply },
    { name: "IP_Quickbooks_Bill_Create", options: {}, I: IP_Quickbooks_Bill_CreateRequest, O: IP_Quickbooks_Bill_CreateReply },
    { name: "IP_Quickbooks_Bill_Get", options: {}, I: IP_Quickbooks_Bill_GetRequest, O: IP_Quickbooks_Bill_GetReply },
    { name: "IP_Quickbooks_Bill_Sync", options: {}, I: IP_Quickbooks_Bill_SyncRequest, O: IP_Quickbooks_Bill_SyncReply },
    { name: "IP_Quickbooks_Bill_Delete", options: {}, I: IP_Quickbooks_Bill_DeleteRequest, O: IP_Quickbooks_Bill_DeleteReply },
    { name: "IP_Quickbooks_BillPayment_Create", options: {}, I: IP_Quickbooks_BillPayment_CreateRequest, O: IP_Quickbooks_BillPayment_CreateReply },
    { name: "IP_Quickbooks_BillPayment_Get", options: {}, I: IP_Quickbooks_BillPayment_GetRequest, O: IP_Quickbooks_BillPayment_GetReply },
    { name: "IP_Quickbooks_BillPayment_Sync", options: {}, I: IP_Quickbooks_BillPayment_SyncRequest, O: IP_Quickbooks_BillPayment_SyncReply },
    { name: "IP_Quickbooks_BillPayment_Void", options: {}, I: IP_Quickbooks_BillPayment_VoidRequest, O: IP_Quickbooks_BillPayment_VoidReply },
    { name: "IP_Quickbooks_BillPayment_Delete", options: {}, I: IP_Quickbooks_BillPayment_DeleteRequest, O: IP_Quickbooks_BillPayment_DeleteReply }
]);
