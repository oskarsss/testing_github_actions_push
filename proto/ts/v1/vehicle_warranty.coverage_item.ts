// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/vehicle_warranty.coverage_item.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VehicleWarrantyModel_ItemRead } from "./models/model_vehicle_warranty";
import { VehicleWarrantyModel_ItemWrite } from "./models/model_vehicle_warranty";
/**
 * Create
 *
 * @generated from protobuf message WarrantyItemCreateRequest
 */
export interface WarrantyItemCreateRequest {
    /**
     * @generated from protobuf field: string vehicle_warranty_id = 1;
     */
    vehicleWarrantyId: string;
    /**
     * @generated from protobuf field: VehicleWarrantyModel.ItemWrite base_item = 2;
     */
    baseItem?: VehicleWarrantyModel_ItemWrite;
}
/**
 * @generated from protobuf message WarrantyItemCreateReply
 */
export interface WarrantyItemCreateReply {
    /**
     * @generated from protobuf field: string warranty_item_id = 1;
     */
    warrantyItemId: string;
}
/**
 * Update
 *
 * @generated from protobuf message WarrantyItemUpdateRequest
 */
export interface WarrantyItemUpdateRequest {
    /**
     * @generated from protobuf field: string vehicle_warranty_id = 1;
     */
    vehicleWarrantyId: string;
    /**
     * @generated from protobuf field: string warranty_item_id = 2;
     */
    warrantyItemId: string;
    /**
     * @generated from protobuf field: VehicleWarrantyModel.ItemWrite base_item = 3;
     */
    baseItem?: VehicleWarrantyModel_ItemWrite;
}
/**
 * @generated from protobuf message WarrantyItemUpdateReply
 */
export interface WarrantyItemUpdateReply {
}
/**
 * Retrieve
 *
 * @generated from protobuf message WarrantyItemRetrieveRequest
 */
export interface WarrantyItemRetrieveRequest {
    /**
     * @generated from protobuf field: string vehicle_warranty_id = 1;
     */
    vehicleWarrantyId: string;
    /**
     * @generated from protobuf field: string warranty_item_id = 2;
     */
    warrantyItemId: string;
}
/**
 * @generated from protobuf message WarrantyItemRetrieveReply
 */
export interface WarrantyItemRetrieveReply {
    /**
     * @generated from protobuf field: VehicleWarrantyModel.ItemRead base_item = 1;
     */
    baseItem?: VehicleWarrantyModel_ItemRead;
    /**
     * @generated from protobuf field: optional int64 period_weeks_remain = 2;
     */
    periodWeeksRemain?: number;
    /**
     * @generated from protobuf field: optional int64 distance_miles_remain = 3;
     */
    distanceMilesRemain?: number;
    /**
     * @generated from protobuf field: optional int64 distance_kilometers_remain = 4;
     */
    distanceKilometersRemain?: number;
}
/**
 * Get
 *
 * @generated from protobuf message WarrantyItemGetRequest
 */
export interface WarrantyItemGetRequest {
    /**
     * @generated from protobuf field: string vehicle_warranty_id = 1;
     */
    vehicleWarrantyId: string;
}
/**
 * @generated from protobuf message WarrantyItemGetReply
 */
export interface WarrantyItemGetReply {
    /**
     * @generated from protobuf field: repeated WarrantyItemGetReply.ItemWithRemains items = 1;
     */
    items: WarrantyItemGetReply_ItemWithRemains[];
}
/**
 * @generated from protobuf message WarrantyItemGetReply.ItemWithRemains
 */
export interface WarrantyItemGetReply_ItemWithRemains {
    /**
     * @generated from protobuf field: VehicleWarrantyModel.ItemRead base_item = 1;
     */
    baseItem?: VehicleWarrantyModel_ItemRead;
    /**
     * @generated from protobuf field: optional int64 period_weeks_remain = 2;
     */
    periodWeeksRemain?: number;
    /**
     * @generated from protobuf field: optional int64 distance_miles_remain = 3;
     */
    distanceMilesRemain?: number;
    /**
     * @generated from protobuf field: optional int64 distance_kilometers_remain = 4;
     */
    distanceKilometersRemain?: number;
}
/**
 * Delete
 *
 * @generated from protobuf message WarrantyItemDeleteRequest
 */
export interface WarrantyItemDeleteRequest {
    /**
     * @generated from protobuf field: string vehicle_warranty_id = 1;
     */
    vehicleWarrantyId: string;
    /**
     * @generated from protobuf field: string warranty_item_id = 2;
     */
    warrantyItemId: string;
}
/**
 * @generated from protobuf message WarrantyItemDeleteReply
 */
export interface WarrantyItemDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemCreateRequest$Type extends MessageType<WarrantyItemCreateRequest> {
    constructor() {
        super("WarrantyItemCreateRequest", [
            { no: 1, name: "vehicle_warranty_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "base_item", kind: "message", T: () => VehicleWarrantyModel_ItemWrite }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemCreateRequest>): WarrantyItemCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleWarrantyId = "";
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemCreateRequest): WarrantyItemCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_warranty_id */ 1:
                    message.vehicleWarrantyId = reader.string();
                    break;
                case /* VehicleWarrantyModel.ItemWrite base_item */ 2:
                    message.baseItem = VehicleWarrantyModel_ItemWrite.internalBinaryRead(reader, reader.uint32(), options, message.baseItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_warranty_id = 1; */
        if (message.vehicleWarrantyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleWarrantyId);
        /* VehicleWarrantyModel.ItemWrite base_item = 2; */
        if (message.baseItem)
            VehicleWarrantyModel_ItemWrite.internalBinaryWrite(message.baseItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemCreateRequest
 */
export const WarrantyItemCreateRequest = new WarrantyItemCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemCreateReply$Type extends MessageType<WarrantyItemCreateReply> {
    constructor() {
        super("WarrantyItemCreateReply", [
            { no: 1, name: "warranty_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemCreateReply>): WarrantyItemCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.warrantyItemId = "";
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemCreateReply): WarrantyItemCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string warranty_item_id */ 1:
                    message.warrantyItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string warranty_item_id = 1; */
        if (message.warrantyItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.warrantyItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemCreateReply
 */
export const WarrantyItemCreateReply = new WarrantyItemCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemUpdateRequest$Type extends MessageType<WarrantyItemUpdateRequest> {
    constructor() {
        super("WarrantyItemUpdateRequest", [
            { no: 1, name: "vehicle_warranty_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "warranty_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "base_item", kind: "message", T: () => VehicleWarrantyModel_ItemWrite }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemUpdateRequest>): WarrantyItemUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleWarrantyId = "";
        message.warrantyItemId = "";
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemUpdateRequest): WarrantyItemUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_warranty_id */ 1:
                    message.vehicleWarrantyId = reader.string();
                    break;
                case /* string warranty_item_id */ 2:
                    message.warrantyItemId = reader.string();
                    break;
                case /* VehicleWarrantyModel.ItemWrite base_item */ 3:
                    message.baseItem = VehicleWarrantyModel_ItemWrite.internalBinaryRead(reader, reader.uint32(), options, message.baseItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_warranty_id = 1; */
        if (message.vehicleWarrantyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleWarrantyId);
        /* string warranty_item_id = 2; */
        if (message.warrantyItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.warrantyItemId);
        /* VehicleWarrantyModel.ItemWrite base_item = 3; */
        if (message.baseItem)
            VehicleWarrantyModel_ItemWrite.internalBinaryWrite(message.baseItem, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemUpdateRequest
 */
export const WarrantyItemUpdateRequest = new WarrantyItemUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemUpdateReply$Type extends MessageType<WarrantyItemUpdateReply> {
    constructor() {
        super("WarrantyItemUpdateReply", []);
    }
    create(value?: PartialMessage<WarrantyItemUpdateReply>): WarrantyItemUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemUpdateReply): WarrantyItemUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WarrantyItemUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemUpdateReply
 */
export const WarrantyItemUpdateReply = new WarrantyItemUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemRetrieveRequest$Type extends MessageType<WarrantyItemRetrieveRequest> {
    constructor() {
        super("WarrantyItemRetrieveRequest", [
            { no: 1, name: "vehicle_warranty_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "warranty_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemRetrieveRequest>): WarrantyItemRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleWarrantyId = "";
        message.warrantyItemId = "";
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemRetrieveRequest): WarrantyItemRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_warranty_id */ 1:
                    message.vehicleWarrantyId = reader.string();
                    break;
                case /* string warranty_item_id */ 2:
                    message.warrantyItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_warranty_id = 1; */
        if (message.vehicleWarrantyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleWarrantyId);
        /* string warranty_item_id = 2; */
        if (message.warrantyItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.warrantyItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemRetrieveRequest
 */
export const WarrantyItemRetrieveRequest = new WarrantyItemRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemRetrieveReply$Type extends MessageType<WarrantyItemRetrieveReply> {
    constructor() {
        super("WarrantyItemRetrieveReply", [
            { no: 1, name: "base_item", kind: "message", T: () => VehicleWarrantyModel_ItemRead },
            { no: 2, name: "period_weeks_remain", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "distance_miles_remain", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "distance_kilometers_remain", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemRetrieveReply>): WarrantyItemRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemRetrieveReply): WarrantyItemRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleWarrantyModel.ItemRead base_item */ 1:
                    message.baseItem = VehicleWarrantyModel_ItemRead.internalBinaryRead(reader, reader.uint32(), options, message.baseItem);
                    break;
                case /* optional int64 period_weeks_remain */ 2:
                    message.periodWeeksRemain = reader.int64().toNumber();
                    break;
                case /* optional int64 distance_miles_remain */ 3:
                    message.distanceMilesRemain = reader.int64().toNumber();
                    break;
                case /* optional int64 distance_kilometers_remain */ 4:
                    message.distanceKilometersRemain = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleWarrantyModel.ItemRead base_item = 1; */
        if (message.baseItem)
            VehicleWarrantyModel_ItemRead.internalBinaryWrite(message.baseItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 period_weeks_remain = 2; */
        if (message.periodWeeksRemain !== undefined)
            writer.tag(2, WireType.Varint).int64(message.periodWeeksRemain);
        /* optional int64 distance_miles_remain = 3; */
        if (message.distanceMilesRemain !== undefined)
            writer.tag(3, WireType.Varint).int64(message.distanceMilesRemain);
        /* optional int64 distance_kilometers_remain = 4; */
        if (message.distanceKilometersRemain !== undefined)
            writer.tag(4, WireType.Varint).int64(message.distanceKilometersRemain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemRetrieveReply
 */
export const WarrantyItemRetrieveReply = new WarrantyItemRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemGetRequest$Type extends MessageType<WarrantyItemGetRequest> {
    constructor() {
        super("WarrantyItemGetRequest", [
            { no: 1, name: "vehicle_warranty_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemGetRequest>): WarrantyItemGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleWarrantyId = "";
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemGetRequest): WarrantyItemGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_warranty_id */ 1:
                    message.vehicleWarrantyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_warranty_id = 1; */
        if (message.vehicleWarrantyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleWarrantyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemGetRequest
 */
export const WarrantyItemGetRequest = new WarrantyItemGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemGetReply$Type extends MessageType<WarrantyItemGetReply> {
    constructor() {
        super("WarrantyItemGetReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WarrantyItemGetReply_ItemWithRemains }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemGetReply>): WarrantyItemGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemGetReply): WarrantyItemGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated WarrantyItemGetReply.ItemWithRemains items */ 1:
                    message.items.push(WarrantyItemGetReply_ItemWithRemains.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated WarrantyItemGetReply.ItemWithRemains items = 1; */
        for (let i = 0; i < message.items.length; i++)
            WarrantyItemGetReply_ItemWithRemains.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemGetReply
 */
export const WarrantyItemGetReply = new WarrantyItemGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemGetReply_ItemWithRemains$Type extends MessageType<WarrantyItemGetReply_ItemWithRemains> {
    constructor() {
        super("WarrantyItemGetReply.ItemWithRemains", [
            { no: 1, name: "base_item", kind: "message", T: () => VehicleWarrantyModel_ItemRead },
            { no: 2, name: "period_weeks_remain", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "distance_miles_remain", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "distance_kilometers_remain", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemGetReply_ItemWithRemains>): WarrantyItemGetReply_ItemWithRemains {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemGetReply_ItemWithRemains>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemGetReply_ItemWithRemains): WarrantyItemGetReply_ItemWithRemains {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleWarrantyModel.ItemRead base_item */ 1:
                    message.baseItem = VehicleWarrantyModel_ItemRead.internalBinaryRead(reader, reader.uint32(), options, message.baseItem);
                    break;
                case /* optional int64 period_weeks_remain */ 2:
                    message.periodWeeksRemain = reader.int64().toNumber();
                    break;
                case /* optional int64 distance_miles_remain */ 3:
                    message.distanceMilesRemain = reader.int64().toNumber();
                    break;
                case /* optional int64 distance_kilometers_remain */ 4:
                    message.distanceKilometersRemain = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemGetReply_ItemWithRemains, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleWarrantyModel.ItemRead base_item = 1; */
        if (message.baseItem)
            VehicleWarrantyModel_ItemRead.internalBinaryWrite(message.baseItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 period_weeks_remain = 2; */
        if (message.periodWeeksRemain !== undefined)
            writer.tag(2, WireType.Varint).int64(message.periodWeeksRemain);
        /* optional int64 distance_miles_remain = 3; */
        if (message.distanceMilesRemain !== undefined)
            writer.tag(3, WireType.Varint).int64(message.distanceMilesRemain);
        /* optional int64 distance_kilometers_remain = 4; */
        if (message.distanceKilometersRemain !== undefined)
            writer.tag(4, WireType.Varint).int64(message.distanceKilometersRemain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemGetReply.ItemWithRemains
 */
export const WarrantyItemGetReply_ItemWithRemains = new WarrantyItemGetReply_ItemWithRemains$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemDeleteRequest$Type extends MessageType<WarrantyItemDeleteRequest> {
    constructor() {
        super("WarrantyItemDeleteRequest", [
            { no: 1, name: "vehicle_warranty_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "warranty_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WarrantyItemDeleteRequest>): WarrantyItemDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleWarrantyId = "";
        message.warrantyItemId = "";
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemDeleteRequest): WarrantyItemDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_warranty_id */ 1:
                    message.vehicleWarrantyId = reader.string();
                    break;
                case /* string warranty_item_id */ 2:
                    message.warrantyItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WarrantyItemDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_warranty_id = 1; */
        if (message.vehicleWarrantyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleWarrantyId);
        /* string warranty_item_id = 2; */
        if (message.warrantyItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.warrantyItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemDeleteRequest
 */
export const WarrantyItemDeleteRequest = new WarrantyItemDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WarrantyItemDeleteReply$Type extends MessageType<WarrantyItemDeleteReply> {
    constructor() {
        super("WarrantyItemDeleteReply", []);
    }
    create(value?: PartialMessage<WarrantyItemDeleteReply>): WarrantyItemDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WarrantyItemDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarrantyItemDeleteReply): WarrantyItemDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WarrantyItemDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WarrantyItemDeleteReply
 */
export const WarrantyItemDeleteReply = new WarrantyItemDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service VehicleWarrantyCoverageItemService
 */
export const VehicleWarrantyCoverageItemService = new ServiceType("VehicleWarrantyCoverageItemService", [
    { name: "WarrantyItemCreate", options: {}, I: WarrantyItemCreateRequest, O: WarrantyItemCreateReply },
    { name: "WarrantyItemRetrieve", options: {}, I: WarrantyItemRetrieveRequest, O: WarrantyItemRetrieveReply },
    { name: "WarrantyItemGet", options: {}, I: WarrantyItemGetRequest, O: WarrantyItemGetReply },
    { name: "WarrantyItemUpdate", options: {}, I: WarrantyItemUpdateRequest, O: WarrantyItemUpdateReply },
    { name: "WarrantyItemDelete", options: {}, I: WarrantyItemDeleteRequest, O: WarrantyItemDeleteReply }
]);
