// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/equipment_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EquipmentTypeService } from "./equipment_type";
import type { EquipmentTypeRestoreReply } from "./equipment_type";
import type { EquipmentTypeRestoreRequest } from "./equipment_type";
import type { EquipmentTypeDeleteReply } from "./equipment_type";
import type { EquipmentTypeDeleteRequest } from "./equipment_type";
import type { EquipmentTypeUpdateReply } from "./equipment_type";
import type { EquipmentTypeUpdateRequest } from "./equipment_type";
import type { EquipmentTypeCreateReply } from "./equipment_type";
import type { EquipmentTypeCreateRequest } from "./equipment_type";
import type { EquipmentTypeRetrieveReply } from "./equipment_type";
import type { EquipmentTypeRetrieveRequest } from "./equipment_type";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EquipmentTypesGetReply } from "./equipment_type";
import type { EquipmentTypesGetRequest } from "./equipment_type";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service EquipmentTypeService
 */
export interface IEquipmentTypeServiceClient {
    /**
     * @generated from protobuf rpc: EquipmentTypesGet(EquipmentTypesGetRequest) returns (EquipmentTypesGetReply);
     */
    equipmentTypesGet(input: EquipmentTypesGetRequest, options?: RpcOptions): UnaryCall<EquipmentTypesGetRequest, EquipmentTypesGetReply>;
    /**
     * @generated from protobuf rpc: EquipmentTypeRetrieve(EquipmentTypeRetrieveRequest) returns (EquipmentTypeRetrieveReply);
     */
    equipmentTypeRetrieve(input: EquipmentTypeRetrieveRequest, options?: RpcOptions): UnaryCall<EquipmentTypeRetrieveRequest, EquipmentTypeRetrieveReply>;
    /**
     * @generated from protobuf rpc: EquipmentTypeCreate(EquipmentTypeCreateRequest) returns (EquipmentTypeCreateReply);
     */
    equipmentTypeCreate(input: EquipmentTypeCreateRequest, options?: RpcOptions): UnaryCall<EquipmentTypeCreateRequest, EquipmentTypeCreateReply>;
    /**
     * @generated from protobuf rpc: EquipmentTypeUpdate(EquipmentTypeUpdateRequest) returns (EquipmentTypeUpdateReply);
     */
    equipmentTypeUpdate(input: EquipmentTypeUpdateRequest, options?: RpcOptions): UnaryCall<EquipmentTypeUpdateRequest, EquipmentTypeUpdateReply>;
    /**
     * @generated from protobuf rpc: EquipmentTypeDelete(EquipmentTypeDeleteRequest) returns (EquipmentTypeDeleteReply);
     */
    equipmentTypeDelete(input: EquipmentTypeDeleteRequest, options?: RpcOptions): UnaryCall<EquipmentTypeDeleteRequest, EquipmentTypeDeleteReply>;
    /**
     * @generated from protobuf rpc: EquipmentTypeRestore(EquipmentTypeRestoreRequest) returns (EquipmentTypeRestoreReply);
     */
    equipmentTypeRestore(input: EquipmentTypeRestoreRequest, options?: RpcOptions): UnaryCall<EquipmentTypeRestoreRequest, EquipmentTypeRestoreReply>;
}
/**
 * @generated from protobuf service EquipmentTypeService
 */
export class EquipmentTypeServiceClient implements IEquipmentTypeServiceClient, ServiceInfo {
    typeName = EquipmentTypeService.typeName;
    methods = EquipmentTypeService.methods;
    options = EquipmentTypeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: EquipmentTypesGet(EquipmentTypesGetRequest) returns (EquipmentTypesGetReply);
     */
    equipmentTypesGet(input: EquipmentTypesGetRequest, options?: RpcOptions): UnaryCall<EquipmentTypesGetRequest, EquipmentTypesGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EquipmentTypesGetRequest, EquipmentTypesGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EquipmentTypeRetrieve(EquipmentTypeRetrieveRequest) returns (EquipmentTypeRetrieveReply);
     */
    equipmentTypeRetrieve(input: EquipmentTypeRetrieveRequest, options?: RpcOptions): UnaryCall<EquipmentTypeRetrieveRequest, EquipmentTypeRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EquipmentTypeRetrieveRequest, EquipmentTypeRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EquipmentTypeCreate(EquipmentTypeCreateRequest) returns (EquipmentTypeCreateReply);
     */
    equipmentTypeCreate(input: EquipmentTypeCreateRequest, options?: RpcOptions): UnaryCall<EquipmentTypeCreateRequest, EquipmentTypeCreateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EquipmentTypeCreateRequest, EquipmentTypeCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EquipmentTypeUpdate(EquipmentTypeUpdateRequest) returns (EquipmentTypeUpdateReply);
     */
    equipmentTypeUpdate(input: EquipmentTypeUpdateRequest, options?: RpcOptions): UnaryCall<EquipmentTypeUpdateRequest, EquipmentTypeUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<EquipmentTypeUpdateRequest, EquipmentTypeUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EquipmentTypeDelete(EquipmentTypeDeleteRequest) returns (EquipmentTypeDeleteReply);
     */
    equipmentTypeDelete(input: EquipmentTypeDeleteRequest, options?: RpcOptions): UnaryCall<EquipmentTypeDeleteRequest, EquipmentTypeDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<EquipmentTypeDeleteRequest, EquipmentTypeDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EquipmentTypeRestore(EquipmentTypeRestoreRequest) returns (EquipmentTypeRestoreReply);
     */
    equipmentTypeRestore(input: EquipmentTypeRestoreRequest, options?: RpcOptions): UnaryCall<EquipmentTypeRestoreRequest, EquipmentTypeRestoreReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<EquipmentTypeRestoreRequest, EquipmentTypeRestoreReply>("unary", this._transport, method, opt, input);
    }
}
