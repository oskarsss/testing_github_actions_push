// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlements.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SettlementsService } from "./settlements";
import type { SettlementFuelTransactionUnassignReply } from "./settlements";
import type { SettlementFuelTransactionUnassignRequest } from "./settlements";
import type { SettlementFuelTransactionAssignReply } from "./settlements";
import type { SettlementFuelTransactionAssignRequest } from "./settlements";
import type { SettlementManifestUnassignReply } from "./settlements";
import type { SettlementManifestUnassignRequest } from "./settlements";
import type { SettlementManifestAssignReply } from "./settlements";
import type { SettlementManifestAssignRequest } from "./settlements";
import type { SettlementTollUnassignReply } from "./settlements";
import type { SettlementTollUnassignRequest } from "./settlements";
import type { SettlementTollAssignReply } from "./settlements";
import type { SettlementTollAssignRequest } from "./settlements";
import type { SettlementPayDateUpdateReply } from "./settlements";
import type { SettlementPayDateUpdateRequest } from "./settlements";
import type { SettlementFuelDiscountsEnabledUpdateReply } from "./settlements";
import type { SettlementFuelDiscountsEnabledUpdateRequest } from "./settlements";
import type { SettlementDriverPayDeductTollsUpdateReply } from "./settlements";
import type { SettlementDriverPayDeductTollsUpdateRequest } from "./settlements";
import type { SettlementDriverPayDeductFuelUpdateReply } from "./settlements";
import type { SettlementDriverPayDeductFuelUpdateRequest } from "./settlements";
import type { SettlementBatchUpdateStatusReply } from "./settlements";
import type { SettlementBatchUpdateStatusRequest } from "./settlements";
import type { SettlementUpdateStatusReply } from "./settlements";
import type { SettlementUpdateStatusRequest } from "./settlements";
import type { SettlementRemoveLoadReply } from "./settlements";
import type { SettlementRemoveLoadRequest } from "./settlements";
import type { SettlementAssignLoadReply } from "./settlements";
import type { SettlementAssignLoadRequest } from "./settlements";
import type { SettlementSendBatchReply } from "./settlements";
import type { SettlementSendBatchRequest } from "./settlements";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SettlementSendBatchPreviewReply } from "./settlements";
import type { SettlementSendBatchPreviewRequest } from "./settlements";
import type { SendSettlementReply } from "./settlements";
import type { SendSettlementRequest } from "./settlements";
import type { SettlementBatchExportReply } from "./settlements";
import type { SettlementBatchExportRequest } from "./settlements";
import type { SettlementGeneratePDFReply } from "./settlements";
import type { SettlementGeneratePDFRequest } from "./settlements";
import type { SettlementUnassignVendorReply } from "./settlements";
import type { SettlementUnassignVendorRequest } from "./settlements";
import type { SettlementAssignVendorReply } from "./settlements";
import type { SettlementAssignVendorRequest } from "./settlements";
import type { SettlementAssignTruckReply } from "./settlements";
import type { SettlementAssignTruckRequest } from "./settlements";
import type { SettlementDeleteBatchReply } from "./settlements";
import type { SettlementDeleteBatchRequest } from "./settlements";
import type { SettlementDeleteReply } from "./settlements";
import type { SettlementDeleteRequest } from "./settlements";
import type { SettlementSyncReply } from "./settlements";
import type { SettlementSyncRequest } from "./settlements";
import type { PeriodSyncReply } from "./settlements";
import type { PeriodSyncRequest } from "./settlements";
import type { BatchCreateSettlementsReply } from "./settlements";
import type { BatchCreateSettlementsRequest } from "./settlements";
import type { SettlementGetReply } from "./settlements";
import type { SettlementGetRequest } from "./settlements";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RetrieveSettlementReply } from "./settlements";
import type { RetrieveSettlementRequest } from "./settlements";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SettlementsService
 */
export interface ISettlementsServiceClient {
    /**
     * @generated from protobuf rpc: RetrieveSettlement(RetrieveSettlementRequest) returns (RetrieveSettlementReply);
     */
    retrieveSettlement(input: RetrieveSettlementRequest, options?: RpcOptions): UnaryCall<RetrieveSettlementRequest, RetrieveSettlementReply>;
    /**
     * @generated from protobuf rpc: SettlementGet(SettlementGetRequest) returns (SettlementGetReply);
     */
    settlementGet(input: SettlementGetRequest, options?: RpcOptions): UnaryCall<SettlementGetRequest, SettlementGetReply>;
    /**
     * @generated from protobuf rpc: BatchCreateSettlements(BatchCreateSettlementsRequest) returns (BatchCreateSettlementsReply);
     */
    batchCreateSettlements(input: BatchCreateSettlementsRequest, options?: RpcOptions): UnaryCall<BatchCreateSettlementsRequest, BatchCreateSettlementsReply>;
    /**
     * @generated from protobuf rpc: PeriodSync(PeriodSyncRequest) returns (PeriodSyncReply);
     */
    periodSync(input: PeriodSyncRequest, options?: RpcOptions): UnaryCall<PeriodSyncRequest, PeriodSyncReply>;
    /**
     * @generated from protobuf rpc: Sync(SettlementSyncRequest) returns (SettlementSyncReply);
     */
    sync(input: SettlementSyncRequest, options?: RpcOptions): UnaryCall<SettlementSyncRequest, SettlementSyncReply>;
    /**
     * @generated from protobuf rpc: Delete(SettlementDeleteRequest) returns (SettlementDeleteReply);
     */
    delete(input: SettlementDeleteRequest, options?: RpcOptions): UnaryCall<SettlementDeleteRequest, SettlementDeleteReply>;
    /**
     * @generated from protobuf rpc: SettlementDeleteBatch(SettlementDeleteBatchRequest) returns (SettlementDeleteBatchReply);
     */
    settlementDeleteBatch(input: SettlementDeleteBatchRequest, options?: RpcOptions): UnaryCall<SettlementDeleteBatchRequest, SettlementDeleteBatchReply>;
    /**
     * @generated from protobuf rpc: AssignTruck(SettlementAssignTruckRequest) returns (SettlementAssignTruckReply);
     */
    assignTruck(input: SettlementAssignTruckRequest, options?: RpcOptions): UnaryCall<SettlementAssignTruckRequest, SettlementAssignTruckReply>;
    /**
     * @generated from protobuf rpc: AssignVendor(SettlementAssignVendorRequest) returns (SettlementAssignVendorReply);
     */
    assignVendor(input: SettlementAssignVendorRequest, options?: RpcOptions): UnaryCall<SettlementAssignVendorRequest, SettlementAssignVendorReply>;
    /**
     * @generated from protobuf rpc: UnassignVendor(SettlementUnassignVendorRequest) returns (SettlementUnassignVendorReply);
     */
    unassignVendor(input: SettlementUnassignVendorRequest, options?: RpcOptions): UnaryCall<SettlementUnassignVendorRequest, SettlementUnassignVendorReply>;
    /**
     * @generated from protobuf rpc: SettlementGeneratePDF(SettlementGeneratePDFRequest) returns (SettlementGeneratePDFReply);
     */
    settlementGeneratePDF(input: SettlementGeneratePDFRequest, options?: RpcOptions): UnaryCall<SettlementGeneratePDFRequest, SettlementGeneratePDFReply>;
    /**
     * @generated from protobuf rpc: SettlementBatchExport(SettlementBatchExportRequest) returns (SettlementBatchExportReply);
     */
    settlementBatchExport(input: SettlementBatchExportRequest, options?: RpcOptions): UnaryCall<SettlementBatchExportRequest, SettlementBatchExportReply>;
    /**
     * @generated from protobuf rpc: SendSettlement(SendSettlementRequest) returns (SendSettlementReply);
     */
    sendSettlement(input: SendSettlementRequest, options?: RpcOptions): UnaryCall<SendSettlementRequest, SendSettlementReply>;
    /**
     * @generated from protobuf rpc: SettlementSendBatchPreview(SettlementSendBatchPreviewRequest) returns (SettlementSendBatchPreviewReply);
     */
    settlementSendBatchPreview(input: SettlementSendBatchPreviewRequest, options?: RpcOptions): UnaryCall<SettlementSendBatchPreviewRequest, SettlementSendBatchPreviewReply>;
    /**
     * @generated from protobuf rpc: SettlementSendBatch(SettlementSendBatchRequest) returns (stream SettlementSendBatchReply);
     */
    settlementSendBatch(input: SettlementSendBatchRequest, options?: RpcOptions): ServerStreamingCall<SettlementSendBatchRequest, SettlementSendBatchReply>;
    /**
     * @generated from protobuf rpc: AssignLoad(SettlementAssignLoadRequest) returns (SettlementAssignLoadReply);
     */
    assignLoad(input: SettlementAssignLoadRequest, options?: RpcOptions): UnaryCall<SettlementAssignLoadRequest, SettlementAssignLoadReply>;
    /**
     * @generated from protobuf rpc: RemoveLoad(SettlementRemoveLoadRequest) returns (SettlementRemoveLoadReply);
     */
    removeLoad(input: SettlementRemoveLoadRequest, options?: RpcOptions): UnaryCall<SettlementRemoveLoadRequest, SettlementRemoveLoadReply>;
    /**
     * @generated from protobuf rpc: SettlementUpdateStatus(SettlementUpdateStatusRequest) returns (SettlementUpdateStatusReply);
     */
    settlementUpdateStatus(input: SettlementUpdateStatusRequest, options?: RpcOptions): UnaryCall<SettlementUpdateStatusRequest, SettlementUpdateStatusReply>;
    /**
     * @generated from protobuf rpc: SettlementBatchUpdateStatus(SettlementBatchUpdateStatusRequest) returns (SettlementBatchUpdateStatusReply);
     */
    settlementBatchUpdateStatus(input: SettlementBatchUpdateStatusRequest, options?: RpcOptions): UnaryCall<SettlementBatchUpdateStatusRequest, SettlementBatchUpdateStatusReply>;
    /**
     * @generated from protobuf rpc: SettlementDriverPayDeductFuelUpdate(SettlementDriverPayDeductFuelUpdateRequest) returns (SettlementDriverPayDeductFuelUpdateReply);
     */
    settlementDriverPayDeductFuelUpdate(input: SettlementDriverPayDeductFuelUpdateRequest, options?: RpcOptions): UnaryCall<SettlementDriverPayDeductFuelUpdateRequest, SettlementDriverPayDeductFuelUpdateReply>;
    /**
     * @generated from protobuf rpc: SettlementDriverPayDeductTollsUpdate(SettlementDriverPayDeductTollsUpdateRequest) returns (SettlementDriverPayDeductTollsUpdateReply);
     */
    settlementDriverPayDeductTollsUpdate(input: SettlementDriverPayDeductTollsUpdateRequest, options?: RpcOptions): UnaryCall<SettlementDriverPayDeductTollsUpdateRequest, SettlementDriverPayDeductTollsUpdateReply>;
    /**
     * @generated from protobuf rpc: SettlementFuelDiscountsEnabledUpdate(SettlementFuelDiscountsEnabledUpdateRequest) returns (SettlementFuelDiscountsEnabledUpdateReply);
     */
    settlementFuelDiscountsEnabledUpdate(input: SettlementFuelDiscountsEnabledUpdateRequest, options?: RpcOptions): UnaryCall<SettlementFuelDiscountsEnabledUpdateRequest, SettlementFuelDiscountsEnabledUpdateReply>;
    /**
     * @generated from protobuf rpc: SettlementPayDateUpdate(SettlementPayDateUpdateRequest) returns (SettlementPayDateUpdateReply);
     */
    settlementPayDateUpdate(input: SettlementPayDateUpdateRequest, options?: RpcOptions): UnaryCall<SettlementPayDateUpdateRequest, SettlementPayDateUpdateReply>;
    /**
     * @generated from protobuf rpc: TollAssign(SettlementTollAssignRequest) returns (SettlementTollAssignReply);
     */
    tollAssign(input: SettlementTollAssignRequest, options?: RpcOptions): UnaryCall<SettlementTollAssignRequest, SettlementTollAssignReply>;
    /**
     * @generated from protobuf rpc: TollUnassign(SettlementTollUnassignRequest) returns (SettlementTollUnassignReply);
     */
    tollUnassign(input: SettlementTollUnassignRequest, options?: RpcOptions): UnaryCall<SettlementTollUnassignRequest, SettlementTollUnassignReply>;
    /**
     * @generated from protobuf rpc: SettlementManifestAssign(SettlementManifestAssignRequest) returns (SettlementManifestAssignReply);
     */
    settlementManifestAssign(input: SettlementManifestAssignRequest, options?: RpcOptions): UnaryCall<SettlementManifestAssignRequest, SettlementManifestAssignReply>;
    /**
     * @generated from protobuf rpc: SettlementManifestUnassign(SettlementManifestUnassignRequest) returns (SettlementManifestUnassignReply);
     */
    settlementManifestUnassign(input: SettlementManifestUnassignRequest, options?: RpcOptions): UnaryCall<SettlementManifestUnassignRequest, SettlementManifestUnassignReply>;
    /**
     * @generated from protobuf rpc: SettlementFuelTransactionAssign(SettlementFuelTransactionAssignRequest) returns (SettlementFuelTransactionAssignReply);
     */
    settlementFuelTransactionAssign(input: SettlementFuelTransactionAssignRequest, options?: RpcOptions): UnaryCall<SettlementFuelTransactionAssignRequest, SettlementFuelTransactionAssignReply>;
    /**
     * @generated from protobuf rpc: SettlementFuelTransactionUnassign(SettlementFuelTransactionUnassignRequest) returns (SettlementFuelTransactionUnassignReply);
     */
    settlementFuelTransactionUnassign(input: SettlementFuelTransactionUnassignRequest, options?: RpcOptions): UnaryCall<SettlementFuelTransactionUnassignRequest, SettlementFuelTransactionUnassignReply>;
}
/**
 * @generated from protobuf service SettlementsService
 */
export class SettlementsServiceClient implements ISettlementsServiceClient, ServiceInfo {
    typeName = SettlementsService.typeName;
    methods = SettlementsService.methods;
    options = SettlementsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RetrieveSettlement(RetrieveSettlementRequest) returns (RetrieveSettlementReply);
     */
    retrieveSettlement(input: RetrieveSettlementRequest, options?: RpcOptions): UnaryCall<RetrieveSettlementRequest, RetrieveSettlementReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveSettlementRequest, RetrieveSettlementReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementGet(SettlementGetRequest) returns (SettlementGetReply);
     */
    settlementGet(input: SettlementGetRequest, options?: RpcOptions): UnaryCall<SettlementGetRequest, SettlementGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementGetRequest, SettlementGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BatchCreateSettlements(BatchCreateSettlementsRequest) returns (BatchCreateSettlementsReply);
     */
    batchCreateSettlements(input: BatchCreateSettlementsRequest, options?: RpcOptions): UnaryCall<BatchCreateSettlementsRequest, BatchCreateSettlementsReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<BatchCreateSettlementsRequest, BatchCreateSettlementsReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PeriodSync(PeriodSyncRequest) returns (PeriodSyncReply);
     */
    periodSync(input: PeriodSyncRequest, options?: RpcOptions): UnaryCall<PeriodSyncRequest, PeriodSyncReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PeriodSyncRequest, PeriodSyncReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Sync(SettlementSyncRequest) returns (SettlementSyncReply);
     */
    sync(input: SettlementSyncRequest, options?: RpcOptions): UnaryCall<SettlementSyncRequest, SettlementSyncReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementSyncRequest, SettlementSyncReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(SettlementDeleteRequest) returns (SettlementDeleteReply);
     */
    delete(input: SettlementDeleteRequest, options?: RpcOptions): UnaryCall<SettlementDeleteRequest, SettlementDeleteReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementDeleteRequest, SettlementDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementDeleteBatch(SettlementDeleteBatchRequest) returns (SettlementDeleteBatchReply);
     */
    settlementDeleteBatch(input: SettlementDeleteBatchRequest, options?: RpcOptions): UnaryCall<SettlementDeleteBatchRequest, SettlementDeleteBatchReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementDeleteBatchRequest, SettlementDeleteBatchReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AssignTruck(SettlementAssignTruckRequest) returns (SettlementAssignTruckReply);
     */
    assignTruck(input: SettlementAssignTruckRequest, options?: RpcOptions): UnaryCall<SettlementAssignTruckRequest, SettlementAssignTruckReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementAssignTruckRequest, SettlementAssignTruckReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AssignVendor(SettlementAssignVendorRequest) returns (SettlementAssignVendorReply);
     */
    assignVendor(input: SettlementAssignVendorRequest, options?: RpcOptions): UnaryCall<SettlementAssignVendorRequest, SettlementAssignVendorReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementAssignVendorRequest, SettlementAssignVendorReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnassignVendor(SettlementUnassignVendorRequest) returns (SettlementUnassignVendorReply);
     */
    unassignVendor(input: SettlementUnassignVendorRequest, options?: RpcOptions): UnaryCall<SettlementUnassignVendorRequest, SettlementUnassignVendorReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementUnassignVendorRequest, SettlementUnassignVendorReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementGeneratePDF(SettlementGeneratePDFRequest) returns (SettlementGeneratePDFReply);
     */
    settlementGeneratePDF(input: SettlementGeneratePDFRequest, options?: RpcOptions): UnaryCall<SettlementGeneratePDFRequest, SettlementGeneratePDFReply> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementGeneratePDFRequest, SettlementGeneratePDFReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementBatchExport(SettlementBatchExportRequest) returns (SettlementBatchExportReply);
     */
    settlementBatchExport(input: SettlementBatchExportRequest, options?: RpcOptions): UnaryCall<SettlementBatchExportRequest, SettlementBatchExportReply> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementBatchExportRequest, SettlementBatchExportReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendSettlement(SendSettlementRequest) returns (SendSettlementReply);
     */
    sendSettlement(input: SendSettlementRequest, options?: RpcOptions): UnaryCall<SendSettlementRequest, SendSettlementReply> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendSettlementRequest, SendSettlementReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementSendBatchPreview(SettlementSendBatchPreviewRequest) returns (SettlementSendBatchPreviewReply);
     */
    settlementSendBatchPreview(input: SettlementSendBatchPreviewRequest, options?: RpcOptions): UnaryCall<SettlementSendBatchPreviewRequest, SettlementSendBatchPreviewReply> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementSendBatchPreviewRequest, SettlementSendBatchPreviewReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementSendBatch(SettlementSendBatchRequest) returns (stream SettlementSendBatchReply);
     */
    settlementSendBatch(input: SettlementSendBatchRequest, options?: RpcOptions): ServerStreamingCall<SettlementSendBatchRequest, SettlementSendBatchReply> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementSendBatchRequest, SettlementSendBatchReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AssignLoad(SettlementAssignLoadRequest) returns (SettlementAssignLoadReply);
     */
    assignLoad(input: SettlementAssignLoadRequest, options?: RpcOptions): UnaryCall<SettlementAssignLoadRequest, SettlementAssignLoadReply> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementAssignLoadRequest, SettlementAssignLoadReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveLoad(SettlementRemoveLoadRequest) returns (SettlementRemoveLoadReply);
     */
    removeLoad(input: SettlementRemoveLoadRequest, options?: RpcOptions): UnaryCall<SettlementRemoveLoadRequest, SettlementRemoveLoadReply> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementRemoveLoadRequest, SettlementRemoveLoadReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementUpdateStatus(SettlementUpdateStatusRequest) returns (SettlementUpdateStatusReply);
     */
    settlementUpdateStatus(input: SettlementUpdateStatusRequest, options?: RpcOptions): UnaryCall<SettlementUpdateStatusRequest, SettlementUpdateStatusReply> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementUpdateStatusRequest, SettlementUpdateStatusReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementBatchUpdateStatus(SettlementBatchUpdateStatusRequest) returns (SettlementBatchUpdateStatusReply);
     */
    settlementBatchUpdateStatus(input: SettlementBatchUpdateStatusRequest, options?: RpcOptions): UnaryCall<SettlementBatchUpdateStatusRequest, SettlementBatchUpdateStatusReply> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementBatchUpdateStatusRequest, SettlementBatchUpdateStatusReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementDriverPayDeductFuelUpdate(SettlementDriverPayDeductFuelUpdateRequest) returns (SettlementDriverPayDeductFuelUpdateReply);
     */
    settlementDriverPayDeductFuelUpdate(input: SettlementDriverPayDeductFuelUpdateRequest, options?: RpcOptions): UnaryCall<SettlementDriverPayDeductFuelUpdateRequest, SettlementDriverPayDeductFuelUpdateReply> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementDriverPayDeductFuelUpdateRequest, SettlementDriverPayDeductFuelUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementDriverPayDeductTollsUpdate(SettlementDriverPayDeductTollsUpdateRequest) returns (SettlementDriverPayDeductTollsUpdateReply);
     */
    settlementDriverPayDeductTollsUpdate(input: SettlementDriverPayDeductTollsUpdateRequest, options?: RpcOptions): UnaryCall<SettlementDriverPayDeductTollsUpdateRequest, SettlementDriverPayDeductTollsUpdateReply> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementDriverPayDeductTollsUpdateRequest, SettlementDriverPayDeductTollsUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementFuelDiscountsEnabledUpdate(SettlementFuelDiscountsEnabledUpdateRequest) returns (SettlementFuelDiscountsEnabledUpdateReply);
     */
    settlementFuelDiscountsEnabledUpdate(input: SettlementFuelDiscountsEnabledUpdateRequest, options?: RpcOptions): UnaryCall<SettlementFuelDiscountsEnabledUpdateRequest, SettlementFuelDiscountsEnabledUpdateReply> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementFuelDiscountsEnabledUpdateRequest, SettlementFuelDiscountsEnabledUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementPayDateUpdate(SettlementPayDateUpdateRequest) returns (SettlementPayDateUpdateReply);
     */
    settlementPayDateUpdate(input: SettlementPayDateUpdateRequest, options?: RpcOptions): UnaryCall<SettlementPayDateUpdateRequest, SettlementPayDateUpdateReply> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementPayDateUpdateRequest, SettlementPayDateUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TollAssign(SettlementTollAssignRequest) returns (SettlementTollAssignReply);
     */
    tollAssign(input: SettlementTollAssignRequest, options?: RpcOptions): UnaryCall<SettlementTollAssignRequest, SettlementTollAssignReply> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementTollAssignRequest, SettlementTollAssignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TollUnassign(SettlementTollUnassignRequest) returns (SettlementTollUnassignReply);
     */
    tollUnassign(input: SettlementTollUnassignRequest, options?: RpcOptions): UnaryCall<SettlementTollUnassignRequest, SettlementTollUnassignReply> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementTollUnassignRequest, SettlementTollUnassignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementManifestAssign(SettlementManifestAssignRequest) returns (SettlementManifestAssignReply);
     */
    settlementManifestAssign(input: SettlementManifestAssignRequest, options?: RpcOptions): UnaryCall<SettlementManifestAssignRequest, SettlementManifestAssignReply> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementManifestAssignRequest, SettlementManifestAssignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementManifestUnassign(SettlementManifestUnassignRequest) returns (SettlementManifestUnassignReply);
     */
    settlementManifestUnassign(input: SettlementManifestUnassignRequest, options?: RpcOptions): UnaryCall<SettlementManifestUnassignRequest, SettlementManifestUnassignReply> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementManifestUnassignRequest, SettlementManifestUnassignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementFuelTransactionAssign(SettlementFuelTransactionAssignRequest) returns (SettlementFuelTransactionAssignReply);
     */
    settlementFuelTransactionAssign(input: SettlementFuelTransactionAssignRequest, options?: RpcOptions): UnaryCall<SettlementFuelTransactionAssignRequest, SettlementFuelTransactionAssignReply> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementFuelTransactionAssignRequest, SettlementFuelTransactionAssignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementFuelTransactionUnassign(SettlementFuelTransactionUnassignRequest) returns (SettlementFuelTransactionUnassignReply);
     */
    settlementFuelTransactionUnassign(input: SettlementFuelTransactionUnassignRequest, options?: RpcOptions): UnaryCall<SettlementFuelTransactionUnassignRequest, SettlementFuelTransactionUnassignReply> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementFuelTransactionUnassignRequest, SettlementFuelTransactionUnassignReply>("unary", this._transport, method, opt, input);
    }
}
