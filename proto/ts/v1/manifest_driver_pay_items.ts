// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/manifest_driver_pay_items.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ManifestModel_Driver_PayItem } from "./models/model_manifest";
/**
 * @generated from protobuf message ManifestDriverPayItemRetrieveRequest
 */
export interface ManifestDriverPayItemRetrieveRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_id = 3;
     */
    driverPayItemId: string;
}
/**
 * @generated from protobuf message ManifestDriverPayItemRetrieveReply
 */
export interface ManifestDriverPayItemRetrieveReply {
    /**
     * @generated from protobuf field: ManifestModel.Driver.PayItem pay_item = 1;
     */
    payItem?: ManifestModel_Driver_PayItem;
}
/**
 * @generated from protobuf message ManifestDriverPayItemAddRequest
 */
export interface ManifestDriverPayItemAddRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 3;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: string units = 4;
     */
    units: string;
    /**
     * @generated from protobuf field: string amount_per_unit = 5;
     */
    amountPerUnit: string;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
}
/**
 * @generated from protobuf message ManifestDriverPayItemAddReply
 */
export interface ManifestDriverPayItemAddReply {
    /**
     * @generated from protobuf field: string pay_item_id = 1;
     */
    payItemId: string;
}
/**
 * @generated from protobuf message ManifestDriverPayItemUpdateRequest
 */
export interface ManifestDriverPayItemUpdateRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_id = 3;
     */
    driverPayItemId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 4;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: string units = 5;
     */
    units: string;
    /**
     * @generated from protobuf field: string amount_per_unit = 6;
     */
    amountPerUnit: string;
    /**
     * @generated from protobuf field: string description = 7;
     */
    description: string;
}
/**
 * @generated from protobuf message ManifestDriverPayItemUpdateReply
 */
export interface ManifestDriverPayItemUpdateReply {
}
/**
 * @generated from protobuf message ManifestDriverPayItemDeleteRequest
 */
export interface ManifestDriverPayItemDeleteRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string manifest_id = 2;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string driver_id = 3;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_pay_item_id = 4;
     */
    driverPayItemId: string;
}
/**
 * @generated from protobuf message ManifestDriverPayItemDeleteReply
 */
export interface ManifestDriverPayItemDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemRetrieveRequest$Type extends MessageType<ManifestDriverPayItemRetrieveRequest> {
    constructor() {
        super("ManifestDriverPayItemRetrieveRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverPayItemRetrieveRequest>): ManifestDriverPayItemRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.driverId = "";
        message.driverPayItemId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemRetrieveRequest): ManifestDriverPayItemRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string driver_pay_item_id */ 3:
                    message.driverPayItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverPayItemRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string driver_pay_item_id = 3; */
        if (message.driverPayItemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverPayItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemRetrieveRequest
 */
export const ManifestDriverPayItemRetrieveRequest = new ManifestDriverPayItemRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemRetrieveReply$Type extends MessageType<ManifestDriverPayItemRetrieveReply> {
    constructor() {
        super("ManifestDriverPayItemRetrieveReply", [
            { no: 1, name: "pay_item", kind: "message", T: () => ManifestModel_Driver_PayItem }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverPayItemRetrieveReply>): ManifestDriverPayItemRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemRetrieveReply): ManifestDriverPayItemRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Driver.PayItem pay_item */ 1:
                    message.payItem = ManifestModel_Driver_PayItem.internalBinaryRead(reader, reader.uint32(), options, message.payItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverPayItemRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Driver.PayItem pay_item = 1; */
        if (message.payItem)
            ManifestModel_Driver_PayItem.internalBinaryWrite(message.payItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemRetrieveReply
 */
export const ManifestDriverPayItemRetrieveReply = new ManifestDriverPayItemRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemAddRequest$Type extends MessageType<ManifestDriverPayItemAddRequest> {
    constructor() {
        super("ManifestDriverPayItemAddRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "units", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "amount_per_unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverPayItemAddRequest>): ManifestDriverPayItemAddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.driverId = "";
        message.driverPayItemCategoryId = "";
        message.units = "";
        message.amountPerUnit = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemAddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemAddRequest): ManifestDriverPayItemAddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string driver_pay_item_category_id */ 3:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* string units */ 4:
                    message.units = reader.string();
                    break;
                case /* string amount_per_unit */ 5:
                    message.amountPerUnit = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverPayItemAddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string driver_pay_item_category_id = 3; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* string units = 4; */
        if (message.units !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.units);
        /* string amount_per_unit = 5; */
        if (message.amountPerUnit !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.amountPerUnit);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemAddRequest
 */
export const ManifestDriverPayItemAddRequest = new ManifestDriverPayItemAddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemAddReply$Type extends MessageType<ManifestDriverPayItemAddReply> {
    constructor() {
        super("ManifestDriverPayItemAddReply", [
            { no: 1, name: "pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverPayItemAddReply>): ManifestDriverPayItemAddReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payItemId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemAddReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemAddReply): ManifestDriverPayItemAddReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pay_item_id */ 1:
                    message.payItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverPayItemAddReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pay_item_id = 1; */
        if (message.payItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemAddReply
 */
export const ManifestDriverPayItemAddReply = new ManifestDriverPayItemAddReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemUpdateRequest$Type extends MessageType<ManifestDriverPayItemUpdateRequest> {
    constructor() {
        super("ManifestDriverPayItemUpdateRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "units", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "amount_per_unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverPayItemUpdateRequest>): ManifestDriverPayItemUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.driverId = "";
        message.driverPayItemId = "";
        message.driverPayItemCategoryId = "";
        message.units = "";
        message.amountPerUnit = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemUpdateRequest): ManifestDriverPayItemUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* string driver_pay_item_id */ 3:
                    message.driverPayItemId = reader.string();
                    break;
                case /* string driver_pay_item_category_id */ 4:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* string units */ 5:
                    message.units = reader.string();
                    break;
                case /* string amount_per_unit */ 6:
                    message.amountPerUnit = reader.string();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverPayItemUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* string driver_pay_item_id = 3; */
        if (message.driverPayItemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverPayItemId);
        /* string driver_pay_item_category_id = 4; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* string units = 5; */
        if (message.units !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.units);
        /* string amount_per_unit = 6; */
        if (message.amountPerUnit !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.amountPerUnit);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemUpdateRequest
 */
export const ManifestDriverPayItemUpdateRequest = new ManifestDriverPayItemUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemUpdateReply$Type extends MessageType<ManifestDriverPayItemUpdateReply> {
    constructor() {
        super("ManifestDriverPayItemUpdateReply", []);
    }
    create(value?: PartialMessage<ManifestDriverPayItemUpdateReply>): ManifestDriverPayItemUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemUpdateReply): ManifestDriverPayItemUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestDriverPayItemUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemUpdateReply
 */
export const ManifestDriverPayItemUpdateReply = new ManifestDriverPayItemUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemDeleteRequest$Type extends MessageType<ManifestDriverPayItemDeleteRequest> {
    constructor() {
        super("ManifestDriverPayItemDeleteRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_pay_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverPayItemDeleteRequest>): ManifestDriverPayItemDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.manifestId = "";
        message.driverId = "";
        message.driverPayItemId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemDeleteRequest): ManifestDriverPayItemDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string manifest_id */ 2:
                    message.manifestId = reader.string();
                    break;
                case /* string driver_id */ 3:
                    message.driverId = reader.string();
                    break;
                case /* string driver_pay_item_id */ 4:
                    message.driverPayItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverPayItemDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string manifest_id = 2; */
        if (message.manifestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.manifestId);
        /* string driver_id = 3; */
        if (message.driverId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverId);
        /* string driver_pay_item_id = 4; */
        if (message.driverPayItemId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.driverPayItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemDeleteRequest
 */
export const ManifestDriverPayItemDeleteRequest = new ManifestDriverPayItemDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverPayItemDeleteReply$Type extends MessageType<ManifestDriverPayItemDeleteReply> {
    constructor() {
        super("ManifestDriverPayItemDeleteReply", []);
    }
    create(value?: PartialMessage<ManifestDriverPayItemDeleteReply>): ManifestDriverPayItemDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverPayItemDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverPayItemDeleteReply): ManifestDriverPayItemDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestDriverPayItemDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverPayItemDeleteReply
 */
export const ManifestDriverPayItemDeleteReply = new ManifestDriverPayItemDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service ManifestDriverPayItemsService
 */
export const ManifestDriverPayItemsService = new ServiceType("ManifestDriverPayItemsService", [
    { name: "ManifestDriverPayItemAdd", options: {}, I: ManifestDriverPayItemAddRequest, O: ManifestDriverPayItemAddReply },
    { name: "ManifestDriverPayItemRetrieve", options: {}, I: ManifestDriverPayItemRetrieveRequest, O: ManifestDriverPayItemRetrieveReply },
    { name: "ManifestDriverPayItemUpdate", options: {}, I: ManifestDriverPayItemUpdateRequest, O: ManifestDriverPayItemUpdateReply },
    { name: "ManifestDriverPayItemDelete", options: {}, I: ManifestDriverPayItemDeleteRequest, O: ManifestDriverPayItemDeleteReply }
]);
