// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/page.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PageModel_View_Column_Type } from "./models/model_page";
import { PageModel_View_Column } from "./models/model_page";
import { PageModel_ColumnLayout } from "./models/model_page";
import { PageModel_Header } from "./models/model_page";
import { PageModel_View } from "./models/model_page";
import { PageModel_Page } from "./models/model_page";
/**
 * @generated from protobuf message PageRetrieveRequest
 */
export interface PageRetrieveRequest {
    /**
     * @generated from protobuf field: PageModel.Page page = 1;
     */
    page: PageModel_Page;
}
/**
 * @generated from protobuf message PageRetrieveReply
 */
export interface PageRetrieveReply {
    /**
     * @generated from protobuf field: repeated PageModel.View views = 1;
     */
    views: PageModel_View[];
    /**
     * @generated from protobuf field: repeated PageModel.Header headers = 2;
     */
    headers: PageModel_Header[];
    /**
     * @generated from protobuf field: repeated PageModel.ColumnLayout columns = 3;
     */
    columns: PageModel_ColumnLayout[];
}
/**
 * @generated from protobuf message PageGetRequest
 */
export interface PageGetRequest {
}
/**
 * @generated from protobuf message PageGetReply
 */
export interface PageGetReply {
    /**
     * @generated from protobuf field: repeated PageGetReply.Page pages = 1;
     */
    pages: PageGetReply_Page[];
}
/**
 * @generated from protobuf message PageGetReply.Page
 */
export interface PageGetReply_Page {
    /**
     * @generated from protobuf field: repeated PageModel.View views = 1;
     */
    views: PageModel_View[];
    /**
     * @generated from protobuf field: repeated PageModel.Header headers = 2;
     */
    headers: PageModel_Header[];
    /**
     * @generated from protobuf field: repeated PageModel.ColumnLayout columns_layout = 3;
     */
    columnsLayout: PageModel_ColumnLayout[];
    /**
     * @generated from protobuf field: PageModel.Page page = 4;
     */
    page: PageModel_Page;
}
/**
 * @generated from protobuf message RecurringTransactionPageRetrieveRequest
 */
export interface RecurringTransactionPageRetrieveRequest {
}
/**
 * @generated from protobuf message RecurringTransactionPageRetrieveReply
 */
export interface RecurringTransactionPageRetrieveReply {
    /**
     * @generated from protobuf field: RecurringTransactionPageRetrieveReply.Page driver_page = 1;
     */
    driverPage?: RecurringTransactionPageRetrieveReply_Page;
    /**
     * @generated from protobuf field: RecurringTransactionPageRetrieveReply.Page recurring_transaction_page = 2;
     */
    recurringTransactionPage?: RecurringTransactionPageRetrieveReply_Page;
}
/**
 * @generated from protobuf message RecurringTransactionPageRetrieveReply.Page
 */
export interface RecurringTransactionPageRetrieveReply_Page {
    /**
     * @generated from protobuf field: repeated PageModel.View.Column columns = 2;
     */
    columns: PageModel_View_Column[];
    /**
     * @generated from protobuf field: repeated PageModel.Header headers = 3;
     */
    headers: PageModel_Header[];
}
/**
 * @generated from protobuf message PageHeaderCreateRequest
 */
export interface PageHeaderCreateRequest {
    /**
     * @generated from protobuf field: PageModel.Page page = 1;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
}
/**
 * @generated from protobuf message PageHeaderCreateReply
 */
export interface PageHeaderCreateReply {
    /**
     * @generated from protobuf field: string header_id = 1;
     */
    headerId: string;
}
/**
 * @generated from protobuf message PageHeaderUpdateRequest
 */
export interface PageHeaderUpdateRequest {
    /**
     * @generated from protobuf field: string header_id = 1;
     */
    headerId: string;
    /**
     * @generated from protobuf field: PageModel.Page page = 2;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string color = 4;
     */
    color: string;
}
/**
 * @generated from protobuf message PageHeaderUpdateReply
 */
export interface PageHeaderUpdateReply {
}
/**
 * @generated from protobuf message PageHeaderDeleteRequest
 */
export interface PageHeaderDeleteRequest {
    /**
     * @generated from protobuf field: string header_id = 1;
     */
    headerId: string;
    /**
     * @generated from protobuf field: PageModel.Page page = 2;
     */
    page: PageModel_Page;
}
/**
 * @generated from protobuf message PageHeaderDeleteReply
 */
export interface PageHeaderDeleteReply {
}
/**
 * @generated from protobuf message PageViewCreateRequest
 */
export interface PageViewCreateRequest {
    /**
     * @generated from protobuf field: PageModel.Page page = 1;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message PageViewCreateReply
 */
export interface PageViewCreateReply {
    /**
     * @generated from protobuf field: string view_id = 1;
     */
    viewId: string;
}
/**
 * @generated from protobuf message PageViewUpdateRequest
 */
export interface PageViewUpdateRequest {
    /**
     * @generated from protobuf field: string view_id = 1;
     */
    viewId: string;
    /**
     * @generated from protobuf field: PageModel.Page page = 2;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message PageViewUpdateReply
 */
export interface PageViewUpdateReply {
}
/**
 * @generated from protobuf message PageViewDeleteRequest
 */
export interface PageViewDeleteRequest {
    /**
     * @generated from protobuf field: string view_id = 1;
     */
    viewId: string;
    /**
     * @generated from protobuf field: PageModel.Page page = 2;
     */
    page: PageModel_Page;
}
/**
 * @generated from protobuf message PageViewDeleteReply
 */
export interface PageViewDeleteReply {
}
/**
 * @generated from protobuf message PageViewDuplicateRequest
 */
export interface PageViewDuplicateRequest {
    /**
     * @generated from protobuf field: string source_view_id = 1;
     */
    sourceViewId: string;
    /**
     * @generated from protobuf field: PageModel.Page page = 2;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message PageViewDuplicateReply
 */
export interface PageViewDuplicateReply {
    /**
     * @generated from protobuf field: string view_id = 1;
     */
    viewId: string;
}
/**
 * @generated from protobuf message PageViewSetRowHeightRequest
 */
export interface PageViewSetRowHeightRequest {
    /**
     * @generated from protobuf field: string view_id = 1;
     */
    viewId: string;
    /**
     * @generated from protobuf field: PageModel.Page page = 2;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: int64 row_height = 3;
     */
    rowHeight: number;
}
/**
 * @generated from protobuf message PageViewSetRowHeightReply
 */
export interface PageViewSetRowHeightReply {
}
/**
 * @generated from protobuf message PageViewColumnBatchUpdateRequest
 */
export interface PageViewColumnBatchUpdateRequest {
    /**
     * @generated from protobuf field: PageModel.Page page = 1;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string view_id = 2;
     */
    viewId: string;
    /**
     * @generated from protobuf field: repeated PageViewColumnBatchUpdateRequest.Column columns = 3;
     */
    columns: PageViewColumnBatchUpdateRequest_Column[];
}
/**
 * @generated from protobuf message PageViewColumnBatchUpdateRequest.Column
 */
export interface PageViewColumnBatchUpdateRequest_Column {
    /**
     * @generated from protobuf field: string column_id = 1;
     */
    columnId: string;
    /**
     * @generated from protobuf field: PageModel.View.Column.Type type = 2;
     */
    type: PageModel_View_Column_Type;
    /**
     * @generated from protobuf field: string friendly_name = 3;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: int64 width = 5;
     */
    width: number;
    /**
     * @generated from protobuf field: int64 sequence = 6;
     */
    sequence: number;
    /**
     * @generated from protobuf field: string header_id = 7;
     */
    headerId: string;
    /**
     * @generated from protobuf field: bool sticky = 8;
     */
    sticky: boolean;
    /**
     * @generated from protobuf field: bool border_left = 9;
     */
    borderLeft: boolean;
    /**
     * @generated from protobuf field: bool border_right = 10;
     */
    borderRight: boolean;
    /**
     * @generated from protobuf field: bool footer_total = 11;
     */
    footerTotal: boolean;
}
/**
 * @generated from protobuf message PageViewColumnBatchUpdateReply
 */
export interface PageViewColumnBatchUpdateReply {
}
/**
 * @generated from protobuf message PageViewColumnWidthUpdateRequest
 */
export interface PageViewColumnWidthUpdateRequest {
    /**
     * @generated from protobuf field: PageModel.Page page = 1;
     */
    page: PageModel_Page;
    /**
     * @generated from protobuf field: string view_id = 2;
     */
    viewId: string;
    /**
     * @generated from protobuf field: string column_id = 3;
     */
    columnId: string;
    /**
     * @generated from protobuf field: PageModel.View.Column.Type type = 4;
     */
    type: PageModel_View_Column_Type;
    /**
     * @generated from protobuf field: int64 width = 5;
     */
    width: number;
}
/**
 * @generated from protobuf message PageViewColumnWidthUpdateReply
 */
export interface PageViewColumnWidthUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class PageRetrieveRequest$Type extends MessageType<PageRetrieveRequest> {
    constructor() {
        super("PageRetrieveRequest", [
            { no: 1, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] }
        ]);
    }
    create(value?: PartialMessage<PageRetrieveRequest>): PageRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<PageRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageRetrieveRequest): PageRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PageModel.Page page */ 1:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PageModel.Page page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageRetrieveRequest
 */
export const PageRetrieveRequest = new PageRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageRetrieveReply$Type extends MessageType<PageRetrieveReply> {
    constructor() {
        super("PageRetrieveReply", [
            { no: 1, name: "views", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_View },
            { no: 2, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_Header },
            { no: 3, name: "columns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_ColumnLayout }
        ]);
    }
    create(value?: PartialMessage<PageRetrieveReply>): PageRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.views = [];
        message.headers = [];
        message.columns = [];
        if (value !== undefined)
            reflectionMergePartial<PageRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageRetrieveReply): PageRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PageModel.View views */ 1:
                    message.views.push(PageModel_View.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated PageModel.Header headers */ 2:
                    message.headers.push(PageModel_Header.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated PageModel.ColumnLayout columns */ 3:
                    message.columns.push(PageModel_ColumnLayout.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PageModel.View views = 1; */
        for (let i = 0; i < message.views.length; i++)
            PageModel_View.internalBinaryWrite(message.views[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated PageModel.Header headers = 2; */
        for (let i = 0; i < message.headers.length; i++)
            PageModel_Header.internalBinaryWrite(message.headers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PageModel.ColumnLayout columns = 3; */
        for (let i = 0; i < message.columns.length; i++)
            PageModel_ColumnLayout.internalBinaryWrite(message.columns[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageRetrieveReply
 */
export const PageRetrieveReply = new PageRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageGetRequest$Type extends MessageType<PageGetRequest> {
    constructor() {
        super("PageGetRequest", []);
    }
    create(value?: PartialMessage<PageGetRequest>): PageGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageGetRequest): PageGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageGetRequest
 */
export const PageGetRequest = new PageGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageGetReply$Type extends MessageType<PageGetReply> {
    constructor() {
        super("PageGetReply", [
            { no: 1, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageGetReply_Page }
        ]);
    }
    create(value?: PartialMessage<PageGetReply>): PageGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pages = [];
        if (value !== undefined)
            reflectionMergePartial<PageGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageGetReply): PageGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PageGetReply.Page pages */ 1:
                    message.pages.push(PageGetReply_Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PageGetReply.Page pages = 1; */
        for (let i = 0; i < message.pages.length; i++)
            PageGetReply_Page.internalBinaryWrite(message.pages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageGetReply
 */
export const PageGetReply = new PageGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageGetReply_Page$Type extends MessageType<PageGetReply_Page> {
    constructor() {
        super("PageGetReply.Page", [
            { no: 1, name: "views", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_View },
            { no: 2, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_Header },
            { no: 3, name: "columns_layout", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_ColumnLayout },
            { no: 4, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] }
        ]);
    }
    create(value?: PartialMessage<PageGetReply_Page>): PageGetReply_Page {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.views = [];
        message.headers = [];
        message.columnsLayout = [];
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<PageGetReply_Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageGetReply_Page): PageGetReply_Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PageModel.View views */ 1:
                    message.views.push(PageModel_View.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated PageModel.Header headers */ 2:
                    message.headers.push(PageModel_Header.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated PageModel.ColumnLayout columns_layout */ 3:
                    message.columnsLayout.push(PageModel_ColumnLayout.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* PageModel.Page page */ 4:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageGetReply_Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PageModel.View views = 1; */
        for (let i = 0; i < message.views.length; i++)
            PageModel_View.internalBinaryWrite(message.views[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated PageModel.Header headers = 2; */
        for (let i = 0; i < message.headers.length; i++)
            PageModel_Header.internalBinaryWrite(message.headers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PageModel.ColumnLayout columns_layout = 3; */
        for (let i = 0; i < message.columnsLayout.length; i++)
            PageModel_ColumnLayout.internalBinaryWrite(message.columnsLayout[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PageModel.Page page = 4; */
        if (message.page !== 0)
            writer.tag(4, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageGetReply.Page
 */
export const PageGetReply_Page = new PageGetReply_Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecurringTransactionPageRetrieveRequest$Type extends MessageType<RecurringTransactionPageRetrieveRequest> {
    constructor() {
        super("RecurringTransactionPageRetrieveRequest", []);
    }
    create(value?: PartialMessage<RecurringTransactionPageRetrieveRequest>): RecurringTransactionPageRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RecurringTransactionPageRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecurringTransactionPageRetrieveRequest): RecurringTransactionPageRetrieveRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RecurringTransactionPageRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RecurringTransactionPageRetrieveRequest
 */
export const RecurringTransactionPageRetrieveRequest = new RecurringTransactionPageRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecurringTransactionPageRetrieveReply$Type extends MessageType<RecurringTransactionPageRetrieveReply> {
    constructor() {
        super("RecurringTransactionPageRetrieveReply", [
            { no: 1, name: "driver_page", kind: "message", T: () => RecurringTransactionPageRetrieveReply_Page },
            { no: 2, name: "recurring_transaction_page", kind: "message", T: () => RecurringTransactionPageRetrieveReply_Page }
        ]);
    }
    create(value?: PartialMessage<RecurringTransactionPageRetrieveReply>): RecurringTransactionPageRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RecurringTransactionPageRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecurringTransactionPageRetrieveReply): RecurringTransactionPageRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* RecurringTransactionPageRetrieveReply.Page driver_page */ 1:
                    message.driverPage = RecurringTransactionPageRetrieveReply_Page.internalBinaryRead(reader, reader.uint32(), options, message.driverPage);
                    break;
                case /* RecurringTransactionPageRetrieveReply.Page recurring_transaction_page */ 2:
                    message.recurringTransactionPage = RecurringTransactionPageRetrieveReply_Page.internalBinaryRead(reader, reader.uint32(), options, message.recurringTransactionPage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecurringTransactionPageRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* RecurringTransactionPageRetrieveReply.Page driver_page = 1; */
        if (message.driverPage)
            RecurringTransactionPageRetrieveReply_Page.internalBinaryWrite(message.driverPage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* RecurringTransactionPageRetrieveReply.Page recurring_transaction_page = 2; */
        if (message.recurringTransactionPage)
            RecurringTransactionPageRetrieveReply_Page.internalBinaryWrite(message.recurringTransactionPage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RecurringTransactionPageRetrieveReply
 */
export const RecurringTransactionPageRetrieveReply = new RecurringTransactionPageRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecurringTransactionPageRetrieveReply_Page$Type extends MessageType<RecurringTransactionPageRetrieveReply_Page> {
    constructor() {
        super("RecurringTransactionPageRetrieveReply.Page", [
            { no: 2, name: "columns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_View_Column },
            { no: 3, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageModel_Header }
        ]);
    }
    create(value?: PartialMessage<RecurringTransactionPageRetrieveReply_Page>): RecurringTransactionPageRetrieveReply_Page {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.columns = [];
        message.headers = [];
        if (value !== undefined)
            reflectionMergePartial<RecurringTransactionPageRetrieveReply_Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecurringTransactionPageRetrieveReply_Page): RecurringTransactionPageRetrieveReply_Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PageModel.View.Column columns */ 2:
                    message.columns.push(PageModel_View_Column.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated PageModel.Header headers */ 3:
                    message.headers.push(PageModel_Header.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecurringTransactionPageRetrieveReply_Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PageModel.View.Column columns = 2; */
        for (let i = 0; i < message.columns.length; i++)
            PageModel_View_Column.internalBinaryWrite(message.columns[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PageModel.Header headers = 3; */
        for (let i = 0; i < message.headers.length; i++)
            PageModel_Header.internalBinaryWrite(message.headers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RecurringTransactionPageRetrieveReply.Page
 */
export const RecurringTransactionPageRetrieveReply_Page = new RecurringTransactionPageRetrieveReply_Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageHeaderCreateRequest$Type extends MessageType<PageHeaderCreateRequest> {
    constructor() {
        super("PageHeaderCreateRequest", [
            { no: 1, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageHeaderCreateRequest>): PageHeaderCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.name = "";
        message.color = "";
        if (value !== undefined)
            reflectionMergePartial<PageHeaderCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageHeaderCreateRequest): PageHeaderCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PageModel.Page page */ 1:
                    message.page = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageHeaderCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PageModel.Page page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageHeaderCreateRequest
 */
export const PageHeaderCreateRequest = new PageHeaderCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageHeaderCreateReply$Type extends MessageType<PageHeaderCreateReply> {
    constructor() {
        super("PageHeaderCreateReply", [
            { no: 1, name: "header_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageHeaderCreateReply>): PageHeaderCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headerId = "";
        if (value !== undefined)
            reflectionMergePartial<PageHeaderCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageHeaderCreateReply): PageHeaderCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string header_id */ 1:
                    message.headerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageHeaderCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string header_id = 1; */
        if (message.headerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.headerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageHeaderCreateReply
 */
export const PageHeaderCreateReply = new PageHeaderCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageHeaderUpdateRequest$Type extends MessageType<PageHeaderUpdateRequest> {
    constructor() {
        super("PageHeaderUpdateRequest", [
            { no: 1, name: "header_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageHeaderUpdateRequest>): PageHeaderUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headerId = "";
        message.page = 0;
        message.name = "";
        message.color = "";
        if (value !== undefined)
            reflectionMergePartial<PageHeaderUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageHeaderUpdateRequest): PageHeaderUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string header_id */ 1:
                    message.headerId = reader.string();
                    break;
                case /* PageModel.Page page */ 2:
                    message.page = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string color */ 4:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageHeaderUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string header_id = 1; */
        if (message.headerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.headerId);
        /* PageModel.Page page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string color = 4; */
        if (message.color !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageHeaderUpdateRequest
 */
export const PageHeaderUpdateRequest = new PageHeaderUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageHeaderUpdateReply$Type extends MessageType<PageHeaderUpdateReply> {
    constructor() {
        super("PageHeaderUpdateReply", []);
    }
    create(value?: PartialMessage<PageHeaderUpdateReply>): PageHeaderUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageHeaderUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageHeaderUpdateReply): PageHeaderUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageHeaderUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageHeaderUpdateReply
 */
export const PageHeaderUpdateReply = new PageHeaderUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageHeaderDeleteRequest$Type extends MessageType<PageHeaderDeleteRequest> {
    constructor() {
        super("PageHeaderDeleteRequest", [
            { no: 1, name: "header_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] }
        ]);
    }
    create(value?: PartialMessage<PageHeaderDeleteRequest>): PageHeaderDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headerId = "";
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<PageHeaderDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageHeaderDeleteRequest): PageHeaderDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string header_id */ 1:
                    message.headerId = reader.string();
                    break;
                case /* PageModel.Page page */ 2:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageHeaderDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string header_id = 1; */
        if (message.headerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.headerId);
        /* PageModel.Page page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageHeaderDeleteRequest
 */
export const PageHeaderDeleteRequest = new PageHeaderDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageHeaderDeleteReply$Type extends MessageType<PageHeaderDeleteReply> {
    constructor() {
        super("PageHeaderDeleteReply", []);
    }
    create(value?: PartialMessage<PageHeaderDeleteReply>): PageHeaderDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageHeaderDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageHeaderDeleteReply): PageHeaderDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageHeaderDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageHeaderDeleteReply
 */
export const PageHeaderDeleteReply = new PageHeaderDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewCreateRequest$Type extends MessageType<PageViewCreateRequest> {
    constructor() {
        super("PageViewCreateRequest", [
            { no: 1, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewCreateRequest>): PageViewCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<PageViewCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewCreateRequest): PageViewCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PageModel.Page page */ 1:
                    message.page = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PageModel.Page page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewCreateRequest
 */
export const PageViewCreateRequest = new PageViewCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewCreateReply$Type extends MessageType<PageViewCreateReply> {
    constructor() {
        super("PageViewCreateReply", [
            { no: 1, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewCreateReply>): PageViewCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.viewId = "";
        if (value !== undefined)
            reflectionMergePartial<PageViewCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewCreateReply): PageViewCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string view_id */ 1:
                    message.viewId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string view_id = 1; */
        if (message.viewId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.viewId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewCreateReply
 */
export const PageViewCreateReply = new PageViewCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewUpdateRequest$Type extends MessageType<PageViewUpdateRequest> {
    constructor() {
        super("PageViewUpdateRequest", [
            { no: 1, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewUpdateRequest>): PageViewUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.viewId = "";
        message.page = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<PageViewUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewUpdateRequest): PageViewUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string view_id */ 1:
                    message.viewId = reader.string();
                    break;
                case /* PageModel.Page page */ 2:
                    message.page = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string view_id = 1; */
        if (message.viewId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.viewId);
        /* PageModel.Page page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewUpdateRequest
 */
export const PageViewUpdateRequest = new PageViewUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewUpdateReply$Type extends MessageType<PageViewUpdateReply> {
    constructor() {
        super("PageViewUpdateReply", []);
    }
    create(value?: PartialMessage<PageViewUpdateReply>): PageViewUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageViewUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewUpdateReply): PageViewUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageViewUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewUpdateReply
 */
export const PageViewUpdateReply = new PageViewUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewDeleteRequest$Type extends MessageType<PageViewDeleteRequest> {
    constructor() {
        super("PageViewDeleteRequest", [
            { no: 1, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] }
        ]);
    }
    create(value?: PartialMessage<PageViewDeleteRequest>): PageViewDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.viewId = "";
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<PageViewDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewDeleteRequest): PageViewDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string view_id */ 1:
                    message.viewId = reader.string();
                    break;
                case /* PageModel.Page page */ 2:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string view_id = 1; */
        if (message.viewId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.viewId);
        /* PageModel.Page page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewDeleteRequest
 */
export const PageViewDeleteRequest = new PageViewDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewDeleteReply$Type extends MessageType<PageViewDeleteReply> {
    constructor() {
        super("PageViewDeleteReply", []);
    }
    create(value?: PartialMessage<PageViewDeleteReply>): PageViewDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageViewDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewDeleteReply): PageViewDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageViewDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewDeleteReply
 */
export const PageViewDeleteReply = new PageViewDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewDuplicateRequest$Type extends MessageType<PageViewDuplicateRequest> {
    constructor() {
        super("PageViewDuplicateRequest", [
            { no: 1, name: "source_view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewDuplicateRequest>): PageViewDuplicateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sourceViewId = "";
        message.page = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<PageViewDuplicateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewDuplicateRequest): PageViewDuplicateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string source_view_id */ 1:
                    message.sourceViewId = reader.string();
                    break;
                case /* PageModel.Page page */ 2:
                    message.page = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewDuplicateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string source_view_id = 1; */
        if (message.sourceViewId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sourceViewId);
        /* PageModel.Page page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewDuplicateRequest
 */
export const PageViewDuplicateRequest = new PageViewDuplicateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewDuplicateReply$Type extends MessageType<PageViewDuplicateReply> {
    constructor() {
        super("PageViewDuplicateReply", [
            { no: 1, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewDuplicateReply>): PageViewDuplicateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.viewId = "";
        if (value !== undefined)
            reflectionMergePartial<PageViewDuplicateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewDuplicateReply): PageViewDuplicateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string view_id */ 1:
                    message.viewId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewDuplicateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string view_id = 1; */
        if (message.viewId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.viewId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewDuplicateReply
 */
export const PageViewDuplicateReply = new PageViewDuplicateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewSetRowHeightRequest$Type extends MessageType<PageViewSetRowHeightRequest> {
    constructor() {
        super("PageViewSetRowHeightRequest", [
            { no: 1, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 3, name: "row_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewSetRowHeightRequest>): PageViewSetRowHeightRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.viewId = "";
        message.page = 0;
        message.rowHeight = 0;
        if (value !== undefined)
            reflectionMergePartial<PageViewSetRowHeightRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewSetRowHeightRequest): PageViewSetRowHeightRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string view_id */ 1:
                    message.viewId = reader.string();
                    break;
                case /* PageModel.Page page */ 2:
                    message.page = reader.int32();
                    break;
                case /* int64 row_height */ 3:
                    message.rowHeight = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewSetRowHeightRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string view_id = 1; */
        if (message.viewId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.viewId);
        /* PageModel.Page page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* int64 row_height = 3; */
        if (message.rowHeight !== 0)
            writer.tag(3, WireType.Varint).int64(message.rowHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewSetRowHeightRequest
 */
export const PageViewSetRowHeightRequest = new PageViewSetRowHeightRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewSetRowHeightReply$Type extends MessageType<PageViewSetRowHeightReply> {
    constructor() {
        super("PageViewSetRowHeightReply", []);
    }
    create(value?: PartialMessage<PageViewSetRowHeightReply>): PageViewSetRowHeightReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageViewSetRowHeightReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewSetRowHeightReply): PageViewSetRowHeightReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageViewSetRowHeightReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewSetRowHeightReply
 */
export const PageViewSetRowHeightReply = new PageViewSetRowHeightReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewColumnBatchUpdateRequest$Type extends MessageType<PageViewColumnBatchUpdateRequest> {
    constructor() {
        super("PageViewColumnBatchUpdateRequest", [
            { no: 1, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 2, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "columns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageViewColumnBatchUpdateRequest_Column }
        ]);
    }
    create(value?: PartialMessage<PageViewColumnBatchUpdateRequest>): PageViewColumnBatchUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.viewId = "";
        message.columns = [];
        if (value !== undefined)
            reflectionMergePartial<PageViewColumnBatchUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewColumnBatchUpdateRequest): PageViewColumnBatchUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PageModel.Page page */ 1:
                    message.page = reader.int32();
                    break;
                case /* string view_id */ 2:
                    message.viewId = reader.string();
                    break;
                case /* repeated PageViewColumnBatchUpdateRequest.Column columns */ 3:
                    message.columns.push(PageViewColumnBatchUpdateRequest_Column.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewColumnBatchUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PageModel.Page page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* string view_id = 2; */
        if (message.viewId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.viewId);
        /* repeated PageViewColumnBatchUpdateRequest.Column columns = 3; */
        for (let i = 0; i < message.columns.length; i++)
            PageViewColumnBatchUpdateRequest_Column.internalBinaryWrite(message.columns[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewColumnBatchUpdateRequest
 */
export const PageViewColumnBatchUpdateRequest = new PageViewColumnBatchUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewColumnBatchUpdateRequest_Column$Type extends MessageType<PageViewColumnBatchUpdateRequest_Column> {
    constructor() {
        super("PageViewColumnBatchUpdateRequest.Column", [
            { no: 1, name: "column_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["PageModel.View.Column.Type", PageModel_View_Column_Type] },
            { no: 3, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "header_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "sticky", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "border_left", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "border_right", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "footer_total", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewColumnBatchUpdateRequest_Column>): PageViewColumnBatchUpdateRequest_Column {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.columnId = "";
        message.type = 0;
        message.friendlyName = "";
        message.width = 0;
        message.sequence = 0;
        message.headerId = "";
        message.sticky = false;
        message.borderLeft = false;
        message.borderRight = false;
        message.footerTotal = false;
        if (value !== undefined)
            reflectionMergePartial<PageViewColumnBatchUpdateRequest_Column>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewColumnBatchUpdateRequest_Column): PageViewColumnBatchUpdateRequest_Column {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string column_id */ 1:
                    message.columnId = reader.string();
                    break;
                case /* PageModel.View.Column.Type type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string friendly_name */ 3:
                    message.friendlyName = reader.string();
                    break;
                case /* int64 width */ 5:
                    message.width = reader.int64().toNumber();
                    break;
                case /* int64 sequence */ 6:
                    message.sequence = reader.int64().toNumber();
                    break;
                case /* string header_id */ 7:
                    message.headerId = reader.string();
                    break;
                case /* bool sticky */ 8:
                    message.sticky = reader.bool();
                    break;
                case /* bool border_left */ 9:
                    message.borderLeft = reader.bool();
                    break;
                case /* bool border_right */ 10:
                    message.borderRight = reader.bool();
                    break;
                case /* bool footer_total */ 11:
                    message.footerTotal = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewColumnBatchUpdateRequest_Column, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string column_id = 1; */
        if (message.columnId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.columnId);
        /* PageModel.View.Column.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string friendly_name = 3; */
        if (message.friendlyName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.friendlyName);
        /* int64 width = 5; */
        if (message.width !== 0)
            writer.tag(5, WireType.Varint).int64(message.width);
        /* int64 sequence = 6; */
        if (message.sequence !== 0)
            writer.tag(6, WireType.Varint).int64(message.sequence);
        /* string header_id = 7; */
        if (message.headerId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.headerId);
        /* bool sticky = 8; */
        if (message.sticky !== false)
            writer.tag(8, WireType.Varint).bool(message.sticky);
        /* bool border_left = 9; */
        if (message.borderLeft !== false)
            writer.tag(9, WireType.Varint).bool(message.borderLeft);
        /* bool border_right = 10; */
        if (message.borderRight !== false)
            writer.tag(10, WireType.Varint).bool(message.borderRight);
        /* bool footer_total = 11; */
        if (message.footerTotal !== false)
            writer.tag(11, WireType.Varint).bool(message.footerTotal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewColumnBatchUpdateRequest.Column
 */
export const PageViewColumnBatchUpdateRequest_Column = new PageViewColumnBatchUpdateRequest_Column$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewColumnBatchUpdateReply$Type extends MessageType<PageViewColumnBatchUpdateReply> {
    constructor() {
        super("PageViewColumnBatchUpdateReply", []);
    }
    create(value?: PartialMessage<PageViewColumnBatchUpdateReply>): PageViewColumnBatchUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageViewColumnBatchUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewColumnBatchUpdateReply): PageViewColumnBatchUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageViewColumnBatchUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewColumnBatchUpdateReply
 */
export const PageViewColumnBatchUpdateReply = new PageViewColumnBatchUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewColumnWidthUpdateRequest$Type extends MessageType<PageViewColumnWidthUpdateRequest> {
    constructor() {
        super("PageViewColumnWidthUpdateRequest", [
            { no: 1, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] },
            { no: 2, name: "view_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "column_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["PageModel.View.Column.Type", PageModel_View_Column_Type] },
            { no: 5, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PageViewColumnWidthUpdateRequest>): PageViewColumnWidthUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.viewId = "";
        message.columnId = "";
        message.type = 0;
        message.width = 0;
        if (value !== undefined)
            reflectionMergePartial<PageViewColumnWidthUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewColumnWidthUpdateRequest): PageViewColumnWidthUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PageModel.Page page */ 1:
                    message.page = reader.int32();
                    break;
                case /* string view_id */ 2:
                    message.viewId = reader.string();
                    break;
                case /* string column_id */ 3:
                    message.columnId = reader.string();
                    break;
                case /* PageModel.View.Column.Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* int64 width */ 5:
                    message.width = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageViewColumnWidthUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PageModel.Page page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* string view_id = 2; */
        if (message.viewId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.viewId);
        /* string column_id = 3; */
        if (message.columnId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.columnId);
        /* PageModel.View.Column.Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* int64 width = 5; */
        if (message.width !== 0)
            writer.tag(5, WireType.Varint).int64(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewColumnWidthUpdateRequest
 */
export const PageViewColumnWidthUpdateRequest = new PageViewColumnWidthUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageViewColumnWidthUpdateReply$Type extends MessageType<PageViewColumnWidthUpdateReply> {
    constructor() {
        super("PageViewColumnWidthUpdateReply", []);
    }
    create(value?: PartialMessage<PageViewColumnWidthUpdateReply>): PageViewColumnWidthUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageViewColumnWidthUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageViewColumnWidthUpdateReply): PageViewColumnWidthUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PageViewColumnWidthUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageViewColumnWidthUpdateReply
 */
export const PageViewColumnWidthUpdateReply = new PageViewColumnWidthUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service PageService
 */
export const PageService = new ServiceType("PageService", [
    { name: "PageRetrieve", options: {}, I: PageRetrieveRequest, O: PageRetrieveReply },
    { name: "PageGet", options: {}, I: PageGetRequest, O: PageGetReply },
    { name: "RecurringTransactionPageRetrieve", options: {}, I: RecurringTransactionPageRetrieveRequest, O: RecurringTransactionPageRetrieveReply },
    { name: "PageHeaderCreate", options: {}, I: PageHeaderCreateRequest, O: PageHeaderCreateReply },
    { name: "PageHeaderUpdate", options: {}, I: PageHeaderUpdateRequest, O: PageHeaderUpdateReply },
    { name: "PageHeaderDelete", options: {}, I: PageHeaderDeleteRequest, O: PageHeaderDeleteReply },
    { name: "PageViewCreate", options: {}, I: PageViewCreateRequest, O: PageViewCreateReply },
    { name: "PageViewUpdate", options: {}, I: PageViewUpdateRequest, O: PageViewUpdateReply },
    { name: "PageViewDelete", options: {}, I: PageViewDeleteRequest, O: PageViewDeleteReply },
    { name: "PageViewDuplicate", options: {}, I: PageViewDuplicateRequest, O: PageViewDuplicateReply },
    { name: "PageViewSetRowHeight", options: {}, I: PageViewSetRowHeightRequest, O: PageViewSetRowHeightReply },
    { name: "PageViewColumnBatchUpdate", options: {}, I: PageViewColumnBatchUpdateRequest, O: PageViewColumnBatchUpdateReply },
    { name: "PageViewColumnWidthUpdate", options: {}, I: PageViewColumnWidthUpdateRequest, O: PageViewColumnWidthUpdateReply }
]);
