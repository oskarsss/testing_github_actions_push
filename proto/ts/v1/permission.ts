// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/permission.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * //////////////////////
 * PermissionGet
 * //////////////////////
 *
 * @generated from protobuf message PermissionGetRequest
 */
export interface PermissionGetRequest {
}
/**
 * @generated from protobuf message PermissionGetReply
 */
export interface PermissionGetReply {
    /**
     * @generated from protobuf field: repeated PermissionGetReply.PermissionGroup permission_groups = 1;
     */
    permissionGroups: PermissionGetReply_PermissionGroup[];
}
/**
 * @generated from protobuf message PermissionGetReply.PermissionGroup
 */
export interface PermissionGetReply_PermissionGroup {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated PermissionGetReply.PermissionGroup.Permission permissions = 2;
     */
    permissions: PermissionGetReply_PermissionGroup_Permission[];
}
/**
 * @generated from protobuf message PermissionGetReply.PermissionGroup.Permission
 */
export interface PermissionGetReply_PermissionGroup_Permission {
    /**
     * @generated from protobuf field: string permission_id = 1;
     */
    permissionId: string;
    /**
     * @generated from protobuf field: string permission_group_id = 2;
     */
    permissionGroupId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string field_key = 4;
     */
    fieldKey: string;
    /**
     * @generated from protobuf field: int64 sequence = 5;
     */
    sequence: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PermissionGetRequest$Type extends MessageType<PermissionGetRequest> {
    constructor() {
        super("PermissionGetRequest", []);
    }
    create(value?: PartialMessage<PermissionGetRequest>): PermissionGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PermissionGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermissionGetRequest): PermissionGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PermissionGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PermissionGetRequest
 */
export const PermissionGetRequest = new PermissionGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermissionGetReply$Type extends MessageType<PermissionGetReply> {
    constructor() {
        super("PermissionGetReply", [
            { no: 1, name: "permission_groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PermissionGetReply_PermissionGroup }
        ]);
    }
    create(value?: PartialMessage<PermissionGetReply>): PermissionGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissionGroups = [];
        if (value !== undefined)
            reflectionMergePartial<PermissionGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermissionGetReply): PermissionGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PermissionGetReply.PermissionGroup permission_groups */ 1:
                    message.permissionGroups.push(PermissionGetReply_PermissionGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermissionGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PermissionGetReply.PermissionGroup permission_groups = 1; */
        for (let i = 0; i < message.permissionGroups.length; i++)
            PermissionGetReply_PermissionGroup.internalBinaryWrite(message.permissionGroups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PermissionGetReply
 */
export const PermissionGetReply = new PermissionGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermissionGetReply_PermissionGroup$Type extends MessageType<PermissionGetReply_PermissionGroup> {
    constructor() {
        super("PermissionGetReply.PermissionGroup", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "permissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PermissionGetReply_PermissionGroup_Permission }
        ]);
    }
    create(value?: PartialMessage<PermissionGetReply_PermissionGroup>): PermissionGetReply_PermissionGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.permissions = [];
        if (value !== undefined)
            reflectionMergePartial<PermissionGetReply_PermissionGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermissionGetReply_PermissionGroup): PermissionGetReply_PermissionGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated PermissionGetReply.PermissionGroup.Permission permissions */ 2:
                    message.permissions.push(PermissionGetReply_PermissionGroup_Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermissionGetReply_PermissionGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated PermissionGetReply.PermissionGroup.Permission permissions = 2; */
        for (let i = 0; i < message.permissions.length; i++)
            PermissionGetReply_PermissionGroup_Permission.internalBinaryWrite(message.permissions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PermissionGetReply.PermissionGroup
 */
export const PermissionGetReply_PermissionGroup = new PermissionGetReply_PermissionGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermissionGetReply_PermissionGroup_Permission$Type extends MessageType<PermissionGetReply_PermissionGroup_Permission> {
    constructor() {
        super("PermissionGetReply.PermissionGroup.Permission", [
            { no: 1, name: "permission_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "permission_group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "field_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PermissionGetReply_PermissionGroup_Permission>): PermissionGetReply_PermissionGroup_Permission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissionId = "";
        message.permissionGroupId = "";
        message.name = "";
        message.fieldKey = "";
        message.sequence = 0;
        if (value !== undefined)
            reflectionMergePartial<PermissionGetReply_PermissionGroup_Permission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermissionGetReply_PermissionGroup_Permission): PermissionGetReply_PermissionGroup_Permission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string permission_id */ 1:
                    message.permissionId = reader.string();
                    break;
                case /* string permission_group_id */ 2:
                    message.permissionGroupId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string field_key */ 4:
                    message.fieldKey = reader.string();
                    break;
                case /* int64 sequence */ 5:
                    message.sequence = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermissionGetReply_PermissionGroup_Permission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string permission_id = 1; */
        if (message.permissionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.permissionId);
        /* string permission_group_id = 2; */
        if (message.permissionGroupId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.permissionGroupId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string field_key = 4; */
        if (message.fieldKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fieldKey);
        /* int64 sequence = 5; */
        if (message.sequence !== 0)
            writer.tag(5, WireType.Varint).int64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PermissionGetReply.PermissionGroup.Permission
 */
export const PermissionGetReply_PermissionGroup_Permission = new PermissionGetReply_PermissionGroup_Permission$Type();
/**
 * @generated ServiceType for protobuf service PermissionService
 */
export const PermissionService = new ServiceType("PermissionService", [
    { name: "PermissionGet", options: {}, I: PermissionGetRequest, O: PermissionGetReply }
]);
