// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/ifta.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ///
 *
 * @generated from protobuf message GetPeriodsRequest
 */
export interface GetPeriodsRequest {
}
/**
 * @generated from protobuf message GetPeriodsReply
 */
export interface GetPeriodsReply {
    /**
     * @generated from protobuf field: repeated GetPeriodsReply.Years years = 1;
     */
    years: GetPeriodsReply_Years[];
}
/**
 * @generated from protobuf message GetPeriodsReply.Years
 */
export interface GetPeriodsReply_Years {
    /**
     * @generated from protobuf field: int64 year = 1;
     */
    year: number;
    /**
     * @generated from protobuf field: repeated GetPeriodsReply.Years.Period periods = 2;
     */
    periods: GetPeriodsReply_Years_Period[];
}
/**
 * @generated from protobuf message GetPeriodsReply.Years.Period
 */
export interface GetPeriodsReply_Years_Period {
    /**
     * @generated from protobuf field: string period_id = 1;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 year = 3;
     */
    year: number;
    /**
     * @generated from protobuf field: string start_date = 4;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 5;
     */
    endDate: string;
    /**
     * @generated from protobuf field: string next_tax_owed = 6;
     */
    nextTaxOwed: string;
}
/**
 * ///
 *
 * @generated from protobuf message GetPeriodRequest
 */
export interface GetPeriodRequest {
    /**
     * @generated from protobuf field: string period_id = 1;
     */
    periodId: string;
}
/**
 * @generated from protobuf message GetPeriodReply
 */
export interface GetPeriodReply {
    /**
     * @generated from protobuf field: repeated GetPeriodReply.Truck trucks = 1;
     */
    trucks: GetPeriodReply_Truck[];
    /**
     * @generated from protobuf field: GetPeriodReply.Totals trucks_totals = 2;
     */
    trucksTotals?: GetPeriodReply_Totals;
    /**
     * @generated from protobuf field: repeated GetPeriodReply.Stop stops = 3;
     */
    stops: GetPeriodReply_Stop[];
    /**
     * @generated from protobuf field: GetPeriodReply.Totals stops_totals = 4;
     */
    stopsTotals?: GetPeriodReply_Totals;
    /**
     * @generated from protobuf field: repeated GetPeriodReply.Total totals = 5;
     */
    totals: GetPeriodReply_Total[];
    /**
     * @generated from protobuf field: GetPeriodReply.Totals totals_totals = 6;
     */
    totalsTotals?: GetPeriodReply_Totals;
}
/**
 * @generated from protobuf message GetPeriodReply.Totals
 */
export interface GetPeriodReply_Totals {
    /**
     * @generated from protobuf field: double distance_total = 1;
     */
    distanceTotal: number;
    /**
     * @generated from protobuf field: string distance_total_formatted = 2;
     */
    distanceTotalFormatted: string;
    /**
     * @generated from protobuf field: double fuel_total = 3;
     */
    fuelTotal: number;
    /**
     * @generated from protobuf field: string fuel_total_formatted = 4;
     */
    fuelTotalFormatted: string;
}
/**
 * @generated from protobuf message GetPeriodReply.Truck
 */
export interface GetPeriodReply_Truck {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: string total_distance = 4;
     */
    totalDistance: string;
    /**
     * @generated from protobuf field: string total_fuel = 5;
     */
    totalFuel: string;
    /**
     * @generated from protobuf field: repeated GetPeriodReply.Truck.State states = 6;
     */
    states: GetPeriodReply_Truck_State[];
    /**
     * @generated from protobuf field: GetPeriodReply.Truck.Driver driver = 7;
     */
    driver?: GetPeriodReply_Truck_Driver;
}
/**
 * State
 *
 * @generated from protobuf message GetPeriodReply.Truck.State
 */
export interface GetPeriodReply_Truck_State {
    /**
     * @generated from protobuf field: string state = 1;
     */
    state: string;
    /**
     * @generated from protobuf field: string total_distance = 2;
     */
    totalDistance: string;
    /**
     * @generated from protobuf field: string total_fuel_quantity = 3;
     */
    totalFuelQuantity: string;
}
/**
 * Driver
 *
 * @generated from protobuf message GetPeriodReply.Truck.Driver
 */
export interface GetPeriodReply_Truck_Driver {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 3;
     */
    selfieThumbUrl: string;
}
/**
 * @generated from protobuf message GetPeriodReply.Stop
 */
export interface GetPeriodReply_Stop {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string truck_reference_id = 2;
     */
    truckReferenceId: string;
    /**
     * @generated from protobuf field: int64 from_load_id = 3;
     */
    fromLoadId: number;
    /**
     * @generated from protobuf field: string from_stop_city = 4;
     */
    fromStopCity: string;
    /**
     * @generated from protobuf field: string from_stop_state = 5;
     */
    fromStopState: string;
    /**
     * @generated from protobuf field: string from_stop_at = 6;
     */
    fromStopAt: string;
    /**
     * @generated from protobuf field: int64 end_load_id = 7;
     */
    endLoadId: number;
    /**
     * @generated from protobuf field: string end_stop_city = 8;
     */
    endStopCity: string;
    /**
     * @generated from protobuf field: string end_stop_state = 9;
     */
    endStopState: string;
    /**
     * @generated from protobuf field: string end_stop_at = 10;
     */
    endStopAt: string;
    /**
     * @generated from protobuf field: string state = 11;
     */
    state: string;
    /**
     * @generated from protobuf field: string distance = 12;
     */
    distance: string;
}
/**
 * @generated from protobuf message GetPeriodReply.Total
 */
export interface GetPeriodReply_Total {
    /**
     * @generated from protobuf field: string state_id = 1;
     */
    stateId: string;
    /**
     * @generated from protobuf field: string country = 2;
     */
    country: string;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
    /**
     * @generated from protobuf field: string total_distance = 4;
     */
    totalDistance: string;
    /**
     * @generated from protobuf field: string total_fuel_quantity = 5;
     */
    totalFuelQuantity: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodsRequest$Type extends MessageType<GetPeriodsRequest> {
    constructor() {
        super("GetPeriodsRequest", []);
    }
    create(value?: PartialMessage<GetPeriodsRequest>): GetPeriodsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPeriodsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodsRequest): GetPeriodsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPeriodsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodsRequest
 */
export const GetPeriodsRequest = new GetPeriodsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodsReply$Type extends MessageType<GetPeriodsReply> {
    constructor() {
        super("GetPeriodsReply", [
            { no: 1, name: "years", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetPeriodsReply_Years }
        ]);
    }
    create(value?: PartialMessage<GetPeriodsReply>): GetPeriodsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.years = [];
        if (value !== undefined)
            reflectionMergePartial<GetPeriodsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodsReply): GetPeriodsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetPeriodsReply.Years years */ 1:
                    message.years.push(GetPeriodsReply_Years.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetPeriodsReply.Years years = 1; */
        for (let i = 0; i < message.years.length; i++)
            GetPeriodsReply_Years.internalBinaryWrite(message.years[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodsReply
 */
export const GetPeriodsReply = new GetPeriodsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodsReply_Years$Type extends MessageType<GetPeriodsReply_Years> {
    constructor() {
        super("GetPeriodsReply.Years", [
            { no: 1, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "periods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetPeriodsReply_Years_Period }
        ]);
    }
    create(value?: PartialMessage<GetPeriodsReply_Years>): GetPeriodsReply_Years {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.year = 0;
        message.periods = [];
        if (value !== undefined)
            reflectionMergePartial<GetPeriodsReply_Years>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodsReply_Years): GetPeriodsReply_Years {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 year */ 1:
                    message.year = reader.int64().toNumber();
                    break;
                case /* repeated GetPeriodsReply.Years.Period periods */ 2:
                    message.periods.push(GetPeriodsReply_Years_Period.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodsReply_Years, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 year = 1; */
        if (message.year !== 0)
            writer.tag(1, WireType.Varint).int64(message.year);
        /* repeated GetPeriodsReply.Years.Period periods = 2; */
        for (let i = 0; i < message.periods.length; i++)
            GetPeriodsReply_Years_Period.internalBinaryWrite(message.periods[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodsReply.Years
 */
export const GetPeriodsReply_Years = new GetPeriodsReply_Years$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodsReply_Years_Period$Type extends MessageType<GetPeriodsReply_Years_Period> {
    constructor() {
        super("GetPeriodsReply.Years.Period", [
            { no: 1, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "next_tax_owed", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodsReply_Years_Period>): GetPeriodsReply_Years_Period {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.periodId = "";
        message.name = "";
        message.year = 0;
        message.startDate = "";
        message.endDate = "";
        message.nextTaxOwed = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodsReply_Years_Period>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodsReply_Years_Period): GetPeriodsReply_Years_Period {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string period_id */ 1:
                    message.periodId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 year */ 3:
                    message.year = reader.int64().toNumber();
                    break;
                case /* string start_date */ 4:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 5:
                    message.endDate = reader.string();
                    break;
                case /* string next_tax_owed */ 6:
                    message.nextTaxOwed = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodsReply_Years_Period, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string period_id = 1; */
        if (message.periodId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.periodId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 year = 3; */
        if (message.year !== 0)
            writer.tag(3, WireType.Varint).int64(message.year);
        /* string start_date = 4; */
        if (message.startDate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 5; */
        if (message.endDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.endDate);
        /* string next_tax_owed = 6; */
        if (message.nextTaxOwed !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.nextTaxOwed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodsReply.Years.Period
 */
export const GetPeriodsReply_Years_Period = new GetPeriodsReply_Years_Period$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodRequest$Type extends MessageType<GetPeriodRequest> {
    constructor() {
        super("GetPeriodRequest", [
            { no: 1, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodRequest>): GetPeriodRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodRequest): GetPeriodRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string period_id */ 1:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string period_id = 1; */
        if (message.periodId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodRequest
 */
export const GetPeriodRequest = new GetPeriodRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply$Type extends MessageType<GetPeriodReply> {
    constructor() {
        super("GetPeriodReply", [
            { no: 1, name: "trucks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetPeriodReply_Truck },
            { no: 2, name: "trucks_totals", kind: "message", T: () => GetPeriodReply_Totals },
            { no: 3, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetPeriodReply_Stop },
            { no: 4, name: "stops_totals", kind: "message", T: () => GetPeriodReply_Totals },
            { no: 5, name: "totals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetPeriodReply_Total },
            { no: 6, name: "totals_totals", kind: "message", T: () => GetPeriodReply_Totals }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply>): GetPeriodReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trucks = [];
        message.stops = [];
        message.totals = [];
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply): GetPeriodReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetPeriodReply.Truck trucks */ 1:
                    message.trucks.push(GetPeriodReply_Truck.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GetPeriodReply.Totals trucks_totals */ 2:
                    message.trucksTotals = GetPeriodReply_Totals.internalBinaryRead(reader, reader.uint32(), options, message.trucksTotals);
                    break;
                case /* repeated GetPeriodReply.Stop stops */ 3:
                    message.stops.push(GetPeriodReply_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GetPeriodReply.Totals stops_totals */ 4:
                    message.stopsTotals = GetPeriodReply_Totals.internalBinaryRead(reader, reader.uint32(), options, message.stopsTotals);
                    break;
                case /* repeated GetPeriodReply.Total totals */ 5:
                    message.totals.push(GetPeriodReply_Total.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GetPeriodReply.Totals totals_totals */ 6:
                    message.totalsTotals = GetPeriodReply_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totalsTotals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetPeriodReply.Truck trucks = 1; */
        for (let i = 0; i < message.trucks.length; i++)
            GetPeriodReply_Truck.internalBinaryWrite(message.trucks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetPeriodReply.Totals trucks_totals = 2; */
        if (message.trucksTotals)
            GetPeriodReply_Totals.internalBinaryWrite(message.trucksTotals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetPeriodReply.Stop stops = 3; */
        for (let i = 0; i < message.stops.length; i++)
            GetPeriodReply_Stop.internalBinaryWrite(message.stops[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GetPeriodReply.Totals stops_totals = 4; */
        if (message.stopsTotals)
            GetPeriodReply_Totals.internalBinaryWrite(message.stopsTotals, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetPeriodReply.Total totals = 5; */
        for (let i = 0; i < message.totals.length; i++)
            GetPeriodReply_Total.internalBinaryWrite(message.totals[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GetPeriodReply.Totals totals_totals = 6; */
        if (message.totalsTotals)
            GetPeriodReply_Totals.internalBinaryWrite(message.totalsTotals, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply
 */
export const GetPeriodReply = new GetPeriodReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply_Totals$Type extends MessageType<GetPeriodReply_Totals> {
    constructor() {
        super("GetPeriodReply.Totals", [
            { no: 1, name: "distance_total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "distance_total_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fuel_total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "fuel_total_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply_Totals>): GetPeriodReply_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.distanceTotal = 0;
        message.distanceTotalFormatted = "";
        message.fuelTotal = 0;
        message.fuelTotalFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply_Totals): GetPeriodReply_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double distance_total */ 1:
                    message.distanceTotal = reader.double();
                    break;
                case /* string distance_total_formatted */ 2:
                    message.distanceTotalFormatted = reader.string();
                    break;
                case /* double fuel_total */ 3:
                    message.fuelTotal = reader.double();
                    break;
                case /* string fuel_total_formatted */ 4:
                    message.fuelTotalFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double distance_total = 1; */
        if (message.distanceTotal !== 0)
            writer.tag(1, WireType.Bit64).double(message.distanceTotal);
        /* string distance_total_formatted = 2; */
        if (message.distanceTotalFormatted !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.distanceTotalFormatted);
        /* double fuel_total = 3; */
        if (message.fuelTotal !== 0)
            writer.tag(3, WireType.Bit64).double(message.fuelTotal);
        /* string fuel_total_formatted = 4; */
        if (message.fuelTotalFormatted !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fuelTotalFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply.Totals
 */
export const GetPeriodReply_Totals = new GetPeriodReply_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply_Truck$Type extends MessageType<GetPeriodReply_Truck> {
    constructor() {
        super("GetPeriodReply.Truck", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "total_distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total_fuel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetPeriodReply_Truck_State },
            { no: 7, name: "driver", kind: "message", T: () => GetPeriodReply_Truck_Driver }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply_Truck>): GetPeriodReply_Truck {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.referenceId = "";
        message.type = "";
        message.totalDistance = "";
        message.totalFuel = "";
        message.states = [];
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply_Truck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply_Truck): GetPeriodReply_Truck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string total_distance */ 4:
                    message.totalDistance = reader.string();
                    break;
                case /* string total_fuel */ 5:
                    message.totalFuel = reader.string();
                    break;
                case /* repeated GetPeriodReply.Truck.State states */ 6:
                    message.states.push(GetPeriodReply_Truck_State.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GetPeriodReply.Truck.Driver driver */ 7:
                    message.driver = GetPeriodReply_Truck_Driver.internalBinaryRead(reader, reader.uint32(), options, message.driver);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply_Truck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string total_distance = 4; */
        if (message.totalDistance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.totalDistance);
        /* string total_fuel = 5; */
        if (message.totalFuel !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.totalFuel);
        /* repeated GetPeriodReply.Truck.State states = 6; */
        for (let i = 0; i < message.states.length; i++)
            GetPeriodReply_Truck_State.internalBinaryWrite(message.states[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* GetPeriodReply.Truck.Driver driver = 7; */
        if (message.driver)
            GetPeriodReply_Truck_Driver.internalBinaryWrite(message.driver, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply.Truck
 */
export const GetPeriodReply_Truck = new GetPeriodReply_Truck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply_Truck_State$Type extends MessageType<GetPeriodReply_Truck_State> {
    constructor() {
        super("GetPeriodReply.Truck.State", [
            { no: 1, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_fuel_quantity", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply_Truck_State>): GetPeriodReply_Truck_State {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = "";
        message.totalDistance = "";
        message.totalFuelQuantity = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply_Truck_State>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply_Truck_State): GetPeriodReply_Truck_State {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string state */ 1:
                    message.state = reader.string();
                    break;
                case /* string total_distance */ 2:
                    message.totalDistance = reader.string();
                    break;
                case /* string total_fuel_quantity */ 3:
                    message.totalFuelQuantity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply_Truck_State, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string state = 1; */
        if (message.state !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.state);
        /* string total_distance = 2; */
        if (message.totalDistance !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalDistance);
        /* string total_fuel_quantity = 3; */
        if (message.totalFuelQuantity !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalFuelQuantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply.Truck.State
 */
export const GetPeriodReply_Truck_State = new GetPeriodReply_Truck_State$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply_Truck_Driver$Type extends MessageType<GetPeriodReply_Truck_Driver> {
    constructor() {
        super("GetPeriodReply.Truck.Driver", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply_Truck_Driver>): GetPeriodReply_Truck_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.name = "";
        message.selfieThumbUrl = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply_Truck_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply_Truck_Driver): GetPeriodReply_Truck_Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string selfie_thumb_url */ 3:
                    message.selfieThumbUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply_Truck_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string selfie_thumb_url = 3; */
        if (message.selfieThumbUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.selfieThumbUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply.Truck.Driver
 */
export const GetPeriodReply_Truck_Driver = new GetPeriodReply_Truck_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply_Stop$Type extends MessageType<GetPeriodReply_Stop> {
    constructor() {
        super("GetPeriodReply.Stop", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from_load_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "from_stop_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "from_stop_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "from_stop_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "end_load_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "end_stop_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "end_stop_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "end_stop_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply_Stop>): GetPeriodReply_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.truckReferenceId = "";
        message.fromLoadId = 0;
        message.fromStopCity = "";
        message.fromStopState = "";
        message.fromStopAt = "";
        message.endLoadId = 0;
        message.endStopCity = "";
        message.endStopState = "";
        message.endStopAt = "";
        message.state = "";
        message.distance = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply_Stop): GetPeriodReply_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string truck_reference_id */ 2:
                    message.truckReferenceId = reader.string();
                    break;
                case /* int64 from_load_id */ 3:
                    message.fromLoadId = reader.int64().toNumber();
                    break;
                case /* string from_stop_city */ 4:
                    message.fromStopCity = reader.string();
                    break;
                case /* string from_stop_state */ 5:
                    message.fromStopState = reader.string();
                    break;
                case /* string from_stop_at */ 6:
                    message.fromStopAt = reader.string();
                    break;
                case /* int64 end_load_id */ 7:
                    message.endLoadId = reader.int64().toNumber();
                    break;
                case /* string end_stop_city */ 8:
                    message.endStopCity = reader.string();
                    break;
                case /* string end_stop_state */ 9:
                    message.endStopState = reader.string();
                    break;
                case /* string end_stop_at */ 10:
                    message.endStopAt = reader.string();
                    break;
                case /* string state */ 11:
                    message.state = reader.string();
                    break;
                case /* string distance */ 12:
                    message.distance = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string truck_reference_id = 2; */
        if (message.truckReferenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckReferenceId);
        /* int64 from_load_id = 3; */
        if (message.fromLoadId !== 0)
            writer.tag(3, WireType.Varint).int64(message.fromLoadId);
        /* string from_stop_city = 4; */
        if (message.fromStopCity !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fromStopCity);
        /* string from_stop_state = 5; */
        if (message.fromStopState !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fromStopState);
        /* string from_stop_at = 6; */
        if (message.fromStopAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fromStopAt);
        /* int64 end_load_id = 7; */
        if (message.endLoadId !== 0)
            writer.tag(7, WireType.Varint).int64(message.endLoadId);
        /* string end_stop_city = 8; */
        if (message.endStopCity !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.endStopCity);
        /* string end_stop_state = 9; */
        if (message.endStopState !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.endStopState);
        /* string end_stop_at = 10; */
        if (message.endStopAt !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.endStopAt);
        /* string state = 11; */
        if (message.state !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.state);
        /* string distance = 12; */
        if (message.distance !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.distance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply.Stop
 */
export const GetPeriodReply_Stop = new GetPeriodReply_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodReply_Total$Type extends MessageType<GetPeriodReply_Total> {
    constructor() {
        super("GetPeriodReply.Total", [
            { no: 1, name: "state_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "total_distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total_fuel_quantity", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodReply_Total>): GetPeriodReply_Total {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stateId = "";
        message.country = "";
        message.state = "";
        message.totalDistance = "";
        message.totalFuelQuantity = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodReply_Total>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodReply_Total): GetPeriodReply_Total {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string state_id */ 1:
                    message.stateId = reader.string();
                    break;
                case /* string country */ 2:
                    message.country = reader.string();
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                case /* string total_distance */ 4:
                    message.totalDistance = reader.string();
                    break;
                case /* string total_fuel_quantity */ 5:
                    message.totalFuelQuantity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodReply_Total, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string state_id = 1; */
        if (message.stateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stateId);
        /* string country = 2; */
        if (message.country !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.country);
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        /* string total_distance = 4; */
        if (message.totalDistance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.totalDistance);
        /* string total_fuel_quantity = 5; */
        if (message.totalFuelQuantity !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.totalFuelQuantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodReply.Total
 */
export const GetPeriodReply_Total = new GetPeriodReply_Total$Type();
/**
 * @generated ServiceType for protobuf service IftaService
 */
export const IftaService = new ServiceType("IftaService", [
    { name: "GetPeriods", options: {}, I: GetPeriodsRequest, O: GetPeriodsReply },
    { name: "GetPeriod", options: {}, I: GetPeriodRequest, O: GetPeriodReply }
]);
