// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlement_transactions.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SettlementTransactionsService } from "./settlement_transactions";
import type { SettlementEntityTransactionHistoryReply } from "./settlement_transactions";
import type { SettlementEntityTransactionHistoryRequest } from "./settlement_transactions";
import type { SettlementTransactionUnassignReply } from "./settlement_transactions";
import type { SettlementTransactionUnassignRequest } from "./settlement_transactions";
import type { SettlementTransactionCreateReply } from "./settlement_transactions";
import type { SettlementTransactionCreateRequest } from "./settlement_transactions";
import type { SettlementTransactionDeleteReply } from "./settlement_transactions";
import type { SettlementTransactionDeleteRequest } from "./settlement_transactions";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SettlementTransactionUpdateReply } from "./settlement_transactions";
import type { SettlementTransactionUpdateRequest } from "./settlement_transactions";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SettlementTransactionsService
 */
export interface ISettlementTransactionsServiceClient {
    /**
     * @generated from protobuf rpc: SettlementTransactionUpdate(SettlementTransactionUpdateRequest) returns (SettlementTransactionUpdateReply);
     */
    settlementTransactionUpdate(input: SettlementTransactionUpdateRequest, options?: RpcOptions): UnaryCall<SettlementTransactionUpdateRequest, SettlementTransactionUpdateReply>;
    /**
     * @generated from protobuf rpc: SettlementTransactionDelete(SettlementTransactionDeleteRequest) returns (SettlementTransactionDeleteReply);
     */
    settlementTransactionDelete(input: SettlementTransactionDeleteRequest, options?: RpcOptions): UnaryCall<SettlementTransactionDeleteRequest, SettlementTransactionDeleteReply>;
    /**
     * @generated from protobuf rpc: SettlementTransactionCreate(SettlementTransactionCreateRequest) returns (SettlementTransactionCreateReply);
     */
    settlementTransactionCreate(input: SettlementTransactionCreateRequest, options?: RpcOptions): UnaryCall<SettlementTransactionCreateRequest, SettlementTransactionCreateReply>;
    /**
     * @generated from protobuf rpc: SettlementTransactionUnassign(SettlementTransactionUnassignRequest) returns (SettlementTransactionUnassignReply);
     */
    settlementTransactionUnassign(input: SettlementTransactionUnassignRequest, options?: RpcOptions): UnaryCall<SettlementTransactionUnassignRequest, SettlementTransactionUnassignReply>;
    /**
     * @generated from protobuf rpc: SettlementEntityTransactionHistory(SettlementEntityTransactionHistoryRequest) returns (SettlementEntityTransactionHistoryReply);
     */
    settlementEntityTransactionHistory(input: SettlementEntityTransactionHistoryRequest, options?: RpcOptions): UnaryCall<SettlementEntityTransactionHistoryRequest, SettlementEntityTransactionHistoryReply>;
}
/**
 * @generated from protobuf service SettlementTransactionsService
 */
export class SettlementTransactionsServiceClient implements ISettlementTransactionsServiceClient, ServiceInfo {
    typeName = SettlementTransactionsService.typeName;
    methods = SettlementTransactionsService.methods;
    options = SettlementTransactionsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SettlementTransactionUpdate(SettlementTransactionUpdateRequest) returns (SettlementTransactionUpdateReply);
     */
    settlementTransactionUpdate(input: SettlementTransactionUpdateRequest, options?: RpcOptions): UnaryCall<SettlementTransactionUpdateRequest, SettlementTransactionUpdateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementTransactionUpdateRequest, SettlementTransactionUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementTransactionDelete(SettlementTransactionDeleteRequest) returns (SettlementTransactionDeleteReply);
     */
    settlementTransactionDelete(input: SettlementTransactionDeleteRequest, options?: RpcOptions): UnaryCall<SettlementTransactionDeleteRequest, SettlementTransactionDeleteReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementTransactionDeleteRequest, SettlementTransactionDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementTransactionCreate(SettlementTransactionCreateRequest) returns (SettlementTransactionCreateReply);
     */
    settlementTransactionCreate(input: SettlementTransactionCreateRequest, options?: RpcOptions): UnaryCall<SettlementTransactionCreateRequest, SettlementTransactionCreateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementTransactionCreateRequest, SettlementTransactionCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementTransactionUnassign(SettlementTransactionUnassignRequest) returns (SettlementTransactionUnassignReply);
     */
    settlementTransactionUnassign(input: SettlementTransactionUnassignRequest, options?: RpcOptions): UnaryCall<SettlementTransactionUnassignRequest, SettlementTransactionUnassignReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementTransactionUnassignRequest, SettlementTransactionUnassignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementEntityTransactionHistory(SettlementEntityTransactionHistoryRequest) returns (SettlementEntityTransactionHistoryReply);
     */
    settlementEntityTransactionHistory(input: SettlementEntityTransactionHistoryRequest, options?: RpcOptions): UnaryCall<SettlementEntityTransactionHistoryRequest, SettlementEntityTransactionHistoryReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementEntityTransactionHistoryRequest, SettlementEntityTransactionHistoryReply>("unary", this._transport, method, opt, input);
    }
}
