// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/auth.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthService } from "./auth";
import type { InviteAcceptAndLoginReply } from "./auth";
import type { InviteAcceptAndLoginRequest } from "./auth";
import type { InviteAcceptReply } from "./auth";
import type { InviteAcceptRequest } from "./auth";
import type { InviteDeclineReply } from "./auth";
import type { InviteDeclineRequest } from "./auth";
import type { InviteGetReply } from "./auth";
import type { InviteGetRequest } from "./auth";
import type { InviteAcceptAndRegisterReply } from "./auth";
import type { InviteAcceptAndRegisterRequest } from "./auth";
import type { InviteRetrieveReply } from "./auth";
import type { InviteRetrieveRequest } from "./auth";
import type { ResetPasswordReply } from "./auth";
import type { ResetPasswordRequest } from "./auth";
import type { SendResetPasswordLinkReply } from "./auth";
import type { SendResetPasswordLinkRequest } from "./auth";
import type { VerifyCodeReply } from "./auth";
import type { VerifyCodeRequest } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RequestCodeReply } from "./auth";
import type { RequestCodeRequest } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service AuthService
 */
export interface IAuthServiceClient {
    /**
     * @generated from protobuf rpc: RequestCode(RequestCodeRequest) returns (RequestCodeReply);
     */
    requestCode(input: RequestCodeRequest, options?: RpcOptions): UnaryCall<RequestCodeRequest, RequestCodeReply>;
    /**
     * @generated from protobuf rpc: VerifyCode(VerifyCodeRequest) returns (VerifyCodeReply);
     */
    verifyCode(input: VerifyCodeRequest, options?: RpcOptions): UnaryCall<VerifyCodeRequest, VerifyCodeReply>;
    /**
     * @generated from protobuf rpc: SendResetPasswordLink(SendResetPasswordLinkRequest) returns (SendResetPasswordLinkReply);
     */
    sendResetPasswordLink(input: SendResetPasswordLinkRequest, options?: RpcOptions): UnaryCall<SendResetPasswordLinkRequest, SendResetPasswordLinkReply>;
    /**
     * @generated from protobuf rpc: ResetPassword(ResetPasswordRequest) returns (ResetPasswordReply);
     */
    resetPassword(input: ResetPasswordRequest, options?: RpcOptions): UnaryCall<ResetPasswordRequest, ResetPasswordReply>;
    /**
     * User is NOT REGISTERED
     *
     * @generated from protobuf rpc: InviteRetrieve(InviteRetrieveRequest) returns (InviteRetrieveReply);
     */
    inviteRetrieve(input: InviteRetrieveRequest, options?: RpcOptions): UnaryCall<InviteRetrieveRequest, InviteRetrieveReply>;
    /**
     * @generated from protobuf rpc: InviteAcceptAndRegister(InviteAcceptAndRegisterRequest) returns (InviteAcceptAndRegisterReply);
     */
    inviteAcceptAndRegister(input: InviteAcceptAndRegisterRequest, options?: RpcOptions): UnaryCall<InviteAcceptAndRegisterRequest, InviteAcceptAndRegisterReply>;
    /**
     * User is registered & logged in
     *
     * @generated from protobuf rpc: InviteGet(InviteGetRequest) returns (InviteGetReply);
     */
    inviteGet(input: InviteGetRequest, options?: RpcOptions): UnaryCall<InviteGetRequest, InviteGetReply>;
    /**
     * @generated from protobuf rpc: InviteDecline(InviteDeclineRequest) returns (InviteDeclineReply);
     */
    inviteDecline(input: InviteDeclineRequest, options?: RpcOptions): UnaryCall<InviteDeclineRequest, InviteDeclineReply>;
    /**
     * @generated from protobuf rpc: InviteAccept(InviteAcceptRequest) returns (InviteAcceptReply);
     */
    inviteAccept(input: InviteAcceptRequest, options?: RpcOptions): UnaryCall<InviteAcceptRequest, InviteAcceptReply>;
    /**
     * User is registered & not logged in
     *
     * @generated from protobuf rpc: InviteAcceptAndLogin(InviteAcceptAndLoginRequest) returns (InviteAcceptAndLoginReply);
     */
    inviteAcceptAndLogin(input: InviteAcceptAndLoginRequest, options?: RpcOptions): UnaryCall<InviteAcceptAndLoginRequest, InviteAcceptAndLoginReply>;
}
/**
 * @generated from protobuf service AuthService
 */
export class AuthServiceClient implements IAuthServiceClient, ServiceInfo {
    typeName = AuthService.typeName;
    methods = AuthService.methods;
    options = AuthService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RequestCode(RequestCodeRequest) returns (RequestCodeReply);
     */
    requestCode(input: RequestCodeRequest, options?: RpcOptions): UnaryCall<RequestCodeRequest, RequestCodeReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestCodeRequest, RequestCodeReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VerifyCode(VerifyCodeRequest) returns (VerifyCodeReply);
     */
    verifyCode(input: VerifyCodeRequest, options?: RpcOptions): UnaryCall<VerifyCodeRequest, VerifyCodeReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<VerifyCodeRequest, VerifyCodeReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendResetPasswordLink(SendResetPasswordLinkRequest) returns (SendResetPasswordLinkReply);
     */
    sendResetPasswordLink(input: SendResetPasswordLinkRequest, options?: RpcOptions): UnaryCall<SendResetPasswordLinkRequest, SendResetPasswordLinkReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendResetPasswordLinkRequest, SendResetPasswordLinkReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetPassword(ResetPasswordRequest) returns (ResetPasswordReply);
     */
    resetPassword(input: ResetPasswordRequest, options?: RpcOptions): UnaryCall<ResetPasswordRequest, ResetPasswordReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetPasswordRequest, ResetPasswordReply>("unary", this._transport, method, opt, input);
    }
    /**
     * User is NOT REGISTERED
     *
     * @generated from protobuf rpc: InviteRetrieve(InviteRetrieveRequest) returns (InviteRetrieveReply);
     */
    inviteRetrieve(input: InviteRetrieveRequest, options?: RpcOptions): UnaryCall<InviteRetrieveRequest, InviteRetrieveReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteRetrieveRequest, InviteRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteAcceptAndRegister(InviteAcceptAndRegisterRequest) returns (InviteAcceptAndRegisterReply);
     */
    inviteAcceptAndRegister(input: InviteAcceptAndRegisterRequest, options?: RpcOptions): UnaryCall<InviteAcceptAndRegisterRequest, InviteAcceptAndRegisterReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteAcceptAndRegisterRequest, InviteAcceptAndRegisterReply>("unary", this._transport, method, opt, input);
    }
    /**
     * User is registered & logged in
     *
     * @generated from protobuf rpc: InviteGet(InviteGetRequest) returns (InviteGetReply);
     */
    inviteGet(input: InviteGetRequest, options?: RpcOptions): UnaryCall<InviteGetRequest, InviteGetReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteGetRequest, InviteGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteDecline(InviteDeclineRequest) returns (InviteDeclineReply);
     */
    inviteDecline(input: InviteDeclineRequest, options?: RpcOptions): UnaryCall<InviteDeclineRequest, InviteDeclineReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteDeclineRequest, InviteDeclineReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteAccept(InviteAcceptRequest) returns (InviteAcceptReply);
     */
    inviteAccept(input: InviteAcceptRequest, options?: RpcOptions): UnaryCall<InviteAcceptRequest, InviteAcceptReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteAcceptRequest, InviteAcceptReply>("unary", this._transport, method, opt, input);
    }
    /**
     * User is registered & not logged in
     *
     * @generated from protobuf rpc: InviteAcceptAndLogin(InviteAcceptAndLoginRequest) returns (InviteAcceptAndLoginReply);
     */
    inviteAcceptAndLogin(input: InviteAcceptAndLoginRequest, options?: RpcOptions): UnaryCall<InviteAcceptAndLoginRequest, InviteAcceptAndLoginReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteAcceptAndLoginRequest, InviteAcceptAndLoginReply>("unary", this._transport, method, opt, input);
    }
}
