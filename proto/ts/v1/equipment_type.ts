// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/equipment_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EquipmentTypeModel_Icon } from "./models/model_equipment_type";
import { EquipmentTypeModel } from "./models/model_equipment_type";
/**
 * /////////////////////////
 * EquipmentTypeGet
 * /////////////////////////
 *
 * @generated from protobuf message EquipmentTypesGetRequest
 */
export interface EquipmentTypesGetRequest {
}
/**
 * @generated from protobuf message EquipmentTypesGetReply
 */
export interface EquipmentTypesGetReply {
    /**
     * @generated from protobuf field: repeated EquipmentTypeModel equipment_types = 1;
     */
    equipmentTypes: EquipmentTypeModel[];
}
/**
 * /////////////////////////
 * EquipmentTypeRetrieve
 * /////////////////////////
 *
 * @generated from protobuf message EquipmentTypeRetrieveRequest
 */
export interface EquipmentTypeRetrieveRequest {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
}
/**
 * @generated from protobuf message EquipmentTypeRetrieveReply
 */
export interface EquipmentTypeRetrieveReply {
    /**
     * @generated from protobuf field: EquipmentTypeModel equipment_type = 1;
     */
    equipmentType?: EquipmentTypeModel;
}
/**
 * /////////////////////////
 * EquipmentTypeCreate
 * /////////////////////////
 *
 * @generated from protobuf message EquipmentTypeCreateRequest
 */
export interface EquipmentTypeCreateRequest {
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: EquipmentTypeModel.Icon icon = 4;
     */
    icon: EquipmentTypeModel_Icon;
}
/**
 * @generated from protobuf message EquipmentTypeCreateReply
 */
export interface EquipmentTypeCreateReply {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
}
/**
 * /////////////////////////
 * EquipmentTypeUpdate
 * /////////////////////////
 *
 * @generated from protobuf message EquipmentTypeUpdateRequest
 */
export interface EquipmentTypeUpdateRequest {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: EquipmentTypeModel.Icon icon = 4;
     */
    icon: EquipmentTypeModel_Icon;
}
/**
 * @generated from protobuf message EquipmentTypeUpdateReply
 */
export interface EquipmentTypeUpdateReply {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
}
/**
 * /////////////////////////
 * EquipmentTypeDelete
 * /////////////////////////
 *
 * @generated from protobuf message EquipmentTypeDeleteRequest
 */
export interface EquipmentTypeDeleteRequest {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
}
/**
 * @generated from protobuf message EquipmentTypeDeleteReply
 */
export interface EquipmentTypeDeleteReply {
}
/**
 * /////////////////////////
 * EquipmentTypeRestore
 * /////////////////////////
 *
 * @generated from protobuf message EquipmentTypeRestoreRequest
 */
export interface EquipmentTypeRestoreRequest {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
}
/**
 * @generated from protobuf message EquipmentTypeRestoreReply
 */
export interface EquipmentTypeRestoreReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypesGetRequest$Type extends MessageType<EquipmentTypesGetRequest> {
    constructor() {
        super("EquipmentTypesGetRequest", []);
    }
    create(value?: PartialMessage<EquipmentTypesGetRequest>): EquipmentTypesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypesGetRequest): EquipmentTypesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EquipmentTypesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypesGetRequest
 */
export const EquipmentTypesGetRequest = new EquipmentTypesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypesGetReply$Type extends MessageType<EquipmentTypesGetReply> {
    constructor() {
        super("EquipmentTypesGetReply", [
            { no: 1, name: "equipment_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EquipmentTypeModel }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypesGetReply>): EquipmentTypesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypes = [];
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypesGetReply): EquipmentTypesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated EquipmentTypeModel equipment_types */ 1:
                    message.equipmentTypes.push(EquipmentTypeModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated EquipmentTypeModel equipment_types = 1; */
        for (let i = 0; i < message.equipmentTypes.length; i++)
            EquipmentTypeModel.internalBinaryWrite(message.equipmentTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypesGetReply
 */
export const EquipmentTypesGetReply = new EquipmentTypesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeRetrieveRequest$Type extends MessageType<EquipmentTypeRetrieveRequest> {
    constructor() {
        super("EquipmentTypeRetrieveRequest", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeRetrieveRequest>): EquipmentTypeRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeRetrieveRequest): EquipmentTypeRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeRetrieveRequest
 */
export const EquipmentTypeRetrieveRequest = new EquipmentTypeRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeRetrieveReply$Type extends MessageType<EquipmentTypeRetrieveReply> {
    constructor() {
        super("EquipmentTypeRetrieveReply", [
            { no: 1, name: "equipment_type", kind: "message", T: () => EquipmentTypeModel }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeRetrieveReply>): EquipmentTypeRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeRetrieveReply): EquipmentTypeRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* EquipmentTypeModel equipment_type */ 1:
                    message.equipmentType = EquipmentTypeModel.internalBinaryRead(reader, reader.uint32(), options, message.equipmentType);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* EquipmentTypeModel equipment_type = 1; */
        if (message.equipmentType)
            EquipmentTypeModel.internalBinaryWrite(message.equipmentType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeRetrieveReply
 */
export const EquipmentTypeRetrieveReply = new EquipmentTypeRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeCreateRequest$Type extends MessageType<EquipmentTypeCreateRequest> {
    constructor() {
        super("EquipmentTypeCreateRequest", [
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "enum", T: () => ["EquipmentTypeModel.Icon", EquipmentTypeModel_Icon, "ICON_"] }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeCreateRequest>): EquipmentTypeCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeCreateRequest): EquipmentTypeCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* EquipmentTypeModel.Icon icon */ 4:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* EquipmentTypeModel.Icon icon = 4; */
        if (message.icon !== 0)
            writer.tag(4, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeCreateRequest
 */
export const EquipmentTypeCreateRequest = new EquipmentTypeCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeCreateReply$Type extends MessageType<EquipmentTypeCreateReply> {
    constructor() {
        super("EquipmentTypeCreateReply", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeCreateReply>): EquipmentTypeCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeCreateReply): EquipmentTypeCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeCreateReply
 */
export const EquipmentTypeCreateReply = new EquipmentTypeCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeUpdateRequest$Type extends MessageType<EquipmentTypeUpdateRequest> {
    constructor() {
        super("EquipmentTypeUpdateRequest", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "enum", T: () => ["EquipmentTypeModel.Icon", EquipmentTypeModel_Icon, "ICON_"] }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeUpdateRequest>): EquipmentTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeUpdateRequest): EquipmentTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* EquipmentTypeModel.Icon icon */ 4:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* EquipmentTypeModel.Icon icon = 4; */
        if (message.icon !== 0)
            writer.tag(4, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeUpdateRequest
 */
export const EquipmentTypeUpdateRequest = new EquipmentTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeUpdateReply$Type extends MessageType<EquipmentTypeUpdateReply> {
    constructor() {
        super("EquipmentTypeUpdateReply", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeUpdateReply>): EquipmentTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeUpdateReply): EquipmentTypeUpdateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeUpdateReply
 */
export const EquipmentTypeUpdateReply = new EquipmentTypeUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeDeleteRequest$Type extends MessageType<EquipmentTypeDeleteRequest> {
    constructor() {
        super("EquipmentTypeDeleteRequest", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeDeleteRequest>): EquipmentTypeDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeDeleteRequest): EquipmentTypeDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeDeleteRequest
 */
export const EquipmentTypeDeleteRequest = new EquipmentTypeDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeDeleteReply$Type extends MessageType<EquipmentTypeDeleteReply> {
    constructor() {
        super("EquipmentTypeDeleteReply", []);
    }
    create(value?: PartialMessage<EquipmentTypeDeleteReply>): EquipmentTypeDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeDeleteReply): EquipmentTypeDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EquipmentTypeDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeDeleteReply
 */
export const EquipmentTypeDeleteReply = new EquipmentTypeDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeRestoreRequest$Type extends MessageType<EquipmentTypeRestoreRequest> {
    constructor() {
        super("EquipmentTypeRestoreRequest", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeRestoreRequest>): EquipmentTypeRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeRestoreRequest): EquipmentTypeRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeRestoreRequest
 */
export const EquipmentTypeRestoreRequest = new EquipmentTypeRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeRestoreReply$Type extends MessageType<EquipmentTypeRestoreReply> {
    constructor() {
        super("EquipmentTypeRestoreReply", []);
    }
    create(value?: PartialMessage<EquipmentTypeRestoreReply>): EquipmentTypeRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeRestoreReply): EquipmentTypeRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EquipmentTypeRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeRestoreReply
 */
export const EquipmentTypeRestoreReply = new EquipmentTypeRestoreReply$Type();
/**
 * @generated ServiceType for protobuf service EquipmentTypeService
 */
export const EquipmentTypeService = new ServiceType("EquipmentTypeService", [
    { name: "EquipmentTypesGet", options: {}, I: EquipmentTypesGetRequest, O: EquipmentTypesGetReply },
    { name: "EquipmentTypeRetrieve", options: {}, I: EquipmentTypeRetrieveRequest, O: EquipmentTypeRetrieveReply },
    { name: "EquipmentTypeCreate", options: {}, I: EquipmentTypeCreateRequest, O: EquipmentTypeCreateReply },
    { name: "EquipmentTypeUpdate", options: {}, I: EquipmentTypeUpdateRequest, O: EquipmentTypeUpdateReply },
    { name: "EquipmentTypeDelete", options: {}, I: EquipmentTypeDeleteRequest, O: EquipmentTypeDeleteReply },
    { name: "EquipmentTypeRestore", options: {}, I: EquipmentTypeRestoreRequest, O: EquipmentTypeRestoreReply }
]);
