// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/drivers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DriverModel_PayoutReceiver } from "./models/model_driver";
import { CountryCode } from "./models/country_code";
import { DriverModel_Status } from "./models/model_driver";
import { Event_Driver_Device_Ping } from "./events/events";
import { Event_Driver_Device_Location } from "./events/events";
import { DriverModel_Driver } from "./models/model_driver";
/**
 * //////////////////////
 * DriverSendSms
 * //////////////////////
 *
 * @generated from protobuf message DriverSendSmsRequest
 */
export interface DriverSendSmsRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string body = 2;
     */
    body: string;
}
/**
 * @generated from protobuf message DriverSendSmsReply
 */
export interface DriverSendSmsReply {
}
/**
 * //////////////////////
 * DriverVendorAssign
 * //////////////////////
 *
 * @generated from protobuf message DriverVendorAssignRequest
 */
export interface DriverVendorAssignRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string vendor_id = 2;
     */
    vendorId: string;
}
/**
 * @generated from protobuf message DriverVendorAssignReply
 */
export interface DriverVendorAssignReply {
}
/**
 * //////////////////////
 * DriverVendorRemove
 * //////////////////////
 *
 * @generated from protobuf message DriverVendorRemoveRequest
 */
export interface DriverVendorRemoveRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string vendor_id = 2;
     */
    vendorId: string;
}
/**
 * @generated from protobuf message DriverVendorRemoveReply
 */
export interface DriverVendorRemoveReply {
}
/**
 * //////////////////////
 * DriverUserAssign
 * //////////////////////
 *
 * @generated from protobuf message DriverUserAssignRequest
 */
export interface DriverUserAssignRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message DriverUserAssignReply
 */
export interface DriverUserAssignReply {
}
/**
 * //////////////////////
 * DriverUserRemove
 * //////////////////////
 *
 * @generated from protobuf message DriverUserRemoveRequest
 */
export interface DriverUserRemoveRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message DriverUserRemoveReply
 */
export interface DriverUserRemoveReply {
}
/**
 * //////////////////////
 * DriverNoteUpdate
 * //////////////////////
 *
 * @generated from protobuf message DriverNoteUpdateRequest
 */
export interface DriverNoteUpdateRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string note = 3;
     */
    note: string;
}
/**
 * @generated from protobuf message DriverNoteUpdateReply
 */
export interface DriverNoteUpdateReply {
}
/**
 * //////////////////////
 * DriverDeviceGet
 * //////////////////////
 *
 * @generated from protobuf message DriverDeviceGetRequest
 */
export interface DriverDeviceGetRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
}
/**
 * @generated from protobuf message DriverDeviceGetReply
 */
export interface DriverDeviceGetReply {
    /**
     * @generated from protobuf field: repeated DriverDeviceGetReply.DriverDevice driver_device = 1;
     */
    driverDevice: DriverDeviceGetReply_DriverDevice[];
}
/**
 * @generated from protobuf message DriverDeviceGetReply.DriverDevice
 */
export interface DriverDeviceGetReply_DriverDevice {
    /**
     * @generated from protobuf field: string device_id = 1;
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string os = 2;
     */
    os: string;
    /**
     * @generated from protobuf field: string os_version = 3;
     */
    osVersion: string;
    /**
     * @generated from protobuf field: string model = 4;
     */
    model: string;
    /**
     * @generated from protobuf field: string app_version = 5;
     */
    appVersion: string;
    /**
     * @generated from protobuf field: bool notifications_enabled = 6;
     */
    notificationsEnabled: boolean;
    /**
     * @generated from protobuf field: bool critical_notifications_enabled = 7;
     */
    criticalNotificationsEnabled: boolean;
    /**
     * @generated from protobuf field: bool location_services_enabled = 8;
     */
    locationServicesEnabled: boolean;
    /**
     * @generated from protobuf field: bool background_location_services_enabled = 9;
     */
    backgroundLocationServicesEnabled: boolean;
    /**
     * @generated from protobuf field: bool android_battery_optimization_disabled = 10;
     */
    androidBatteryOptimizationDisabled: boolean;
}
/**
 * //////////////////////
 * DriverSelfieUpdate
 * //////////////////////
 *
 * @generated from protobuf message DriverSelfieUploadRequest
 */
export interface DriverSelfieUploadRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string file_id = 2;
     */
    fileId: string;
    /**
     * @generated from protobuf field: string thumb_file_id = 3;
     */
    thumbFileId: string;
}
/**
 * @generated from protobuf message DriverSelfieUploadReply
 */
export interface DriverSelfieUploadReply {
}
/**
 * //////////////////////
 * DriverCreate
 * //////////////////////
 *
 * @generated from protobuf message DriverCreateRequest
 */
export interface DriverCreateRequest {
    /**
     * @generated from protobuf field: string first_name = 1;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 2;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string driver_type_id = 3;
     */
    driverTypeId: string;
}
/**
 * @generated from protobuf message DriverCreateReply
 */
export interface DriverCreateReply {
    /**
     * @generated from protobuf field: DriverModel.Driver driver = 1;
     */
    driver?: DriverModel_Driver;
}
/**
 * //////////////////////
 * Listen Driver Device Locations
 * //////////////////////
 *
 * @generated from protobuf message ListenDriverDeviceLocationsRequest
 */
export interface ListenDriverDeviceLocationsRequest {
}
/**
 * @generated from protobuf message ListenDriverDeviceLocationsReply
 */
export interface ListenDriverDeviceLocationsReply {
    /**
     * @generated from protobuf field: repeated Event.Driver.Device.Location locations = 1;
     */
    locations: Event_Driver_Device_Location[];
}
/**
 * //////////////////////
 * Listen Driver Device Pings
 * //////////////////////
 *
 * @generated from protobuf message ListenDriverDevicePingsRequest
 */
export interface ListenDriverDevicePingsRequest {
}
/**
 * @generated from protobuf message ListenDriverDevicePingsReply
 */
export interface ListenDriverDevicePingsReply {
    /**
     * @generated from protobuf field: repeated Event.Driver.Device.Ping pings = 1;
     */
    pings: Event_Driver_Device_Ping[];
}
/**
 * //////////////////////
 * DriverSendInvite
 * //////////////////////
 *
 * @generated from protobuf message SendDriverInviteRequest
 */
export interface SendDriverInviteRequest {
    /**
     * @generated from protobuf field: string to = 1;
     */
    to: string;
    /**
     * @generated from protobuf field: SendDriverInviteRequest.InviteType type = 2;
     */
    type: SendDriverInviteRequest_InviteType;
}
/**
 * @generated from protobuf enum SendDriverInviteRequest.InviteType
 */
export enum SendDriverInviteRequest_InviteType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: EMAIL = 1;
     */
    EMAIL = 1,
    /**
     * @generated from protobuf enum value: SMS = 2;
     */
    SMS = 2
}
/**
 * @generated from protobuf message SendDriverInviteReply
 */
export interface SendDriverInviteReply {
}
/**
 * //////////////////////
 * DriverRetrieve
 * //////////////////////
 *
 * @generated from protobuf message DriverRetrieveRequest
 */
export interface DriverRetrieveRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
}
/**
 * @generated from protobuf message DriverRetrieveReply
 */
export interface DriverRetrieveReply {
    /**
     * @generated from protobuf field: DriverModel.Driver driver = 1;
     */
    driver?: DriverModel_Driver;
}
/**
 * //////////////////////
 * DriverStatsRetrieve
 * //////////////////////
 *
 * @generated from protobuf message DriverStatsRetrieveRequest
 */
export interface DriverStatsRetrieveRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
}
/**
 * @generated from protobuf message DriverStatsRetrieveReply
 */
export interface DriverStatsRetrieveReply {
    /**
     * @generated from protobuf field: DriverStatsRetrieveReply.Stats stats = 1;
     */
    stats?: DriverStatsRetrieveReply_Stats;
}
/**
 * @generated from protobuf message DriverStatsRetrieveReply.Stats
 */
export interface DriverStatsRetrieveReply_Stats {
    /**
     * @generated from protobuf field: int64 total_count = 1;
     */
    totalCount: number;
    /**
     * @generated from protobuf field: int64 total_miles = 2;
     */
    totalMiles: number;
}
/**
 * //////////////////////
 * DriverDelete
 * //////////////////////
 *
 * @generated from protobuf message DriverDeleteRequest
 */
export interface DriverDeleteRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
}
/**
 * @generated from protobuf message DriverDeleteReply
 */
export interface DriverDeleteReply {
}
/**
 * //////////////////////
 * DriverStatusUpdate
 * //////////////////////
 *
 * @generated from protobuf message DriverStatusUpdateRequest
 */
export interface DriverStatusUpdateRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: DriverModel.Status status = 2;
     */
    status: DriverModel_Status;
}
/**
 * @generated from protobuf message DriverStatusUpdateReply
 */
export interface DriverStatusUpdateReply {
}
/**
 * //////////////////////
 * DriverInsuranceEndorsedUpdate
 * //////////////////////
 *
 * @generated from protobuf message DriverInsuranceEndorsedRequest
 */
export interface DriverInsuranceEndorsedRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: bool insurance_endorsed = 2;
     */
    insuranceEndorsed: boolean;
}
/**
 * @generated from protobuf message DriverInsuranceEndorsedReply
 */
export interface DriverInsuranceEndorsedReply {
}
/**
 * //////////////////////
 * DriverUpdate
 * //////////////////////
 *
 * @generated from protobuf message DriverUpdateRequest
 */
export interface DriverUpdateRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: optional string driver_type_id = 2;
     */
    driverTypeId?: string;
    /**
     * @generated from protobuf field: optional string friendly_name = 3;
     */
    friendlyName?: string;
    /**
     * @generated from protobuf field: optional string first_name = 4;
     */
    firstName?: string;
    /**
     * @generated from protobuf field: optional string middle_name = 5;
     */
    middleName?: string;
    /**
     * @generated from protobuf field: optional string last_name = 6;
     */
    lastName?: string;
    /**
     * @generated from protobuf field: optional string phone_number = 7;
     */
    phoneNumber?: string;
    /**
     * @generated from protobuf field: optional string email = 8;
     */
    email?: string;
    /**
     * @generated from protobuf field: optional string address_line_1 = 9;
     */
    addressLine1?: string;
    /**
     * @generated from protobuf field: optional string address_line_2 = 10;
     */
    addressLine2?: string;
    /**
     * @generated from protobuf field: optional string address_city = 11;
     */
    addressCity?: string;
    /**
     * @generated from protobuf field: optional string address_state = 12;
     */
    addressState?: string;
    /**
     * @generated from protobuf field: optional string address_postal_code = 13;
     */
    addressPostalCode?: string;
    /**
     * @generated from protobuf field: optional CountryCode address_country = 14;
     */
    addressCountry?: CountryCode;
    /**
     * @generated from protobuf field: optional string hire_date = 15;
     */
    hireDate?: string;
    /**
     * @generated from protobuf field: optional string dob_date = 16;
     */
    dobDate?: string;
    /**
     * @generated from protobuf field: optional string settlement_revenue_type_id = 17;
     */
    settlementRevenueTypeId?: string;
    /**
     * @generated from protobuf field: optional string settlement_cycle_id = 18;
     */
    settlementCycleId?: string;
    /**
     * @generated from protobuf field: optional string fuel_card_number = 19;
     */
    fuelCardNumber?: string;
    /**
     * @generated from protobuf field: optional DriverModel.PayoutReceiver payout_receiver = 20;
     */
    payoutReceiver?: DriverModel_PayoutReceiver;
    /**
     * @generated from protobuf field: optional string vendor_id = 21;
     */
    vendorId?: string;
}
/**
 * @generated from protobuf message DriverUpdateReply
 */
export interface DriverUpdateReply {
}
/**
 * //////////////////////
 * DriverGet
 * //////////////////////
 *
 * @generated from protobuf message DriverGetRequest
 */
export interface DriverGetRequest {
}
/**
 * @generated from protobuf message DriverGetReply
 */
export interface DriverGetReply {
    /**
     * @generated from protobuf field: repeated DriverModel.Driver drivers = 1;
     */
    drivers: DriverModel_Driver[];
}
// @generated message type with reflection information, may provide speed optimized methods
class DriverSendSmsRequest$Type extends MessageType<DriverSendSmsRequest> {
    constructor() {
        super("DriverSendSmsRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverSendSmsRequest>): DriverSendSmsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<DriverSendSmsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverSendSmsRequest): DriverSendSmsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverSendSmsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverSendSmsRequest
 */
export const DriverSendSmsRequest = new DriverSendSmsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverSendSmsReply$Type extends MessageType<DriverSendSmsReply> {
    constructor() {
        super("DriverSendSmsReply", []);
    }
    create(value?: PartialMessage<DriverSendSmsReply>): DriverSendSmsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverSendSmsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverSendSmsReply): DriverSendSmsReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverSendSmsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverSendSmsReply
 */
export const DriverSendSmsReply = new DriverSendSmsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverVendorAssignRequest$Type extends MessageType<DriverVendorAssignRequest> {
    constructor() {
        super("DriverVendorAssignRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverVendorAssignRequest>): DriverVendorAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.vendorId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverVendorAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverVendorAssignRequest): DriverVendorAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string vendor_id */ 2:
                    message.vendorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverVendorAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string vendor_id = 2; */
        if (message.vendorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vendorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverVendorAssignRequest
 */
export const DriverVendorAssignRequest = new DriverVendorAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverVendorAssignReply$Type extends MessageType<DriverVendorAssignReply> {
    constructor() {
        super("DriverVendorAssignReply", []);
    }
    create(value?: PartialMessage<DriverVendorAssignReply>): DriverVendorAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverVendorAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverVendorAssignReply): DriverVendorAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverVendorAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverVendorAssignReply
 */
export const DriverVendorAssignReply = new DriverVendorAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverVendorRemoveRequest$Type extends MessageType<DriverVendorRemoveRequest> {
    constructor() {
        super("DriverVendorRemoveRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverVendorRemoveRequest>): DriverVendorRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.vendorId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverVendorRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverVendorRemoveRequest): DriverVendorRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string vendor_id */ 2:
                    message.vendorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverVendorRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string vendor_id = 2; */
        if (message.vendorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vendorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverVendorRemoveRequest
 */
export const DriverVendorRemoveRequest = new DriverVendorRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverVendorRemoveReply$Type extends MessageType<DriverVendorRemoveReply> {
    constructor() {
        super("DriverVendorRemoveReply", []);
    }
    create(value?: PartialMessage<DriverVendorRemoveReply>): DriverVendorRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverVendorRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverVendorRemoveReply): DriverVendorRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverVendorRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverVendorRemoveReply
 */
export const DriverVendorRemoveReply = new DriverVendorRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverUserAssignRequest$Type extends MessageType<DriverUserAssignRequest> {
    constructor() {
        super("DriverUserAssignRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverUserAssignRequest>): DriverUserAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverUserAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverUserAssignRequest): DriverUserAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverUserAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverUserAssignRequest
 */
export const DriverUserAssignRequest = new DriverUserAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverUserAssignReply$Type extends MessageType<DriverUserAssignReply> {
    constructor() {
        super("DriverUserAssignReply", []);
    }
    create(value?: PartialMessage<DriverUserAssignReply>): DriverUserAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverUserAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverUserAssignReply): DriverUserAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverUserAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverUserAssignReply
 */
export const DriverUserAssignReply = new DriverUserAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverUserRemoveRequest$Type extends MessageType<DriverUserRemoveRequest> {
    constructor() {
        super("DriverUserRemoveRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverUserRemoveRequest>): DriverUserRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverUserRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverUserRemoveRequest): DriverUserRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverUserRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverUserRemoveRequest
 */
export const DriverUserRemoveRequest = new DriverUserRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverUserRemoveReply$Type extends MessageType<DriverUserRemoveReply> {
    constructor() {
        super("DriverUserRemoveReply", []);
    }
    create(value?: PartialMessage<DriverUserRemoveReply>): DriverUserRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverUserRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverUserRemoveReply): DriverUserRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverUserRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverUserRemoveReply
 */
export const DriverUserRemoveReply = new DriverUserRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverNoteUpdateRequest$Type extends MessageType<DriverNoteUpdateRequest> {
    constructor() {
        super("DriverNoteUpdateRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverNoteUpdateRequest>): DriverNoteUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.note = "";
        if (value !== undefined)
            reflectionMergePartial<DriverNoteUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverNoteUpdateRequest): DriverNoteUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string note */ 3:
                    message.note = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverNoteUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string note = 3; */
        if (message.note !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.note);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverNoteUpdateRequest
 */
export const DriverNoteUpdateRequest = new DriverNoteUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverNoteUpdateReply$Type extends MessageType<DriverNoteUpdateReply> {
    constructor() {
        super("DriverNoteUpdateReply", []);
    }
    create(value?: PartialMessage<DriverNoteUpdateReply>): DriverNoteUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverNoteUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverNoteUpdateReply): DriverNoteUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverNoteUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverNoteUpdateReply
 */
export const DriverNoteUpdateReply = new DriverNoteUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverDeviceGetRequest$Type extends MessageType<DriverDeviceGetRequest> {
    constructor() {
        super("DriverDeviceGetRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverDeviceGetRequest>): DriverDeviceGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverDeviceGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverDeviceGetRequest): DriverDeviceGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverDeviceGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverDeviceGetRequest
 */
export const DriverDeviceGetRequest = new DriverDeviceGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverDeviceGetReply$Type extends MessageType<DriverDeviceGetReply> {
    constructor() {
        super("DriverDeviceGetReply", [
            { no: 1, name: "driver_device", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DriverDeviceGetReply_DriverDevice }
        ]);
    }
    create(value?: PartialMessage<DriverDeviceGetReply>): DriverDeviceGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverDevice = [];
        if (value !== undefined)
            reflectionMergePartial<DriverDeviceGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverDeviceGetReply): DriverDeviceGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated DriverDeviceGetReply.DriverDevice driver_device */ 1:
                    message.driverDevice.push(DriverDeviceGetReply_DriverDevice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverDeviceGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated DriverDeviceGetReply.DriverDevice driver_device = 1; */
        for (let i = 0; i < message.driverDevice.length; i++)
            DriverDeviceGetReply_DriverDevice.internalBinaryWrite(message.driverDevice[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverDeviceGetReply
 */
export const DriverDeviceGetReply = new DriverDeviceGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverDeviceGetReply_DriverDevice$Type extends MessageType<DriverDeviceGetReply_DriverDevice> {
    constructor() {
        super("DriverDeviceGetReply.DriverDevice", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "os", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "app_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "notifications_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "critical_notifications_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "location_services_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "background_location_services_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "android_battery_optimization_disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverDeviceGetReply_DriverDevice>): DriverDeviceGetReply_DriverDevice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        message.os = "";
        message.osVersion = "";
        message.model = "";
        message.appVersion = "";
        message.notificationsEnabled = false;
        message.criticalNotificationsEnabled = false;
        message.locationServicesEnabled = false;
        message.backgroundLocationServicesEnabled = false;
        message.androidBatteryOptimizationDisabled = false;
        if (value !== undefined)
            reflectionMergePartial<DriverDeviceGetReply_DriverDevice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverDeviceGetReply_DriverDevice): DriverDeviceGetReply_DriverDevice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                case /* string os */ 2:
                    message.os = reader.string();
                    break;
                case /* string os_version */ 3:
                    message.osVersion = reader.string();
                    break;
                case /* string model */ 4:
                    message.model = reader.string();
                    break;
                case /* string app_version */ 5:
                    message.appVersion = reader.string();
                    break;
                case /* bool notifications_enabled */ 6:
                    message.notificationsEnabled = reader.bool();
                    break;
                case /* bool critical_notifications_enabled */ 7:
                    message.criticalNotificationsEnabled = reader.bool();
                    break;
                case /* bool location_services_enabled */ 8:
                    message.locationServicesEnabled = reader.bool();
                    break;
                case /* bool background_location_services_enabled */ 9:
                    message.backgroundLocationServicesEnabled = reader.bool();
                    break;
                case /* bool android_battery_optimization_disabled */ 10:
                    message.androidBatteryOptimizationDisabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverDeviceGetReply_DriverDevice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        /* string os = 2; */
        if (message.os !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.os);
        /* string os_version = 3; */
        if (message.osVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.osVersion);
        /* string model = 4; */
        if (message.model !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.model);
        /* string app_version = 5; */
        if (message.appVersion !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appVersion);
        /* bool notifications_enabled = 6; */
        if (message.notificationsEnabled !== false)
            writer.tag(6, WireType.Varint).bool(message.notificationsEnabled);
        /* bool critical_notifications_enabled = 7; */
        if (message.criticalNotificationsEnabled !== false)
            writer.tag(7, WireType.Varint).bool(message.criticalNotificationsEnabled);
        /* bool location_services_enabled = 8; */
        if (message.locationServicesEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.locationServicesEnabled);
        /* bool background_location_services_enabled = 9; */
        if (message.backgroundLocationServicesEnabled !== false)
            writer.tag(9, WireType.Varint).bool(message.backgroundLocationServicesEnabled);
        /* bool android_battery_optimization_disabled = 10; */
        if (message.androidBatteryOptimizationDisabled !== false)
            writer.tag(10, WireType.Varint).bool(message.androidBatteryOptimizationDisabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverDeviceGetReply.DriverDevice
 */
export const DriverDeviceGetReply_DriverDevice = new DriverDeviceGetReply_DriverDevice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverSelfieUploadRequest$Type extends MessageType<DriverSelfieUploadRequest> {
    constructor() {
        super("DriverSelfieUploadRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumb_file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverSelfieUploadRequest>): DriverSelfieUploadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.fileId = "";
        message.thumbFileId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverSelfieUploadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverSelfieUploadRequest): DriverSelfieUploadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string file_id */ 2:
                    message.fileId = reader.string();
                    break;
                case /* string thumb_file_id */ 3:
                    message.thumbFileId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverSelfieUploadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string file_id = 2; */
        if (message.fileId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileId);
        /* string thumb_file_id = 3; */
        if (message.thumbFileId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbFileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverSelfieUploadRequest
 */
export const DriverSelfieUploadRequest = new DriverSelfieUploadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverSelfieUploadReply$Type extends MessageType<DriverSelfieUploadReply> {
    constructor() {
        super("DriverSelfieUploadReply", []);
    }
    create(value?: PartialMessage<DriverSelfieUploadReply>): DriverSelfieUploadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverSelfieUploadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverSelfieUploadReply): DriverSelfieUploadReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverSelfieUploadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverSelfieUploadReply
 */
export const DriverSelfieUploadReply = new DriverSelfieUploadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverCreateRequest$Type extends MessageType<DriverCreateRequest> {
    constructor() {
        super("DriverCreateRequest", [
            { no: 1, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "driver_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverCreateRequest>): DriverCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstName = "";
        message.lastName = "";
        message.driverTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverCreateRequest): DriverCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string first_name */ 1:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 2:
                    message.lastName = reader.string();
                    break;
                case /* string driver_type_id */ 3:
                    message.driverTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string first_name = 1; */
        if (message.firstName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 2; */
        if (message.lastName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastName);
        /* string driver_type_id = 3; */
        if (message.driverTypeId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.driverTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverCreateRequest
 */
export const DriverCreateRequest = new DriverCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverCreateReply$Type extends MessageType<DriverCreateReply> {
    constructor() {
        super("DriverCreateReply", [
            { no: 1, name: "driver", kind: "message", T: () => DriverModel_Driver }
        ]);
    }
    create(value?: PartialMessage<DriverCreateReply>): DriverCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverCreateReply): DriverCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DriverModel.Driver driver */ 1:
                    message.driver = DriverModel_Driver.internalBinaryRead(reader, reader.uint32(), options, message.driver);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* DriverModel.Driver driver = 1; */
        if (message.driver)
            DriverModel_Driver.internalBinaryWrite(message.driver, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverCreateReply
 */
export const DriverCreateReply = new DriverCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenDriverDeviceLocationsRequest$Type extends MessageType<ListenDriverDeviceLocationsRequest> {
    constructor() {
        super("ListenDriverDeviceLocationsRequest", []);
    }
    create(value?: PartialMessage<ListenDriverDeviceLocationsRequest>): ListenDriverDeviceLocationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListenDriverDeviceLocationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenDriverDeviceLocationsRequest): ListenDriverDeviceLocationsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListenDriverDeviceLocationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenDriverDeviceLocationsRequest
 */
export const ListenDriverDeviceLocationsRequest = new ListenDriverDeviceLocationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenDriverDeviceLocationsReply$Type extends MessageType<ListenDriverDeviceLocationsReply> {
    constructor() {
        super("ListenDriverDeviceLocationsReply", [
            { no: 1, name: "locations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Driver_Device_Location }
        ]);
    }
    create(value?: PartialMessage<ListenDriverDeviceLocationsReply>): ListenDriverDeviceLocationsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.locations = [];
        if (value !== undefined)
            reflectionMergePartial<ListenDriverDeviceLocationsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenDriverDeviceLocationsReply): ListenDriverDeviceLocationsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Driver.Device.Location locations */ 1:
                    message.locations.push(Event_Driver_Device_Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenDriverDeviceLocationsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Driver.Device.Location locations = 1; */
        for (let i = 0; i < message.locations.length; i++)
            Event_Driver_Device_Location.internalBinaryWrite(message.locations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenDriverDeviceLocationsReply
 */
export const ListenDriverDeviceLocationsReply = new ListenDriverDeviceLocationsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenDriverDevicePingsRequest$Type extends MessageType<ListenDriverDevicePingsRequest> {
    constructor() {
        super("ListenDriverDevicePingsRequest", []);
    }
    create(value?: PartialMessage<ListenDriverDevicePingsRequest>): ListenDriverDevicePingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListenDriverDevicePingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenDriverDevicePingsRequest): ListenDriverDevicePingsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListenDriverDevicePingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenDriverDevicePingsRequest
 */
export const ListenDriverDevicePingsRequest = new ListenDriverDevicePingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenDriverDevicePingsReply$Type extends MessageType<ListenDriverDevicePingsReply> {
    constructor() {
        super("ListenDriverDevicePingsReply", [
            { no: 1, name: "pings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Driver_Device_Ping }
        ]);
    }
    create(value?: PartialMessage<ListenDriverDevicePingsReply>): ListenDriverDevicePingsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pings = [];
        if (value !== undefined)
            reflectionMergePartial<ListenDriverDevicePingsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenDriverDevicePingsReply): ListenDriverDevicePingsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Driver.Device.Ping pings */ 1:
                    message.pings.push(Event_Driver_Device_Ping.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenDriverDevicePingsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Driver.Device.Ping pings = 1; */
        for (let i = 0; i < message.pings.length; i++)
            Event_Driver_Device_Ping.internalBinaryWrite(message.pings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenDriverDevicePingsReply
 */
export const ListenDriverDevicePingsReply = new ListenDriverDevicePingsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendDriverInviteRequest$Type extends MessageType<SendDriverInviteRequest> {
    constructor() {
        super("SendDriverInviteRequest", [
            { no: 1, name: "to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["SendDriverInviteRequest.InviteType", SendDriverInviteRequest_InviteType] }
        ]);
    }
    create(value?: PartialMessage<SendDriverInviteRequest>): SendDriverInviteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.to = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<SendDriverInviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendDriverInviteRequest): SendDriverInviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string to */ 1:
                    message.to = reader.string();
                    break;
                case /* SendDriverInviteRequest.InviteType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendDriverInviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string to = 1; */
        if (message.to !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.to);
        /* SendDriverInviteRequest.InviteType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendDriverInviteRequest
 */
export const SendDriverInviteRequest = new SendDriverInviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendDriverInviteReply$Type extends MessageType<SendDriverInviteReply> {
    constructor() {
        super("SendDriverInviteReply", []);
    }
    create(value?: PartialMessage<SendDriverInviteReply>): SendDriverInviteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendDriverInviteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendDriverInviteReply): SendDriverInviteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendDriverInviteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendDriverInviteReply
 */
export const SendDriverInviteReply = new SendDriverInviteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverRetrieveRequest$Type extends MessageType<DriverRetrieveRequest> {
    constructor() {
        super("DriverRetrieveRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverRetrieveRequest>): DriverRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverRetrieveRequest): DriverRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverRetrieveRequest
 */
export const DriverRetrieveRequest = new DriverRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverRetrieveReply$Type extends MessageType<DriverRetrieveReply> {
    constructor() {
        super("DriverRetrieveReply", [
            { no: 1, name: "driver", kind: "message", T: () => DriverModel_Driver }
        ]);
    }
    create(value?: PartialMessage<DriverRetrieveReply>): DriverRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverRetrieveReply): DriverRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DriverModel.Driver driver */ 1:
                    message.driver = DriverModel_Driver.internalBinaryRead(reader, reader.uint32(), options, message.driver);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* DriverModel.Driver driver = 1; */
        if (message.driver)
            DriverModel_Driver.internalBinaryWrite(message.driver, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverRetrieveReply
 */
export const DriverRetrieveReply = new DriverRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverStatsRetrieveRequest$Type extends MessageType<DriverStatsRetrieveRequest> {
    constructor() {
        super("DriverStatsRetrieveRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverStatsRetrieveRequest>): DriverStatsRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverStatsRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverStatsRetrieveRequest): DriverStatsRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverStatsRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverStatsRetrieveRequest
 */
export const DriverStatsRetrieveRequest = new DriverStatsRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverStatsRetrieveReply$Type extends MessageType<DriverStatsRetrieveReply> {
    constructor() {
        super("DriverStatsRetrieveReply", [
            { no: 1, name: "stats", kind: "message", T: () => DriverStatsRetrieveReply_Stats }
        ]);
    }
    create(value?: PartialMessage<DriverStatsRetrieveReply>): DriverStatsRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverStatsRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverStatsRetrieveReply): DriverStatsRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DriverStatsRetrieveReply.Stats stats */ 1:
                    message.stats = DriverStatsRetrieveReply_Stats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverStatsRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* DriverStatsRetrieveReply.Stats stats = 1; */
        if (message.stats)
            DriverStatsRetrieveReply_Stats.internalBinaryWrite(message.stats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverStatsRetrieveReply
 */
export const DriverStatsRetrieveReply = new DriverStatsRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverStatsRetrieveReply_Stats$Type extends MessageType<DriverStatsRetrieveReply_Stats> {
    constructor() {
        super("DriverStatsRetrieveReply.Stats", [
            { no: 1, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "total_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DriverStatsRetrieveReply_Stats>): DriverStatsRetrieveReply_Stats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalCount = 0;
        message.totalMiles = 0;
        if (value !== undefined)
            reflectionMergePartial<DriverStatsRetrieveReply_Stats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverStatsRetrieveReply_Stats): DriverStatsRetrieveReply_Stats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_count */ 1:
                    message.totalCount = reader.int64().toNumber();
                    break;
                case /* int64 total_miles */ 2:
                    message.totalMiles = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverStatsRetrieveReply_Stats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_count = 1; */
        if (message.totalCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalCount);
        /* int64 total_miles = 2; */
        if (message.totalMiles !== 0)
            writer.tag(2, WireType.Varint).int64(message.totalMiles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverStatsRetrieveReply.Stats
 */
export const DriverStatsRetrieveReply_Stats = new DriverStatsRetrieveReply_Stats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverDeleteRequest$Type extends MessageType<DriverDeleteRequest> {
    constructor() {
        super("DriverDeleteRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverDeleteRequest>): DriverDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverDeleteRequest): DriverDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverDeleteRequest
 */
export const DriverDeleteRequest = new DriverDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverDeleteReply$Type extends MessageType<DriverDeleteReply> {
    constructor() {
        super("DriverDeleteReply", []);
    }
    create(value?: PartialMessage<DriverDeleteReply>): DriverDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverDeleteReply): DriverDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverDeleteReply
 */
export const DriverDeleteReply = new DriverDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverStatusUpdateRequest$Type extends MessageType<DriverStatusUpdateRequest> {
    constructor() {
        super("DriverStatusUpdateRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["DriverModel.Status", DriverModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<DriverStatusUpdateRequest>): DriverStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<DriverStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverStatusUpdateRequest): DriverStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* DriverModel.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* DriverModel.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverStatusUpdateRequest
 */
export const DriverStatusUpdateRequest = new DriverStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverStatusUpdateReply$Type extends MessageType<DriverStatusUpdateReply> {
    constructor() {
        super("DriverStatusUpdateReply", []);
    }
    create(value?: PartialMessage<DriverStatusUpdateReply>): DriverStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverStatusUpdateReply): DriverStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverStatusUpdateReply
 */
export const DriverStatusUpdateReply = new DriverStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverInsuranceEndorsedRequest$Type extends MessageType<DriverInsuranceEndorsedRequest> {
    constructor() {
        super("DriverInsuranceEndorsedRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "insurance_endorsed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverInsuranceEndorsedRequest>): DriverInsuranceEndorsedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.insuranceEndorsed = false;
        if (value !== undefined)
            reflectionMergePartial<DriverInsuranceEndorsedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverInsuranceEndorsedRequest): DriverInsuranceEndorsedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* bool insurance_endorsed */ 2:
                    message.insuranceEndorsed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverInsuranceEndorsedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* bool insurance_endorsed = 2; */
        if (message.insuranceEndorsed !== false)
            writer.tag(2, WireType.Varint).bool(message.insuranceEndorsed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverInsuranceEndorsedRequest
 */
export const DriverInsuranceEndorsedRequest = new DriverInsuranceEndorsedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverInsuranceEndorsedReply$Type extends MessageType<DriverInsuranceEndorsedReply> {
    constructor() {
        super("DriverInsuranceEndorsedReply", []);
    }
    create(value?: PartialMessage<DriverInsuranceEndorsedReply>): DriverInsuranceEndorsedReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverInsuranceEndorsedReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverInsuranceEndorsedReply): DriverInsuranceEndorsedReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverInsuranceEndorsedReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverInsuranceEndorsedReply
 */
export const DriverInsuranceEndorsedReply = new DriverInsuranceEndorsedReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverUpdateRequest$Type extends MessageType<DriverUpdateRequest> {
    constructor() {
        super("DriverUpdateRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_type_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "friendly_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "first_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "middle_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "last_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "phone_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address_line_1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "address_line_2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "address_city", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "address_state", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "address_postal_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "address_country", kind: "enum", opt: true, T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 15, name: "hire_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "dob_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "settlement_revenue_type_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "settlement_cycle_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "fuel_card_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "payout_receiver", kind: "enum", opt: true, T: () => ["DriverModel.PayoutReceiver", DriverModel_PayoutReceiver, "PAYOUT_RECEIVER_"] },
            { no: 21, name: "vendor_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverUpdateRequest>): DriverUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverUpdateRequest): DriverUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* optional string driver_type_id */ 2:
                    message.driverTypeId = reader.string();
                    break;
                case /* optional string friendly_name */ 3:
                    message.friendlyName = reader.string();
                    break;
                case /* optional string first_name */ 4:
                    message.firstName = reader.string();
                    break;
                case /* optional string middle_name */ 5:
                    message.middleName = reader.string();
                    break;
                case /* optional string last_name */ 6:
                    message.lastName = reader.string();
                    break;
                case /* optional string phone_number */ 7:
                    message.phoneNumber = reader.string();
                    break;
                case /* optional string email */ 8:
                    message.email = reader.string();
                    break;
                case /* optional string address_line_1 */ 9:
                    message.addressLine1 = reader.string();
                    break;
                case /* optional string address_line_2 */ 10:
                    message.addressLine2 = reader.string();
                    break;
                case /* optional string address_city */ 11:
                    message.addressCity = reader.string();
                    break;
                case /* optional string address_state */ 12:
                    message.addressState = reader.string();
                    break;
                case /* optional string address_postal_code */ 13:
                    message.addressPostalCode = reader.string();
                    break;
                case /* optional CountryCode address_country */ 14:
                    message.addressCountry = reader.int32();
                    break;
                case /* optional string hire_date */ 15:
                    message.hireDate = reader.string();
                    break;
                case /* optional string dob_date */ 16:
                    message.dobDate = reader.string();
                    break;
                case /* optional string settlement_revenue_type_id */ 17:
                    message.settlementRevenueTypeId = reader.string();
                    break;
                case /* optional string settlement_cycle_id */ 18:
                    message.settlementCycleId = reader.string();
                    break;
                case /* optional string fuel_card_number */ 19:
                    message.fuelCardNumber = reader.string();
                    break;
                case /* optional DriverModel.PayoutReceiver payout_receiver */ 20:
                    message.payoutReceiver = reader.int32();
                    break;
                case /* optional string vendor_id */ 21:
                    message.vendorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* optional string driver_type_id = 2; */
        if (message.driverTypeId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.driverTypeId);
        /* optional string friendly_name = 3; */
        if (message.friendlyName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.friendlyName);
        /* optional string first_name = 4; */
        if (message.firstName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* optional string middle_name = 5; */
        if (message.middleName !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.middleName);
        /* optional string last_name = 6; */
        if (message.lastName !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.lastName);
        /* optional string phone_number = 7; */
        if (message.phoneNumber !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.phoneNumber);
        /* optional string email = 8; */
        if (message.email !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.email);
        /* optional string address_line_1 = 9; */
        if (message.addressLine1 !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.addressLine1);
        /* optional string address_line_2 = 10; */
        if (message.addressLine2 !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.addressLine2);
        /* optional string address_city = 11; */
        if (message.addressCity !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.addressCity);
        /* optional string address_state = 12; */
        if (message.addressState !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.addressState);
        /* optional string address_postal_code = 13; */
        if (message.addressPostalCode !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.addressPostalCode);
        /* optional CountryCode address_country = 14; */
        if (message.addressCountry !== undefined)
            writer.tag(14, WireType.Varint).int32(message.addressCountry);
        /* optional string hire_date = 15; */
        if (message.hireDate !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.hireDate);
        /* optional string dob_date = 16; */
        if (message.dobDate !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.dobDate);
        /* optional string settlement_revenue_type_id = 17; */
        if (message.settlementRevenueTypeId !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.settlementRevenueTypeId);
        /* optional string settlement_cycle_id = 18; */
        if (message.settlementCycleId !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.settlementCycleId);
        /* optional string fuel_card_number = 19; */
        if (message.fuelCardNumber !== undefined)
            writer.tag(19, WireType.LengthDelimited).string(message.fuelCardNumber);
        /* optional DriverModel.PayoutReceiver payout_receiver = 20; */
        if (message.payoutReceiver !== undefined)
            writer.tag(20, WireType.Varint).int32(message.payoutReceiver);
        /* optional string vendor_id = 21; */
        if (message.vendorId !== undefined)
            writer.tag(21, WireType.LengthDelimited).string(message.vendorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverUpdateRequest
 */
export const DriverUpdateRequest = new DriverUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverUpdateReply$Type extends MessageType<DriverUpdateReply> {
    constructor() {
        super("DriverUpdateReply", []);
    }
    create(value?: PartialMessage<DriverUpdateReply>): DriverUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverUpdateReply): DriverUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverUpdateReply
 */
export const DriverUpdateReply = new DriverUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverGetRequest$Type extends MessageType<DriverGetRequest> {
    constructor() {
        super("DriverGetRequest", []);
    }
    create(value?: PartialMessage<DriverGetRequest>): DriverGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverGetRequest): DriverGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverGetRequest
 */
export const DriverGetRequest = new DriverGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverGetReply$Type extends MessageType<DriverGetReply> {
    constructor() {
        super("DriverGetReply", [
            { no: 1, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DriverModel_Driver }
        ]);
    }
    create(value?: PartialMessage<DriverGetReply>): DriverGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.drivers = [];
        if (value !== undefined)
            reflectionMergePartial<DriverGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverGetReply): DriverGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated DriverModel.Driver drivers */ 1:
                    message.drivers.push(DriverModel_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated DriverModel.Driver drivers = 1; */
        for (let i = 0; i < message.drivers.length; i++)
            DriverModel_Driver.internalBinaryWrite(message.drivers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverGetReply
 */
export const DriverGetReply = new DriverGetReply$Type();
/**
 * @generated ServiceType for protobuf service DriversService
 */
export const DriversService = new ServiceType("DriversService", [
    { name: "SendDriverInvite", options: {}, I: SendDriverInviteRequest, O: SendDriverInviteReply },
    { name: "DriverDelete", options: {}, I: DriverDeleteRequest, O: DriverDeleteReply },
    { name: "DriverStatusUpdate", options: {}, I: DriverStatusUpdateRequest, O: DriverStatusUpdateReply },
    { name: "DriverInsuranceEndorsedUpdate", options: {}, I: DriverInsuranceEndorsedRequest, O: DriverInsuranceEndorsedReply },
    { name: "DriverUpdate", options: {}, I: DriverUpdateRequest, O: DriverUpdateReply },
    { name: "DriverGet", options: {}, I: DriverGetRequest, O: DriverGetReply },
    { name: "DriverRetrieve", options: {}, I: DriverRetrieveRequest, O: DriverRetrieveReply },
    { name: "DriverStatsRetrieve", options: {}, I: DriverStatsRetrieveRequest, O: DriverStatsRetrieveReply },
    { name: "DriverCreate", options: {}, I: DriverCreateRequest, O: DriverCreateReply },
    { name: "DriverSelfieUpload", options: {}, I: DriverSelfieUploadRequest, O: DriverSelfieUploadReply },
    { name: "DriverDeviceGet", options: {}, I: DriverDeviceGetRequest, O: DriverDeviceGetReply },
    { name: "DriverNoteUpdate", options: {}, I: DriverNoteUpdateRequest, O: DriverNoteUpdateReply },
    { name: "DriverUserAssign", options: {}, I: DriverUserAssignRequest, O: DriverUserAssignReply },
    { name: "DriverUserRemove", options: {}, I: DriverUserRemoveRequest, O: DriverUserRemoveReply },
    { name: "DriverVendorAssign", options: {}, I: DriverVendorAssignRequest, O: DriverVendorAssignReply },
    { name: "DriverVendorRemove", options: {}, I: DriverVendorRemoveRequest, O: DriverVendorRemoveReply },
    { name: "DriverSendSms", options: {}, I: DriverSendSmsRequest, O: DriverSendSmsReply }
]);
