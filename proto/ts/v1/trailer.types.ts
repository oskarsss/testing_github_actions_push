// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/trailer.types.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TrailerModel_Type_Icon } from "./models/model_trailer";
/**
 * @generated from protobuf message TrailerTypesGetRequest
 */
export interface TrailerTypesGetRequest {
}
/**
 * @generated from protobuf message TrailerTypesGetReply
 */
export interface TrailerTypesGetReply {
    /**
     * @generated from protobuf field: repeated TrailerTypesGetReply.TrailerType trailer_types = 1;
     */
    trailerTypes: TrailerTypesGetReply_TrailerType[];
}
/**
 * @generated from protobuf message TrailerTypesGetReply.TrailerType
 */
export interface TrailerTypesGetReply_TrailerType {
    /**
     * @generated from protobuf field: string trailer_type_id = 1;
     */
    trailerTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: TrailerModel.Type.Icon icon = 4;
     */
    icon: TrailerModel_Type_Icon;
}
/**
 * @generated from protobuf message TrailerTypesCreateRequest
 */
export interface TrailerTypesCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
    /**
     * @generated from protobuf field: TrailerModel.Type.Icon icon = 3;
     */
    icon: TrailerModel_Type_Icon;
}
/**
 * @generated from protobuf message TrailerTypesCreateReply
 */
export interface TrailerTypesCreateReply {
    /**
     * @generated from protobuf field: string trailer_type_id = 1;
     */
    trailerTypeId: string;
}
/**
 * @generated from protobuf message TrailerTypesUpdateRequest
 */
export interface TrailerTypesUpdateRequest {
    /**
     * @generated from protobuf field: string trailer_type_id = 1;
     */
    trailerTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: TrailerModel.Type.Icon icon = 4;
     */
    icon: TrailerModel_Type_Icon;
}
/**
 * @generated from protobuf message TrailerTypesUpdateReply
 */
export interface TrailerTypesUpdateReply {
}
/**
 * @generated from protobuf message TrailerTypesDeleteRequest
 */
export interface TrailerTypesDeleteRequest {
    /**
     * @generated from protobuf field: string trailer_type_id = 1;
     */
    trailerTypeId: string;
}
/**
 * @generated from protobuf message TrailerTypesDeleteReply
 */
export interface TrailerTypesDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesGetRequest$Type extends MessageType<TrailerTypesGetRequest> {
    constructor() {
        super("TrailerTypesGetRequest", []);
    }
    create(value?: PartialMessage<TrailerTypesGetRequest>): TrailerTypesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesGetRequest): TrailerTypesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerTypesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesGetRequest
 */
export const TrailerTypesGetRequest = new TrailerTypesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesGetReply$Type extends MessageType<TrailerTypesGetReply> {
    constructor() {
        super("TrailerTypesGetReply", [
            { no: 1, name: "trailer_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrailerTypesGetReply_TrailerType }
        ]);
    }
    create(value?: PartialMessage<TrailerTypesGetReply>): TrailerTypesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerTypes = [];
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesGetReply): TrailerTypesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TrailerTypesGetReply.TrailerType trailer_types */ 1:
                    message.trailerTypes.push(TrailerTypesGetReply_TrailerType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerTypesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TrailerTypesGetReply.TrailerType trailer_types = 1; */
        for (let i = 0; i < message.trailerTypes.length; i++)
            TrailerTypesGetReply_TrailerType.internalBinaryWrite(message.trailerTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesGetReply
 */
export const TrailerTypesGetReply = new TrailerTypesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesGetReply_TrailerType$Type extends MessageType<TrailerTypesGetReply_TrailerType> {
    constructor() {
        super("TrailerTypesGetReply.TrailerType", [
            { no: 1, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "enum", T: () => ["TrailerModel.Type.Icon", TrailerModel_Type_Icon, "ICON_"] }
        ]);
    }
    create(value?: PartialMessage<TrailerTypesGetReply_TrailerType>): TrailerTypesGetReply_TrailerType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerTypeId = "";
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesGetReply_TrailerType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesGetReply_TrailerType): TrailerTypesGetReply_TrailerType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_type_id */ 1:
                    message.trailerTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* TrailerModel.Type.Icon icon */ 4:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerTypesGetReply_TrailerType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_type_id = 1; */
        if (message.trailerTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* TrailerModel.Type.Icon icon = 4; */
        if (message.icon !== 0)
            writer.tag(4, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesGetReply.TrailerType
 */
export const TrailerTypesGetReply_TrailerType = new TrailerTypesGetReply_TrailerType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesCreateRequest$Type extends MessageType<TrailerTypesCreateRequest> {
    constructor() {
        super("TrailerTypesCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "enum", T: () => ["TrailerModel.Type.Icon", TrailerModel_Type_Icon, "ICON_"] }
        ]);
    }
    create(value?: PartialMessage<TrailerTypesCreateRequest>): TrailerTypesCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesCreateRequest): TrailerTypesCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* TrailerModel.Type.Icon icon */ 3:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerTypesCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* TrailerModel.Type.Icon icon = 3; */
        if (message.icon !== 0)
            writer.tag(3, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesCreateRequest
 */
export const TrailerTypesCreateRequest = new TrailerTypesCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesCreateReply$Type extends MessageType<TrailerTypesCreateReply> {
    constructor() {
        super("TrailerTypesCreateReply", [
            { no: 1, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerTypesCreateReply>): TrailerTypesCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesCreateReply): TrailerTypesCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_type_id */ 1:
                    message.trailerTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerTypesCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_type_id = 1; */
        if (message.trailerTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesCreateReply
 */
export const TrailerTypesCreateReply = new TrailerTypesCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesUpdateRequest$Type extends MessageType<TrailerTypesUpdateRequest> {
    constructor() {
        super("TrailerTypesUpdateRequest", [
            { no: 1, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "enum", T: () => ["TrailerModel.Type.Icon", TrailerModel_Type_Icon, "ICON_"] }
        ]);
    }
    create(value?: PartialMessage<TrailerTypesUpdateRequest>): TrailerTypesUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerTypeId = "";
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesUpdateRequest): TrailerTypesUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_type_id */ 1:
                    message.trailerTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* TrailerModel.Type.Icon icon */ 4:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerTypesUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_type_id = 1; */
        if (message.trailerTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* TrailerModel.Type.Icon icon = 4; */
        if (message.icon !== 0)
            writer.tag(4, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesUpdateRequest
 */
export const TrailerTypesUpdateRequest = new TrailerTypesUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesUpdateReply$Type extends MessageType<TrailerTypesUpdateReply> {
    constructor() {
        super("TrailerTypesUpdateReply", []);
    }
    create(value?: PartialMessage<TrailerTypesUpdateReply>): TrailerTypesUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesUpdateReply): TrailerTypesUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerTypesUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesUpdateReply
 */
export const TrailerTypesUpdateReply = new TrailerTypesUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesDeleteRequest$Type extends MessageType<TrailerTypesDeleteRequest> {
    constructor() {
        super("TrailerTypesDeleteRequest", [
            { no: 1, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerTypesDeleteRequest>): TrailerTypesDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesDeleteRequest): TrailerTypesDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_type_id */ 1:
                    message.trailerTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerTypesDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_type_id = 1; */
        if (message.trailerTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesDeleteRequest
 */
export const TrailerTypesDeleteRequest = new TrailerTypesDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerTypesDeleteReply$Type extends MessageType<TrailerTypesDeleteReply> {
    constructor() {
        super("TrailerTypesDeleteReply", []);
    }
    create(value?: PartialMessage<TrailerTypesDeleteReply>): TrailerTypesDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerTypesDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerTypesDeleteReply): TrailerTypesDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerTypesDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerTypesDeleteReply
 */
export const TrailerTypesDeleteReply = new TrailerTypesDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service TrailerTypesService
 */
export const TrailerTypesService = new ServiceType("TrailerTypesService", [
    { name: "Get", options: {}, I: TrailerTypesGetRequest, O: TrailerTypesGetReply },
    { name: "Create", options: {}, I: TrailerTypesCreateRequest, O: TrailerTypesCreateReply },
    { name: "Update", options: {}, I: TrailerTypesUpdateRequest, O: TrailerTypesUpdateReply },
    { name: "Delete", options: {}, I: TrailerTypesDeleteRequest, O: TrailerTypesDeleteReply }
]);
