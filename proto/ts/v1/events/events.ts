// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/events/events.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ManifestModel_StopID } from "../models/model_manifest";
/**
 * @generated from protobuf message Event
 */
export interface Event {
}
/**
 * Driver
 *
 * @generated from protobuf message Event.Driver
 */
export interface Event_Driver {
}
/**
 * Device
 *
 * @generated from protobuf message Event.Driver.Device
 */
export interface Event_Driver_Device {
}
/**
 * Location
 *
 * @generated from protobuf message Event.Driver.Device.Location
 */
export interface Event_Driver_Device_Location {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string device_id = 2;
     */
    deviceId: string;
    /**
     * @generated from protobuf field: double lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: double heading = 5;
     */
    heading: number;
    /**
     * @generated from protobuf field: int64 timestamp = 6;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: string address = 7;
     */
    address: string;
}
/**
 * Ping
 *
 * @generated from protobuf message Event.Driver.Device.Ping
 */
export interface Event_Driver_Device_Ping {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string device_id = 2;
     */
    deviceId: string;
    /**
     * @generated from protobuf field: int64 timestamp = 3;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message Event.User
 */
export interface Event_User {
}
/**
 * Ping
 *
 * @generated from protobuf message Event.User.Ping
 */
export interface Event_User_Ping {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message Event.Truck
 */
export interface Event_Truck {
}
/**
 * @generated from protobuf message Event.Truck.Location
 */
export interface Event_Truck_Location {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: double lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: double heading = 5;
     */
    heading: number;
    /**
     * @generated from protobuf field: double speed = 6;
     */
    speed: number;
    /**
     * @generated from protobuf field: double accuracy = 7;
     */
    accuracy: number;
    /**
     * @generated from protobuf field: string address = 8;
     */
    address: string;
    /**
     * @generated from protobuf field: string integration_provider_id = 9;
     */
    integrationProviderId: string;
    /**
     * @generated from protobuf field: int64 timestamp = 10;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message Event.Truck.Diagnostics
 */
export interface Event_Truck_Diagnostics {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: int64 odometer = 2;
     */
    odometer: number;
    /**
     * @generated from protobuf field: Event.Truck.Diagnostics.EngineState engine_state = 3;
     */
    engineState: Event_Truck_Diagnostics_EngineState;
    /**
     * @generated from protobuf field: int64 fuel_percent = 4;
     */
    fuelPercent: number;
    /**
     * @generated from protobuf field: int64 engine_coolant_temperature = 5;
     */
    engineCoolantTemperature: number;
    /**
     * @generated from protobuf field: int64 ambient_air_temperature = 6;
     */
    ambientAirTemperature: number;
    /**
     * @generated from protobuf field: int64 engine_load_percent = 7;
     */
    engineLoadPercent: number;
    /**
     * @generated from protobuf field: string integration_provider_id = 8;
     */
    integrationProviderId: string;
    /**
     * @generated from protobuf field: int64 timestamp = 9;
     */
    timestamp: number;
}
/**
 * @generated from protobuf enum Event.Truck.Diagnostics.EngineState
 */
export enum Event_Truck_Diagnostics_EngineState {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: On = 1;
     */
    On = 1,
    /**
     * @generated from protobuf enum value: Off = 2;
     */
    Off = 2,
    /**
     * @generated from protobuf enum value: Idle = 3;
     */
    Idle = 3
}
/**
 * @generated from protobuf message Event.Truck.Route
 */
export interface Event_Truck_Route {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string route_id = 2;
     */
    routeId: string;
    /**
     * @generated from protobuf field: repeated Event.Truck.Route.Stop stops = 3;
     */
    stops: Event_Truck_Route_Stop[];
}
/**
 * @generated from protobuf message Event.Truck.Route.Stop
 */
export interface Event_Truck_Route_Stop {
    /**
     * @generated from protobuf field: int64 sequence = 1;
     */
    sequence: number;
    /**
     * @generated from protobuf field: string load_id = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string stop_id = 3;
     */
    stopId: string;
    /**
     * @generated from protobuf field: Event.Truck.Route.Stop.Type type = 4;
     */
    type: Event_Truck_Route_Stop_Type;
    /**
     * @generated from protobuf field: double lat = 5;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 6;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 arrives_at = 7;
     */
    arrivesAt: number;
    /**
     * @generated from protobuf field: int64 departs_at = 8;
     */
    departsAt: number;
    /**
     * @generated from protobuf field: int64 eta = 9;
     */
    eta: number;
    /**
     * @generated from protobuf field: int64 loads_in_truck = 10;
     */
    loadsInTruck: number;
    /**
     * @generated from protobuf field: double distance = 11;
     */
    distance: number;
    /**
     * @generated from protobuf field: int64 duration = 12;
     */
    duration: number;
    /**
     * @generated from protobuf field: int64 deroute = 13;
     */
    deroute: number;
    /**
     * @generated from protobuf field: int64 lateness = 14;
     */
    lateness: number;
    /**
     * @generated from protobuf field: int64 earliness = 15;
     */
    earliness: number; // LoadModel.Stop.Status status = 16;
}
/**
 * @generated from protobuf enum Event.Truck.Route.Stop.Type
 */
export enum Event_Truck_Route_Stop_Type {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: Pickup = 1;
     */
    Pickup = 1,
    /**
     * @generated from protobuf enum value: Dropoff = 2;
     */
    Dropoff = 2
}
/**
 * @generated from protobuf message Event.Truck.ManifestRoute
 */
export interface Event_Truck_ManifestRoute {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: repeated Event.Truck.ManifestRoute.Stop stops = 2;
     */
    stops: Event_Truck_ManifestRoute_Stop[];
}
/**
 * @generated from protobuf message Event.Truck.ManifestRoute.Stop
 */
export interface Event_Truck_ManifestRoute_Stop {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: ManifestModel.StopID stop_id = 2;
     */
    stopId?: ManifestModel_StopID;
    /**
     * @generated from protobuf field: Event.Truck.ManifestRoute.Stop.Type type = 4;
     */
    type: Event_Truck_ManifestRoute_Stop_Type;
    /**
     * @generated from protobuf field: double lat = 5;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 6;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 arrives_at = 7;
     */
    arrivesAt: number;
    /**
     * @generated from protobuf field: int64 departs_at = 8;
     */
    departsAt: number;
    /**
     * @generated from protobuf field: int64 eta = 9;
     */
    eta: number;
    /**
     * @generated from protobuf field: int64 loads_in_truck = 10;
     */
    loadsInTruck: number;
    /**
     * @generated from protobuf field: double distance = 11;
     */
    distance: number;
    /**
     * @generated from protobuf field: int64 duration = 12;
     */
    duration: number;
    /**
     * @generated from protobuf field: int64 deroute = 13;
     */
    deroute: number;
    /**
     * @generated from protobuf field: int64 lateness = 14;
     */
    lateness: number;
    /**
     * @generated from protobuf field: int64 earliness = 15;
     */
    earliness: number;
}
/**
 * @generated from protobuf enum Event.Truck.ManifestRoute.Stop.Type
 */
export enum Event_Truck_ManifestRoute_Stop_Type {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: Pickup = 1;
     */
    Pickup = 1,
    /**
     * @generated from protobuf enum value: Dropoff = 2;
     */
    Dropoff = 2
}
/**
 * @generated from protobuf message Event.Trailer
 */
export interface Event_Trailer {
}
/**
 * Location
 *
 * @generated from protobuf message Event.Trailer.Location
 */
export interface Event_Trailer_Location {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 3;
     */
    lon: number;
    /**
     * @generated from protobuf field: double heading = 4;
     */
    heading: number;
    /**
     * @generated from protobuf field: double speed = 5;
     */
    speed: number;
    /**
     * @generated from protobuf field: double accuracy = 6;
     */
    accuracy: number;
    /**
     * @generated from protobuf field: string address = 7;
     */
    address: string;
    /**
     * @generated from protobuf field: int64 timestamp = 8;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: string integration_provider_id = 9;
     */
    integrationProviderId: string;
}
/**
 * @generated from protobuf message Event.Loadboard
 */
export interface Event_Loadboard {
}
/**
 * @generated from protobuf message Event.Loadboard.SearchUpdated
 */
export interface Event_Loadboard_SearchUpdated {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
}
/**
 * @generated from protobuf message Event.Note
 */
export interface Event_Note {
    /**
     * @generated from protobuf field: string entity = 1;
     */
    entity: string; // acts like channel_id
    /**
     * @generated from protobuf field: string note_id = 2;
     */
    noteId: string;
    /**
     * @generated from protobuf field: string body = 3;
     */
    body: string;
    /**
     * @generated from protobuf field: string user_id = 4;
     */
    userId: string;
    /**
     * @generated from protobuf field: string driver_id = 5;
     */
    driverId: string;
    /**
     * @generated from protobuf field: repeated Event.Note.File files = 6;
     */
    files: Event_Note_File[];
    /**
     * @generated from protobuf field: string created_at = 7;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 8;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: bool read = 9;
     */
    read: boolean;
    /**
     * @generated from protobuf field: bool delivered = 10;
     */
    delivered: boolean;
}
/**
 * @generated from protobuf message Event.Note.File
 */
export interface Event_Note_File {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * @generated from protobuf message Event.Notification
 */
export interface Event_Notification {
    /**
     * @generated from protobuf field: string notification_id = 1;
     */
    notificationId: string;
    /**
     * @generated from protobuf field: repeated string allowed_user_ids = 2;
     */
    allowedUserIds: string[];
    /**
     * @generated from protobuf field: repeated string allowed_driver_ids = 3;
     */
    allowedDriverIds: string[];
    /**
     * @generated from protobuf field: repeated string allowed_customer_user_ids = 4;
     */
    allowedCustomerUserIds: string[];
    /**
     * @generated from protobuf field: repeated string allowed_broker_user_ids = 5;
     */
    allowedBrokerUserIds: string[];
}
/**
 * @generated from protobuf message Event.Event
 */
export interface Event_Event {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf oneof: Value
     */
    value: {
        oneofKind: "eventUserPing";
        /**
         * @generated from protobuf field: Event.User.Ping event_user_ping = 2;
         */
        eventUserPing: Event_User_Ping;
    } | {
        oneofKind: "eventDriverDeviceLocation";
        /**
         * @generated from protobuf field: Event.Driver.Device.Location event_driver_device_location = 3;
         */
        eventDriverDeviceLocation: Event_Driver_Device_Location;
    } | {
        oneofKind: "eventDriverDevicePing";
        /**
         * @generated from protobuf field: Event.Driver.Device.Ping event_driver_device_ping = 4;
         */
        eventDriverDevicePing: Event_Driver_Device_Ping;
    } | {
        oneofKind: "eventTruckLocation";
        /**
         * @generated from protobuf field: Event.Truck.Location event_truck_location = 5;
         */
        eventTruckLocation: Event_Truck_Location;
    } | {
        oneofKind: "eventTruckDiagnostics";
        /**
         * @generated from protobuf field: Event.Truck.Diagnostics event_truck_diagnostics = 6;
         */
        eventTruckDiagnostics: Event_Truck_Diagnostics;
    } | {
        oneofKind: "eventTrailerLocation";
        /**
         * @generated from protobuf field: Event.Trailer.Location event_trailer_location = 7;
         */
        eventTrailerLocation: Event_Trailer_Location;
    } | {
        oneofKind: "eventTruckRoute";
        /**
         * @generated from protobuf field: Event.Truck.Route event_truck_route = 8;
         */
        eventTruckRoute: Event_Truck_Route;
    } | {
        oneofKind: "eventManifestTruckRoute";
        /**
         * @generated from protobuf field: Event.Truck.ManifestRoute event_manifest_truck_route = 9;
         */
        eventManifestTruckRoute: Event_Truck_ManifestRoute;
    } | {
        oneofKind: "eventNote";
        /**
         * @generated from protobuf field: Event.Note event_note = 10;
         */
        eventNote: Event_Note;
    } | {
        oneofKind: "eventNotification";
        /**
         * @generated from protobuf field: Event.Notification event_notification = 11;
         */
        eventNotification: Event_Notification;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("Event", []);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Driver$Type extends MessageType<Event_Driver> {
    constructor() {
        super("Event.Driver", []);
    }
    create(value?: PartialMessage<Event_Driver>): Event_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Driver): Event_Driver {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Driver
 */
export const Event_Driver = new Event_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Driver_Device$Type extends MessageType<Event_Driver_Device> {
    constructor() {
        super("Event.Driver.Device", []);
    }
    create(value?: PartialMessage<Event_Driver_Device>): Event_Driver_Device {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event_Driver_Device>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Driver_Device): Event_Driver_Device {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event_Driver_Device, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Driver.Device
 */
export const Event_Driver_Device = new Event_Driver_Device$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Driver_Device_Location$Type extends MessageType<Event_Driver_Device_Location> {
    constructor() {
        super("Event.Driver.Device.Location", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "heading", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Driver_Device_Location>): Event_Driver_Device_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.deviceId = "";
        message.lat = 0;
        message.lon = 0;
        message.heading = 0;
        message.timestamp = 0;
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<Event_Driver_Device_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Driver_Device_Location): Event_Driver_Device_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string device_id */ 2:
                    message.deviceId = reader.string();
                    break;
                case /* double lat */ 3:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 4:
                    message.lon = reader.double();
                    break;
                case /* double heading */ 5:
                    message.heading = reader.double();
                    break;
                case /* int64 timestamp */ 6:
                    message.timestamp = reader.int64().toNumber();
                    break;
                case /* string address */ 7:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Driver_Device_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string device_id = 2; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* double lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit64).double(message.lat);
        /* double lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit64).double(message.lon);
        /* double heading = 5; */
        if (message.heading !== 0)
            writer.tag(5, WireType.Bit64).double(message.heading);
        /* int64 timestamp = 6; */
        if (message.timestamp !== 0)
            writer.tag(6, WireType.Varint).int64(message.timestamp);
        /* string address = 7; */
        if (message.address !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Driver.Device.Location
 */
export const Event_Driver_Device_Location = new Event_Driver_Device_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Driver_Device_Ping$Type extends MessageType<Event_Driver_Device_Ping> {
    constructor() {
        super("Event.Driver.Device.Ping", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Driver_Device_Ping>): Event_Driver_Device_Ping {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.deviceId = "";
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<Event_Driver_Device_Ping>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Driver_Device_Ping): Event_Driver_Device_Ping {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string device_id */ 2:
                    message.deviceId = reader.string();
                    break;
                case /* int64 timestamp */ 3:
                    message.timestamp = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Driver_Device_Ping, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string device_id = 2; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* int64 timestamp = 3; */
        if (message.timestamp !== 0)
            writer.tag(3, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Driver.Device.Ping
 */
export const Event_Driver_Device_Ping = new Event_Driver_Device_Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_User$Type extends MessageType<Event_User> {
    constructor() {
        super("Event.User", []);
    }
    create(value?: PartialMessage<Event_User>): Event_User {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_User): Event_User {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.User
 */
export const Event_User = new Event_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_User_Ping$Type extends MessageType<Event_User_Ping> {
    constructor() {
        super("Event.User.Ping", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Event_User_Ping>): Event_User_Ping {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<Event_User_Ping>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_User_Ping): Event_User_Ping {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_User_Ping, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.User.Ping
 */
export const Event_User_Ping = new Event_User_Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck$Type extends MessageType<Event_Truck> {
    constructor() {
        super("Event.Truck", []);
    }
    create(value?: PartialMessage<Event_Truck>): Event_Truck {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event_Truck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck): Event_Truck {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event_Truck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck
 */
export const Event_Truck = new Event_Truck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck_Location$Type extends MessageType<Event_Truck_Location> {
    constructor() {
        super("Event.Truck.Location", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "heading", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "speed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "accuracy", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Truck_Location>): Event_Truck_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.lat = 0;
        message.lon = 0;
        message.heading = 0;
        message.speed = 0;
        message.accuracy = 0;
        message.address = "";
        message.integrationProviderId = "";
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<Event_Truck_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck_Location): Event_Truck_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* double lat */ 3:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 4:
                    message.lon = reader.double();
                    break;
                case /* double heading */ 5:
                    message.heading = reader.double();
                    break;
                case /* double speed */ 6:
                    message.speed = reader.double();
                    break;
                case /* double accuracy */ 7:
                    message.accuracy = reader.double();
                    break;
                case /* string address */ 8:
                    message.address = reader.string();
                    break;
                case /* string integration_provider_id */ 9:
                    message.integrationProviderId = reader.string();
                    break;
                case /* int64 timestamp */ 10:
                    message.timestamp = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Truck_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* double lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit64).double(message.lat);
        /* double lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit64).double(message.lon);
        /* double heading = 5; */
        if (message.heading !== 0)
            writer.tag(5, WireType.Bit64).double(message.heading);
        /* double speed = 6; */
        if (message.speed !== 0)
            writer.tag(6, WireType.Bit64).double(message.speed);
        /* double accuracy = 7; */
        if (message.accuracy !== 0)
            writer.tag(7, WireType.Bit64).double(message.accuracy);
        /* string address = 8; */
        if (message.address !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.address);
        /* string integration_provider_id = 9; */
        if (message.integrationProviderId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.integrationProviderId);
        /* int64 timestamp = 10; */
        if (message.timestamp !== 0)
            writer.tag(10, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck.Location
 */
export const Event_Truck_Location = new Event_Truck_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck_Diagnostics$Type extends MessageType<Event_Truck_Diagnostics> {
    constructor() {
        super("Event.Truck.Diagnostics", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "odometer", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "engine_state", kind: "enum", T: () => ["Event.Truck.Diagnostics.EngineState", Event_Truck_Diagnostics_EngineState] },
            { no: 4, name: "fuel_percent", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "engine_coolant_temperature", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "ambient_air_temperature", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "engine_load_percent", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Truck_Diagnostics>): Event_Truck_Diagnostics {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.odometer = 0;
        message.engineState = 0;
        message.fuelPercent = 0;
        message.engineCoolantTemperature = 0;
        message.ambientAirTemperature = 0;
        message.engineLoadPercent = 0;
        message.integrationProviderId = "";
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<Event_Truck_Diagnostics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck_Diagnostics): Event_Truck_Diagnostics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* int64 odometer */ 2:
                    message.odometer = reader.int64().toNumber();
                    break;
                case /* Event.Truck.Diagnostics.EngineState engine_state */ 3:
                    message.engineState = reader.int32();
                    break;
                case /* int64 fuel_percent */ 4:
                    message.fuelPercent = reader.int64().toNumber();
                    break;
                case /* int64 engine_coolant_temperature */ 5:
                    message.engineCoolantTemperature = reader.int64().toNumber();
                    break;
                case /* int64 ambient_air_temperature */ 6:
                    message.ambientAirTemperature = reader.int64().toNumber();
                    break;
                case /* int64 engine_load_percent */ 7:
                    message.engineLoadPercent = reader.int64().toNumber();
                    break;
                case /* string integration_provider_id */ 8:
                    message.integrationProviderId = reader.string();
                    break;
                case /* int64 timestamp */ 9:
                    message.timestamp = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Truck_Diagnostics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* int64 odometer = 2; */
        if (message.odometer !== 0)
            writer.tag(2, WireType.Varint).int64(message.odometer);
        /* Event.Truck.Diagnostics.EngineState engine_state = 3; */
        if (message.engineState !== 0)
            writer.tag(3, WireType.Varint).int32(message.engineState);
        /* int64 fuel_percent = 4; */
        if (message.fuelPercent !== 0)
            writer.tag(4, WireType.Varint).int64(message.fuelPercent);
        /* int64 engine_coolant_temperature = 5; */
        if (message.engineCoolantTemperature !== 0)
            writer.tag(5, WireType.Varint).int64(message.engineCoolantTemperature);
        /* int64 ambient_air_temperature = 6; */
        if (message.ambientAirTemperature !== 0)
            writer.tag(6, WireType.Varint).int64(message.ambientAirTemperature);
        /* int64 engine_load_percent = 7; */
        if (message.engineLoadPercent !== 0)
            writer.tag(7, WireType.Varint).int64(message.engineLoadPercent);
        /* string integration_provider_id = 8; */
        if (message.integrationProviderId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.integrationProviderId);
        /* int64 timestamp = 9; */
        if (message.timestamp !== 0)
            writer.tag(9, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck.Diagnostics
 */
export const Event_Truck_Diagnostics = new Event_Truck_Diagnostics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck_Route$Type extends MessageType<Event_Truck_Route> {
    constructor() {
        super("Event.Truck.Route", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "route_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Truck_Route_Stop }
        ]);
    }
    create(value?: PartialMessage<Event_Truck_Route>): Event_Truck_Route {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.routeId = "";
        message.stops = [];
        if (value !== undefined)
            reflectionMergePartial<Event_Truck_Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck_Route): Event_Truck_Route {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string route_id */ 2:
                    message.routeId = reader.string();
                    break;
                case /* repeated Event.Truck.Route.Stop stops */ 3:
                    message.stops.push(Event_Truck_Route_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Truck_Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string route_id = 2; */
        if (message.routeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routeId);
        /* repeated Event.Truck.Route.Stop stops = 3; */
        for (let i = 0; i < message.stops.length; i++)
            Event_Truck_Route_Stop.internalBinaryWrite(message.stops[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck.Route
 */
export const Event_Truck_Route = new Event_Truck_Route$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck_Route_Stop$Type extends MessageType<Event_Truck_Route_Stop> {
    constructor() {
        super("Event.Truck.Route.Stop", [
            { no: 1, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["Event.Truck.Route.Stop.Type", Event_Truck_Route_Stop_Type] },
            { no: 5, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "arrives_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "departs_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "eta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "loads_in_truck", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "deroute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "lateness", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "earliness", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Truck_Route_Stop>): Event_Truck_Route_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sequence = 0;
        message.loadId = "";
        message.stopId = "";
        message.type = 0;
        message.lat = 0;
        message.lon = 0;
        message.arrivesAt = 0;
        message.departsAt = 0;
        message.eta = 0;
        message.loadsInTruck = 0;
        message.distance = 0;
        message.duration = 0;
        message.deroute = 0;
        message.lateness = 0;
        message.earliness = 0;
        if (value !== undefined)
            reflectionMergePartial<Event_Truck_Route_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck_Route_Stop): Event_Truck_Route_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sequence */ 1:
                    message.sequence = reader.int64().toNumber();
                    break;
                case /* string load_id */ 2:
                    message.loadId = reader.string();
                    break;
                case /* string stop_id */ 3:
                    message.stopId = reader.string();
                    break;
                case /* Event.Truck.Route.Stop.Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* double lat */ 5:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 6:
                    message.lon = reader.double();
                    break;
                case /* int64 arrives_at */ 7:
                    message.arrivesAt = reader.int64().toNumber();
                    break;
                case /* int64 departs_at */ 8:
                    message.departsAt = reader.int64().toNumber();
                    break;
                case /* int64 eta */ 9:
                    message.eta = reader.int64().toNumber();
                    break;
                case /* int64 loads_in_truck */ 10:
                    message.loadsInTruck = reader.int64().toNumber();
                    break;
                case /* double distance */ 11:
                    message.distance = reader.double();
                    break;
                case /* int64 duration */ 12:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* int64 deroute */ 13:
                    message.deroute = reader.int64().toNumber();
                    break;
                case /* int64 lateness */ 14:
                    message.lateness = reader.int64().toNumber();
                    break;
                case /* int64 earliness */ 15:
                    message.earliness = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Truck_Route_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 sequence = 1; */
        if (message.sequence !== 0)
            writer.tag(1, WireType.Varint).int64(message.sequence);
        /* string load_id = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* string stop_id = 3; */
        if (message.stopId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.stopId);
        /* Event.Truck.Route.Stop.Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* double lat = 5; */
        if (message.lat !== 0)
            writer.tag(5, WireType.Bit64).double(message.lat);
        /* double lon = 6; */
        if (message.lon !== 0)
            writer.tag(6, WireType.Bit64).double(message.lon);
        /* int64 arrives_at = 7; */
        if (message.arrivesAt !== 0)
            writer.tag(7, WireType.Varint).int64(message.arrivesAt);
        /* int64 departs_at = 8; */
        if (message.departsAt !== 0)
            writer.tag(8, WireType.Varint).int64(message.departsAt);
        /* int64 eta = 9; */
        if (message.eta !== 0)
            writer.tag(9, WireType.Varint).int64(message.eta);
        /* int64 loads_in_truck = 10; */
        if (message.loadsInTruck !== 0)
            writer.tag(10, WireType.Varint).int64(message.loadsInTruck);
        /* double distance = 11; */
        if (message.distance !== 0)
            writer.tag(11, WireType.Bit64).double(message.distance);
        /* int64 duration = 12; */
        if (message.duration !== 0)
            writer.tag(12, WireType.Varint).int64(message.duration);
        /* int64 deroute = 13; */
        if (message.deroute !== 0)
            writer.tag(13, WireType.Varint).int64(message.deroute);
        /* int64 lateness = 14; */
        if (message.lateness !== 0)
            writer.tag(14, WireType.Varint).int64(message.lateness);
        /* int64 earliness = 15; */
        if (message.earliness !== 0)
            writer.tag(15, WireType.Varint).int64(message.earliness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck.Route.Stop
 */
export const Event_Truck_Route_Stop = new Event_Truck_Route_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck_ManifestRoute$Type extends MessageType<Event_Truck_ManifestRoute> {
    constructor() {
        super("Event.Truck.ManifestRoute", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Truck_ManifestRoute_Stop }
        ]);
    }
    create(value?: PartialMessage<Event_Truck_ManifestRoute>): Event_Truck_ManifestRoute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.stops = [];
        if (value !== undefined)
            reflectionMergePartial<Event_Truck_ManifestRoute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck_ManifestRoute): Event_Truck_ManifestRoute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* repeated Event.Truck.ManifestRoute.Stop stops */ 2:
                    message.stops.push(Event_Truck_ManifestRoute_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Truck_ManifestRoute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* repeated Event.Truck.ManifestRoute.Stop stops = 2; */
        for (let i = 0; i < message.stops.length; i++)
            Event_Truck_ManifestRoute_Stop.internalBinaryWrite(message.stops[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck.ManifestRoute
 */
export const Event_Truck_ManifestRoute = new Event_Truck_ManifestRoute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Truck_ManifestRoute_Stop$Type extends MessageType<Event_Truck_ManifestRoute_Stop> {
    constructor() {
        super("Event.Truck.ManifestRoute.Stop", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stop_id", kind: "message", T: () => ManifestModel_StopID },
            { no: 4, name: "type", kind: "enum", T: () => ["Event.Truck.ManifestRoute.Stop.Type", Event_Truck_ManifestRoute_Stop_Type] },
            { no: 5, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "arrives_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "departs_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "eta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "loads_in_truck", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "deroute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "lateness", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "earliness", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Truck_ManifestRoute_Stop>): Event_Truck_ManifestRoute_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.type = 0;
        message.lat = 0;
        message.lon = 0;
        message.arrivesAt = 0;
        message.departsAt = 0;
        message.eta = 0;
        message.loadsInTruck = 0;
        message.distance = 0;
        message.duration = 0;
        message.deroute = 0;
        message.lateness = 0;
        message.earliness = 0;
        if (value !== undefined)
            reflectionMergePartial<Event_Truck_ManifestRoute_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Truck_ManifestRoute_Stop): Event_Truck_ManifestRoute_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* ManifestModel.StopID stop_id */ 2:
                    message.stopId = ManifestModel_StopID.internalBinaryRead(reader, reader.uint32(), options, message.stopId);
                    break;
                case /* Event.Truck.ManifestRoute.Stop.Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* double lat */ 5:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 6:
                    message.lon = reader.double();
                    break;
                case /* int64 arrives_at */ 7:
                    message.arrivesAt = reader.int64().toNumber();
                    break;
                case /* int64 departs_at */ 8:
                    message.departsAt = reader.int64().toNumber();
                    break;
                case /* int64 eta */ 9:
                    message.eta = reader.int64().toNumber();
                    break;
                case /* int64 loads_in_truck */ 10:
                    message.loadsInTruck = reader.int64().toNumber();
                    break;
                case /* double distance */ 11:
                    message.distance = reader.double();
                    break;
                case /* int64 duration */ 12:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* int64 deroute */ 13:
                    message.deroute = reader.int64().toNumber();
                    break;
                case /* int64 lateness */ 14:
                    message.lateness = reader.int64().toNumber();
                    break;
                case /* int64 earliness */ 15:
                    message.earliness = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Truck_ManifestRoute_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* ManifestModel.StopID stop_id = 2; */
        if (message.stopId)
            ManifestModel_StopID.internalBinaryWrite(message.stopId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Event.Truck.ManifestRoute.Stop.Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* double lat = 5; */
        if (message.lat !== 0)
            writer.tag(5, WireType.Bit64).double(message.lat);
        /* double lon = 6; */
        if (message.lon !== 0)
            writer.tag(6, WireType.Bit64).double(message.lon);
        /* int64 arrives_at = 7; */
        if (message.arrivesAt !== 0)
            writer.tag(7, WireType.Varint).int64(message.arrivesAt);
        /* int64 departs_at = 8; */
        if (message.departsAt !== 0)
            writer.tag(8, WireType.Varint).int64(message.departsAt);
        /* int64 eta = 9; */
        if (message.eta !== 0)
            writer.tag(9, WireType.Varint).int64(message.eta);
        /* int64 loads_in_truck = 10; */
        if (message.loadsInTruck !== 0)
            writer.tag(10, WireType.Varint).int64(message.loadsInTruck);
        /* double distance = 11; */
        if (message.distance !== 0)
            writer.tag(11, WireType.Bit64).double(message.distance);
        /* int64 duration = 12; */
        if (message.duration !== 0)
            writer.tag(12, WireType.Varint).int64(message.duration);
        /* int64 deroute = 13; */
        if (message.deroute !== 0)
            writer.tag(13, WireType.Varint).int64(message.deroute);
        /* int64 lateness = 14; */
        if (message.lateness !== 0)
            writer.tag(14, WireType.Varint).int64(message.lateness);
        /* int64 earliness = 15; */
        if (message.earliness !== 0)
            writer.tag(15, WireType.Varint).int64(message.earliness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Truck.ManifestRoute.Stop
 */
export const Event_Truck_ManifestRoute_Stop = new Event_Truck_ManifestRoute_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Trailer$Type extends MessageType<Event_Trailer> {
    constructor() {
        super("Event.Trailer", []);
    }
    create(value?: PartialMessage<Event_Trailer>): Event_Trailer {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event_Trailer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Trailer): Event_Trailer {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event_Trailer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Trailer
 */
export const Event_Trailer = new Event_Trailer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Trailer_Location$Type extends MessageType<Event_Trailer_Location> {
    constructor() {
        super("Event.Trailer.Location", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "heading", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "speed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "accuracy", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "integration_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Trailer_Location>): Event_Trailer_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        message.lat = 0;
        message.lon = 0;
        message.heading = 0;
        message.speed = 0;
        message.accuracy = 0;
        message.address = "";
        message.timestamp = 0;
        message.integrationProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<Event_Trailer_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Trailer_Location): Event_Trailer_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 3:
                    message.lon = reader.double();
                    break;
                case /* double heading */ 4:
                    message.heading = reader.double();
                    break;
                case /* double speed */ 5:
                    message.speed = reader.double();
                    break;
                case /* double accuracy */ 6:
                    message.accuracy = reader.double();
                    break;
                case /* string address */ 7:
                    message.address = reader.string();
                    break;
                case /* int64 timestamp */ 8:
                    message.timestamp = reader.int64().toNumber();
                    break;
                case /* string integration_provider_id */ 9:
                    message.integrationProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Trailer_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lon = 3; */
        if (message.lon !== 0)
            writer.tag(3, WireType.Bit64).double(message.lon);
        /* double heading = 4; */
        if (message.heading !== 0)
            writer.tag(4, WireType.Bit64).double(message.heading);
        /* double speed = 5; */
        if (message.speed !== 0)
            writer.tag(5, WireType.Bit64).double(message.speed);
        /* double accuracy = 6; */
        if (message.accuracy !== 0)
            writer.tag(6, WireType.Bit64).double(message.accuracy);
        /* string address = 7; */
        if (message.address !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.address);
        /* int64 timestamp = 8; */
        if (message.timestamp !== 0)
            writer.tag(8, WireType.Varint).int64(message.timestamp);
        /* string integration_provider_id = 9; */
        if (message.integrationProviderId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.integrationProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Trailer.Location
 */
export const Event_Trailer_Location = new Event_Trailer_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Loadboard$Type extends MessageType<Event_Loadboard> {
    constructor() {
        super("Event.Loadboard", []);
    }
    create(value?: PartialMessage<Event_Loadboard>): Event_Loadboard {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Event_Loadboard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Loadboard): Event_Loadboard {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Event_Loadboard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Loadboard
 */
export const Event_Loadboard = new Event_Loadboard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Loadboard_SearchUpdated$Type extends MessageType<Event_Loadboard_SearchUpdated> {
    constructor() {
        super("Event.Loadboard.SearchUpdated", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Loadboard_SearchUpdated>): Event_Loadboard_SearchUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        if (value !== undefined)
            reflectionMergePartial<Event_Loadboard_SearchUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Loadboard_SearchUpdated): Event_Loadboard_SearchUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Loadboard_SearchUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Loadboard.SearchUpdated
 */
export const Event_Loadboard_SearchUpdated = new Event_Loadboard_SearchUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Note$Type extends MessageType<Event_Note> {
    constructor() {
        super("Event.Note", [
            { no: 1, name: "entity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "note_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Note_File },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "delivered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Note>): Event_Note {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entity = "";
        message.noteId = "";
        message.body = "";
        message.userId = "";
        message.driverId = "";
        message.files = [];
        message.createdAt = "";
        message.deleted = false;
        message.read = false;
        message.delivered = false;
        if (value !== undefined)
            reflectionMergePartial<Event_Note>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Note): Event_Note {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entity */ 1:
                    message.entity = reader.string();
                    break;
                case /* string note_id */ 2:
                    message.noteId = reader.string();
                    break;
                case /* string body */ 3:
                    message.body = reader.string();
                    break;
                case /* string user_id */ 4:
                    message.userId = reader.string();
                    break;
                case /* string driver_id */ 5:
                    message.driverId = reader.string();
                    break;
                case /* repeated Event.Note.File files */ 6:
                    message.files.push(Event_Note_File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 8:
                    message.deleted = reader.bool();
                    break;
                case /* bool read */ 9:
                    message.read = reader.bool();
                    break;
                case /* bool delivered */ 10:
                    message.delivered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Note, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entity = 1; */
        if (message.entity !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entity);
        /* string note_id = 2; */
        if (message.noteId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.noteId);
        /* string body = 3; */
        if (message.body !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.body);
        /* string user_id = 4; */
        if (message.userId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userId);
        /* string driver_id = 5; */
        if (message.driverId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.driverId);
        /* repeated Event.Note.File files = 6; */
        for (let i = 0; i < message.files.length; i++)
            Event_Note_File.internalBinaryWrite(message.files[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 8; */
        if (message.deleted !== false)
            writer.tag(8, WireType.Varint).bool(message.deleted);
        /* bool read = 9; */
        if (message.read !== false)
            writer.tag(9, WireType.Varint).bool(message.read);
        /* bool delivered = 10; */
        if (message.delivered !== false)
            writer.tag(10, WireType.Varint).bool(message.delivered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Note
 */
export const Event_Note = new Event_Note$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Note_File$Type extends MessageType<Event_Note_File> {
    constructor() {
        super("Event.Note.File", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Note_File>): Event_Note_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<Event_Note_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Note_File): Event_Note_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Note_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Note.File
 */
export const Event_Note_File = new Event_Note_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Notification$Type extends MessageType<Event_Notification> {
    constructor() {
        super("Event.Notification", [
            { no: 1, name: "notification_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "allowed_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "allowed_driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "allowed_customer_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "allowed_broker_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event_Notification>): Event_Notification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationId = "";
        message.allowedUserIds = [];
        message.allowedDriverIds = [];
        message.allowedCustomerUserIds = [];
        message.allowedBrokerUserIds = [];
        if (value !== undefined)
            reflectionMergePartial<Event_Notification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Notification): Event_Notification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string notification_id */ 1:
                    message.notificationId = reader.string();
                    break;
                case /* repeated string allowed_user_ids */ 2:
                    message.allowedUserIds.push(reader.string());
                    break;
                case /* repeated string allowed_driver_ids */ 3:
                    message.allowedDriverIds.push(reader.string());
                    break;
                case /* repeated string allowed_customer_user_ids */ 4:
                    message.allowedCustomerUserIds.push(reader.string());
                    break;
                case /* repeated string allowed_broker_user_ids */ 5:
                    message.allowedBrokerUserIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Notification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string notification_id = 1; */
        if (message.notificationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
        /* repeated string allowed_user_ids = 2; */
        for (let i = 0; i < message.allowedUserIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.allowedUserIds[i]);
        /* repeated string allowed_driver_ids = 3; */
        for (let i = 0; i < message.allowedDriverIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.allowedDriverIds[i]);
        /* repeated string allowed_customer_user_ids = 4; */
        for (let i = 0; i < message.allowedCustomerUserIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.allowedCustomerUserIds[i]);
        /* repeated string allowed_broker_user_ids = 5; */
        for (let i = 0; i < message.allowedBrokerUserIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.allowedBrokerUserIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Notification
 */
export const Event_Notification = new Event_Notification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_Event$Type extends MessageType<Event_Event> {
    constructor() {
        super("Event.Event", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "event_user_ping", kind: "message", oneof: "value", T: () => Event_User_Ping },
            { no: 3, name: "event_driver_device_location", kind: "message", oneof: "value", T: () => Event_Driver_Device_Location },
            { no: 4, name: "event_driver_device_ping", kind: "message", oneof: "value", T: () => Event_Driver_Device_Ping },
            { no: 5, name: "event_truck_location", kind: "message", oneof: "value", T: () => Event_Truck_Location },
            { no: 6, name: "event_truck_diagnostics", kind: "message", oneof: "value", T: () => Event_Truck_Diagnostics },
            { no: 7, name: "event_trailer_location", kind: "message", oneof: "value", T: () => Event_Trailer_Location },
            { no: 8, name: "event_truck_route", kind: "message", oneof: "value", T: () => Event_Truck_Route },
            { no: 9, name: "event_manifest_truck_route", kind: "message", oneof: "value", T: () => Event_Truck_ManifestRoute },
            { no: 10, name: "event_note", kind: "message", oneof: "value", T: () => Event_Note },
            { no: 11, name: "event_notification", kind: "message", oneof: "value", T: () => Event_Notification }
        ]);
    }
    create(value?: PartialMessage<Event_Event>): Event_Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Event_Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_Event): Event_Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* Event.User.Ping event_user_ping */ 2:
                    message.value = {
                        oneofKind: "eventUserPing",
                        eventUserPing: Event_User_Ping.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventUserPing)
                    };
                    break;
                case /* Event.Driver.Device.Location event_driver_device_location */ 3:
                    message.value = {
                        oneofKind: "eventDriverDeviceLocation",
                        eventDriverDeviceLocation: Event_Driver_Device_Location.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventDriverDeviceLocation)
                    };
                    break;
                case /* Event.Driver.Device.Ping event_driver_device_ping */ 4:
                    message.value = {
                        oneofKind: "eventDriverDevicePing",
                        eventDriverDevicePing: Event_Driver_Device_Ping.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventDriverDevicePing)
                    };
                    break;
                case /* Event.Truck.Location event_truck_location */ 5:
                    message.value = {
                        oneofKind: "eventTruckLocation",
                        eventTruckLocation: Event_Truck_Location.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTruckLocation)
                    };
                    break;
                case /* Event.Truck.Diagnostics event_truck_diagnostics */ 6:
                    message.value = {
                        oneofKind: "eventTruckDiagnostics",
                        eventTruckDiagnostics: Event_Truck_Diagnostics.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTruckDiagnostics)
                    };
                    break;
                case /* Event.Trailer.Location event_trailer_location */ 7:
                    message.value = {
                        oneofKind: "eventTrailerLocation",
                        eventTrailerLocation: Event_Trailer_Location.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTrailerLocation)
                    };
                    break;
                case /* Event.Truck.Route event_truck_route */ 8:
                    message.value = {
                        oneofKind: "eventTruckRoute",
                        eventTruckRoute: Event_Truck_Route.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTruckRoute)
                    };
                    break;
                case /* Event.Truck.ManifestRoute event_manifest_truck_route */ 9:
                    message.value = {
                        oneofKind: "eventManifestTruckRoute",
                        eventManifestTruckRoute: Event_Truck_ManifestRoute.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventManifestTruckRoute)
                    };
                    break;
                case /* Event.Note event_note */ 10:
                    message.value = {
                        oneofKind: "eventNote",
                        eventNote: Event_Note.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventNote)
                    };
                    break;
                case /* Event.Notification event_notification */ 11:
                    message.value = {
                        oneofKind: "eventNotification",
                        eventNotification: Event_Notification.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventNotification)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* Event.User.Ping event_user_ping = 2; */
        if (message.value.oneofKind === "eventUserPing")
            Event_User_Ping.internalBinaryWrite(message.value.eventUserPing, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Event.Driver.Device.Location event_driver_device_location = 3; */
        if (message.value.oneofKind === "eventDriverDeviceLocation")
            Event_Driver_Device_Location.internalBinaryWrite(message.value.eventDriverDeviceLocation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Event.Driver.Device.Ping event_driver_device_ping = 4; */
        if (message.value.oneofKind === "eventDriverDevicePing")
            Event_Driver_Device_Ping.internalBinaryWrite(message.value.eventDriverDevicePing, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Event.Truck.Location event_truck_location = 5; */
        if (message.value.oneofKind === "eventTruckLocation")
            Event_Truck_Location.internalBinaryWrite(message.value.eventTruckLocation, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Event.Truck.Diagnostics event_truck_diagnostics = 6; */
        if (message.value.oneofKind === "eventTruckDiagnostics")
            Event_Truck_Diagnostics.internalBinaryWrite(message.value.eventTruckDiagnostics, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Event.Trailer.Location event_trailer_location = 7; */
        if (message.value.oneofKind === "eventTrailerLocation")
            Event_Trailer_Location.internalBinaryWrite(message.value.eventTrailerLocation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Event.Truck.Route event_truck_route = 8; */
        if (message.value.oneofKind === "eventTruckRoute")
            Event_Truck_Route.internalBinaryWrite(message.value.eventTruckRoute, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* Event.Truck.ManifestRoute event_manifest_truck_route = 9; */
        if (message.value.oneofKind === "eventManifestTruckRoute")
            Event_Truck_ManifestRoute.internalBinaryWrite(message.value.eventManifestTruckRoute, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* Event.Note event_note = 10; */
        if (message.value.oneofKind === "eventNote")
            Event_Note.internalBinaryWrite(message.value.eventNote, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* Event.Notification event_notification = 11; */
        if (message.value.oneofKind === "eventNotification")
            Event_Notification.internalBinaryWrite(message.value.eventNotification, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Event.Event
 */
export const Event_Event = new Event_Event$Type();
