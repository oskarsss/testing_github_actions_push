// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlement.cycle.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * SettlementCycleGet
 *
 * @generated from protobuf message SettlementCycleGetRequest
 */
export interface SettlementCycleGetRequest {
}
/**
 * @generated from protobuf message SettlementCycleGetReply
 */
export interface SettlementCycleGetReply {
    /**
     * @generated from protobuf field: repeated SettlementCycleGetReply.SettlementCycle settlement_cycles = 1;
     */
    settlementCycles: SettlementCycleGetReply_SettlementCycle[];
}
/**
 * @generated from protobuf message SettlementCycleGetReply.SettlementCycle
 */
export interface SettlementCycleGetReply_SettlementCycle {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: int64 period_weeks = 4;
     */
    periodWeeks: number;
    /**
     * @generated from protobuf field: int64 closing_day = 5;
     */
    closingDay: number;
    /**
     * @generated from protobuf field: string closing_time = 6;
     */
    closingTime: string;
    /**
     * @generated from protobuf field: int64 pay_date_days_after_closing = 7;
     */
    payDateDaysAfterClosing: number;
    /**
     * @generated from protobuf field: bool auto_create_periods = 8;
     */
    autoCreatePeriods: boolean;
    /**
     * @generated from protobuf field: bool auto_create_period_settlements = 9;
     */
    autoCreatePeriodSettlements: boolean;
    /**
     * @generated from protobuf field: bool default = 10;
     */
    default: boolean;
    /**
     * @generated from protobuf field: bool deleted = 11;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string updated_at = 12;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 13;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: repeated SettlementCycleGetReply.Driver drivers = 14;
     */
    drivers: SettlementCycleGetReply_Driver[];
    /**
     * @generated from protobuf field: int64 total = 15;
     */
    total: number;
    /**
     * @generated from protobuf field: int64 total_assigned = 16;
     */
    totalAssigned: number;
}
/**
 * @generated from protobuf message SettlementCycleGetReply.Driver
 */
export interface SettlementCycleGetReply_Driver {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string first_name = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 3;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 4;
     */
    selfieThumbUrl: string;
    /**
     * @generated from protobuf field: string settlement_cycle_id = 5;
     */
    settlementCycleId: string;
}
/**
 * SettlementCycleActivate
 *
 * @generated from protobuf message SettlementCycleActivateRequest
 */
export interface SettlementCycleActivateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
/**
 * @generated from protobuf message SettlementCycleActivateReply
 */
export interface SettlementCycleActivateReply {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
/**
 * SettlementCycleDeactivate
 *
 * @generated from protobuf message SettlementCycleDeactivateRequest
 */
export interface SettlementCycleDeactivateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
/**
 * @generated from protobuf message SettlementCycleDeactivateReply
 */
export interface SettlementCycleDeactivateReply {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
/**
 * SettlementCycleCreate
 *
 * @generated from protobuf message SettlementCycleCreateRequest
 */
export interface SettlementCycleCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 period_weeks = 2;
     */
    periodWeeks: number;
    /**
     * @generated from protobuf field: int64 closing_day = 3;
     */
    closingDay: number;
    /**
     * @generated from protobuf field: string closing_time = 4;
     */
    closingTime: string;
    /**
     * @generated from protobuf field: int64 pay_date_days_after_closing = 5;
     */
    payDateDaysAfterClosing: number;
    /**
     * @generated from protobuf field: bool auto_create_periods = 6;
     */
    autoCreatePeriods: boolean;
    /**
     * @generated from protobuf field: bool auto_create_period_settlements = 7;
     */
    autoCreatePeriodSettlements: boolean;
    /**
     * @generated from protobuf field: bool default = 8;
     */
    default: boolean;
    /**
     * @generated from protobuf field: optional string description = 9;
     */
    description?: string;
}
/**
 * @generated from protobuf message SettlementCycleCreateReply
 */
export interface SettlementCycleCreateReply {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
/**
 * SettlementCycleUpdate
 *
 * @generated from protobuf message SettlementCycleUpdateRequest
 */
export interface SettlementCycleUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 period_weeks = 3;
     */
    periodWeeks: number;
    /**
     * @generated from protobuf field: int64 closing_day = 4;
     */
    closingDay: number;
    /**
     * @generated from protobuf field: string closing_time = 5;
     */
    closingTime: string;
    /**
     * @generated from protobuf field: int64 pay_date_days_after_closing = 6;
     */
    payDateDaysAfterClosing: number;
    /**
     * @generated from protobuf field: bool auto_create_periods = 7;
     */
    autoCreatePeriods: boolean;
    /**
     * @generated from protobuf field: bool auto_create_period_settlements = 8;
     */
    autoCreatePeriodSettlements: boolean;
    /**
     * @generated from protobuf field: bool default = 9;
     */
    default: boolean;
    /**
     * @generated from protobuf field: optional string description = 10;
     */
    description?: string;
}
/**
 * @generated from protobuf message SettlementCycleUpdateReply
 */
export interface SettlementCycleUpdateReply {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleGetRequest$Type extends MessageType<SettlementCycleGetRequest> {
    constructor() {
        super("SettlementCycleGetRequest", []);
    }
    create(value?: PartialMessage<SettlementCycleGetRequest>): SettlementCycleGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleGetRequest): SettlementCycleGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementCycleGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleGetRequest
 */
export const SettlementCycleGetRequest = new SettlementCycleGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleGetReply$Type extends MessageType<SettlementCycleGetReply> {
    constructor() {
        super("SettlementCycleGetReply", [
            { no: 1, name: "settlement_cycles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementCycleGetReply_SettlementCycle }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleGetReply>): SettlementCycleGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementCycles = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleGetReply): SettlementCycleGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementCycleGetReply.SettlementCycle settlement_cycles */ 1:
                    message.settlementCycles.push(SettlementCycleGetReply_SettlementCycle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementCycleGetReply.SettlementCycle settlement_cycles = 1; */
        for (let i = 0; i < message.settlementCycles.length; i++)
            SettlementCycleGetReply_SettlementCycle.internalBinaryWrite(message.settlementCycles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleGetReply
 */
export const SettlementCycleGetReply = new SettlementCycleGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleGetReply_SettlementCycle$Type extends MessageType<SettlementCycleGetReply_SettlementCycle> {
    constructor() {
        super("SettlementCycleGetReply.SettlementCycle", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "period_weeks", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "closing_day", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "closing_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "pay_date_days_after_closing", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "auto_create_periods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "auto_create_period_settlements", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementCycleGetReply_Driver },
            { no: 15, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 16, name: "total_assigned", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleGetReply_SettlementCycle>): SettlementCycleGetReply_SettlementCycle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.name = "";
        message.description = "";
        message.periodWeeks = 0;
        message.closingDay = 0;
        message.closingTime = "";
        message.payDateDaysAfterClosing = 0;
        message.autoCreatePeriods = false;
        message.autoCreatePeriodSettlements = false;
        message.default = false;
        message.deleted = false;
        message.updatedAt = "";
        message.createdAt = "";
        message.drivers = [];
        message.total = 0;
        message.totalAssigned = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleGetReply_SettlementCycle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleGetReply_SettlementCycle): SettlementCycleGetReply_SettlementCycle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* int64 period_weeks */ 4:
                    message.periodWeeks = reader.int64().toNumber();
                    break;
                case /* int64 closing_day */ 5:
                    message.closingDay = reader.int64().toNumber();
                    break;
                case /* string closing_time */ 6:
                    message.closingTime = reader.string();
                    break;
                case /* int64 pay_date_days_after_closing */ 7:
                    message.payDateDaysAfterClosing = reader.int64().toNumber();
                    break;
                case /* bool auto_create_periods */ 8:
                    message.autoCreatePeriods = reader.bool();
                    break;
                case /* bool auto_create_period_settlements */ 9:
                    message.autoCreatePeriodSettlements = reader.bool();
                    break;
                case /* bool default */ 10:
                    message.default = reader.bool();
                    break;
                case /* bool deleted */ 11:
                    message.deleted = reader.bool();
                    break;
                case /* string updated_at */ 12:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 13:
                    message.createdAt = reader.string();
                    break;
                case /* repeated SettlementCycleGetReply.Driver drivers */ 14:
                    message.drivers.push(SettlementCycleGetReply_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total */ 15:
                    message.total = reader.int64().toNumber();
                    break;
                case /* int64 total_assigned */ 16:
                    message.totalAssigned = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleGetReply_SettlementCycle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* int64 period_weeks = 4; */
        if (message.periodWeeks !== 0)
            writer.tag(4, WireType.Varint).int64(message.periodWeeks);
        /* int64 closing_day = 5; */
        if (message.closingDay !== 0)
            writer.tag(5, WireType.Varint).int64(message.closingDay);
        /* string closing_time = 6; */
        if (message.closingTime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.closingTime);
        /* int64 pay_date_days_after_closing = 7; */
        if (message.payDateDaysAfterClosing !== 0)
            writer.tag(7, WireType.Varint).int64(message.payDateDaysAfterClosing);
        /* bool auto_create_periods = 8; */
        if (message.autoCreatePeriods !== false)
            writer.tag(8, WireType.Varint).bool(message.autoCreatePeriods);
        /* bool auto_create_period_settlements = 9; */
        if (message.autoCreatePeriodSettlements !== false)
            writer.tag(9, WireType.Varint).bool(message.autoCreatePeriodSettlements);
        /* bool default = 10; */
        if (message.default !== false)
            writer.tag(10, WireType.Varint).bool(message.default);
        /* bool deleted = 11; */
        if (message.deleted !== false)
            writer.tag(11, WireType.Varint).bool(message.deleted);
        /* string updated_at = 12; */
        if (message.updatedAt !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 13; */
        if (message.createdAt !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.createdAt);
        /* repeated SettlementCycleGetReply.Driver drivers = 14; */
        for (let i = 0; i < message.drivers.length; i++)
            SettlementCycleGetReply_Driver.internalBinaryWrite(message.drivers[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 15; */
        if (message.total !== 0)
            writer.tag(15, WireType.Varint).int64(message.total);
        /* int64 total_assigned = 16; */
        if (message.totalAssigned !== 0)
            writer.tag(16, WireType.Varint).int64(message.totalAssigned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleGetReply.SettlementCycle
 */
export const SettlementCycleGetReply_SettlementCycle = new SettlementCycleGetReply_SettlementCycle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleGetReply_Driver$Type extends MessageType<SettlementCycleGetReply_Driver> {
    constructor() {
        super("SettlementCycleGetReply.Driver", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "settlement_cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleGetReply_Driver>): SettlementCycleGetReply_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.firstName = "";
        message.lastName = "";
        message.selfieThumbUrl = "";
        message.settlementCycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleGetReply_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleGetReply_Driver): SettlementCycleGetReply_Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string first_name */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 3:
                    message.lastName = reader.string();
                    break;
                case /* string selfie_thumb_url */ 4:
                    message.selfieThumbUrl = reader.string();
                    break;
                case /* string settlement_cycle_id */ 5:
                    message.settlementCycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleGetReply_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string first_name = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 3; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* string selfie_thumb_url = 4; */
        if (message.selfieThumbUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.selfieThumbUrl);
        /* string settlement_cycle_id = 5; */
        if (message.settlementCycleId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.settlementCycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleGetReply.Driver
 */
export const SettlementCycleGetReply_Driver = new SettlementCycleGetReply_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleActivateRequest$Type extends MessageType<SettlementCycleActivateRequest> {
    constructor() {
        super("SettlementCycleActivateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleActivateRequest>): SettlementCycleActivateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleActivateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleActivateRequest): SettlementCycleActivateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleActivateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleActivateRequest
 */
export const SettlementCycleActivateRequest = new SettlementCycleActivateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleActivateReply$Type extends MessageType<SettlementCycleActivateReply> {
    constructor() {
        super("SettlementCycleActivateReply", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleActivateReply>): SettlementCycleActivateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleActivateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleActivateReply): SettlementCycleActivateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleActivateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleActivateReply
 */
export const SettlementCycleActivateReply = new SettlementCycleActivateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleDeactivateRequest$Type extends MessageType<SettlementCycleDeactivateRequest> {
    constructor() {
        super("SettlementCycleDeactivateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleDeactivateRequest>): SettlementCycleDeactivateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleDeactivateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleDeactivateRequest): SettlementCycleDeactivateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleDeactivateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleDeactivateRequest
 */
export const SettlementCycleDeactivateRequest = new SettlementCycleDeactivateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleDeactivateReply$Type extends MessageType<SettlementCycleDeactivateReply> {
    constructor() {
        super("SettlementCycleDeactivateReply", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleDeactivateReply>): SettlementCycleDeactivateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleDeactivateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleDeactivateReply): SettlementCycleDeactivateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleDeactivateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleDeactivateReply
 */
export const SettlementCycleDeactivateReply = new SettlementCycleDeactivateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleCreateRequest$Type extends MessageType<SettlementCycleCreateRequest> {
    constructor() {
        super("SettlementCycleCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_weeks", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "closing_day", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "closing_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pay_date_days_after_closing", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "auto_create_periods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "auto_create_period_settlements", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleCreateRequest>): SettlementCycleCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.periodWeeks = 0;
        message.closingDay = 0;
        message.closingTime = "";
        message.payDateDaysAfterClosing = 0;
        message.autoCreatePeriods = false;
        message.autoCreatePeriodSettlements = false;
        message.default = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleCreateRequest): SettlementCycleCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 period_weeks */ 2:
                    message.periodWeeks = reader.int64().toNumber();
                    break;
                case /* int64 closing_day */ 3:
                    message.closingDay = reader.int64().toNumber();
                    break;
                case /* string closing_time */ 4:
                    message.closingTime = reader.string();
                    break;
                case /* int64 pay_date_days_after_closing */ 5:
                    message.payDateDaysAfterClosing = reader.int64().toNumber();
                    break;
                case /* bool auto_create_periods */ 6:
                    message.autoCreatePeriods = reader.bool();
                    break;
                case /* bool auto_create_period_settlements */ 7:
                    message.autoCreatePeriodSettlements = reader.bool();
                    break;
                case /* bool default */ 8:
                    message.default = reader.bool();
                    break;
                case /* optional string description */ 9:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 period_weeks = 2; */
        if (message.periodWeeks !== 0)
            writer.tag(2, WireType.Varint).int64(message.periodWeeks);
        /* int64 closing_day = 3; */
        if (message.closingDay !== 0)
            writer.tag(3, WireType.Varint).int64(message.closingDay);
        /* string closing_time = 4; */
        if (message.closingTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.closingTime);
        /* int64 pay_date_days_after_closing = 5; */
        if (message.payDateDaysAfterClosing !== 0)
            writer.tag(5, WireType.Varint).int64(message.payDateDaysAfterClosing);
        /* bool auto_create_periods = 6; */
        if (message.autoCreatePeriods !== false)
            writer.tag(6, WireType.Varint).bool(message.autoCreatePeriods);
        /* bool auto_create_period_settlements = 7; */
        if (message.autoCreatePeriodSettlements !== false)
            writer.tag(7, WireType.Varint).bool(message.autoCreatePeriodSettlements);
        /* bool default = 8; */
        if (message.default !== false)
            writer.tag(8, WireType.Varint).bool(message.default);
        /* optional string description = 9; */
        if (message.description !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleCreateRequest
 */
export const SettlementCycleCreateRequest = new SettlementCycleCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleCreateReply$Type extends MessageType<SettlementCycleCreateReply> {
    constructor() {
        super("SettlementCycleCreateReply", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleCreateReply>): SettlementCycleCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleCreateReply): SettlementCycleCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleCreateReply
 */
export const SettlementCycleCreateReply = new SettlementCycleCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleUpdateRequest$Type extends MessageType<SettlementCycleUpdateRequest> {
    constructor() {
        super("SettlementCycleUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "period_weeks", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "closing_day", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "closing_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "pay_date_days_after_closing", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "auto_create_periods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "auto_create_period_settlements", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleUpdateRequest>): SettlementCycleUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.name = "";
        message.periodWeeks = 0;
        message.closingDay = 0;
        message.closingTime = "";
        message.payDateDaysAfterClosing = 0;
        message.autoCreatePeriods = false;
        message.autoCreatePeriodSettlements = false;
        message.default = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleUpdateRequest): SettlementCycleUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 period_weeks */ 3:
                    message.periodWeeks = reader.int64().toNumber();
                    break;
                case /* int64 closing_day */ 4:
                    message.closingDay = reader.int64().toNumber();
                    break;
                case /* string closing_time */ 5:
                    message.closingTime = reader.string();
                    break;
                case /* int64 pay_date_days_after_closing */ 6:
                    message.payDateDaysAfterClosing = reader.int64().toNumber();
                    break;
                case /* bool auto_create_periods */ 7:
                    message.autoCreatePeriods = reader.bool();
                    break;
                case /* bool auto_create_period_settlements */ 8:
                    message.autoCreatePeriodSettlements = reader.bool();
                    break;
                case /* bool default */ 9:
                    message.default = reader.bool();
                    break;
                case /* optional string description */ 10:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 period_weeks = 3; */
        if (message.periodWeeks !== 0)
            writer.tag(3, WireType.Varint).int64(message.periodWeeks);
        /* int64 closing_day = 4; */
        if (message.closingDay !== 0)
            writer.tag(4, WireType.Varint).int64(message.closingDay);
        /* string closing_time = 5; */
        if (message.closingTime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.closingTime);
        /* int64 pay_date_days_after_closing = 6; */
        if (message.payDateDaysAfterClosing !== 0)
            writer.tag(6, WireType.Varint).int64(message.payDateDaysAfterClosing);
        /* bool auto_create_periods = 7; */
        if (message.autoCreatePeriods !== false)
            writer.tag(7, WireType.Varint).bool(message.autoCreatePeriods);
        /* bool auto_create_period_settlements = 8; */
        if (message.autoCreatePeriodSettlements !== false)
            writer.tag(8, WireType.Varint).bool(message.autoCreatePeriodSettlements);
        /* bool default = 9; */
        if (message.default !== false)
            writer.tag(9, WireType.Varint).bool(message.default);
        /* optional string description = 10; */
        if (message.description !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleUpdateRequest
 */
export const SettlementCycleUpdateRequest = new SettlementCycleUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCycleUpdateReply$Type extends MessageType<SettlementCycleUpdateReply> {
    constructor() {
        super("SettlementCycleUpdateReply", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCycleUpdateReply>): SettlementCycleUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCycleUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCycleUpdateReply): SettlementCycleUpdateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCycleUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCycleUpdateReply
 */
export const SettlementCycleUpdateReply = new SettlementCycleUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service SettlementCycleService
 */
export const SettlementCycleService = new ServiceType("SettlementCycleService", [
    { name: "SettlementCycleGet", options: {}, I: SettlementCycleGetRequest, O: SettlementCycleGetReply },
    { name: "SettlementCycleActivate", options: {}, I: SettlementCycleActivateRequest, O: SettlementCycleActivateReply },
    { name: "SettlementCycleDeactivate", options: {}, I: SettlementCycleDeactivateRequest, O: SettlementCycleDeactivateReply },
    { name: "SettlementCycleCreate", options: {}, I: SettlementCycleCreateRequest, O: SettlementCycleCreateReply },
    { name: "SettlementCycleUpdate", options: {}, I: SettlementCycleUpdateRequest, O: SettlementCycleUpdateReply }
]);
