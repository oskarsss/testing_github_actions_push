// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/fuel.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FuelService } from "./fuel";
import type { UnassignTruckReply } from "./fuel";
import type { UnassignTruckRequest } from "./fuel";
import type { AssignTruckReply } from "./fuel";
import type { AssignTruckRequest } from "./fuel";
import type { FindByReferenceIDReply } from "./fuel";
import type { FindByReferenceIDRequest } from "./fuel";
import type { DeleteFuelTransactionReply } from "./fuel";
import type { DeleteFuelTransactionRequest } from "./fuel";
import type { FuelUpdateVerifiedReply } from "./fuel";
import type { FuelUpdateVerifiedRequest } from "./fuel";
import type { UpdateFuelTransactionReply } from "./fuel";
import type { UpdateFuelTransactionRequest } from "./fuel";
import type { FuelStatsGetReply } from "./fuel";
import type { FuelStatsGetRequest } from "./fuel";
import type { FuelGetReply } from "./fuel";
import type { FuelGetRequest } from "./fuel";
import type { FuelRetrieveReply } from "./fuel";
import type { FuelRetrieveRequest } from "./fuel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateFuelTransactionResponse } from "./fuel";
import type { CreateFuelTransactionRequest } from "./fuel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service FuelService
 */
export interface IFuelServiceClient {
    /**
     * @generated from protobuf rpc: CreateFuelTransaction(CreateFuelTransactionRequest) returns (CreateFuelTransactionResponse);
     */
    createFuelTransaction(input: CreateFuelTransactionRequest, options?: RpcOptions): UnaryCall<CreateFuelTransactionRequest, CreateFuelTransactionResponse>;
    /**
     * @generated from protobuf rpc: RetrieveFuelTransaction(FuelRetrieveRequest) returns (FuelRetrieveReply);
     */
    retrieveFuelTransaction(input: FuelRetrieveRequest, options?: RpcOptions): UnaryCall<FuelRetrieveRequest, FuelRetrieveReply>;
    /**
     * @generated from protobuf rpc: FuelGet(FuelGetRequest) returns (FuelGetReply);
     */
    fuelGet(input: FuelGetRequest, options?: RpcOptions): UnaryCall<FuelGetRequest, FuelGetReply>;
    /**
     * @generated from protobuf rpc: FuelStatsGet(FuelStatsGetRequest) returns (FuelStatsGetReply);
     */
    fuelStatsGet(input: FuelStatsGetRequest, options?: RpcOptions): UnaryCall<FuelStatsGetRequest, FuelStatsGetReply>;
    /**
     * @generated from protobuf rpc: UpdateFuelTransaction(UpdateFuelTransactionRequest) returns (UpdateFuelTransactionReply);
     */
    updateFuelTransaction(input: UpdateFuelTransactionRequest, options?: RpcOptions): UnaryCall<UpdateFuelTransactionRequest, UpdateFuelTransactionReply>;
    /**
     * @generated from protobuf rpc: UpdateVerified(FuelUpdateVerifiedRequest) returns (FuelUpdateVerifiedReply);
     */
    updateVerified(input: FuelUpdateVerifiedRequest, options?: RpcOptions): UnaryCall<FuelUpdateVerifiedRequest, FuelUpdateVerifiedReply>;
    /**
     * @generated from protobuf rpc: DeleteFuelTransaction(DeleteFuelTransactionRequest) returns (DeleteFuelTransactionReply);
     */
    deleteFuelTransaction(input: DeleteFuelTransactionRequest, options?: RpcOptions): UnaryCall<DeleteFuelTransactionRequest, DeleteFuelTransactionReply>;
    /**
     * @generated from protobuf rpc: FindByReferenceID(FindByReferenceIDRequest) returns (FindByReferenceIDReply);
     */
    findByReferenceID(input: FindByReferenceIDRequest, options?: RpcOptions): UnaryCall<FindByReferenceIDRequest, FindByReferenceIDReply>;
    /**
     * @generated from protobuf rpc: AssignTruck(AssignTruckRequest) returns (AssignTruckReply);
     */
    assignTruck(input: AssignTruckRequest, options?: RpcOptions): UnaryCall<AssignTruckRequest, AssignTruckReply>;
    /**
     * @generated from protobuf rpc: UnassignTruck(UnassignTruckRequest) returns (UnassignTruckReply);
     */
    unassignTruck(input: UnassignTruckRequest, options?: RpcOptions): UnaryCall<UnassignTruckRequest, UnassignTruckReply>;
}
/**
 * @generated from protobuf service FuelService
 */
export class FuelServiceClient implements IFuelServiceClient, ServiceInfo {
    typeName = FuelService.typeName;
    methods = FuelService.methods;
    options = FuelService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateFuelTransaction(CreateFuelTransactionRequest) returns (CreateFuelTransactionResponse);
     */
    createFuelTransaction(input: CreateFuelTransactionRequest, options?: RpcOptions): UnaryCall<CreateFuelTransactionRequest, CreateFuelTransactionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateFuelTransactionRequest, CreateFuelTransactionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RetrieveFuelTransaction(FuelRetrieveRequest) returns (FuelRetrieveReply);
     */
    retrieveFuelTransaction(input: FuelRetrieveRequest, options?: RpcOptions): UnaryCall<FuelRetrieveRequest, FuelRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<FuelRetrieveRequest, FuelRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FuelGet(FuelGetRequest) returns (FuelGetReply);
     */
    fuelGet(input: FuelGetRequest, options?: RpcOptions): UnaryCall<FuelGetRequest, FuelGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<FuelGetRequest, FuelGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FuelStatsGet(FuelStatsGetRequest) returns (FuelStatsGetReply);
     */
    fuelStatsGet(input: FuelStatsGetRequest, options?: RpcOptions): UnaryCall<FuelStatsGetRequest, FuelStatsGetReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<FuelStatsGetRequest, FuelStatsGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateFuelTransaction(UpdateFuelTransactionRequest) returns (UpdateFuelTransactionReply);
     */
    updateFuelTransaction(input: UpdateFuelTransactionRequest, options?: RpcOptions): UnaryCall<UpdateFuelTransactionRequest, UpdateFuelTransactionReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateFuelTransactionRequest, UpdateFuelTransactionReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateVerified(FuelUpdateVerifiedRequest) returns (FuelUpdateVerifiedReply);
     */
    updateVerified(input: FuelUpdateVerifiedRequest, options?: RpcOptions): UnaryCall<FuelUpdateVerifiedRequest, FuelUpdateVerifiedReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<FuelUpdateVerifiedRequest, FuelUpdateVerifiedReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteFuelTransaction(DeleteFuelTransactionRequest) returns (DeleteFuelTransactionReply);
     */
    deleteFuelTransaction(input: DeleteFuelTransactionRequest, options?: RpcOptions): UnaryCall<DeleteFuelTransactionRequest, DeleteFuelTransactionReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteFuelTransactionRequest, DeleteFuelTransactionReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FindByReferenceID(FindByReferenceIDRequest) returns (FindByReferenceIDReply);
     */
    findByReferenceID(input: FindByReferenceIDRequest, options?: RpcOptions): UnaryCall<FindByReferenceIDRequest, FindByReferenceIDReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindByReferenceIDRequest, FindByReferenceIDReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AssignTruck(AssignTruckRequest) returns (AssignTruckReply);
     */
    assignTruck(input: AssignTruckRequest, options?: RpcOptions): UnaryCall<AssignTruckRequest, AssignTruckReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<AssignTruckRequest, AssignTruckReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnassignTruck(UnassignTruckRequest) returns (UnassignTruckReply);
     */
    unassignTruck(input: UnassignTruckRequest, options?: RpcOptions): UnaryCall<UnassignTruckRequest, UnassignTruckReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnassignTruckRequest, UnassignTruckReply>("unary", this._transport, method, opt, input);
    }
}
