// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/revenue_types.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RevenueTypesService } from "./revenue_types";
import type { RevenueTypeItemDeleteReply } from "./revenue_types";
import type { RevenueTypeItemDeleteRequest } from "./revenue_types";
import type { RevenueTypeItemUpdateReply } from "./revenue_types";
import type { RevenueTypeItemUpdateRequest } from "./revenue_types";
import type { RevenueTypeItemCreateReply } from "./revenue_types";
import type { RevenueTypeItemCreateRequest } from "./revenue_types";
import type { RevenueTypeDeactivateReply } from "./revenue_types";
import type { RevenueTypeDeactivateRequest } from "./revenue_types";
import type { RevenueTypeActivateReply } from "./revenue_types";
import type { RevenueTypeActivateRequest } from "./revenue_types";
import type { RevenueTypeUpdateReply } from "./revenue_types";
import type { RevenueTypeUpdateRequest } from "./revenue_types";
import type { RevenueTypeCreateReply } from "./revenue_types";
import type { RevenueTypeCreateRequest } from "./revenue_types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RevenueTypesGetReply } from "./revenue_types";
import type { RevenueTypesGetRequest } from "./revenue_types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service RevenueTypesService
 */
export interface IRevenueTypesServiceClient {
    /**
     * @generated from protobuf rpc: RevenueTypesGet(RevenueTypesGetRequest) returns (RevenueTypesGetReply);
     */
    revenueTypesGet(input: RevenueTypesGetRequest, options?: RpcOptions): UnaryCall<RevenueTypesGetRequest, RevenueTypesGetReply>;
    /**
     * @generated from protobuf rpc: RevenueTypeCreate(RevenueTypeCreateRequest) returns (RevenueTypeCreateReply);
     */
    revenueTypeCreate(input: RevenueTypeCreateRequest, options?: RpcOptions): UnaryCall<RevenueTypeCreateRequest, RevenueTypeCreateReply>;
    /**
     * @generated from protobuf rpc: RevenueTypeUpdate(RevenueTypeUpdateRequest) returns (RevenueTypeUpdateReply);
     */
    revenueTypeUpdate(input: RevenueTypeUpdateRequest, options?: RpcOptions): UnaryCall<RevenueTypeUpdateRequest, RevenueTypeUpdateReply>;
    /**
     * @generated from protobuf rpc: RevenueTypeActivate(RevenueTypeActivateRequest) returns (RevenueTypeActivateReply);
     */
    revenueTypeActivate(input: RevenueTypeActivateRequest, options?: RpcOptions): UnaryCall<RevenueTypeActivateRequest, RevenueTypeActivateReply>;
    /**
     * @generated from protobuf rpc: RevenueTypeDeactivate(RevenueTypeDeactivateRequest) returns (RevenueTypeDeactivateReply);
     */
    revenueTypeDeactivate(input: RevenueTypeDeactivateRequest, options?: RpcOptions): UnaryCall<RevenueTypeDeactivateRequest, RevenueTypeDeactivateReply>;
    /**
     * Items
     *
     * @generated from protobuf rpc: RevenueTypeItemCreate(RevenueTypeItemCreateRequest) returns (RevenueTypeItemCreateReply);
     */
    revenueTypeItemCreate(input: RevenueTypeItemCreateRequest, options?: RpcOptions): UnaryCall<RevenueTypeItemCreateRequest, RevenueTypeItemCreateReply>;
    /**
     * @generated from protobuf rpc: RevenueTypeItemUpdate(RevenueTypeItemUpdateRequest) returns (RevenueTypeItemUpdateReply);
     */
    revenueTypeItemUpdate(input: RevenueTypeItemUpdateRequest, options?: RpcOptions): UnaryCall<RevenueTypeItemUpdateRequest, RevenueTypeItemUpdateReply>;
    /**
     * @generated from protobuf rpc: RevenueTypeItemDelete(RevenueTypeItemDeleteRequest) returns (RevenueTypeItemDeleteReply);
     */
    revenueTypeItemDelete(input: RevenueTypeItemDeleteRequest, options?: RpcOptions): UnaryCall<RevenueTypeItemDeleteRequest, RevenueTypeItemDeleteReply>;
}
/**
 * @generated from protobuf service RevenueTypesService
 */
export class RevenueTypesServiceClient implements IRevenueTypesServiceClient, ServiceInfo {
    typeName = RevenueTypesService.typeName;
    methods = RevenueTypesService.methods;
    options = RevenueTypesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RevenueTypesGet(RevenueTypesGetRequest) returns (RevenueTypesGetReply);
     */
    revenueTypesGet(input: RevenueTypesGetRequest, options?: RpcOptions): UnaryCall<RevenueTypesGetRequest, RevenueTypesGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypesGetRequest, RevenueTypesGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevenueTypeCreate(RevenueTypeCreateRequest) returns (RevenueTypeCreateReply);
     */
    revenueTypeCreate(input: RevenueTypeCreateRequest, options?: RpcOptions): UnaryCall<RevenueTypeCreateRequest, RevenueTypeCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeCreateRequest, RevenueTypeCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevenueTypeUpdate(RevenueTypeUpdateRequest) returns (RevenueTypeUpdateReply);
     */
    revenueTypeUpdate(input: RevenueTypeUpdateRequest, options?: RpcOptions): UnaryCall<RevenueTypeUpdateRequest, RevenueTypeUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeUpdateRequest, RevenueTypeUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevenueTypeActivate(RevenueTypeActivateRequest) returns (RevenueTypeActivateReply);
     */
    revenueTypeActivate(input: RevenueTypeActivateRequest, options?: RpcOptions): UnaryCall<RevenueTypeActivateRequest, RevenueTypeActivateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeActivateRequest, RevenueTypeActivateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevenueTypeDeactivate(RevenueTypeDeactivateRequest) returns (RevenueTypeDeactivateReply);
     */
    revenueTypeDeactivate(input: RevenueTypeDeactivateRequest, options?: RpcOptions): UnaryCall<RevenueTypeDeactivateRequest, RevenueTypeDeactivateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeDeactivateRequest, RevenueTypeDeactivateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * Items
     *
     * @generated from protobuf rpc: RevenueTypeItemCreate(RevenueTypeItemCreateRequest) returns (RevenueTypeItemCreateReply);
     */
    revenueTypeItemCreate(input: RevenueTypeItemCreateRequest, options?: RpcOptions): UnaryCall<RevenueTypeItemCreateRequest, RevenueTypeItemCreateReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeItemCreateRequest, RevenueTypeItemCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevenueTypeItemUpdate(RevenueTypeItemUpdateRequest) returns (RevenueTypeItemUpdateReply);
     */
    revenueTypeItemUpdate(input: RevenueTypeItemUpdateRequest, options?: RpcOptions): UnaryCall<RevenueTypeItemUpdateRequest, RevenueTypeItemUpdateReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeItemUpdateRequest, RevenueTypeItemUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevenueTypeItemDelete(RevenueTypeItemDeleteRequest) returns (RevenueTypeItemDeleteReply);
     */
    revenueTypeItemDelete(input: RevenueTypeItemDeleteRequest, options?: RpcOptions): UnaryCall<RevenueTypeItemDeleteRequest, RevenueTypeItemDeleteReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevenueTypeItemDeleteRequest, RevenueTypeItemDeleteReply>("unary", this._transport, method, opt, input);
    }
}
