// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/commodities.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CommodityModel } from "./models/model_commodity";
import { MeasurementUnit } from "./models/measurement_unit";
import { WeightUnit } from "./models/weight_unit";
import { CommodityModel_PackagingUnit } from "./models/model_commodity";
/**
 * @generated from protobuf message CommodityCreateRequest
 */
export interface CommodityCreateRequest {
    /**
     * @generated from protobuf field: CommodityModel.PackagingUnit packaging_unit = 1;
     */
    packagingUnit: CommodityModel_PackagingUnit;
    /**
     * @generated from protobuf field: int64 quantity = 2;
     */
    quantity: number;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: WeightUnit weight_unit = 4;
     */
    weightUnit: WeightUnit;
    /**
     * @generated from protobuf field: double weight = 5;
     */
    weight: number;
    /**
     * @generated from protobuf field: MeasurementUnit measurement_unit = 6;
     */
    measurementUnit: MeasurementUnit;
    /**
     * @generated from protobuf field: optional double length = 7;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional double width = 8;
     */
    width?: number;
    /**
     * @generated from protobuf field: optional double height = 9;
     */
    height?: number;
    /**
     * @generated from protobuf field: optional string load_id = 10;
     */
    loadId?: string;
}
/**
 * @generated from protobuf message CommodityCreateReply
 */
export interface CommodityCreateReply {
    /**
     * @generated from protobuf field: string commodity_id = 1;
     */
    commodityId: string;
}
/**
 * @generated from protobuf message CommodityRetrieveRequest
 */
export interface CommodityRetrieveRequest {
    /**
     * @generated from protobuf field: string commodity_id = 1;
     */
    commodityId: string;
}
/**
 * @generated from protobuf message CommodityRetrieveReply
 */
export interface CommodityRetrieveReply {
    /**
     * @generated from protobuf field: CommodityModel commodity = 1;
     */
    commodity?: CommodityModel;
}
/**
 * @generated from protobuf message CommodityUpdateRequest
 */
export interface CommodityUpdateRequest {
    /**
     * @generated from protobuf field: string commodity_id = 1;
     */
    commodityId: string;
    /**
     * @generated from protobuf field: CommodityModel.PackagingUnit packaging_unit = 2;
     */
    packagingUnit: CommodityModel_PackagingUnit;
    /**
     * @generated from protobuf field: int64 quantity = 3;
     */
    quantity: number;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: WeightUnit weight_unit = 5;
     */
    weightUnit: WeightUnit;
    /**
     * @generated from protobuf field: double weight = 6;
     */
    weight: number;
    /**
     * @generated from protobuf field: MeasurementUnit measurement_unit = 7;
     */
    measurementUnit: MeasurementUnit;
    /**
     * @generated from protobuf field: optional double length = 8;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional double width = 9;
     */
    width?: number;
    /**
     * @generated from protobuf field: optional double height = 10;
     */
    height?: number;
}
/**
 * @generated from protobuf message CommodityUpdateReply
 */
export interface CommodityUpdateReply {
}
/**
 * @generated from protobuf message CommodityDeleteRequest
 */
export interface CommodityDeleteRequest {
    /**
     * @generated from protobuf field: string commodity_id = 1;
     */
    commodityId: string;
}
/**
 * @generated from protobuf message CommodityDeleteReply
 */
export interface CommodityDeleteReply {
}
/**
 * @generated from protobuf message CommodityGetForLoadRequest
 */
export interface CommodityGetForLoadRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message CommodityGetForLoadReply
 */
export interface CommodityGetForLoadReply {
    /**
     * @generated from protobuf field: repeated CommodityModel commodities = 1;
     */
    commodities: CommodityModel[];
    /**
     * @generated from protobuf field: map<string, string> loadStopIDToCommodityID = 2;
     */
    loadStopIDToCommodityID: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class CommodityCreateRequest$Type extends MessageType<CommodityCreateRequest> {
    constructor() {
        super("CommodityCreateRequest", [
            { no: 1, name: "packaging_unit", kind: "enum", T: () => ["CommodityModel.PackagingUnit", CommodityModel_PackagingUnit, "PACKAGING_UNIT_"] },
            { no: 2, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "weight_unit", kind: "enum", T: () => ["WeightUnit", WeightUnit, "WEIGHT_UNIT_"] },
            { no: 5, name: "weight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "measurement_unit", kind: "enum", T: () => ["MeasurementUnit", MeasurementUnit, "MEASUREMENT_UNIT_"] },
            { no: 7, name: "length", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "width", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "height", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "load_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommodityCreateRequest>): CommodityCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packagingUnit = 0;
        message.quantity = 0;
        message.description = "";
        message.weightUnit = 0;
        message.weight = 0;
        message.measurementUnit = 0;
        if (value !== undefined)
            reflectionMergePartial<CommodityCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityCreateRequest): CommodityCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CommodityModel.PackagingUnit packaging_unit */ 1:
                    message.packagingUnit = reader.int32();
                    break;
                case /* int64 quantity */ 2:
                    message.quantity = reader.int64().toNumber();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* WeightUnit weight_unit */ 4:
                    message.weightUnit = reader.int32();
                    break;
                case /* double weight */ 5:
                    message.weight = reader.double();
                    break;
                case /* MeasurementUnit measurement_unit */ 6:
                    message.measurementUnit = reader.int32();
                    break;
                case /* optional double length */ 7:
                    message.length = reader.double();
                    break;
                case /* optional double width */ 8:
                    message.width = reader.double();
                    break;
                case /* optional double height */ 9:
                    message.height = reader.double();
                    break;
                case /* optional string load_id */ 10:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CommodityModel.PackagingUnit packaging_unit = 1; */
        if (message.packagingUnit !== 0)
            writer.tag(1, WireType.Varint).int32(message.packagingUnit);
        /* int64 quantity = 2; */
        if (message.quantity !== 0)
            writer.tag(2, WireType.Varint).int64(message.quantity);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* WeightUnit weight_unit = 4; */
        if (message.weightUnit !== 0)
            writer.tag(4, WireType.Varint).int32(message.weightUnit);
        /* double weight = 5; */
        if (message.weight !== 0)
            writer.tag(5, WireType.Bit64).double(message.weight);
        /* MeasurementUnit measurement_unit = 6; */
        if (message.measurementUnit !== 0)
            writer.tag(6, WireType.Varint).int32(message.measurementUnit);
        /* optional double length = 7; */
        if (message.length !== undefined)
            writer.tag(7, WireType.Bit64).double(message.length);
        /* optional double width = 8; */
        if (message.width !== undefined)
            writer.tag(8, WireType.Bit64).double(message.width);
        /* optional double height = 9; */
        if (message.height !== undefined)
            writer.tag(9, WireType.Bit64).double(message.height);
        /* optional string load_id = 10; */
        if (message.loadId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityCreateRequest
 */
export const CommodityCreateRequest = new CommodityCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityCreateReply$Type extends MessageType<CommodityCreateReply> {
    constructor() {
        super("CommodityCreateReply", [
            { no: 1, name: "commodity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommodityCreateReply>): CommodityCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commodityId = "";
        if (value !== undefined)
            reflectionMergePartial<CommodityCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityCreateReply): CommodityCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string commodity_id */ 1:
                    message.commodityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string commodity_id = 1; */
        if (message.commodityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.commodityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityCreateReply
 */
export const CommodityCreateReply = new CommodityCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityRetrieveRequest$Type extends MessageType<CommodityRetrieveRequest> {
    constructor() {
        super("CommodityRetrieveRequest", [
            { no: 1, name: "commodity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommodityRetrieveRequest>): CommodityRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commodityId = "";
        if (value !== undefined)
            reflectionMergePartial<CommodityRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityRetrieveRequest): CommodityRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string commodity_id */ 1:
                    message.commodityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string commodity_id = 1; */
        if (message.commodityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.commodityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityRetrieveRequest
 */
export const CommodityRetrieveRequest = new CommodityRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityRetrieveReply$Type extends MessageType<CommodityRetrieveReply> {
    constructor() {
        super("CommodityRetrieveReply", [
            { no: 1, name: "commodity", kind: "message", T: () => CommodityModel }
        ]);
    }
    create(value?: PartialMessage<CommodityRetrieveReply>): CommodityRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CommodityRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityRetrieveReply): CommodityRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CommodityModel commodity */ 1:
                    message.commodity = CommodityModel.internalBinaryRead(reader, reader.uint32(), options, message.commodity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CommodityModel commodity = 1; */
        if (message.commodity)
            CommodityModel.internalBinaryWrite(message.commodity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityRetrieveReply
 */
export const CommodityRetrieveReply = new CommodityRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityUpdateRequest$Type extends MessageType<CommodityUpdateRequest> {
    constructor() {
        super("CommodityUpdateRequest", [
            { no: 1, name: "commodity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "packaging_unit", kind: "enum", T: () => ["CommodityModel.PackagingUnit", CommodityModel_PackagingUnit, "PACKAGING_UNIT_"] },
            { no: 3, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "weight_unit", kind: "enum", T: () => ["WeightUnit", WeightUnit, "WEIGHT_UNIT_"] },
            { no: 6, name: "weight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "measurement_unit", kind: "enum", T: () => ["MeasurementUnit", MeasurementUnit, "MEASUREMENT_UNIT_"] },
            { no: 8, name: "length", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "width", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "height", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<CommodityUpdateRequest>): CommodityUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commodityId = "";
        message.packagingUnit = 0;
        message.quantity = 0;
        message.description = "";
        message.weightUnit = 0;
        message.weight = 0;
        message.measurementUnit = 0;
        if (value !== undefined)
            reflectionMergePartial<CommodityUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityUpdateRequest): CommodityUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string commodity_id */ 1:
                    message.commodityId = reader.string();
                    break;
                case /* CommodityModel.PackagingUnit packaging_unit */ 2:
                    message.packagingUnit = reader.int32();
                    break;
                case /* int64 quantity */ 3:
                    message.quantity = reader.int64().toNumber();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* WeightUnit weight_unit */ 5:
                    message.weightUnit = reader.int32();
                    break;
                case /* double weight */ 6:
                    message.weight = reader.double();
                    break;
                case /* MeasurementUnit measurement_unit */ 7:
                    message.measurementUnit = reader.int32();
                    break;
                case /* optional double length */ 8:
                    message.length = reader.double();
                    break;
                case /* optional double width */ 9:
                    message.width = reader.double();
                    break;
                case /* optional double height */ 10:
                    message.height = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string commodity_id = 1; */
        if (message.commodityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.commodityId);
        /* CommodityModel.PackagingUnit packaging_unit = 2; */
        if (message.packagingUnit !== 0)
            writer.tag(2, WireType.Varint).int32(message.packagingUnit);
        /* int64 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).int64(message.quantity);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* WeightUnit weight_unit = 5; */
        if (message.weightUnit !== 0)
            writer.tag(5, WireType.Varint).int32(message.weightUnit);
        /* double weight = 6; */
        if (message.weight !== 0)
            writer.tag(6, WireType.Bit64).double(message.weight);
        /* MeasurementUnit measurement_unit = 7; */
        if (message.measurementUnit !== 0)
            writer.tag(7, WireType.Varint).int32(message.measurementUnit);
        /* optional double length = 8; */
        if (message.length !== undefined)
            writer.tag(8, WireType.Bit64).double(message.length);
        /* optional double width = 9; */
        if (message.width !== undefined)
            writer.tag(9, WireType.Bit64).double(message.width);
        /* optional double height = 10; */
        if (message.height !== undefined)
            writer.tag(10, WireType.Bit64).double(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityUpdateRequest
 */
export const CommodityUpdateRequest = new CommodityUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityUpdateReply$Type extends MessageType<CommodityUpdateReply> {
    constructor() {
        super("CommodityUpdateReply", []);
    }
    create(value?: PartialMessage<CommodityUpdateReply>): CommodityUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CommodityUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityUpdateReply): CommodityUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommodityUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityUpdateReply
 */
export const CommodityUpdateReply = new CommodityUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityDeleteRequest$Type extends MessageType<CommodityDeleteRequest> {
    constructor() {
        super("CommodityDeleteRequest", [
            { no: 1, name: "commodity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommodityDeleteRequest>): CommodityDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commodityId = "";
        if (value !== undefined)
            reflectionMergePartial<CommodityDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityDeleteRequest): CommodityDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string commodity_id */ 1:
                    message.commodityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string commodity_id = 1; */
        if (message.commodityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.commodityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityDeleteRequest
 */
export const CommodityDeleteRequest = new CommodityDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityDeleteReply$Type extends MessageType<CommodityDeleteReply> {
    constructor() {
        super("CommodityDeleteReply", []);
    }
    create(value?: PartialMessage<CommodityDeleteReply>): CommodityDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CommodityDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityDeleteReply): CommodityDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommodityDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityDeleteReply
 */
export const CommodityDeleteReply = new CommodityDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityGetForLoadRequest$Type extends MessageType<CommodityGetForLoadRequest> {
    constructor() {
        super("CommodityGetForLoadRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommodityGetForLoadRequest>): CommodityGetForLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<CommodityGetForLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityGetForLoadRequest): CommodityGetForLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommodityGetForLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityGetForLoadRequest
 */
export const CommodityGetForLoadRequest = new CommodityGetForLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommodityGetForLoadReply$Type extends MessageType<CommodityGetForLoadReply> {
    constructor() {
        super("CommodityGetForLoadReply", [
            { no: 1, name: "commodities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommodityModel },
            { no: 2, name: "loadStopIDToCommodityID", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CommodityGetForLoadReply>): CommodityGetForLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commodities = [];
        message.loadStopIDToCommodityID = {};
        if (value !== undefined)
            reflectionMergePartial<CommodityGetForLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommodityGetForLoadReply): CommodityGetForLoadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CommodityModel commodities */ 1:
                    message.commodities.push(CommodityModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, string> loadStopIDToCommodityID */ 2:
                    this.binaryReadMap2(message.loadStopIDToCommodityID, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CommodityGetForLoadReply["loadStopIDToCommodityID"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CommodityGetForLoadReply["loadStopIDToCommodityID"] | undefined, val: CommodityGetForLoadReply["loadStopIDToCommodityID"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field CommodityGetForLoadReply.loadStopIDToCommodityID");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CommodityGetForLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CommodityModel commodities = 1; */
        for (let i = 0; i < message.commodities.length; i++)
            CommodityModel.internalBinaryWrite(message.commodities[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> loadStopIDToCommodityID = 2; */
        for (let k of globalThis.Object.keys(message.loadStopIDToCommodityID))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.loadStopIDToCommodityID[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CommodityGetForLoadReply
 */
export const CommodityGetForLoadReply = new CommodityGetForLoadReply$Type();
/**
 * @generated ServiceType for protobuf service CommoditiesService
 */
export const CommoditiesService = new ServiceType("CommoditiesService", [
    { name: "CommodityCreate", options: {}, I: CommodityCreateRequest, O: CommodityCreateReply },
    { name: "CommodityRetrieve", options: {}, I: CommodityRetrieveRequest, O: CommodityRetrieveReply },
    { name: "CommodityUpdate", options: {}, I: CommodityUpdateRequest, O: CommodityUpdateReply },
    { name: "CommodityDelete", options: {}, I: CommodityDeleteRequest, O: CommodityDeleteReply },
    { name: "CommodityGetForLoad", options: {}, I: CommodityGetForLoadRequest, O: CommodityGetForLoadReply }
]);
