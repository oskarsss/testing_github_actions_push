// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/brokers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BrokersService } from "./brokers";
import type { InviteBrokerUserReply } from "./brokers";
import type { InviteBrokerUserRequest } from "./brokers";
import type { DeleteBrokerUserReply } from "./brokers";
import type { DeleteBrokerUserRequest } from "./brokers";
import type { UpdateBrokerUserReply } from "./brokers";
import type { UpdateBrokerUserRequest } from "./brokers";
import type { CreateBrokerUserReply } from "./brokers";
import type { CreateBrokerUserRequest } from "./brokers";
import type { GetBrokerUsersReply } from "./brokers";
import type { GetBrokerUsersRequest } from "./brokers";
import type { BrokerRetrieveReply } from "./brokers";
import type { BrokerRetrieveRequest } from "./brokers";
import type { BrokerUpdateReply } from "./brokers";
import type { BrokerUpdateRequest } from "./brokers";
import type { BrokerGetReply } from "./brokers";
import type { BrokerGetRequest } from "./brokers";
import type { BrokerDeleteReply } from "./brokers";
import type { BrokerDeleteRequest } from "./brokers";
import type { BrokerCreateReply } from "./brokers";
import type { BrokerCreateRequest } from "./brokers";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetFMCSABrokersReply } from "./brokers";
import type { GetFMCSABrokersRequest } from "./brokers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service BrokersService
 */
export interface IBrokersServiceClient {
    /**
     * @generated from protobuf rpc: GetFMCSABrokers(GetFMCSABrokersRequest) returns (GetFMCSABrokersReply);
     */
    getFMCSABrokers(input: GetFMCSABrokersRequest, options?: RpcOptions): UnaryCall<GetFMCSABrokersRequest, GetFMCSABrokersReply>;
    /**
     * @generated from protobuf rpc: BrokerCreate(BrokerCreateRequest) returns (BrokerCreateReply);
     */
    brokerCreate(input: BrokerCreateRequest, options?: RpcOptions): UnaryCall<BrokerCreateRequest, BrokerCreateReply>;
    /**
     * @generated from protobuf rpc: BrokerDelete(BrokerDeleteRequest) returns (BrokerDeleteReply);
     */
    brokerDelete(input: BrokerDeleteRequest, options?: RpcOptions): UnaryCall<BrokerDeleteRequest, BrokerDeleteReply>;
    /**
     * @generated from protobuf rpc: BrokerGet(BrokerGetRequest) returns (BrokerGetReply);
     */
    brokerGet(input: BrokerGetRequest, options?: RpcOptions): UnaryCall<BrokerGetRequest, BrokerGetReply>;
    /**
     * @generated from protobuf rpc: BrokerUpdate(BrokerUpdateRequest) returns (BrokerUpdateReply);
     */
    brokerUpdate(input: BrokerUpdateRequest, options?: RpcOptions): UnaryCall<BrokerUpdateRequest, BrokerUpdateReply>;
    /**
     * @generated from protobuf rpc: BrokerRetrieve(BrokerRetrieveRequest) returns (BrokerRetrieveReply);
     */
    brokerRetrieve(input: BrokerRetrieveRequest, options?: RpcOptions): UnaryCall<BrokerRetrieveRequest, BrokerRetrieveReply>;
    /**
     * Broker Users
     *
     * @generated from protobuf rpc: GetBrokerUsers(GetBrokerUsersRequest) returns (GetBrokerUsersReply);
     */
    getBrokerUsers(input: GetBrokerUsersRequest, options?: RpcOptions): UnaryCall<GetBrokerUsersRequest, GetBrokerUsersReply>;
    /**
     * @generated from protobuf rpc: CreateBrokerUser(CreateBrokerUserRequest) returns (CreateBrokerUserReply);
     */
    createBrokerUser(input: CreateBrokerUserRequest, options?: RpcOptions): UnaryCall<CreateBrokerUserRequest, CreateBrokerUserReply>;
    /**
     * @generated from protobuf rpc: UpdateBrokerUser(UpdateBrokerUserRequest) returns (UpdateBrokerUserReply);
     */
    updateBrokerUser(input: UpdateBrokerUserRequest, options?: RpcOptions): UnaryCall<UpdateBrokerUserRequest, UpdateBrokerUserReply>;
    /**
     * @generated from protobuf rpc: DeleteBrokerUser(DeleteBrokerUserRequest) returns (DeleteBrokerUserReply);
     */
    deleteBrokerUser(input: DeleteBrokerUserRequest, options?: RpcOptions): UnaryCall<DeleteBrokerUserRequest, DeleteBrokerUserReply>;
    /**
     * @generated from protobuf rpc: InviteBrokerUser(InviteBrokerUserRequest) returns (InviteBrokerUserReply);
     */
    inviteBrokerUser(input: InviteBrokerUserRequest, options?: RpcOptions): UnaryCall<InviteBrokerUserRequest, InviteBrokerUserReply>;
}
/**
 * @generated from protobuf service BrokersService
 */
export class BrokersServiceClient implements IBrokersServiceClient, ServiceInfo {
    typeName = BrokersService.typeName;
    methods = BrokersService.methods;
    options = BrokersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetFMCSABrokers(GetFMCSABrokersRequest) returns (GetFMCSABrokersReply);
     */
    getFMCSABrokers(input: GetFMCSABrokersRequest, options?: RpcOptions): UnaryCall<GetFMCSABrokersRequest, GetFMCSABrokersReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFMCSABrokersRequest, GetFMCSABrokersReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BrokerCreate(BrokerCreateRequest) returns (BrokerCreateReply);
     */
    brokerCreate(input: BrokerCreateRequest, options?: RpcOptions): UnaryCall<BrokerCreateRequest, BrokerCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BrokerCreateRequest, BrokerCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BrokerDelete(BrokerDeleteRequest) returns (BrokerDeleteReply);
     */
    brokerDelete(input: BrokerDeleteRequest, options?: RpcOptions): UnaryCall<BrokerDeleteRequest, BrokerDeleteReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<BrokerDeleteRequest, BrokerDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BrokerGet(BrokerGetRequest) returns (BrokerGetReply);
     */
    brokerGet(input: BrokerGetRequest, options?: RpcOptions): UnaryCall<BrokerGetRequest, BrokerGetReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<BrokerGetRequest, BrokerGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BrokerUpdate(BrokerUpdateRequest) returns (BrokerUpdateReply);
     */
    brokerUpdate(input: BrokerUpdateRequest, options?: RpcOptions): UnaryCall<BrokerUpdateRequest, BrokerUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<BrokerUpdateRequest, BrokerUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BrokerRetrieve(BrokerRetrieveRequest) returns (BrokerRetrieveReply);
     */
    brokerRetrieve(input: BrokerRetrieveRequest, options?: RpcOptions): UnaryCall<BrokerRetrieveRequest, BrokerRetrieveReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<BrokerRetrieveRequest, BrokerRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * Broker Users
     *
     * @generated from protobuf rpc: GetBrokerUsers(GetBrokerUsersRequest) returns (GetBrokerUsersReply);
     */
    getBrokerUsers(input: GetBrokerUsersRequest, options?: RpcOptions): UnaryCall<GetBrokerUsersRequest, GetBrokerUsersReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBrokerUsersRequest, GetBrokerUsersReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateBrokerUser(CreateBrokerUserRequest) returns (CreateBrokerUserReply);
     */
    createBrokerUser(input: CreateBrokerUserRequest, options?: RpcOptions): UnaryCall<CreateBrokerUserRequest, CreateBrokerUserReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateBrokerUserRequest, CreateBrokerUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateBrokerUser(UpdateBrokerUserRequest) returns (UpdateBrokerUserReply);
     */
    updateBrokerUser(input: UpdateBrokerUserRequest, options?: RpcOptions): UnaryCall<UpdateBrokerUserRequest, UpdateBrokerUserReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateBrokerUserRequest, UpdateBrokerUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteBrokerUser(DeleteBrokerUserRequest) returns (DeleteBrokerUserReply);
     */
    deleteBrokerUser(input: DeleteBrokerUserRequest, options?: RpcOptions): UnaryCall<DeleteBrokerUserRequest, DeleteBrokerUserReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteBrokerUserRequest, DeleteBrokerUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteBrokerUser(InviteBrokerUserRequest) returns (InviteBrokerUserReply);
     */
    inviteBrokerUser(input: InviteBrokerUserRequest, options?: RpcOptions): UnaryCall<InviteBrokerUserRequest, InviteBrokerUserReply> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteBrokerUserRequest, InviteBrokerUserReply>("unary", this._transport, method, opt, input);
    }
}
