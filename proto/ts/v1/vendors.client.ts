// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/vendors.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VendorsService } from "./vendors";
import type { VendorDeleteReply } from "./vendors";
import type { VendorDeleteRequest } from "./vendors";
import type { VendorUpdateReply } from "./vendors";
import type { VendorUpdateRequest } from "./vendors";
import type { VendorGetReply } from "./vendors";
import type { VendorGetRequest } from "./vendors";
import type { VendorRetrieveReply } from "./vendors";
import type { VendorRetrieveRequest } from "./vendors";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { VendorCreateReply } from "./vendors";
import type { VendorCreateRequest } from "./vendors";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service VendorsService
 */
export interface IVendorsServiceClient {
    /**
     * @generated from protobuf rpc: VendorCreate(VendorCreateRequest) returns (VendorCreateReply);
     */
    vendorCreate(input: VendorCreateRequest, options?: RpcOptions): UnaryCall<VendorCreateRequest, VendorCreateReply>;
    /**
     * @generated from protobuf rpc: VendorRetrieve(VendorRetrieveRequest) returns (VendorRetrieveReply);
     */
    vendorRetrieve(input: VendorRetrieveRequest, options?: RpcOptions): UnaryCall<VendorRetrieveRequest, VendorRetrieveReply>;
    /**
     * @generated from protobuf rpc: VendorGet(VendorGetRequest) returns (VendorGetReply);
     */
    vendorGet(input: VendorGetRequest, options?: RpcOptions): UnaryCall<VendorGetRequest, VendorGetReply>;
    /**
     * @generated from protobuf rpc: VendorUpdate(VendorUpdateRequest) returns (VendorUpdateReply);
     */
    vendorUpdate(input: VendorUpdateRequest, options?: RpcOptions): UnaryCall<VendorUpdateRequest, VendorUpdateReply>;
    /**
     * @generated from protobuf rpc: VendorDelete(VendorDeleteRequest) returns (VendorDeleteReply);
     */
    vendorDelete(input: VendorDeleteRequest, options?: RpcOptions): UnaryCall<VendorDeleteRequest, VendorDeleteReply>;
}
/**
 * @generated from protobuf service VendorsService
 */
export class VendorsServiceClient implements IVendorsServiceClient, ServiceInfo {
    typeName = VendorsService.typeName;
    methods = VendorsService.methods;
    options = VendorsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: VendorCreate(VendorCreateRequest) returns (VendorCreateReply);
     */
    vendorCreate(input: VendorCreateRequest, options?: RpcOptions): UnaryCall<VendorCreateRequest, VendorCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<VendorCreateRequest, VendorCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VendorRetrieve(VendorRetrieveRequest) returns (VendorRetrieveReply);
     */
    vendorRetrieve(input: VendorRetrieveRequest, options?: RpcOptions): UnaryCall<VendorRetrieveRequest, VendorRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<VendorRetrieveRequest, VendorRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VendorGet(VendorGetRequest) returns (VendorGetReply);
     */
    vendorGet(input: VendorGetRequest, options?: RpcOptions): UnaryCall<VendorGetRequest, VendorGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<VendorGetRequest, VendorGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VendorUpdate(VendorUpdateRequest) returns (VendorUpdateReply);
     */
    vendorUpdate(input: VendorUpdateRequest, options?: RpcOptions): UnaryCall<VendorUpdateRequest, VendorUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<VendorUpdateRequest, VendorUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VendorDelete(VendorDeleteRequest) returns (VendorDeleteReply);
     */
    vendorDelete(input: VendorDeleteRequest, options?: RpcOptions): UnaryCall<VendorDeleteRequest, VendorDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<VendorDeleteRequest, VendorDeleteReply>("unary", this._transport, method, opt, input);
    }
}
