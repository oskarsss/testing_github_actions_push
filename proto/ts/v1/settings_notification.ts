// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settings_notification.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { NotificationModel_NotificationSetting } from "./models/model_notification";
/**
 * @generated from protobuf message SettingsNotificationUpdate
 */
export interface SettingsNotificationUpdate {
    /**
     * @generated from protobuf field: string notification_type = 1;
     */
    notificationType: string;
    /**
     * @generated from protobuf field: bool enabled = 2;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: bool enabled_sms = 3;
     */
    enabledSms: boolean;
    /**
     * @generated from protobuf field: bool enabled_email = 4;
     */
    enabledEmail: boolean;
    /**
     * @generated from protobuf field: bool enabled_web_push = 5;
     */
    enabledWebPush: boolean;
}
/**
 * @generated from protobuf message SettingsNotificationGetRequest
 */
export interface SettingsNotificationGetRequest {
}
/**
 * @generated from protobuf message SettingsNotificationGetReply
 */
export interface SettingsNotificationGetReply {
    /**
     * @generated from protobuf field: repeated NotificationModel.NotificationSetting settings = 1;
     */
    settings: NotificationModel_NotificationSetting[];
}
/**
 * @generated from protobuf message SettingsNotificationUserGetRequest
 */
export interface SettingsNotificationUserGetRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message SettingsNotificationUserGetReply
 */
export interface SettingsNotificationUserGetReply {
    /**
     * @generated from protobuf field: repeated NotificationModel.NotificationSetting settings = 1;
     */
    settings: NotificationModel_NotificationSetting[];
}
/**
 * @generated from protobuf message SettingsNotificationUserUpdateRequest
 */
export interface SettingsNotificationUserUpdateRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: repeated SettingsNotificationUpdate settings = 2;
     */
    settings: SettingsNotificationUpdate[];
}
/**
 * @generated from protobuf message SettingsNotificationUserUpdateReply
 */
export interface SettingsNotificationUserUpdateReply {
}
/**
 * @generated from protobuf message SettingsNotificationCustomerUserGetRequest
 */
export interface SettingsNotificationCustomerUserGetRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message SettingsNotificationCustomerUserGetReply
 */
export interface SettingsNotificationCustomerUserGetReply {
    /**
     * @generated from protobuf field: repeated NotificationModel.NotificationSetting settings = 1;
     */
    settings: NotificationModel_NotificationSetting[];
}
/**
 * @generated from protobuf message SettingsNotificationCustomerUserUpdateRequest
 */
export interface SettingsNotificationCustomerUserUpdateRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: repeated SettingsNotificationUpdate settings = 3;
     */
    settings: SettingsNotificationUpdate[];
}
/**
 * @generated from protobuf message SettingsNotificationCustomerUserUpdateReply
 */
export interface SettingsNotificationCustomerUserUpdateReply {
}
/**
 * @generated from protobuf message SettingsNotificationBrokerUserGetRequest
 */
export interface SettingsNotificationBrokerUserGetRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message SettingsNotificationBrokerUserGetReply
 */
export interface SettingsNotificationBrokerUserGetReply {
    /**
     * @generated from protobuf field: repeated NotificationModel.NotificationSetting settings = 1;
     */
    settings: NotificationModel_NotificationSetting[];
}
/**
 * @generated from protobuf message SettingsNotificationBrokerUserUpdateRequest
 */
export interface SettingsNotificationBrokerUserUpdateRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: repeated SettingsNotificationUpdate settings = 3;
     */
    settings: SettingsNotificationUpdate[];
}
/**
 * @generated from protobuf message SettingsNotificationBrokerUserUpdateReply
 */
export interface SettingsNotificationBrokerUserUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationUpdate$Type extends MessageType<SettingsNotificationUpdate> {
    constructor() {
        super("SettingsNotificationUpdate", [
            { no: 1, name: "notification_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "enabled_sms", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "enabled_email", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "enabled_web_push", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationUpdate>): SettingsNotificationUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationType = "";
        message.enabled = false;
        message.enabledSms = false;
        message.enabledEmail = false;
        message.enabledWebPush = false;
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationUpdate): SettingsNotificationUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string notification_type */ 1:
                    message.notificationType = reader.string();
                    break;
                case /* bool enabled */ 2:
                    message.enabled = reader.bool();
                    break;
                case /* bool enabled_sms */ 3:
                    message.enabledSms = reader.bool();
                    break;
                case /* bool enabled_email */ 4:
                    message.enabledEmail = reader.bool();
                    break;
                case /* bool enabled_web_push */ 5:
                    message.enabledWebPush = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string notification_type = 1; */
        if (message.notificationType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notificationType);
        /* bool enabled = 2; */
        if (message.enabled !== false)
            writer.tag(2, WireType.Varint).bool(message.enabled);
        /* bool enabled_sms = 3; */
        if (message.enabledSms !== false)
            writer.tag(3, WireType.Varint).bool(message.enabledSms);
        /* bool enabled_email = 4; */
        if (message.enabledEmail !== false)
            writer.tag(4, WireType.Varint).bool(message.enabledEmail);
        /* bool enabled_web_push = 5; */
        if (message.enabledWebPush !== false)
            writer.tag(5, WireType.Varint).bool(message.enabledWebPush);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationUpdate
 */
export const SettingsNotificationUpdate = new SettingsNotificationUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationGetRequest$Type extends MessageType<SettingsNotificationGetRequest> {
    constructor() {
        super("SettingsNotificationGetRequest", []);
    }
    create(value?: PartialMessage<SettingsNotificationGetRequest>): SettingsNotificationGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationGetRequest): SettingsNotificationGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettingsNotificationGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationGetRequest
 */
export const SettingsNotificationGetRequest = new SettingsNotificationGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationGetReply$Type extends MessageType<SettingsNotificationGetReply> {
    constructor() {
        super("SettingsNotificationGetReply", [
            { no: 1, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationModel_NotificationSetting }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationGetReply>): SettingsNotificationGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationGetReply): SettingsNotificationGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NotificationModel.NotificationSetting settings */ 1:
                    message.settings.push(NotificationModel_NotificationSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NotificationModel.NotificationSetting settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            NotificationModel_NotificationSetting.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationGetReply
 */
export const SettingsNotificationGetReply = new SettingsNotificationGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationUserGetRequest$Type extends MessageType<SettingsNotificationUserGetRequest> {
    constructor() {
        super("SettingsNotificationUserGetRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationUserGetRequest>): SettingsNotificationUserGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationUserGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationUserGetRequest): SettingsNotificationUserGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationUserGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationUserGetRequest
 */
export const SettingsNotificationUserGetRequest = new SettingsNotificationUserGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationUserGetReply$Type extends MessageType<SettingsNotificationUserGetReply> {
    constructor() {
        super("SettingsNotificationUserGetReply", [
            { no: 1, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationModel_NotificationSetting }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationUserGetReply>): SettingsNotificationUserGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationUserGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationUserGetReply): SettingsNotificationUserGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NotificationModel.NotificationSetting settings */ 1:
                    message.settings.push(NotificationModel_NotificationSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationUserGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NotificationModel.NotificationSetting settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            NotificationModel_NotificationSetting.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationUserGetReply
 */
export const SettingsNotificationUserGetReply = new SettingsNotificationUserGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationUserUpdateRequest$Type extends MessageType<SettingsNotificationUserUpdateRequest> {
    constructor() {
        super("SettingsNotificationUserUpdateRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettingsNotificationUpdate }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationUserUpdateRequest>): SettingsNotificationUserUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationUserUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationUserUpdateRequest): SettingsNotificationUserUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* repeated SettingsNotificationUpdate settings */ 2:
                    message.settings.push(SettingsNotificationUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationUserUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* repeated SettingsNotificationUpdate settings = 2; */
        for (let i = 0; i < message.settings.length; i++)
            SettingsNotificationUpdate.internalBinaryWrite(message.settings[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationUserUpdateRequest
 */
export const SettingsNotificationUserUpdateRequest = new SettingsNotificationUserUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationUserUpdateReply$Type extends MessageType<SettingsNotificationUserUpdateReply> {
    constructor() {
        super("SettingsNotificationUserUpdateReply", []);
    }
    create(value?: PartialMessage<SettingsNotificationUserUpdateReply>): SettingsNotificationUserUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationUserUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationUserUpdateReply): SettingsNotificationUserUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettingsNotificationUserUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationUserUpdateReply
 */
export const SettingsNotificationUserUpdateReply = new SettingsNotificationUserUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationCustomerUserGetRequest$Type extends MessageType<SettingsNotificationCustomerUserGetRequest> {
    constructor() {
        super("SettingsNotificationCustomerUserGetRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationCustomerUserGetRequest>): SettingsNotificationCustomerUserGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationCustomerUserGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationCustomerUserGetRequest): SettingsNotificationCustomerUserGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationCustomerUserGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationCustomerUserGetRequest
 */
export const SettingsNotificationCustomerUserGetRequest = new SettingsNotificationCustomerUserGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationCustomerUserGetReply$Type extends MessageType<SettingsNotificationCustomerUserGetReply> {
    constructor() {
        super("SettingsNotificationCustomerUserGetReply", [
            { no: 1, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationModel_NotificationSetting }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationCustomerUserGetReply>): SettingsNotificationCustomerUserGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationCustomerUserGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationCustomerUserGetReply): SettingsNotificationCustomerUserGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NotificationModel.NotificationSetting settings */ 1:
                    message.settings.push(NotificationModel_NotificationSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationCustomerUserGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NotificationModel.NotificationSetting settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            NotificationModel_NotificationSetting.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationCustomerUserGetReply
 */
export const SettingsNotificationCustomerUserGetReply = new SettingsNotificationCustomerUserGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationCustomerUserUpdateRequest$Type extends MessageType<SettingsNotificationCustomerUserUpdateRequest> {
    constructor() {
        super("SettingsNotificationCustomerUserUpdateRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettingsNotificationUpdate }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationCustomerUserUpdateRequest>): SettingsNotificationCustomerUserUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.userId = "";
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationCustomerUserUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationCustomerUserUpdateRequest): SettingsNotificationCustomerUserUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* repeated SettingsNotificationUpdate settings */ 3:
                    message.settings.push(SettingsNotificationUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationCustomerUserUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* repeated SettingsNotificationUpdate settings = 3; */
        for (let i = 0; i < message.settings.length; i++)
            SettingsNotificationUpdate.internalBinaryWrite(message.settings[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationCustomerUserUpdateRequest
 */
export const SettingsNotificationCustomerUserUpdateRequest = new SettingsNotificationCustomerUserUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationCustomerUserUpdateReply$Type extends MessageType<SettingsNotificationCustomerUserUpdateReply> {
    constructor() {
        super("SettingsNotificationCustomerUserUpdateReply", []);
    }
    create(value?: PartialMessage<SettingsNotificationCustomerUserUpdateReply>): SettingsNotificationCustomerUserUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationCustomerUserUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationCustomerUserUpdateReply): SettingsNotificationCustomerUserUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettingsNotificationCustomerUserUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationCustomerUserUpdateReply
 */
export const SettingsNotificationCustomerUserUpdateReply = new SettingsNotificationCustomerUserUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationBrokerUserGetRequest$Type extends MessageType<SettingsNotificationBrokerUserGetRequest> {
    constructor() {
        super("SettingsNotificationBrokerUserGetRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationBrokerUserGetRequest>): SettingsNotificationBrokerUserGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationBrokerUserGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationBrokerUserGetRequest): SettingsNotificationBrokerUserGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationBrokerUserGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationBrokerUserGetRequest
 */
export const SettingsNotificationBrokerUserGetRequest = new SettingsNotificationBrokerUserGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationBrokerUserGetReply$Type extends MessageType<SettingsNotificationBrokerUserGetReply> {
    constructor() {
        super("SettingsNotificationBrokerUserGetReply", [
            { no: 1, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationModel_NotificationSetting }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationBrokerUserGetReply>): SettingsNotificationBrokerUserGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationBrokerUserGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationBrokerUserGetReply): SettingsNotificationBrokerUserGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NotificationModel.NotificationSetting settings */ 1:
                    message.settings.push(NotificationModel_NotificationSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationBrokerUserGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NotificationModel.NotificationSetting settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            NotificationModel_NotificationSetting.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationBrokerUserGetReply
 */
export const SettingsNotificationBrokerUserGetReply = new SettingsNotificationBrokerUserGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationBrokerUserUpdateRequest$Type extends MessageType<SettingsNotificationBrokerUserUpdateRequest> {
    constructor() {
        super("SettingsNotificationBrokerUserUpdateRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettingsNotificationUpdate }
        ]);
    }
    create(value?: PartialMessage<SettingsNotificationBrokerUserUpdateRequest>): SettingsNotificationBrokerUserUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.userId = "";
        message.settings = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationBrokerUserUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationBrokerUserUpdateRequest): SettingsNotificationBrokerUserUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* repeated SettingsNotificationUpdate settings */ 3:
                    message.settings.push(SettingsNotificationUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNotificationBrokerUserUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* repeated SettingsNotificationUpdate settings = 3; */
        for (let i = 0; i < message.settings.length; i++)
            SettingsNotificationUpdate.internalBinaryWrite(message.settings[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationBrokerUserUpdateRequest
 */
export const SettingsNotificationBrokerUserUpdateRequest = new SettingsNotificationBrokerUserUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNotificationBrokerUserUpdateReply$Type extends MessageType<SettingsNotificationBrokerUserUpdateReply> {
    constructor() {
        super("SettingsNotificationBrokerUserUpdateReply", []);
    }
    create(value?: PartialMessage<SettingsNotificationBrokerUserUpdateReply>): SettingsNotificationBrokerUserUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettingsNotificationBrokerUserUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNotificationBrokerUserUpdateReply): SettingsNotificationBrokerUserUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettingsNotificationBrokerUserUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettingsNotificationBrokerUserUpdateReply
 */
export const SettingsNotificationBrokerUserUpdateReply = new SettingsNotificationBrokerUserUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service SettingsNotificationService
 */
export const SettingsNotificationService = new ServiceType("SettingsNotificationService", [
    { name: "SettingsNotificationGet", options: {}, I: SettingsNotificationGetRequest, O: SettingsNotificationGetReply },
    { name: "SettingsNotificationCustomerUserGet", options: {}, I: SettingsNotificationCustomerUserGetRequest, O: SettingsNotificationCustomerUserGetReply },
    { name: "SettingsNotificationBrokerUserGet", options: {}, I: SettingsNotificationBrokerUserGetRequest, O: SettingsNotificationBrokerUserGetReply },
    { name: "SettingsNotificationUserUpdate", options: {}, I: SettingsNotificationUserUpdateRequest, O: SettingsNotificationUserUpdateReply },
    { name: "SettingsNotificationCustomerUserUpdate", options: {}, I: SettingsNotificationCustomerUserUpdateRequest, O: SettingsNotificationCustomerUserUpdateReply },
    { name: "SettingsNotificationBrokerUserUpdate", options: {}, I: SettingsNotificationBrokerUserUpdateRequest, O: SettingsNotificationBrokerUserUpdateReply }
]);
