// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/notification.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { NotificationModel_Notification } from "./models/model_notification";
/**
 * @generated from protobuf message NotificationGetRequest
 */
export interface NotificationGetRequest {
}
/**
 * @generated from protobuf message NotificationGetReply
 */
export interface NotificationGetReply {
    /**
     * @generated from protobuf field: repeated NotificationModel.Notification notifications = 1;
     */
    notifications: NotificationModel_Notification[];
}
/**
 * @generated from protobuf message NotificationMarkAsReadRequest
 */
export interface NotificationMarkAsReadRequest {
    /**
     * @generated from protobuf field: repeated string notification_ids = 1;
     */
    notificationIds: string[];
}
/**
 * @generated from protobuf message NotificationMarkAsReadReply
 */
export interface NotificationMarkAsReadReply {
}
/**
 * @generated from protobuf message NotificationRetrieveRequest
 */
export interface NotificationRetrieveRequest {
    /**
     * @generated from protobuf field: string notification_id = 1;
     */
    notificationId: string;
}
/**
 * @generated from protobuf message NotificationRetrieveReply
 */
export interface NotificationRetrieveReply {
    /**
     * @generated from protobuf field: NotificationModel.Notification notification = 1;
     */
    notification?: NotificationModel_Notification;
}
// @generated message type with reflection information, may provide speed optimized methods
class NotificationGetRequest$Type extends MessageType<NotificationGetRequest> {
    constructor() {
        super("NotificationGetRequest", []);
    }
    create(value?: PartialMessage<NotificationGetRequest>): NotificationGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationGetRequest): NotificationGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NotificationGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationGetRequest
 */
export const NotificationGetRequest = new NotificationGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationGetReply$Type extends MessageType<NotificationGetReply> {
    constructor() {
        super("NotificationGetReply", [
            { no: 1, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationModel_Notification }
        ]);
    }
    create(value?: PartialMessage<NotificationGetReply>): NotificationGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notifications = [];
        if (value !== undefined)
            reflectionMergePartial<NotificationGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationGetReply): NotificationGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NotificationModel.Notification notifications */ 1:
                    message.notifications.push(NotificationModel_Notification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NotificationModel.Notification notifications = 1; */
        for (let i = 0; i < message.notifications.length; i++)
            NotificationModel_Notification.internalBinaryWrite(message.notifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationGetReply
 */
export const NotificationGetReply = new NotificationGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationMarkAsReadRequest$Type extends MessageType<NotificationMarkAsReadRequest> {
    constructor() {
        super("NotificationMarkAsReadRequest", [
            { no: 1, name: "notification_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationMarkAsReadRequest>): NotificationMarkAsReadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationIds = [];
        if (value !== undefined)
            reflectionMergePartial<NotificationMarkAsReadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationMarkAsReadRequest): NotificationMarkAsReadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string notification_ids */ 1:
                    message.notificationIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationMarkAsReadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string notification_ids = 1; */
        for (let i = 0; i < message.notificationIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.notificationIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationMarkAsReadRequest
 */
export const NotificationMarkAsReadRequest = new NotificationMarkAsReadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationMarkAsReadReply$Type extends MessageType<NotificationMarkAsReadReply> {
    constructor() {
        super("NotificationMarkAsReadReply", []);
    }
    create(value?: PartialMessage<NotificationMarkAsReadReply>): NotificationMarkAsReadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationMarkAsReadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationMarkAsReadReply): NotificationMarkAsReadReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NotificationMarkAsReadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationMarkAsReadReply
 */
export const NotificationMarkAsReadReply = new NotificationMarkAsReadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationRetrieveRequest$Type extends MessageType<NotificationRetrieveRequest> {
    constructor() {
        super("NotificationRetrieveRequest", [
            { no: 1, name: "notification_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationRetrieveRequest>): NotificationRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationId = "";
        if (value !== undefined)
            reflectionMergePartial<NotificationRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationRetrieveRequest): NotificationRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string notification_id */ 1:
                    message.notificationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string notification_id = 1; */
        if (message.notificationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationRetrieveRequest
 */
export const NotificationRetrieveRequest = new NotificationRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationRetrieveReply$Type extends MessageType<NotificationRetrieveReply> {
    constructor() {
        super("NotificationRetrieveReply", [
            { no: 1, name: "notification", kind: "message", T: () => NotificationModel_Notification }
        ]);
    }
    create(value?: PartialMessage<NotificationRetrieveReply>): NotificationRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationRetrieveReply): NotificationRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* NotificationModel.Notification notification */ 1:
                    message.notification = NotificationModel_Notification.internalBinaryRead(reader, reader.uint32(), options, message.notification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* NotificationModel.Notification notification = 1; */
        if (message.notification)
            NotificationModel_Notification.internalBinaryWrite(message.notification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationRetrieveReply
 */
export const NotificationRetrieveReply = new NotificationRetrieveReply$Type();
/**
 * @generated ServiceType for protobuf service NotificationService
 */
export const NotificationService = new ServiceType("NotificationService", [
    { name: "NotificationGet", options: {}, I: NotificationGetRequest, O: NotificationGetReply },
    { name: "NotificationMarkAsRead", options: {}, I: NotificationMarkAsReadRequest, O: NotificationMarkAsReadReply },
    { name: "NotificationRetrieve", options: {}, I: NotificationRetrieveRequest, O: NotificationRetrieveReply }
]);
