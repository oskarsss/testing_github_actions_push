// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_driver_pay_item_categories.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Settlements_RevenueType_Item_Type } from "./models/model_settlement";
/**
 * LoadDriverPayItemCategoryRestore
 *
 * @generated from protobuf message LoadDriverPayItemCategoryRestoreRequest
 */
export interface LoadDriverPayItemCategoryRestoreRequest {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoryRestoreReply
 */
export interface LoadDriverPayItemCategoryRestoreReply {
}
/**
 * LoadDriverPayItemCategoryAdd
 *
 * @generated from protobuf message LoadDriverPayItemCategoryAddRequest
 */
export interface LoadDriverPayItemCategoryAddRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoryAddReply
 */
export interface LoadDriverPayItemCategoryAddReply {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
}
/**
 * LoadDriverPayItemCategoryUpdate
 *
 * @generated from protobuf message LoadDriverPayItemCategoryUpdateRequest
 */
export interface LoadDriverPayItemCategoryUpdateRequest {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoryUpdateReply
 */
export interface LoadDriverPayItemCategoryUpdateReply {
}
/**
 * LoadDriverPayItemCategoryDelete
 *
 * @generated from protobuf message LoadDriverPayItemCategoryDeleteRequest
 */
export interface LoadDriverPayItemCategoryDeleteRequest {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoryDeleteReply
 */
export interface LoadDriverPayItemCategoryDeleteReply {
}
/**
 * LoadDriverPayItemCategoryRetrieve
 *
 * @generated from protobuf message LoadDriverPayItemCategoryRetrieveRequest
 */
export interface LoadDriverPayItemCategoryRetrieveRequest {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoryRetrieveReply
 */
export interface LoadDriverPayItemCategoryRetrieveReply {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: Settlements.RevenueType.Item.Type revenue_item_type = 2;
     */
    revenueItemType: Settlements_RevenueType_Item_Type;
    /**
     * @generated from protobuf field: string updated_at = 3;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 4;
     */
    createdAt: string;
}
/**
 * LoadDriverPayItemCategoriesGet
 *
 * @generated from protobuf message LoadDriverPayItemCategoriesGetRequest
 */
export interface LoadDriverPayItemCategoriesGetRequest {
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoriesGetReply
 */
export interface LoadDriverPayItemCategoriesGetReply {
    /**
     * @generated from protobuf field: repeated LoadDriverPayItemCategoriesGetReply.LoadDriverPayItemCategory load_driver_pay_item_categories = 1;
     */
    loadDriverPayItemCategories: LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory[];
}
/**
 * @generated from protobuf message LoadDriverPayItemCategoriesGetReply.LoadDriverPayItemCategory
 */
export interface LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory {
    /**
     * @generated from protobuf field: string driver_pay_item_category_id = 1;
     */
    driverPayItemCategoryId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: Settlements.RevenueType.Item.Type revenue_item_type = 3;
     */
    revenueItemType: Settlements_RevenueType_Item_Type;
    /**
     * @generated from protobuf field: bool deleted = 4;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string updated_at = 5;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryRestoreRequest$Type extends MessageType<LoadDriverPayItemCategoryRestoreRequest> {
    constructor() {
        super("LoadDriverPayItemCategoryRestoreRequest", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryRestoreRequest>): LoadDriverPayItemCategoryRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryRestoreRequest): LoadDriverPayItemCategoryRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryRestoreRequest
 */
export const LoadDriverPayItemCategoryRestoreRequest = new LoadDriverPayItemCategoryRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryRestoreReply$Type extends MessageType<LoadDriverPayItemCategoryRestoreReply> {
    constructor() {
        super("LoadDriverPayItemCategoryRestoreReply", []);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryRestoreReply>): LoadDriverPayItemCategoryRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryRestoreReply): LoadDriverPayItemCategoryRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryRestoreReply
 */
export const LoadDriverPayItemCategoryRestoreReply = new LoadDriverPayItemCategoryRestoreReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryAddRequest$Type extends MessageType<LoadDriverPayItemCategoryAddRequest> {
    constructor() {
        super("LoadDriverPayItemCategoryAddRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryAddRequest>): LoadDriverPayItemCategoryAddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryAddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryAddRequest): LoadDriverPayItemCategoryAddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryAddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryAddRequest
 */
export const LoadDriverPayItemCategoryAddRequest = new LoadDriverPayItemCategoryAddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryAddReply$Type extends MessageType<LoadDriverPayItemCategoryAddReply> {
    constructor() {
        super("LoadDriverPayItemCategoryAddReply", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryAddReply>): LoadDriverPayItemCategoryAddReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryAddReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryAddReply): LoadDriverPayItemCategoryAddReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryAddReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryAddReply
 */
export const LoadDriverPayItemCategoryAddReply = new LoadDriverPayItemCategoryAddReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryUpdateRequest$Type extends MessageType<LoadDriverPayItemCategoryUpdateRequest> {
    constructor() {
        super("LoadDriverPayItemCategoryUpdateRequest", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryUpdateRequest>): LoadDriverPayItemCategoryUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryUpdateRequest): LoadDriverPayItemCategoryUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryUpdateRequest
 */
export const LoadDriverPayItemCategoryUpdateRequest = new LoadDriverPayItemCategoryUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryUpdateReply$Type extends MessageType<LoadDriverPayItemCategoryUpdateReply> {
    constructor() {
        super("LoadDriverPayItemCategoryUpdateReply", []);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryUpdateReply>): LoadDriverPayItemCategoryUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryUpdateReply): LoadDriverPayItemCategoryUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryUpdateReply
 */
export const LoadDriverPayItemCategoryUpdateReply = new LoadDriverPayItemCategoryUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryDeleteRequest$Type extends MessageType<LoadDriverPayItemCategoryDeleteRequest> {
    constructor() {
        super("LoadDriverPayItemCategoryDeleteRequest", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryDeleteRequest>): LoadDriverPayItemCategoryDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryDeleteRequest): LoadDriverPayItemCategoryDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryDeleteRequest
 */
export const LoadDriverPayItemCategoryDeleteRequest = new LoadDriverPayItemCategoryDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryDeleteReply$Type extends MessageType<LoadDriverPayItemCategoryDeleteReply> {
    constructor() {
        super("LoadDriverPayItemCategoryDeleteReply", []);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryDeleteReply>): LoadDriverPayItemCategoryDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryDeleteReply): LoadDriverPayItemCategoryDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryDeleteReply
 */
export const LoadDriverPayItemCategoryDeleteReply = new LoadDriverPayItemCategoryDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryRetrieveRequest$Type extends MessageType<LoadDriverPayItemCategoryRetrieveRequest> {
    constructor() {
        super("LoadDriverPayItemCategoryRetrieveRequest", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryRetrieveRequest>): LoadDriverPayItemCategoryRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryRetrieveRequest): LoadDriverPayItemCategoryRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryRetrieveRequest
 */
export const LoadDriverPayItemCategoryRetrieveRequest = new LoadDriverPayItemCategoryRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoryRetrieveReply$Type extends MessageType<LoadDriverPayItemCategoryRetrieveReply> {
    constructor() {
        super("LoadDriverPayItemCategoryRetrieveReply", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "revenue_item_type", kind: "enum", T: () => ["Settlements.RevenueType.Item.Type", Settlements_RevenueType_Item_Type, "TYPE_"] },
            { no: 3, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoryRetrieveReply>): LoadDriverPayItemCategoryRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.revenueItemType = 0;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoryRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoryRetrieveReply): LoadDriverPayItemCategoryRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* Settlements.RevenueType.Item.Type revenue_item_type */ 2:
                    message.revenueItemType = reader.int32();
                    break;
                case /* string updated_at */ 3:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 4:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoryRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* Settlements.RevenueType.Item.Type revenue_item_type = 2; */
        if (message.revenueItemType !== 0)
            writer.tag(2, WireType.Varint).int32(message.revenueItemType);
        /* string updated_at = 3; */
        if (message.updatedAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoryRetrieveReply
 */
export const LoadDriverPayItemCategoryRetrieveReply = new LoadDriverPayItemCategoryRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoriesGetRequest$Type extends MessageType<LoadDriverPayItemCategoriesGetRequest> {
    constructor() {
        super("LoadDriverPayItemCategoriesGetRequest", []);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoriesGetRequest>): LoadDriverPayItemCategoriesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoriesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoriesGetRequest): LoadDriverPayItemCategoriesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoriesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoriesGetRequest
 */
export const LoadDriverPayItemCategoriesGetRequest = new LoadDriverPayItemCategoriesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoriesGetReply$Type extends MessageType<LoadDriverPayItemCategoriesGetReply> {
    constructor() {
        super("LoadDriverPayItemCategoriesGetReply", [
            { no: 1, name: "load_driver_pay_item_categories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoriesGetReply>): LoadDriverPayItemCategoriesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadDriverPayItemCategories = [];
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoriesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoriesGetReply): LoadDriverPayItemCategoriesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadDriverPayItemCategoriesGetReply.LoadDriverPayItemCategory load_driver_pay_item_categories */ 1:
                    message.loadDriverPayItemCategories.push(LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoriesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadDriverPayItemCategoriesGetReply.LoadDriverPayItemCategory load_driver_pay_item_categories = 1; */
        for (let i = 0; i < message.loadDriverPayItemCategories.length; i++)
            LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory.internalBinaryWrite(message.loadDriverPayItemCategories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoriesGetReply
 */
export const LoadDriverPayItemCategoriesGetReply = new LoadDriverPayItemCategoriesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory$Type extends MessageType<LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory> {
    constructor() {
        super("LoadDriverPayItemCategoriesGetReply.LoadDriverPayItemCategory", [
            { no: 1, name: "driver_pay_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "revenue_item_type", kind: "enum", T: () => ["Settlements.RevenueType.Item.Type", Settlements_RevenueType_Item_Type, "TYPE_"] },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory>): LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverPayItemCategoryId = "";
        message.name = "";
        message.revenueItemType = 0;
        message.deleted = false;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory): LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_pay_item_category_id */ 1:
                    message.driverPayItemCategoryId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* Settlements.RevenueType.Item.Type revenue_item_type */ 3:
                    message.revenueItemType = reader.int32();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                case /* string updated_at */ 5:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_pay_item_category_id = 1; */
        if (message.driverPayItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverPayItemCategoryId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* Settlements.RevenueType.Item.Type revenue_item_type = 3; */
        if (message.revenueItemType !== 0)
            writer.tag(3, WireType.Varint).int32(message.revenueItemType);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, WireType.Varint).bool(message.deleted);
        /* string updated_at = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDriverPayItemCategoriesGetReply.LoadDriverPayItemCategory
 */
export const LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory = new LoadDriverPayItemCategoriesGetReply_LoadDriverPayItemCategory$Type();
/**
 * @generated ServiceType for protobuf service LoadDriverPayItemCategoryService
 */
export const LoadDriverPayItemCategoryService = new ServiceType("LoadDriverPayItemCategoryService", [
    { name: "LoadDriverPayItemCategoryAdd", options: {}, I: LoadDriverPayItemCategoryAddRequest, O: LoadDriverPayItemCategoryAddReply },
    { name: "LoadDriverPayItemCategoryUpdate", options: {}, I: LoadDriverPayItemCategoryUpdateRequest, O: LoadDriverPayItemCategoryUpdateReply },
    { name: "LoadDriverPayItemCategoryDelete", options: {}, I: LoadDriverPayItemCategoryDeleteRequest, O: LoadDriverPayItemCategoryDeleteReply },
    { name: "LoadDriverPayItemCategoryRetrieve", options: {}, I: LoadDriverPayItemCategoryRetrieveRequest, O: LoadDriverPayItemCategoryRetrieveReply },
    { name: "LoadDriverPayItemCategoriesGet", options: {}, I: LoadDriverPayItemCategoriesGetRequest, O: LoadDriverPayItemCategoriesGetReply },
    { name: "LoadDriverPayItemCategoryRestore", options: {}, I: LoadDriverPayItemCategoryRestoreRequest, O: LoadDriverPayItemCategoryRestoreReply }
]);
