// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/chart.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadModel_InvoiceStatus } from "./models/model_load";
/**
 * /////////////////////////
 * ChartTotalUnpaidRetrieve
 * /////////////////////////
 *
 * @generated from protobuf message ChartTotalUnpaidRetrieveRequest
 */
export interface ChartTotalUnpaidRetrieveRequest {
}
/**
 * @generated from protobuf message ChartTotalUnpaidRetrieveReply
 */
export interface ChartTotalUnpaidRetrieveReply {
    /**
     * @generated from protobuf field: repeated ChartTotalUnpaidRetrieveReply.Item items = 1;
     */
    items: ChartTotalUnpaidRetrieveReply_Item[];
    /**
     * @generated from protobuf field: double total_unpaid = 2;
     */
    totalUnpaid: number;
    /**
     * @generated from protobuf field: string total_unpaid_currency = 3;
     */
    totalUnpaidCurrency: string;
}
/**
 * @generated from protobuf message ChartTotalUnpaidRetrieveReply.Item
 */
export interface ChartTotalUnpaidRetrieveReply_Item {
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 1;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_percentage = 3;
     */
    amountPercentage: string;
    /**
     * @generated from protobuf field: string amount_currency = 4;
     */
    amountCurrency: string;
}
/**
 * /////////////////////////
 * ChartTotalOrdersGet
 * /////////////////////////
 *
 * @generated from protobuf message ChartTotalOrdersGetRequest
 */
export interface ChartTotalOrdersGetRequest {
}
/**
 * @generated from protobuf message ChartTotalOrdersGetReply
 */
export interface ChartTotalOrdersGetReply {
    /**
     * @generated from protobuf field: repeated ChartTotalOrdersGetReply.Item items = 1;
     */
    items: ChartTotalOrdersGetReply_Item[];
    /**
     * @generated from protobuf field: int64 orders_count = 2;
     */
    ordersCount: number;
}
/**
 * @generated from protobuf message ChartTotalOrdersGetReply.Item
 */
export interface ChartTotalOrdersGetReply_Item {
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 1;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: number;
}
/**
 * /////////////////////////
 * ChartTopDebtorGet
 * /////////////////////////
 *
 * @generated from protobuf message ChartTopDebtorsGetRequest
 */
export interface ChartTopDebtorsGetRequest {
}
/**
 * @generated from protobuf message ChartTopDebtorsGetReply
 */
export interface ChartTopDebtorsGetReply {
    /**
     * @generated from protobuf field: repeated ChartTopDebtorsGetReply.Item items = 1;
     */
    items: ChartTopDebtorsGetReply_Item[];
    /**
     * @generated from protobuf field: int64 debtors_count = 3;
     */
    debtorsCount: number;
}
/**
 * @generated from protobuf message ChartTopDebtorsGetReply.Item
 */
export interface ChartTopDebtorsGetReply_Item {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string customer_id = 2;
     */
    customerId: string;
    /**
     * @generated from protobuf field: double amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_currency = 5;
     */
    amountCurrency: string;
    /**
     * @generated from protobuf field: string orders_percentage = 4;
     */
    ordersPercentage: string;
    /**
     * @generated from protobuf field: int64 orders_count = 6;
     */
    ordersCount: number;
}
/**
 * /////////////////////////
 * ChartAgingReportRetrieve
 * /////////////////////////
 *
 * @generated from protobuf message ChartAgingReportRetrieveRequest
 */
export interface ChartAgingReportRetrieveRequest {
}
/**
 * @generated from protobuf message ChartAgingReportRetrieveReply
 */
export interface ChartAgingReportRetrieveReply {
    /**
     * @generated from protobuf field: repeated ChartAgingReportRetrieveReply.Item items = 1;
     */
    items: ChartAgingReportRetrieveReply_Item[];
}
/**
 * @generated from protobuf message ChartAgingReportRetrieveReply.Item
 */
export interface ChartAgingReportRetrieveReply_Item {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: double total = 2;
     */
    total: number;
    /**
     * @generated from protobuf field: string total_currency = 4;
     */
    totalCurrency: string;
    /**
     * @generated from protobuf field: string orders_percentage = 3;
     */
    ordersPercentage: string;
    /**
     * @generated from protobuf field: int64 count = 5;
     */
    count: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ChartTotalUnpaidRetrieveRequest$Type extends MessageType<ChartTotalUnpaidRetrieveRequest> {
    constructor() {
        super("ChartTotalUnpaidRetrieveRequest", []);
    }
    create(value?: PartialMessage<ChartTotalUnpaidRetrieveRequest>): ChartTotalUnpaidRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChartTotalUnpaidRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTotalUnpaidRetrieveRequest): ChartTotalUnpaidRetrieveRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChartTotalUnpaidRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTotalUnpaidRetrieveRequest
 */
export const ChartTotalUnpaidRetrieveRequest = new ChartTotalUnpaidRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTotalUnpaidRetrieveReply$Type extends MessageType<ChartTotalUnpaidRetrieveReply> {
    constructor() {
        super("ChartTotalUnpaidRetrieveReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChartTotalUnpaidRetrieveReply_Item },
            { no: 2, name: "total_unpaid", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "total_unpaid_currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChartTotalUnpaidRetrieveReply>): ChartTotalUnpaidRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        message.totalUnpaid = 0;
        message.totalUnpaidCurrency = "";
        if (value !== undefined)
            reflectionMergePartial<ChartTotalUnpaidRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTotalUnpaidRetrieveReply): ChartTotalUnpaidRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChartTotalUnpaidRetrieveReply.Item items */ 1:
                    message.items.push(ChartTotalUnpaidRetrieveReply_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double total_unpaid */ 2:
                    message.totalUnpaid = reader.double();
                    break;
                case /* string total_unpaid_currency */ 3:
                    message.totalUnpaidCurrency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartTotalUnpaidRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChartTotalUnpaidRetrieveReply.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ChartTotalUnpaidRetrieveReply_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* double total_unpaid = 2; */
        if (message.totalUnpaid !== 0)
            writer.tag(2, WireType.Bit64).double(message.totalUnpaid);
        /* string total_unpaid_currency = 3; */
        if (message.totalUnpaidCurrency !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalUnpaidCurrency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTotalUnpaidRetrieveReply
 */
export const ChartTotalUnpaidRetrieveReply = new ChartTotalUnpaidRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTotalUnpaidRetrieveReply_Item$Type extends MessageType<ChartTotalUnpaidRetrieveReply_Item> {
    constructor() {
        super("ChartTotalUnpaidRetrieveReply.Item", [
            { no: 1, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "amount_percentage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount_currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChartTotalUnpaidRetrieveReply_Item>): ChartTotalUnpaidRetrieveReply_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceStatus = 0;
        message.amount = 0;
        message.amountPercentage = "";
        message.amountCurrency = "";
        if (value !== undefined)
            reflectionMergePartial<ChartTotalUnpaidRetrieveReply_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTotalUnpaidRetrieveReply_Item): ChartTotalUnpaidRetrieveReply_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LoadModel.InvoiceStatus invoice_status */ 1:
                    message.invoiceStatus = reader.int32();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                case /* string amount_percentage */ 3:
                    message.amountPercentage = reader.string();
                    break;
                case /* string amount_currency */ 4:
                    message.amountCurrency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartTotalUnpaidRetrieveReply_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LoadModel.InvoiceStatus invoice_status = 1; */
        if (message.invoiceStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.invoiceStatus);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        /* string amount_percentage = 3; */
        if (message.amountPercentage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amountPercentage);
        /* string amount_currency = 4; */
        if (message.amountCurrency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amountCurrency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTotalUnpaidRetrieveReply.Item
 */
export const ChartTotalUnpaidRetrieveReply_Item = new ChartTotalUnpaidRetrieveReply_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTotalOrdersGetRequest$Type extends MessageType<ChartTotalOrdersGetRequest> {
    constructor() {
        super("ChartTotalOrdersGetRequest", []);
    }
    create(value?: PartialMessage<ChartTotalOrdersGetRequest>): ChartTotalOrdersGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChartTotalOrdersGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTotalOrdersGetRequest): ChartTotalOrdersGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChartTotalOrdersGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTotalOrdersGetRequest
 */
export const ChartTotalOrdersGetRequest = new ChartTotalOrdersGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTotalOrdersGetReply$Type extends MessageType<ChartTotalOrdersGetReply> {
    constructor() {
        super("ChartTotalOrdersGetReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChartTotalOrdersGetReply_Item },
            { no: 2, name: "orders_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChartTotalOrdersGetReply>): ChartTotalOrdersGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        message.ordersCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ChartTotalOrdersGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTotalOrdersGetReply): ChartTotalOrdersGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChartTotalOrdersGetReply.Item items */ 1:
                    message.items.push(ChartTotalOrdersGetReply_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 orders_count */ 2:
                    message.ordersCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartTotalOrdersGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChartTotalOrdersGetReply.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ChartTotalOrdersGetReply_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 orders_count = 2; */
        if (message.ordersCount !== 0)
            writer.tag(2, WireType.Varint).int64(message.ordersCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTotalOrdersGetReply
 */
export const ChartTotalOrdersGetReply = new ChartTotalOrdersGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTotalOrdersGetReply_Item$Type extends MessageType<ChartTotalOrdersGetReply_Item> {
    constructor() {
        super("ChartTotalOrdersGetReply.Item", [
            { no: 1, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChartTotalOrdersGetReply_Item>): ChartTotalOrdersGetReply_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceStatus = 0;
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<ChartTotalOrdersGetReply_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTotalOrdersGetReply_Item): ChartTotalOrdersGetReply_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LoadModel.InvoiceStatus invoice_status */ 1:
                    message.invoiceStatus = reader.int32();
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartTotalOrdersGetReply_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LoadModel.InvoiceStatus invoice_status = 1; */
        if (message.invoiceStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.invoiceStatus);
        /* int64 count = 2; */
        if (message.count !== 0)
            writer.tag(2, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTotalOrdersGetReply.Item
 */
export const ChartTotalOrdersGetReply_Item = new ChartTotalOrdersGetReply_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTopDebtorsGetRequest$Type extends MessageType<ChartTopDebtorsGetRequest> {
    constructor() {
        super("ChartTopDebtorsGetRequest", []);
    }
    create(value?: PartialMessage<ChartTopDebtorsGetRequest>): ChartTopDebtorsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChartTopDebtorsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTopDebtorsGetRequest): ChartTopDebtorsGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChartTopDebtorsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTopDebtorsGetRequest
 */
export const ChartTopDebtorsGetRequest = new ChartTopDebtorsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTopDebtorsGetReply$Type extends MessageType<ChartTopDebtorsGetReply> {
    constructor() {
        super("ChartTopDebtorsGetReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChartTopDebtorsGetReply_Item },
            { no: 3, name: "debtors_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChartTopDebtorsGetReply>): ChartTopDebtorsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        message.debtorsCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ChartTopDebtorsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTopDebtorsGetReply): ChartTopDebtorsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChartTopDebtorsGetReply.Item items */ 1:
                    message.items.push(ChartTopDebtorsGetReply_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 debtors_count */ 3:
                    message.debtorsCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartTopDebtorsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChartTopDebtorsGetReply.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ChartTopDebtorsGetReply_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 debtors_count = 3; */
        if (message.debtorsCount !== 0)
            writer.tag(3, WireType.Varint).int64(message.debtorsCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTopDebtorsGetReply
 */
export const ChartTopDebtorsGetReply = new ChartTopDebtorsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartTopDebtorsGetReply_Item$Type extends MessageType<ChartTopDebtorsGetReply_Item> {
    constructor() {
        super("ChartTopDebtorsGetReply.Item", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "amount_currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "orders_percentage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "orders_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChartTopDebtorsGetReply_Item>): ChartTopDebtorsGetReply_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.customerId = "";
        message.amount = 0;
        message.amountCurrency = "";
        message.ordersPercentage = "";
        message.ordersCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ChartTopDebtorsGetReply_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartTopDebtorsGetReply_Item): ChartTopDebtorsGetReply_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string customer_id */ 2:
                    message.customerId = reader.string();
                    break;
                case /* double amount */ 3:
                    message.amount = reader.double();
                    break;
                case /* string amount_currency */ 5:
                    message.amountCurrency = reader.string();
                    break;
                case /* string orders_percentage */ 4:
                    message.ordersPercentage = reader.string();
                    break;
                case /* int64 orders_count */ 6:
                    message.ordersCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartTopDebtorsGetReply_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string customer_id = 2; */
        if (message.customerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.customerId);
        /* double amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Bit64).double(message.amount);
        /* string amount_currency = 5; */
        if (message.amountCurrency !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.amountCurrency);
        /* string orders_percentage = 4; */
        if (message.ordersPercentage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ordersPercentage);
        /* int64 orders_count = 6; */
        if (message.ordersCount !== 0)
            writer.tag(6, WireType.Varint).int64(message.ordersCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartTopDebtorsGetReply.Item
 */
export const ChartTopDebtorsGetReply_Item = new ChartTopDebtorsGetReply_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartAgingReportRetrieveRequest$Type extends MessageType<ChartAgingReportRetrieveRequest> {
    constructor() {
        super("ChartAgingReportRetrieveRequest", []);
    }
    create(value?: PartialMessage<ChartAgingReportRetrieveRequest>): ChartAgingReportRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChartAgingReportRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartAgingReportRetrieveRequest): ChartAgingReportRetrieveRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChartAgingReportRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartAgingReportRetrieveRequest
 */
export const ChartAgingReportRetrieveRequest = new ChartAgingReportRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartAgingReportRetrieveReply$Type extends MessageType<ChartAgingReportRetrieveReply> {
    constructor() {
        super("ChartAgingReportRetrieveReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChartAgingReportRetrieveReply_Item }
        ]);
    }
    create(value?: PartialMessage<ChartAgingReportRetrieveReply>): ChartAgingReportRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ChartAgingReportRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartAgingReportRetrieveReply): ChartAgingReportRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChartAgingReportRetrieveReply.Item items */ 1:
                    message.items.push(ChartAgingReportRetrieveReply_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartAgingReportRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChartAgingReportRetrieveReply.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ChartAgingReportRetrieveReply_Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartAgingReportRetrieveReply
 */
export const ChartAgingReportRetrieveReply = new ChartAgingReportRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChartAgingReportRetrieveReply_Item$Type extends MessageType<ChartAgingReportRetrieveReply_Item> {
    constructor() {
        super("ChartAgingReportRetrieveReply.Item", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "total_currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "orders_percentage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChartAgingReportRetrieveReply_Item>): ChartAgingReportRetrieveReply_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.label = "";
        message.total = 0;
        message.totalCurrency = "";
        message.ordersPercentage = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<ChartAgingReportRetrieveReply_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChartAgingReportRetrieveReply_Item): ChartAgingReportRetrieveReply_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* double total */ 2:
                    message.total = reader.double();
                    break;
                case /* string total_currency */ 4:
                    message.totalCurrency = reader.string();
                    break;
                case /* string orders_percentage */ 3:
                    message.ordersPercentage = reader.string();
                    break;
                case /* int64 count */ 5:
                    message.count = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChartAgingReportRetrieveReply_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* double total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Bit64).double(message.total);
        /* string total_currency = 4; */
        if (message.totalCurrency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.totalCurrency);
        /* string orders_percentage = 3; */
        if (message.ordersPercentage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ordersPercentage);
        /* int64 count = 5; */
        if (message.count !== 0)
            writer.tag(5, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChartAgingReportRetrieveReply.Item
 */
export const ChartAgingReportRetrieveReply_Item = new ChartAgingReportRetrieveReply_Item$Type();
/**
 * @generated ServiceType for protobuf service ChartService
 */
export const ChartService = new ServiceType("ChartService", [
    { name: "ChartTotalUnpaidRetrieve", options: {}, I: ChartTotalUnpaidRetrieveRequest, O: ChartTotalUnpaidRetrieveReply },
    { name: "ChartTotalOrdersGet", options: {}, I: ChartTotalOrdersGetRequest, O: ChartTotalOrdersGetReply },
    { name: "ChartTopDebtorsGet", options: {}, I: ChartTopDebtorsGetRequest, O: ChartTopDebtorsGetReply },
    { name: "ChartAgingReportRetrieve", options: {}, I: ChartAgingReportRetrieveRequest, O: ChartAgingReportRetrieveReply }
]);
