// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_schedule.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceScheduleModel_ScheduleRead } from "./models/model_service_schedule";
import { ServiceScheduleModel_ScheduleWrite } from "./models/model_service_schedule";
/**
 * Create
 *
 * @generated from protobuf message ServiceScheduleCreateRequest
 */
export interface ServiceScheduleCreateRequest {
    /**
     * @generated from protobuf field: optional string service_program_id = 1;
     */
    serviceProgramId?: string;
    /**
     * @generated from protobuf field: ServiceScheduleModel.ScheduleWrite schedule = 2;
     */
    schedule?: ServiceScheduleModel_ScheduleWrite;
}
/**
 * @generated from protobuf message ServiceScheduleCreateReply
 */
export interface ServiceScheduleCreateReply {
    /**
     * @generated from protobuf field: string service_schedule_id = 1;
     */
    serviceScheduleId: string;
}
/**
 * Update
 *
 * @generated from protobuf message ServiceScheduleUpdateRequest
 */
export interface ServiceScheduleUpdateRequest {
    /**
     * @generated from protobuf field: string service_schedule_id = 1;
     */
    serviceScheduleId: string;
    /**
     * @generated from protobuf field: ServiceScheduleModel.ScheduleWrite schedule = 2;
     */
    schedule?: ServiceScheduleModel_ScheduleWrite;
}
/**
 * @generated from protobuf message ServiceScheduleUpdateReply
 */
export interface ServiceScheduleUpdateReply {
}
/**
 * Retrieve
 *
 * @generated from protobuf message ServiceScheduleRetrieveRequest
 */
export interface ServiceScheduleRetrieveRequest {
    /**
     * @generated from protobuf field: string service_schedule_id = 1;
     */
    serviceScheduleId: string;
}
/**
 * @generated from protobuf message ServiceScheduleRetrieveReply
 */
export interface ServiceScheduleRetrieveReply {
    /**
     * @generated from protobuf field: ServiceScheduleModel.ScheduleRead schedule = 1;
     */
    schedule?: ServiceScheduleModel_ScheduleRead;
}
/**
 * Get
 *
 * @generated from protobuf message ServiceScheduleGetRequest
 */
export interface ServiceScheduleGetRequest {
}
/**
 * @generated from protobuf message ServiceScheduleGetReply
 */
export interface ServiceScheduleGetReply {
    /**
     * @generated from protobuf field: repeated ServiceScheduleModel.ScheduleRead schedules = 1;
     */
    schedules: ServiceScheduleModel_ScheduleRead[];
}
/**
 * Delete
 *
 * @generated from protobuf message ServiceScheduleDeleteRequest
 */
export interface ServiceScheduleDeleteRequest {
    /**
     * @generated from protobuf field: string service_schedule_id = 1;
     */
    serviceScheduleId: string;
}
/**
 * @generated from protobuf message ServiceScheduleDeleteReply
 */
export interface ServiceScheduleDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleCreateRequest$Type extends MessageType<ServiceScheduleCreateRequest> {
    constructor() {
        super("ServiceScheduleCreateRequest", [
            { no: 1, name: "service_program_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schedule", kind: "message", T: () => ServiceScheduleModel_ScheduleWrite }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleCreateRequest>): ServiceScheduleCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleCreateRequest): ServiceScheduleCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string service_program_id */ 1:
                    message.serviceProgramId = reader.string();
                    break;
                case /* ServiceScheduleModel.ScheduleWrite schedule */ 2:
                    message.schedule = ServiceScheduleModel_ScheduleWrite.internalBinaryRead(reader, reader.uint32(), options, message.schedule);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string service_program_id = 1; */
        if (message.serviceProgramId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProgramId);
        /* ServiceScheduleModel.ScheduleWrite schedule = 2; */
        if (message.schedule)
            ServiceScheduleModel_ScheduleWrite.internalBinaryWrite(message.schedule, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleCreateRequest
 */
export const ServiceScheduleCreateRequest = new ServiceScheduleCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleCreateReply$Type extends MessageType<ServiceScheduleCreateReply> {
    constructor() {
        super("ServiceScheduleCreateReply", [
            { no: 1, name: "service_schedule_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleCreateReply>): ServiceScheduleCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceScheduleId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleCreateReply): ServiceScheduleCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_schedule_id */ 1:
                    message.serviceScheduleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_schedule_id = 1; */
        if (message.serviceScheduleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleCreateReply
 */
export const ServiceScheduleCreateReply = new ServiceScheduleCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleUpdateRequest$Type extends MessageType<ServiceScheduleUpdateRequest> {
    constructor() {
        super("ServiceScheduleUpdateRequest", [
            { no: 1, name: "service_schedule_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schedule", kind: "message", T: () => ServiceScheduleModel_ScheduleWrite }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleUpdateRequest>): ServiceScheduleUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceScheduleId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleUpdateRequest): ServiceScheduleUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_schedule_id */ 1:
                    message.serviceScheduleId = reader.string();
                    break;
                case /* ServiceScheduleModel.ScheduleWrite schedule */ 2:
                    message.schedule = ServiceScheduleModel_ScheduleWrite.internalBinaryRead(reader, reader.uint32(), options, message.schedule);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_schedule_id = 1; */
        if (message.serviceScheduleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceScheduleId);
        /* ServiceScheduleModel.ScheduleWrite schedule = 2; */
        if (message.schedule)
            ServiceScheduleModel_ScheduleWrite.internalBinaryWrite(message.schedule, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleUpdateRequest
 */
export const ServiceScheduleUpdateRequest = new ServiceScheduleUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleUpdateReply$Type extends MessageType<ServiceScheduleUpdateReply> {
    constructor() {
        super("ServiceScheduleUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceScheduleUpdateReply>): ServiceScheduleUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleUpdateReply): ServiceScheduleUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceScheduleUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleUpdateReply
 */
export const ServiceScheduleUpdateReply = new ServiceScheduleUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleRetrieveRequest$Type extends MessageType<ServiceScheduleRetrieveRequest> {
    constructor() {
        super("ServiceScheduleRetrieveRequest", [
            { no: 1, name: "service_schedule_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleRetrieveRequest>): ServiceScheduleRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceScheduleId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleRetrieveRequest): ServiceScheduleRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_schedule_id */ 1:
                    message.serviceScheduleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_schedule_id = 1; */
        if (message.serviceScheduleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleRetrieveRequest
 */
export const ServiceScheduleRetrieveRequest = new ServiceScheduleRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleRetrieveReply$Type extends MessageType<ServiceScheduleRetrieveReply> {
    constructor() {
        super("ServiceScheduleRetrieveReply", [
            { no: 1, name: "schedule", kind: "message", T: () => ServiceScheduleModel_ScheduleRead }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleRetrieveReply>): ServiceScheduleRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleRetrieveReply): ServiceScheduleRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceScheduleModel.ScheduleRead schedule */ 1:
                    message.schedule = ServiceScheduleModel_ScheduleRead.internalBinaryRead(reader, reader.uint32(), options, message.schedule);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceScheduleModel.ScheduleRead schedule = 1; */
        if (message.schedule)
            ServiceScheduleModel_ScheduleRead.internalBinaryWrite(message.schedule, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleRetrieveReply
 */
export const ServiceScheduleRetrieveReply = new ServiceScheduleRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleGetRequest$Type extends MessageType<ServiceScheduleGetRequest> {
    constructor() {
        super("ServiceScheduleGetRequest", []);
    }
    create(value?: PartialMessage<ServiceScheduleGetRequest>): ServiceScheduleGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleGetRequest): ServiceScheduleGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceScheduleGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleGetRequest
 */
export const ServiceScheduleGetRequest = new ServiceScheduleGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleGetReply$Type extends MessageType<ServiceScheduleGetReply> {
    constructor() {
        super("ServiceScheduleGetReply", [
            { no: 1, name: "schedules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceScheduleModel_ScheduleRead }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleGetReply>): ServiceScheduleGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.schedules = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleGetReply): ServiceScheduleGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceScheduleModel.ScheduleRead schedules */ 1:
                    message.schedules.push(ServiceScheduleModel_ScheduleRead.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceScheduleModel.ScheduleRead schedules = 1; */
        for (let i = 0; i < message.schedules.length; i++)
            ServiceScheduleModel_ScheduleRead.internalBinaryWrite(message.schedules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleGetReply
 */
export const ServiceScheduleGetReply = new ServiceScheduleGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleDeleteRequest$Type extends MessageType<ServiceScheduleDeleteRequest> {
    constructor() {
        super("ServiceScheduleDeleteRequest", [
            { no: 1, name: "service_schedule_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleDeleteRequest>): ServiceScheduleDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceScheduleId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleDeleteRequest): ServiceScheduleDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_schedule_id */ 1:
                    message.serviceScheduleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_schedule_id = 1; */
        if (message.serviceScheduleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleDeleteRequest
 */
export const ServiceScheduleDeleteRequest = new ServiceScheduleDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleDeleteReply$Type extends MessageType<ServiceScheduleDeleteReply> {
    constructor() {
        super("ServiceScheduleDeleteReply", []);
    }
    create(value?: PartialMessage<ServiceScheduleDeleteReply>): ServiceScheduleDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleDeleteReply): ServiceScheduleDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceScheduleDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleDeleteReply
 */
export const ServiceScheduleDeleteReply = new ServiceScheduleDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service ServiceScheduleService
 */
export const ServiceScheduleService = new ServiceType("ServiceScheduleService", [
    { name: "ServiceScheduleCreate", options: {}, I: ServiceScheduleCreateRequest, O: ServiceScheduleCreateReply },
    { name: "ServiceScheduleRetrieve", options: {}, I: ServiceScheduleRetrieveRequest, O: ServiceScheduleRetrieveReply },
    { name: "ServiceScheduleGet", options: {}, I: ServiceScheduleGetRequest, O: ServiceScheduleGetReply },
    { name: "ServiceScheduleUpdate", options: {}, I: ServiceScheduleUpdateRequest, O: ServiceScheduleUpdateReply },
    { name: "ServiceScheduleDelete", options: {}, I: ServiceScheduleDeleteRequest, O: ServiceScheduleDeleteReply }
]);
