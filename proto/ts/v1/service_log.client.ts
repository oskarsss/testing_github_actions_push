// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_log.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ServiceLogService } from "./service_log";
import type { ServiceLogStatsGetReply } from "./service_log";
import type { ServiceLogStatsGetRequest } from "./service_log";
import type { ServiceLogStatsRetrieveReply } from "./service_log";
import type { ServiceLogStatsRetrieveRequest } from "./service_log";
import type { ServiceLogDeleteReply } from "./service_log";
import type { ServiceLogDeleteRequest } from "./service_log";
import type { ServiceLogGetReply } from "./service_log";
import type { ServiceLogGetRequest } from "./service_log";
import type { ServiceLogRetrieveReply } from "./service_log";
import type { ServiceLogRetrieveRequest } from "./service_log";
import type { ServiceLogUpdateReply } from "./service_log";
import type { ServiceLogUpdateRequest } from "./service_log";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServiceLogCreateReply } from "./service_log";
import type { ServiceLogCreateRequest } from "./service_log";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ServiceLogService
 */
export interface IServiceLogServiceClient {
    /**
     * @generated from protobuf rpc: ServiceLogCreate(ServiceLogCreateRequest) returns (ServiceLogCreateReply);
     */
    serviceLogCreate(input: ServiceLogCreateRequest, options?: RpcOptions): UnaryCall<ServiceLogCreateRequest, ServiceLogCreateReply>;
    /**
     * @generated from protobuf rpc: ServiceLogUpdate(ServiceLogUpdateRequest) returns (ServiceLogUpdateReply);
     */
    serviceLogUpdate(input: ServiceLogUpdateRequest, options?: RpcOptions): UnaryCall<ServiceLogUpdateRequest, ServiceLogUpdateReply>;
    /**
     * @generated from protobuf rpc: ServiceLogRetrieve(ServiceLogRetrieveRequest) returns (ServiceLogRetrieveReply);
     */
    serviceLogRetrieve(input: ServiceLogRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceLogRetrieveRequest, ServiceLogRetrieveReply>;
    /**
     * @generated from protobuf rpc: ServiceLogGet(ServiceLogGetRequest) returns (ServiceLogGetReply);
     */
    serviceLogGet(input: ServiceLogGetRequest, options?: RpcOptions): UnaryCall<ServiceLogGetRequest, ServiceLogGetReply>;
    /**
     * @generated from protobuf rpc: ServiceLogDelete(ServiceLogDeleteRequest) returns (ServiceLogDeleteReply);
     */
    serviceLogDelete(input: ServiceLogDeleteRequest, options?: RpcOptions): UnaryCall<ServiceLogDeleteRequest, ServiceLogDeleteReply>;
    /**
     * @generated from protobuf rpc: ServiceLogStatsRetrieve(ServiceLogStatsRetrieveRequest) returns (ServiceLogStatsRetrieveReply);
     */
    serviceLogStatsRetrieve(input: ServiceLogStatsRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceLogStatsRetrieveRequest, ServiceLogStatsRetrieveReply>;
    /**
     * @generated from protobuf rpc: ServiceLogStatsGet(ServiceLogStatsGetRequest) returns (ServiceLogStatsGetReply);
     */
    serviceLogStatsGet(input: ServiceLogStatsGetRequest, options?: RpcOptions): UnaryCall<ServiceLogStatsGetRequest, ServiceLogStatsGetReply>;
}
/**
 * @generated from protobuf service ServiceLogService
 */
export class ServiceLogServiceClient implements IServiceLogServiceClient, ServiceInfo {
    typeName = ServiceLogService.typeName;
    methods = ServiceLogService.methods;
    options = ServiceLogService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ServiceLogCreate(ServiceLogCreateRequest) returns (ServiceLogCreateReply);
     */
    serviceLogCreate(input: ServiceLogCreateRequest, options?: RpcOptions): UnaryCall<ServiceLogCreateRequest, ServiceLogCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogCreateRequest, ServiceLogCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceLogUpdate(ServiceLogUpdateRequest) returns (ServiceLogUpdateReply);
     */
    serviceLogUpdate(input: ServiceLogUpdateRequest, options?: RpcOptions): UnaryCall<ServiceLogUpdateRequest, ServiceLogUpdateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogUpdateRequest, ServiceLogUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceLogRetrieve(ServiceLogRetrieveRequest) returns (ServiceLogRetrieveReply);
     */
    serviceLogRetrieve(input: ServiceLogRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceLogRetrieveRequest, ServiceLogRetrieveReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogRetrieveRequest, ServiceLogRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceLogGet(ServiceLogGetRequest) returns (ServiceLogGetReply);
     */
    serviceLogGet(input: ServiceLogGetRequest, options?: RpcOptions): UnaryCall<ServiceLogGetRequest, ServiceLogGetReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogGetRequest, ServiceLogGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceLogDelete(ServiceLogDeleteRequest) returns (ServiceLogDeleteReply);
     */
    serviceLogDelete(input: ServiceLogDeleteRequest, options?: RpcOptions): UnaryCall<ServiceLogDeleteRequest, ServiceLogDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogDeleteRequest, ServiceLogDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceLogStatsRetrieve(ServiceLogStatsRetrieveRequest) returns (ServiceLogStatsRetrieveReply);
     */
    serviceLogStatsRetrieve(input: ServiceLogStatsRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceLogStatsRetrieveRequest, ServiceLogStatsRetrieveReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogStatsRetrieveRequest, ServiceLogStatsRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceLogStatsGet(ServiceLogStatsGetRequest) returns (ServiceLogStatsGetReply);
     */
    serviceLogStatsGet(input: ServiceLogStatsGetRequest, options?: RpcOptions): UnaryCall<ServiceLogStatsGetRequest, ServiceLogStatsGetReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceLogStatsGetRequest, ServiceLogStatsGetReply>("unary", this._transport, method, opt, input);
    }
}
