// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/plate.company.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * PlateCompanyGet
 *
 * @generated from protobuf message PlateCompanyGetRequest
 */
export interface PlateCompanyGetRequest {
}
/**
 * @generated from protobuf message PlateCompanyGetReply
 */
export interface PlateCompanyGetReply {
    /**
     * @generated from protobuf field: repeated PlateCompanyGetReply.PlateCompany plate_companies = 1;
     */
    plateCompanies: PlateCompanyGetReply_PlateCompany[];
}
/**
 * @generated from protobuf message PlateCompanyGetReply.PlateCompany
 */
export interface PlateCompanyGetReply_PlateCompany {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
    /**
     * @generated from protobuf field: int64 plates_count = 5;
     */
    platesCount: number;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 7;
     */
    deleted: boolean;
}
/**
 * PlateCompanyRetrieve
 *
 * @generated from protobuf message PlateCompanyRetrieveRequest
 */
export interface PlateCompanyRetrieveRequest {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
}
/**
 * @generated from protobuf message PlateCompanyRetrieveReply
 */
export interface PlateCompanyRetrieveReply {
    /**
     * @generated from protobuf field: PlateCompanyRetrieveReply.PlateCompany plate_company = 1;
     */
    plateCompany?: PlateCompanyRetrieveReply_PlateCompany;
}
/**
 * @generated from protobuf message PlateCompanyRetrieveReply.PlateCompany
 */
export interface PlateCompanyRetrieveReply_PlateCompany {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 7;
     */
    deleted: boolean;
}
/**
 * PlateCompanyCreate
 *
 * @generated from protobuf message PlateCompanyCreateRequest
 */
export interface PlateCompanyCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
}
/**
 * @generated from protobuf message PlateCompanyCreateReply
 */
export interface PlateCompanyCreateReply {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
}
/**
 * PlateCompanyDelete
 *
 * @generated from protobuf message PlateCompanyDeleteRequest
 */
export interface PlateCompanyDeleteRequest {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
}
/**
 * @generated from protobuf message PlateCompanyDeleteReply
 */
export interface PlateCompanyDeleteReply {
}
/**
 * PlateCompanyUpdate
 *
 * @generated from protobuf message PlateCompanyUpdateRequest
 */
export interface PlateCompanyUpdateRequest {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
}
/**
 * @generated from protobuf message PlateCompanyUpdateReply
 */
export interface PlateCompanyUpdateReply {
}
/**
 * PlateCompanyRestore
 *
 * @generated from protobuf message PlateCompanyRestoreRequest
 */
export interface PlateCompanyRestoreRequest {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
}
/**
 * @generated from protobuf message PlateCompanyRestoreReply
 */
export interface PlateCompanyRestoreReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyGetRequest$Type extends MessageType<PlateCompanyGetRequest> {
    constructor() {
        super("PlateCompanyGetRequest", []);
    }
    create(value?: PartialMessage<PlateCompanyGetRequest>): PlateCompanyGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyGetRequest): PlateCompanyGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateCompanyGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyGetRequest
 */
export const PlateCompanyGetRequest = new PlateCompanyGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyGetReply$Type extends MessageType<PlateCompanyGetReply> {
    constructor() {
        super("PlateCompanyGetReply", [
            { no: 1, name: "plate_companies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlateCompanyGetReply_PlateCompany }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyGetReply>): PlateCompanyGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanies = [];
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyGetReply): PlateCompanyGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PlateCompanyGetReply.PlateCompany plate_companies */ 1:
                    message.plateCompanies.push(PlateCompanyGetReply_PlateCompany.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PlateCompanyGetReply.PlateCompany plate_companies = 1; */
        for (let i = 0; i < message.plateCompanies.length; i++)
            PlateCompanyGetReply_PlateCompany.internalBinaryWrite(message.plateCompanies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyGetReply
 */
export const PlateCompanyGetReply = new PlateCompanyGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyGetReply_PlateCompany$Type extends MessageType<PlateCompanyGetReply_PlateCompany> {
    constructor() {
        super("PlateCompanyGetReply.PlateCompany", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "plates_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyGetReply_PlateCompany>): PlateCompanyGetReply_PlateCompany {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        message.name = "";
        message.referenceId = "";
        message.state = "";
        message.platesCount = 0;
        message.createdAt = "";
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyGetReply_PlateCompany>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyGetReply_PlateCompany): PlateCompanyGetReply_PlateCompany {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                case /* int64 plates_count */ 5:
                    message.platesCount = reader.int64().toNumber();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 7:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyGetReply_PlateCompany, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        /* int64 plates_count = 5; */
        if (message.platesCount !== 0)
            writer.tag(5, WireType.Varint).int64(message.platesCount);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 7; */
        if (message.deleted !== false)
            writer.tag(7, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyGetReply.PlateCompany
 */
export const PlateCompanyGetReply_PlateCompany = new PlateCompanyGetReply_PlateCompany$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyRetrieveRequest$Type extends MessageType<PlateCompanyRetrieveRequest> {
    constructor() {
        super("PlateCompanyRetrieveRequest", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyRetrieveRequest>): PlateCompanyRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyRetrieveRequest): PlateCompanyRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyRetrieveRequest
 */
export const PlateCompanyRetrieveRequest = new PlateCompanyRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyRetrieveReply$Type extends MessageType<PlateCompanyRetrieveReply> {
    constructor() {
        super("PlateCompanyRetrieveReply", [
            { no: 1, name: "plate_company", kind: "message", T: () => PlateCompanyRetrieveReply_PlateCompany }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyRetrieveReply>): PlateCompanyRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyRetrieveReply): PlateCompanyRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlateCompanyRetrieveReply.PlateCompany plate_company */ 1:
                    message.plateCompany = PlateCompanyRetrieveReply_PlateCompany.internalBinaryRead(reader, reader.uint32(), options, message.plateCompany);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlateCompanyRetrieveReply.PlateCompany plate_company = 1; */
        if (message.plateCompany)
            PlateCompanyRetrieveReply_PlateCompany.internalBinaryWrite(message.plateCompany, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyRetrieveReply
 */
export const PlateCompanyRetrieveReply = new PlateCompanyRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyRetrieveReply_PlateCompany$Type extends MessageType<PlateCompanyRetrieveReply_PlateCompany> {
    constructor() {
        super("PlateCompanyRetrieveReply.PlateCompany", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyRetrieveReply_PlateCompany>): PlateCompanyRetrieveReply_PlateCompany {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        message.name = "";
        message.referenceId = "";
        message.state = "";
        message.createdAt = "";
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyRetrieveReply_PlateCompany>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyRetrieveReply_PlateCompany): PlateCompanyRetrieveReply_PlateCompany {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 7:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyRetrieveReply_PlateCompany, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 7; */
        if (message.deleted !== false)
            writer.tag(7, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyRetrieveReply.PlateCompany
 */
export const PlateCompanyRetrieveReply_PlateCompany = new PlateCompanyRetrieveReply_PlateCompany$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyCreateRequest$Type extends MessageType<PlateCompanyCreateRequest> {
    constructor() {
        super("PlateCompanyCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyCreateRequest>): PlateCompanyCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.referenceId = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyCreateRequest): PlateCompanyCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyCreateRequest
 */
export const PlateCompanyCreateRequest = new PlateCompanyCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyCreateReply$Type extends MessageType<PlateCompanyCreateReply> {
    constructor() {
        super("PlateCompanyCreateReply", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyCreateReply>): PlateCompanyCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyCreateReply): PlateCompanyCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyCreateReply
 */
export const PlateCompanyCreateReply = new PlateCompanyCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyDeleteRequest$Type extends MessageType<PlateCompanyDeleteRequest> {
    constructor() {
        super("PlateCompanyDeleteRequest", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyDeleteRequest>): PlateCompanyDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyDeleteRequest): PlateCompanyDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyDeleteRequest
 */
export const PlateCompanyDeleteRequest = new PlateCompanyDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyDeleteReply$Type extends MessageType<PlateCompanyDeleteReply> {
    constructor() {
        super("PlateCompanyDeleteReply", []);
    }
    create(value?: PartialMessage<PlateCompanyDeleteReply>): PlateCompanyDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyDeleteReply): PlateCompanyDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateCompanyDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyDeleteReply
 */
export const PlateCompanyDeleteReply = new PlateCompanyDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyUpdateRequest$Type extends MessageType<PlateCompanyUpdateRequest> {
    constructor() {
        super("PlateCompanyUpdateRequest", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyUpdateRequest>): PlateCompanyUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        message.name = "";
        message.referenceId = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyUpdateRequest): PlateCompanyUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyUpdateRequest
 */
export const PlateCompanyUpdateRequest = new PlateCompanyUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyUpdateReply$Type extends MessageType<PlateCompanyUpdateReply> {
    constructor() {
        super("PlateCompanyUpdateReply", []);
    }
    create(value?: PartialMessage<PlateCompanyUpdateReply>): PlateCompanyUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyUpdateReply): PlateCompanyUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateCompanyUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyUpdateReply
 */
export const PlateCompanyUpdateReply = new PlateCompanyUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyRestoreRequest$Type extends MessageType<PlateCompanyRestoreRequest> {
    constructor() {
        super("PlateCompanyRestoreRequest", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCompanyRestoreRequest>): PlateCompanyRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyRestoreRequest): PlateCompanyRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCompanyRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyRestoreRequest
 */
export const PlateCompanyRestoreRequest = new PlateCompanyRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCompanyRestoreReply$Type extends MessageType<PlateCompanyRestoreReply> {
    constructor() {
        super("PlateCompanyRestoreReply", []);
    }
    create(value?: PartialMessage<PlateCompanyRestoreReply>): PlateCompanyRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateCompanyRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCompanyRestoreReply): PlateCompanyRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateCompanyRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCompanyRestoreReply
 */
export const PlateCompanyRestoreReply = new PlateCompanyRestoreReply$Type();
/**
 * @generated ServiceType for protobuf service PlateCompanyService
 */
export const PlateCompanyService = new ServiceType("PlateCompanyService", [
    { name: "PlateCompanyGet", options: {}, I: PlateCompanyGetRequest, O: PlateCompanyGetReply },
    { name: "PlateCompanyRetrieve", options: {}, I: PlateCompanyRetrieveRequest, O: PlateCompanyRetrieveReply },
    { name: "PlateCompanyCreate", options: {}, I: PlateCompanyCreateRequest, O: PlateCompanyCreateReply },
    { name: "PlateCompanyUpdate", options: {}, I: PlateCompanyUpdateRequest, O: PlateCompanyUpdateReply },
    { name: "PlateCompanyDelete", options: {}, I: PlateCompanyDeleteRequest, O: PlateCompanyDeleteReply },
    { name: "PlateCompanyRestore", options: {}, I: PlateCompanyRestoreRequest, O: PlateCompanyRestoreReply }
]);
