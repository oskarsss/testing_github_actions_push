// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/users.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserModel_Invite_Status } from "./models/model_user";
import { UserModel_Status } from "./models/model_user";
/**
 * Ping
 *
 * @generated from protobuf message PingUserRequest
 */
export interface PingUserRequest {
}
/**
 * @generated from protobuf message PingUserReply
 */
export interface PingUserReply {
    /**
     * @generated from protobuf field: int64 app_min_version_code = 1;
     */
    appMinVersionCode: number;
}
/**
 * Get Users
 *
 * @generated from protobuf message GetUsersRequest
 */
export interface GetUsersRequest {
}
/**
 * @generated from protobuf message GetUsersReply
 */
export interface GetUsersReply {
    /**
     * @generated from protobuf field: repeated GetUsersReply.User users = 1;
     */
    users: GetUsersReply_User[];
}
/**
 * @generated from protobuf message GetUsersReply.User
 */
export interface GetUsersReply_User {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string role_id = 2;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 7;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string selfie_url = 9;
     */
    selfieUrl: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 10;
     */
    selfieThumbUrl: string;
    /**
     * @generated from protobuf field: string title = 11;
     */
    title: string;
    /**
     * @generated from protobuf field: string chatpilot_user_id = 12;
     */
    chatpilotUserId: string;
    /**
     * @generated from protobuf field: UserModel.Status status = 13;
     */
    status: UserModel_Status;
    /**
     * @generated from protobuf field: string created_at = 14;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: optional GetUsersReply.User.Invite invite = 15;
     */
    invite?: GetUsersReply_User_Invite;
}
/**
 * @generated from protobuf message GetUsersReply.User.Invite
 */
export interface GetUsersReply_User_Invite {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: UserModel.Invite.Status status = 2;
     */
    status: UserModel_Invite_Status;
}
/**
 * Create User
 *
 * @generated from protobuf message CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string first_name = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 3;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 5;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 6;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 7;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string password = 9;
     */
    password: string;
}
/**
 * @generated from protobuf message CreateUserReply
 */
export interface CreateUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Update User
 *
 * @generated from protobuf message UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string role_id = 2;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 7;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string title = 9;
     */
    title: string;
    /**
     * @generated from protobuf field: UserModel.Status status = 10;
     */
    status: UserModel_Status;
    /**
     * @generated from protobuf field: optional string password = 11;
     */
    password?: string;
}
/**
 * @generated from protobuf message UpdateUserReply
 */
export interface UpdateUserReply {
}
/**
 * Delete User
 *
 * @generated from protobuf message DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message DeleteUserReply
 */
export interface DeleteUserReply {
}
/**
 * Invite User
 *
 * @generated from protobuf message InviteUserRequest
 */
export interface InviteUserRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string role_id = 2;
     */
    roleId: string;
}
/**
 * @generated from protobuf message InviteUserReply
 */
export interface InviteUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Resend User Invite
 *
 * @generated from protobuf message ResendUserInviteRequest
 */
export interface ResendUserInviteRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message ResendUserInviteReply
 */
export interface ResendUserInviteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class PingUserRequest$Type extends MessageType<PingUserRequest> {
    constructor() {
        super("PingUserRequest", []);
    }
    create(value?: PartialMessage<PingUserRequest>): PingUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PingUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingUserRequest): PingUserRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PingUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingUserRequest
 */
export const PingUserRequest = new PingUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingUserReply$Type extends MessageType<PingUserReply> {
    constructor() {
        super("PingUserReply", [
            { no: 1, name: "app_min_version_code", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PingUserReply>): PingUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appMinVersionCode = 0;
        if (value !== undefined)
            reflectionMergePartial<PingUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingUserReply): PingUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 app_min_version_code */ 1:
                    message.appMinVersionCode = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 app_min_version_code = 1; */
        if (message.appMinVersionCode !== 0)
            writer.tag(1, WireType.Varint).int64(message.appMinVersionCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingUserReply
 */
export const PingUserReply = new PingUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUsersRequest$Type extends MessageType<GetUsersRequest> {
    constructor() {
        super("GetUsersRequest", []);
    }
    create(value?: PartialMessage<GetUsersRequest>): GetUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUsersRequest): GetUsersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetUsersRequest
 */
export const GetUsersRequest = new GetUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUsersReply$Type extends MessageType<GetUsersReply> {
    constructor() {
        super("GetUsersReply", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetUsersReply_User }
        ]);
    }
    create(value?: PartialMessage<GetUsersReply>): GetUsersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<GetUsersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUsersReply): GetUsersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetUsersReply.User users */ 1:
                    message.users.push(GetUsersReply_User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUsersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetUsersReply.User users = 1; */
        for (let i = 0; i < message.users.length; i++)
            GetUsersReply_User.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetUsersReply
 */
export const GetUsersReply = new GetUsersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUsersReply_User$Type extends MessageType<GetUsersReply_User> {
    constructor() {
        super("GetUsersReply.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "selfie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "chatpilot_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "status", kind: "enum", T: () => ["UserModel.Status", UserModel_Status, "STATUS_"] },
            { no: 14, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "invite", kind: "message", T: () => GetUsersReply_User_Invite }
        ]);
    }
    create(value?: PartialMessage<GetUsersReply_User>): GetUsersReply_User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.roleId = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.selfieUrl = "";
        message.selfieThumbUrl = "";
        message.title = "";
        message.chatpilotUserId = "";
        message.status = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetUsersReply_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUsersReply_User): GetUsersReply_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string role_id */ 2:
                    message.roleId = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 7:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string selfie_url */ 9:
                    message.selfieUrl = reader.string();
                    break;
                case /* string selfie_thumb_url */ 10:
                    message.selfieThumbUrl = reader.string();
                    break;
                case /* string title */ 11:
                    message.title = reader.string();
                    break;
                case /* string chatpilot_user_id */ 12:
                    message.chatpilotUserId = reader.string();
                    break;
                case /* UserModel.Status status */ 13:
                    message.status = reader.int32();
                    break;
                case /* string created_at */ 14:
                    message.createdAt = reader.string();
                    break;
                case /* optional GetUsersReply.User.Invite invite */ 15:
                    message.invite = GetUsersReply_User_Invite.internalBinaryRead(reader, reader.uint32(), options, message.invite);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUsersReply_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string role_id = 2; */
        if (message.roleId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roleId);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 7; */
        if (message.passwordChangeRequired !== false)
            writer.tag(7, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string selfie_url = 9; */
        if (message.selfieUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.selfieUrl);
        /* string selfie_thumb_url = 10; */
        if (message.selfieThumbUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.selfieThumbUrl);
        /* string title = 11; */
        if (message.title !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.title);
        /* string chatpilot_user_id = 12; */
        if (message.chatpilotUserId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.chatpilotUserId);
        /* UserModel.Status status = 13; */
        if (message.status !== 0)
            writer.tag(13, WireType.Varint).int32(message.status);
        /* string created_at = 14; */
        if (message.createdAt !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.createdAt);
        /* optional GetUsersReply.User.Invite invite = 15; */
        if (message.invite)
            GetUsersReply_User_Invite.internalBinaryWrite(message.invite, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetUsersReply.User
 */
export const GetUsersReply_User = new GetUsersReply_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUsersReply_User_Invite$Type extends MessageType<GetUsersReply_User_Invite> {
    constructor() {
        super("GetUsersReply.User.Invite", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["UserModel.Invite.Status", UserModel_Invite_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<GetUsersReply_User_Invite>): GetUsersReply_User_Invite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUsersReply_User_Invite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUsersReply_User_Invite): GetUsersReply_User_Invite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* UserModel.Invite.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUsersReply_User_Invite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* UserModel.Invite.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetUsersReply.User.Invite
 */
export const GetUsersReply_User_Invite = new GetUsersReply_User_Invite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserRequest$Type extends MessageType<CreateUserRequest> {
    constructor() {
        super("CreateUserRequest", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateUserRequest>): CreateUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.title = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<CreateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserRequest): CreateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                case /* string first_name */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 3:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string phone */ 5:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 6:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 7:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string password */ 9:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        /* string first_name = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 3; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string phone = 5; */
        if (message.phone !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 6; */
        if (message.passwordChangeRequired !== false)
            writer.tag(6, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 7; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(7, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string password = 9; */
        if (message.password !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateUserRequest
 */
export const CreateUserRequest = new CreateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserReply$Type extends MessageType<CreateUserReply> {
    constructor() {
        super("CreateUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateUserReply>): CreateUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserReply): CreateUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateUserReply
 */
export const CreateUserReply = new CreateUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequest$Type extends MessageType<UpdateUserRequest> {
    constructor() {
        super("UpdateUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "status", kind: "enum", T: () => ["UserModel.Status", UserModel_Status, "STATUS_"] },
            { no: 11, name: "password", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequest>): UpdateUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.roleId = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.title = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequest): UpdateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string role_id */ 2:
                    message.roleId = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 7:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string title */ 9:
                    message.title = reader.string();
                    break;
                case /* UserModel.Status status */ 10:
                    message.status = reader.int32();
                    break;
                case /* optional string password */ 11:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string role_id = 2; */
        if (message.roleId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roleId);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 7; */
        if (message.passwordChangeRequired !== false)
            writer.tag(7, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string title = 9; */
        if (message.title !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.title);
        /* UserModel.Status status = 10; */
        if (message.status !== 0)
            writer.tag(10, WireType.Varint).int32(message.status);
        /* optional string password = 11; */
        if (message.password !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateUserRequest
 */
export const UpdateUserRequest = new UpdateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserReply$Type extends MessageType<UpdateUserReply> {
    constructor() {
        super("UpdateUserReply", []);
    }
    create(value?: PartialMessage<UpdateUserReply>): UpdateUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserReply): UpdateUserReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateUserReply
 */
export const UpdateUserReply = new UpdateUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("DeleteUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserReply$Type extends MessageType<DeleteUserReply> {
    constructor() {
        super("DeleteUserReply", []);
    }
    create(value?: PartialMessage<DeleteUserReply>): DeleteUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserReply): DeleteUserReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteUserReply
 */
export const DeleteUserReply = new DeleteUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteUserRequest$Type extends MessageType<InviteUserRequest> {
    constructor() {
        super("InviteUserRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteUserRequest>): InviteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.roleId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteUserRequest): InviteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string role_id */ 2:
                    message.roleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string role_id = 2; */
        if (message.roleId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteUserRequest
 */
export const InviteUserRequest = new InviteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteUserReply$Type extends MessageType<InviteUserReply> {
    constructor() {
        super("InviteUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteUserReply>): InviteUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteUserReply): InviteUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteUserReply
 */
export const InviteUserReply = new InviteUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResendUserInviteRequest$Type extends MessageType<ResendUserInviteRequest> {
    constructor() {
        super("ResendUserInviteRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResendUserInviteRequest>): ResendUserInviteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<ResendUserInviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResendUserInviteRequest): ResendUserInviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResendUserInviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResendUserInviteRequest
 */
export const ResendUserInviteRequest = new ResendUserInviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResendUserInviteReply$Type extends MessageType<ResendUserInviteReply> {
    constructor() {
        super("ResendUserInviteReply", []);
    }
    create(value?: PartialMessage<ResendUserInviteReply>): ResendUserInviteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResendUserInviteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResendUserInviteReply): ResendUserInviteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ResendUserInviteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResendUserInviteReply
 */
export const ResendUserInviteReply = new ResendUserInviteReply$Type();
/**
 * @generated ServiceType for protobuf service UsersService
 */
export const UsersService = new ServiceType("UsersService", [
    { name: "PingUser", options: {}, I: PingUserRequest, O: PingUserReply },
    { name: "GetUsers", options: {}, I: GetUsersRequest, O: GetUsersReply },
    { name: "CreateUser", options: {}, I: CreateUserRequest, O: CreateUserReply },
    { name: "UpdateUser", options: {}, I: UpdateUserRequest, O: UpdateUserReply },
    { name: "DeleteUser", options: {}, I: DeleteUserRequest, O: DeleteUserReply },
    { name: "InviteUser", options: {}, I: InviteUserRequest, O: InviteUserReply },
    { name: "ResendUserInvite", options: {}, I: ResendUserInviteRequest, O: ResendUserInviteReply }
]);
