// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/customers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CustomerModel_User_Invite_Status } from "./models/model_customer";
import { CustomerModel_User_Status } from "./models/model_customer";
import { CustomerModel_Customer } from "./models/model_customer";
/**
 * Get Customer
 *
 * @generated from protobuf message CustomerGetRequest
 */
export interface CustomerGetRequest {
}
/**
 * @generated from protobuf message CustomerGetReply
 */
export interface CustomerGetReply {
    /**
     * @generated from protobuf field: repeated CustomerModel.Customer customers = 1;
     */
    customers: CustomerModel_Customer[];
}
/**
 * Create Customer
 *
 * @generated from protobuf message CustomerCreateRequest
 */
export interface CustomerCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: optional string email = 2;
     */
    email?: string;
    /**
     * @generated from protobuf field: optional string phone_number = 3;
     */
    phoneNumber?: string;
}
/**
 * @generated from protobuf message CustomerCreateReply
 */
export interface CustomerCreateReply {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
}
/**
 * Update Customer
 *
 * @generated from protobuf message CustomerUpdateRequest
 */
export interface CustomerUpdateRequest {
    /**
     * @generated from protobuf field: CustomerModel.Customer customer = 1;
     */
    customer?: CustomerModel_Customer;
}
/**
 * @generated from protobuf message CustomerUpdateReply
 */
export interface CustomerUpdateReply {
}
/**
 * Delete Customer
 *
 * @generated from protobuf message CustomerDeleteRequest
 */
export interface CustomerDeleteRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
}
/**
 * @generated from protobuf message CustomerDeleteReply
 */
export interface CustomerDeleteReply {
}
/**
 * Retrieve Customer
 *
 * @generated from protobuf message CustomerRetrieveRequest
 */
export interface CustomerRetrieveRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
}
/**
 * @generated from protobuf message CustomerRetrieveReply
 */
export interface CustomerRetrieveReply {
    /**
     * @generated from protobuf field: CustomerModel.Customer customer = 1;
     */
    customer?: CustomerModel_Customer;
}
/**
 * Get Customer Users
 *
 * @generated from protobuf message GetCustomerUsersRequest
 */
export interface GetCustomerUsersRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
}
/**
 * @generated from protobuf message GetCustomerUsersReply
 */
export interface GetCustomerUsersReply {
    /**
     * @generated from protobuf field: repeated GetCustomerUsersReply.User users = 1;
     */
    users: GetCustomerUsersReply_User[];
}
/**
 * @generated from protobuf message GetCustomerUsersReply.User
 */
export interface GetCustomerUsersReply_User {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string friendly_name = 2;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 7;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string selfie_url = 9;
     */
    selfieUrl: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 10;
     */
    selfieThumbUrl: string;
    /**
     * @generated from protobuf field: string title = 11;
     */
    title: string;
    /**
     * @generated from protobuf field: string internal_note = 12;
     */
    internalNote: string;
    /**
     * @generated from protobuf field: CustomerModel.User.Status status = 13;
     */
    status: CustomerModel_User_Status;
    /**
     * @generated from protobuf field: string created_at = 14;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: optional GetCustomerUsersReply.User.Invite invite = 15;
     */
    invite?: GetCustomerUsersReply_User_Invite;
}
/**
 * @generated from protobuf message GetCustomerUsersReply.User.Invite
 */
export interface GetCustomerUsersReply_User_Invite {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: CustomerModel.User.Invite.Status status = 2;
     */
    status: CustomerModel_User_Invite_Status;
}
/**
 * Create Customer User
 *
 * @generated from protobuf message CreateCustomerUserRequest
 */
export interface CreateCustomerUserRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string friendly_name = 2;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 7;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string title = 9;
     */
    title: string;
    /**
     * @generated from protobuf field: string internal_note = 10;
     */
    internalNote: string;
    /**
     * @generated from protobuf field: string password = 11;
     */
    password: string;
}
/**
 * @generated from protobuf message CreateCustomerUserReply
 */
export interface CreateCustomerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Update Customer User
 *
 * @generated from protobuf message UpdateCustomerUserRequest
 */
export interface UpdateCustomerUserRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string friendly_name = 3;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: string first_name = 4;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 5;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 6;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 7;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 8;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 9;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string title = 10;
     */
    title: string;
    /**
     * @generated from protobuf field: string internal_note = 11;
     */
    internalNote: string;
    /**
     * @generated from protobuf field: CustomerModel.User.Status status = 12;
     */
    status: CustomerModel_User_Status;
    /**
     * @generated from protobuf field: optional string password = 13;
     */
    password?: string;
}
/**
 * @generated from protobuf message UpdateCustomerUserReply
 */
export interface UpdateCustomerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Delete Customer User
 *
 * @generated from protobuf message DeleteCustomerUserRequest
 */
export interface DeleteCustomerUserRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message DeleteCustomerUserReply
 */
export interface DeleteCustomerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Invite Customer User
 *
 * @generated from protobuf message InviteCustomerUserRequest
 */
export interface InviteCustomerUserRequest {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
}
/**
 * @generated from protobuf message InviteCustomerUserReply
 */
export interface InviteCustomerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CustomerGetRequest$Type extends MessageType<CustomerGetRequest> {
    constructor() {
        super("CustomerGetRequest", []);
    }
    create(value?: PartialMessage<CustomerGetRequest>): CustomerGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerGetRequest): CustomerGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerGetRequest
 */
export const CustomerGetRequest = new CustomerGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerGetReply$Type extends MessageType<CustomerGetReply> {
    constructor() {
        super("CustomerGetReply", [
            { no: 1, name: "customers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerModel_Customer }
        ]);
    }
    create(value?: PartialMessage<CustomerGetReply>): CustomerGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customers = [];
        if (value !== undefined)
            reflectionMergePartial<CustomerGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerGetReply): CustomerGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CustomerModel.Customer customers */ 1:
                    message.customers.push(CustomerModel_Customer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CustomerModel.Customer customers = 1; */
        for (let i = 0; i < message.customers.length; i++)
            CustomerModel_Customer.internalBinaryWrite(message.customers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerGetReply
 */
export const CustomerGetReply = new CustomerGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerCreateRequest$Type extends MessageType<CustomerCreateRequest> {
    constructor() {
        super("CustomerCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerCreateRequest>): CustomerCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerCreateRequest): CustomerCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string email */ 2:
                    message.email = reader.string();
                    break;
                case /* optional string phone_number */ 3:
                    message.phoneNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string email = 2; */
        if (message.email !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* optional string phone_number = 3; */
        if (message.phoneNumber !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerCreateRequest
 */
export const CustomerCreateRequest = new CustomerCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerCreateReply$Type extends MessageType<CustomerCreateReply> {
    constructor() {
        super("CustomerCreateReply", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerCreateReply>): CustomerCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerCreateReply): CustomerCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerCreateReply
 */
export const CustomerCreateReply = new CustomerCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerUpdateRequest$Type extends MessageType<CustomerUpdateRequest> {
    constructor() {
        super("CustomerUpdateRequest", [
            { no: 1, name: "customer", kind: "message", T: () => CustomerModel_Customer }
        ]);
    }
    create(value?: PartialMessage<CustomerUpdateRequest>): CustomerUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerUpdateRequest): CustomerUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CustomerModel.Customer customer */ 1:
                    message.customer = CustomerModel_Customer.internalBinaryRead(reader, reader.uint32(), options, message.customer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CustomerModel.Customer customer = 1; */
        if (message.customer)
            CustomerModel_Customer.internalBinaryWrite(message.customer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerUpdateRequest
 */
export const CustomerUpdateRequest = new CustomerUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerUpdateReply$Type extends MessageType<CustomerUpdateReply> {
    constructor() {
        super("CustomerUpdateReply", []);
    }
    create(value?: PartialMessage<CustomerUpdateReply>): CustomerUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerUpdateReply): CustomerUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerUpdateReply
 */
export const CustomerUpdateReply = new CustomerUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerDeleteRequest$Type extends MessageType<CustomerDeleteRequest> {
    constructor() {
        super("CustomerDeleteRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerDeleteRequest>): CustomerDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerDeleteRequest): CustomerDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerDeleteRequest
 */
export const CustomerDeleteRequest = new CustomerDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerDeleteReply$Type extends MessageType<CustomerDeleteReply> {
    constructor() {
        super("CustomerDeleteReply", []);
    }
    create(value?: PartialMessage<CustomerDeleteReply>): CustomerDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerDeleteReply): CustomerDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerDeleteReply
 */
export const CustomerDeleteReply = new CustomerDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerRetrieveRequest$Type extends MessageType<CustomerRetrieveRequest> {
    constructor() {
        super("CustomerRetrieveRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerRetrieveRequest>): CustomerRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerRetrieveRequest): CustomerRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerRetrieveRequest
 */
export const CustomerRetrieveRequest = new CustomerRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerRetrieveReply$Type extends MessageType<CustomerRetrieveReply> {
    constructor() {
        super("CustomerRetrieveReply", [
            { no: 1, name: "customer", kind: "message", T: () => CustomerModel_Customer }
        ]);
    }
    create(value?: PartialMessage<CustomerRetrieveReply>): CustomerRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerRetrieveReply): CustomerRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CustomerModel.Customer customer */ 1:
                    message.customer = CustomerModel_Customer.internalBinaryRead(reader, reader.uint32(), options, message.customer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CustomerModel.Customer customer = 1; */
        if (message.customer)
            CustomerModel_Customer.internalBinaryWrite(message.customer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerRetrieveReply
 */
export const CustomerRetrieveReply = new CustomerRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCustomerUsersRequest$Type extends MessageType<GetCustomerUsersRequest> {
    constructor() {
        super("GetCustomerUsersRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCustomerUsersRequest>): GetCustomerUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        if (value !== undefined)
            reflectionMergePartial<GetCustomerUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCustomerUsersRequest): GetCustomerUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCustomerUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetCustomerUsersRequest
 */
export const GetCustomerUsersRequest = new GetCustomerUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCustomerUsersReply$Type extends MessageType<GetCustomerUsersReply> {
    constructor() {
        super("GetCustomerUsersReply", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetCustomerUsersReply_User }
        ]);
    }
    create(value?: PartialMessage<GetCustomerUsersReply>): GetCustomerUsersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<GetCustomerUsersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCustomerUsersReply): GetCustomerUsersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetCustomerUsersReply.User users */ 1:
                    message.users.push(GetCustomerUsersReply_User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCustomerUsersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetCustomerUsersReply.User users = 1; */
        for (let i = 0; i < message.users.length; i++)
            GetCustomerUsersReply_User.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetCustomerUsersReply
 */
export const GetCustomerUsersReply = new GetCustomerUsersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCustomerUsersReply_User$Type extends MessageType<GetCustomerUsersReply_User> {
    constructor() {
        super("GetCustomerUsersReply.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "selfie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "internal_note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "status", kind: "enum", T: () => ["CustomerModel.User.Status", CustomerModel_User_Status, "STATUS_"] },
            { no: 14, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "invite", kind: "message", T: () => GetCustomerUsersReply_User_Invite }
        ]);
    }
    create(value?: PartialMessage<GetCustomerUsersReply_User>): GetCustomerUsersReply_User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.friendlyName = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.selfieUrl = "";
        message.selfieThumbUrl = "";
        message.title = "";
        message.internalNote = "";
        message.status = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetCustomerUsersReply_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCustomerUsersReply_User): GetCustomerUsersReply_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string friendly_name */ 2:
                    message.friendlyName = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 7:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string selfie_url */ 9:
                    message.selfieUrl = reader.string();
                    break;
                case /* string selfie_thumb_url */ 10:
                    message.selfieThumbUrl = reader.string();
                    break;
                case /* string title */ 11:
                    message.title = reader.string();
                    break;
                case /* string internal_note */ 12:
                    message.internalNote = reader.string();
                    break;
                case /* CustomerModel.User.Status status */ 13:
                    message.status = reader.int32();
                    break;
                case /* string created_at */ 14:
                    message.createdAt = reader.string();
                    break;
                case /* optional GetCustomerUsersReply.User.Invite invite */ 15:
                    message.invite = GetCustomerUsersReply_User_Invite.internalBinaryRead(reader, reader.uint32(), options, message.invite);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCustomerUsersReply_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string friendly_name = 2; */
        if (message.friendlyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyName);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 7; */
        if (message.passwordChangeRequired !== false)
            writer.tag(7, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string selfie_url = 9; */
        if (message.selfieUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.selfieUrl);
        /* string selfie_thumb_url = 10; */
        if (message.selfieThumbUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.selfieThumbUrl);
        /* string title = 11; */
        if (message.title !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.title);
        /* string internal_note = 12; */
        if (message.internalNote !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.internalNote);
        /* CustomerModel.User.Status status = 13; */
        if (message.status !== 0)
            writer.tag(13, WireType.Varint).int32(message.status);
        /* string created_at = 14; */
        if (message.createdAt !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.createdAt);
        /* optional GetCustomerUsersReply.User.Invite invite = 15; */
        if (message.invite)
            GetCustomerUsersReply_User_Invite.internalBinaryWrite(message.invite, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetCustomerUsersReply.User
 */
export const GetCustomerUsersReply_User = new GetCustomerUsersReply_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCustomerUsersReply_User_Invite$Type extends MessageType<GetCustomerUsersReply_User_Invite> {
    constructor() {
        super("GetCustomerUsersReply.User.Invite", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["CustomerModel.User.Invite.Status", CustomerModel_User_Invite_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<GetCustomerUsersReply_User_Invite>): GetCustomerUsersReply_User_Invite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCustomerUsersReply_User_Invite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCustomerUsersReply_User_Invite): GetCustomerUsersReply_User_Invite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* CustomerModel.User.Invite.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCustomerUsersReply_User_Invite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* CustomerModel.User.Invite.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetCustomerUsersReply.User.Invite
 */
export const GetCustomerUsersReply_User_Invite = new GetCustomerUsersReply_User_Invite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCustomerUserRequest$Type extends MessageType<CreateCustomerUserRequest> {
    constructor() {
        super("CreateCustomerUserRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "internal_note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCustomerUserRequest>): CreateCustomerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.friendlyName = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.title = "";
        message.internalNote = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<CreateCustomerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCustomerUserRequest): CreateCustomerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* string friendly_name */ 2:
                    message.friendlyName = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 7:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string title */ 9:
                    message.title = reader.string();
                    break;
                case /* string internal_note */ 10:
                    message.internalNote = reader.string();
                    break;
                case /* string password */ 11:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCustomerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* string friendly_name = 2; */
        if (message.friendlyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyName);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 7; */
        if (message.passwordChangeRequired !== false)
            writer.tag(7, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string title = 9; */
        if (message.title !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.title);
        /* string internal_note = 10; */
        if (message.internalNote !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.internalNote);
        /* string password = 11; */
        if (message.password !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateCustomerUserRequest
 */
export const CreateCustomerUserRequest = new CreateCustomerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCustomerUserReply$Type extends MessageType<CreateCustomerUserReply> {
    constructor() {
        super("CreateCustomerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCustomerUserReply>): CreateCustomerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateCustomerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCustomerUserReply): CreateCustomerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCustomerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateCustomerUserReply
 */
export const CreateCustomerUserReply = new CreateCustomerUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCustomerUserRequest$Type extends MessageType<UpdateCustomerUserRequest> {
    constructor() {
        super("UpdateCustomerUserRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "internal_note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "status", kind: "enum", T: () => ["CustomerModel.User.Status", CustomerModel_User_Status, "STATUS_"] },
            { no: 13, name: "password", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateCustomerUserRequest>): UpdateCustomerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.userId = "";
        message.friendlyName = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.title = "";
        message.internalNote = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateCustomerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCustomerUserRequest): UpdateCustomerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string friendly_name */ 3:
                    message.friendlyName = reader.string();
                    break;
                case /* string first_name */ 4:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 5:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 6:
                    message.email = reader.string();
                    break;
                case /* string phone */ 7:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 8:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 9:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string title */ 10:
                    message.title = reader.string();
                    break;
                case /* string internal_note */ 11:
                    message.internalNote = reader.string();
                    break;
                case /* CustomerModel.User.Status status */ 12:
                    message.status = reader.int32();
                    break;
                case /* optional string password */ 13:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCustomerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string friendly_name = 3; */
        if (message.friendlyName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.friendlyName);
        /* string first_name = 4; */
        if (message.firstName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        /* string email = 6; */
        if (message.email !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        /* string phone = 7; */
        if (message.phone !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 8; */
        if (message.passwordChangeRequired !== false)
            writer.tag(8, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 9; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(9, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string title = 10; */
        if (message.title !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.title);
        /* string internal_note = 11; */
        if (message.internalNote !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.internalNote);
        /* CustomerModel.User.Status status = 12; */
        if (message.status !== 0)
            writer.tag(12, WireType.Varint).int32(message.status);
        /* optional string password = 13; */
        if (message.password !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateCustomerUserRequest
 */
export const UpdateCustomerUserRequest = new UpdateCustomerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCustomerUserReply$Type extends MessageType<UpdateCustomerUserReply> {
    constructor() {
        super("UpdateCustomerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateCustomerUserReply>): UpdateCustomerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateCustomerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCustomerUserReply): UpdateCustomerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCustomerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateCustomerUserReply
 */
export const UpdateCustomerUserReply = new UpdateCustomerUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCustomerUserRequest$Type extends MessageType<DeleteCustomerUserRequest> {
    constructor() {
        super("DeleteCustomerUserRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCustomerUserRequest>): DeleteCustomerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteCustomerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCustomerUserRequest): DeleteCustomerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCustomerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteCustomerUserRequest
 */
export const DeleteCustomerUserRequest = new DeleteCustomerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCustomerUserReply$Type extends MessageType<DeleteCustomerUserReply> {
    constructor() {
        super("DeleteCustomerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCustomerUserReply>): DeleteCustomerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteCustomerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCustomerUserReply): DeleteCustomerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCustomerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteCustomerUserReply
 */
export const DeleteCustomerUserReply = new DeleteCustomerUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteCustomerUserRequest$Type extends MessageType<InviteCustomerUserRequest> {
    constructor() {
        super("InviteCustomerUserRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteCustomerUserRequest>): InviteCustomerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<InviteCustomerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteCustomerUserRequest): InviteCustomerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteCustomerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteCustomerUserRequest
 */
export const InviteCustomerUserRequest = new InviteCustomerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteCustomerUserReply$Type extends MessageType<InviteCustomerUserReply> {
    constructor() {
        super("InviteCustomerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteCustomerUserReply>): InviteCustomerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteCustomerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteCustomerUserReply): InviteCustomerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteCustomerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteCustomerUserReply
 */
export const InviteCustomerUserReply = new InviteCustomerUserReply$Type();
/**
 * @generated ServiceType for protobuf service CustomersService
 */
export const CustomersService = new ServiceType("CustomersService", [
    { name: "CustomerGet", options: {}, I: CustomerGetRequest, O: CustomerGetReply },
    { name: "CustomerCreate", options: {}, I: CustomerCreateRequest, O: CustomerCreateReply },
    { name: "CustomerUpdate", options: {}, I: CustomerUpdateRequest, O: CustomerUpdateReply },
    { name: "CustomerDelete", options: {}, I: CustomerDeleteRequest, O: CustomerDeleteReply },
    { name: "CustomerRetrieve", options: {}, I: CustomerRetrieveRequest, O: CustomerRetrieveReply },
    { name: "GetCustomerUsers", options: {}, I: GetCustomerUsersRequest, O: GetCustomerUsersReply },
    { name: "CreateCustomerUser", options: {}, I: CreateCustomerUserRequest, O: CreateCustomerUserReply },
    { name: "UpdateCustomerUser", options: {}, I: UpdateCustomerUserRequest, O: UpdateCustomerUserReply },
    { name: "DeleteCustomerUser", options: {}, I: DeleteCustomerUserRequest, O: DeleteCustomerUserReply },
    { name: "InviteCustomerUser", options: {}, I: InviteCustomerUserRequest, O: InviteCustomerUserReply }
]);
