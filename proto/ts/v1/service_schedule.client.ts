// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_schedule.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ServiceScheduleService } from "./service_schedule";
import type { ServiceScheduleDeleteReply } from "./service_schedule";
import type { ServiceScheduleDeleteRequest } from "./service_schedule";
import type { ServiceScheduleUpdateReply } from "./service_schedule";
import type { ServiceScheduleUpdateRequest } from "./service_schedule";
import type { ServiceScheduleGetReply } from "./service_schedule";
import type { ServiceScheduleGetRequest } from "./service_schedule";
import type { ServiceScheduleRetrieveReply } from "./service_schedule";
import type { ServiceScheduleRetrieveRequest } from "./service_schedule";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServiceScheduleCreateReply } from "./service_schedule";
import type { ServiceScheduleCreateRequest } from "./service_schedule";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ServiceScheduleService
 */
export interface IServiceScheduleServiceClient {
    /**
     * @generated from protobuf rpc: ServiceScheduleCreate(ServiceScheduleCreateRequest) returns (ServiceScheduleCreateReply);
     */
    serviceScheduleCreate(input: ServiceScheduleCreateRequest, options?: RpcOptions): UnaryCall<ServiceScheduleCreateRequest, ServiceScheduleCreateReply>;
    /**
     * @generated from protobuf rpc: ServiceScheduleRetrieve(ServiceScheduleRetrieveRequest) returns (ServiceScheduleRetrieveReply);
     */
    serviceScheduleRetrieve(input: ServiceScheduleRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceScheduleRetrieveRequest, ServiceScheduleRetrieveReply>;
    /**
     * @generated from protobuf rpc: ServiceScheduleGet(ServiceScheduleGetRequest) returns (ServiceScheduleGetReply);
     */
    serviceScheduleGet(input: ServiceScheduleGetRequest, options?: RpcOptions): UnaryCall<ServiceScheduleGetRequest, ServiceScheduleGetReply>;
    /**
     * @generated from protobuf rpc: ServiceScheduleUpdate(ServiceScheduleUpdateRequest) returns (ServiceScheduleUpdateReply);
     */
    serviceScheduleUpdate(input: ServiceScheduleUpdateRequest, options?: RpcOptions): UnaryCall<ServiceScheduleUpdateRequest, ServiceScheduleUpdateReply>;
    /**
     * @generated from protobuf rpc: ServiceScheduleDelete(ServiceScheduleDeleteRequest) returns (ServiceScheduleDeleteReply);
     */
    serviceScheduleDelete(input: ServiceScheduleDeleteRequest, options?: RpcOptions): UnaryCall<ServiceScheduleDeleteRequest, ServiceScheduleDeleteReply>;
}
/**
 * @generated from protobuf service ServiceScheduleService
 */
export class ServiceScheduleServiceClient implements IServiceScheduleServiceClient, ServiceInfo {
    typeName = ServiceScheduleService.typeName;
    methods = ServiceScheduleService.methods;
    options = ServiceScheduleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ServiceScheduleCreate(ServiceScheduleCreateRequest) returns (ServiceScheduleCreateReply);
     */
    serviceScheduleCreate(input: ServiceScheduleCreateRequest, options?: RpcOptions): UnaryCall<ServiceScheduleCreateRequest, ServiceScheduleCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceScheduleCreateRequest, ServiceScheduleCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceScheduleRetrieve(ServiceScheduleRetrieveRequest) returns (ServiceScheduleRetrieveReply);
     */
    serviceScheduleRetrieve(input: ServiceScheduleRetrieveRequest, options?: RpcOptions): UnaryCall<ServiceScheduleRetrieveRequest, ServiceScheduleRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceScheduleRetrieveRequest, ServiceScheduleRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceScheduleGet(ServiceScheduleGetRequest) returns (ServiceScheduleGetReply);
     */
    serviceScheduleGet(input: ServiceScheduleGetRequest, options?: RpcOptions): UnaryCall<ServiceScheduleGetRequest, ServiceScheduleGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceScheduleGetRequest, ServiceScheduleGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceScheduleUpdate(ServiceScheduleUpdateRequest) returns (ServiceScheduleUpdateReply);
     */
    serviceScheduleUpdate(input: ServiceScheduleUpdateRequest, options?: RpcOptions): UnaryCall<ServiceScheduleUpdateRequest, ServiceScheduleUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceScheduleUpdateRequest, ServiceScheduleUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServiceScheduleDelete(ServiceScheduleDeleteRequest) returns (ServiceScheduleDeleteReply);
     */
    serviceScheduleDelete(input: ServiceScheduleDeleteRequest, options?: RpcOptions): UnaryCall<ServiceScheduleDeleteRequest, ServiceScheduleDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServiceScheduleDeleteRequest, ServiceScheduleDeleteReply>("unary", this._transport, method, opt, input);
    }
}
