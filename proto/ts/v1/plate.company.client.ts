// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/plate.company.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PlateCompanyService } from "./plate.company";
import type { PlateCompanyRestoreReply } from "./plate.company";
import type { PlateCompanyRestoreRequest } from "./plate.company";
import type { PlateCompanyDeleteReply } from "./plate.company";
import type { PlateCompanyDeleteRequest } from "./plate.company";
import type { PlateCompanyUpdateReply } from "./plate.company";
import type { PlateCompanyUpdateRequest } from "./plate.company";
import type { PlateCompanyCreateReply } from "./plate.company";
import type { PlateCompanyCreateRequest } from "./plate.company";
import type { PlateCompanyRetrieveReply } from "./plate.company";
import type { PlateCompanyRetrieveRequest } from "./plate.company";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PlateCompanyGetReply } from "./plate.company";
import type { PlateCompanyGetRequest } from "./plate.company";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// import "v1/models/model_trailer.proto";

/**
 * @generated from protobuf service PlateCompanyService
 */
export interface IPlateCompanyServiceClient {
    /**
     * @generated from protobuf rpc: PlateCompanyGet(PlateCompanyGetRequest) returns (PlateCompanyGetReply);
     */
    plateCompanyGet(input: PlateCompanyGetRequest, options?: RpcOptions): UnaryCall<PlateCompanyGetRequest, PlateCompanyGetReply>;
    /**
     * @generated from protobuf rpc: PlateCompanyRetrieve(PlateCompanyRetrieveRequest) returns (PlateCompanyRetrieveReply);
     */
    plateCompanyRetrieve(input: PlateCompanyRetrieveRequest, options?: RpcOptions): UnaryCall<PlateCompanyRetrieveRequest, PlateCompanyRetrieveReply>;
    /**
     * @generated from protobuf rpc: PlateCompanyCreate(PlateCompanyCreateRequest) returns (PlateCompanyCreateReply);
     */
    plateCompanyCreate(input: PlateCompanyCreateRequest, options?: RpcOptions): UnaryCall<PlateCompanyCreateRequest, PlateCompanyCreateReply>;
    /**
     * @generated from protobuf rpc: PlateCompanyUpdate(PlateCompanyUpdateRequest) returns (PlateCompanyUpdateReply);
     */
    plateCompanyUpdate(input: PlateCompanyUpdateRequest, options?: RpcOptions): UnaryCall<PlateCompanyUpdateRequest, PlateCompanyUpdateReply>;
    /**
     * @generated from protobuf rpc: PlateCompanyDelete(PlateCompanyDeleteRequest) returns (PlateCompanyDeleteReply);
     */
    plateCompanyDelete(input: PlateCompanyDeleteRequest, options?: RpcOptions): UnaryCall<PlateCompanyDeleteRequest, PlateCompanyDeleteReply>;
    /**
     * @generated from protobuf rpc: PlateCompanyRestore(PlateCompanyRestoreRequest) returns (PlateCompanyRestoreReply);
     */
    plateCompanyRestore(input: PlateCompanyRestoreRequest, options?: RpcOptions): UnaryCall<PlateCompanyRestoreRequest, PlateCompanyRestoreReply>;
}
// import "v1/models/model_trailer.proto";

/**
 * @generated from protobuf service PlateCompanyService
 */
export class PlateCompanyServiceClient implements IPlateCompanyServiceClient, ServiceInfo {
    typeName = PlateCompanyService.typeName;
    methods = PlateCompanyService.methods;
    options = PlateCompanyService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PlateCompanyGet(PlateCompanyGetRequest) returns (PlateCompanyGetReply);
     */
    plateCompanyGet(input: PlateCompanyGetRequest, options?: RpcOptions): UnaryCall<PlateCompanyGetRequest, PlateCompanyGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlateCompanyGetRequest, PlateCompanyGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlateCompanyRetrieve(PlateCompanyRetrieveRequest) returns (PlateCompanyRetrieveReply);
     */
    plateCompanyRetrieve(input: PlateCompanyRetrieveRequest, options?: RpcOptions): UnaryCall<PlateCompanyRetrieveRequest, PlateCompanyRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlateCompanyRetrieveRequest, PlateCompanyRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlateCompanyCreate(PlateCompanyCreateRequest) returns (PlateCompanyCreateReply);
     */
    plateCompanyCreate(input: PlateCompanyCreateRequest, options?: RpcOptions): UnaryCall<PlateCompanyCreateRequest, PlateCompanyCreateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlateCompanyCreateRequest, PlateCompanyCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlateCompanyUpdate(PlateCompanyUpdateRequest) returns (PlateCompanyUpdateReply);
     */
    plateCompanyUpdate(input: PlateCompanyUpdateRequest, options?: RpcOptions): UnaryCall<PlateCompanyUpdateRequest, PlateCompanyUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlateCompanyUpdateRequest, PlateCompanyUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlateCompanyDelete(PlateCompanyDeleteRequest) returns (PlateCompanyDeleteReply);
     */
    plateCompanyDelete(input: PlateCompanyDeleteRequest, options?: RpcOptions): UnaryCall<PlateCompanyDeleteRequest, PlateCompanyDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlateCompanyDeleteRequest, PlateCompanyDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlateCompanyRestore(PlateCompanyRestoreRequest) returns (PlateCompanyRestoreReply);
     */
    plateCompanyRestore(input: PlateCompanyRestoreRequest, options?: RpcOptions): UnaryCall<PlateCompanyRestoreRequest, PlateCompanyRestoreReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlateCompanyRestoreRequest, PlateCompanyRestoreReply>("unary", this._transport, method, opt, input);
    }
}
