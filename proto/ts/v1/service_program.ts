// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_program.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceProgramModel_ProgramRead } from "./models/model_service_program";
import { ServiceProgramModel_ProgramWrite } from "./models/model_service_program";
/**
 * Create
 *
 * @generated from protobuf message ServiceProgramCreateRequest
 */
export interface ServiceProgramCreateRequest {
    /**
     * @generated from protobuf field: ServiceProgramModel.ProgramWrite program = 1;
     */
    program?: ServiceProgramModel_ProgramWrite;
}
/**
 * @generated from protobuf message ServiceProgramCreateReply
 */
export interface ServiceProgramCreateReply {
    /**
     * @generated from protobuf field: string service_program_id = 1;
     */
    serviceProgramId: string;
}
/**
 * Update
 *
 * @generated from protobuf message ServiceProgramUpdateRequest
 */
export interface ServiceProgramUpdateRequest {
    /**
     * @generated from protobuf field: string service_program_id = 1;
     */
    serviceProgramId: string;
    /**
     * @generated from protobuf field: ServiceProgramModel.ProgramWrite program = 2;
     */
    program?: ServiceProgramModel_ProgramWrite;
}
/**
 * @generated from protobuf message ServiceProgramUpdateReply
 */
export interface ServiceProgramUpdateReply {
}
/**
 * Retrieve
 *
 * @generated from protobuf message ServiceProgramRetrieveRequest
 */
export interface ServiceProgramRetrieveRequest {
    /**
     * @generated from protobuf field: string service_program_id = 1;
     */
    serviceProgramId: string;
}
/**
 * @generated from protobuf message ServiceProgramRetrieveReply
 */
export interface ServiceProgramRetrieveReply {
    /**
     * @generated from protobuf field: ServiceProgramModel.ProgramRead program = 1;
     */
    program?: ServiceProgramModel_ProgramRead;
}
/**
 * Get
 *
 * @generated from protobuf message ServiceProgramGetRequest
 */
export interface ServiceProgramGetRequest {
}
/**
 * @generated from protobuf message ServiceProgramGetReply
 */
export interface ServiceProgramGetReply {
    /**
     * @generated from protobuf field: repeated ServiceProgramModel.ProgramRead programs = 1;
     */
    programs: ServiceProgramModel_ProgramRead[];
}
/**
 * Delete
 *
 * @generated from protobuf message ServiceProgramDeleteRequest
 */
export interface ServiceProgramDeleteRequest {
    /**
     * @generated from protobuf field: string service_program_id = 1;
     */
    serviceProgramId: string;
}
/**
 * @generated from protobuf message ServiceProgramDeleteReply
 */
export interface ServiceProgramDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramCreateRequest$Type extends MessageType<ServiceProgramCreateRequest> {
    constructor() {
        super("ServiceProgramCreateRequest", [
            { no: 1, name: "program", kind: "message", T: () => ServiceProgramModel_ProgramWrite }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramCreateRequest>): ServiceProgramCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramCreateRequest): ServiceProgramCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceProgramModel.ProgramWrite program */ 1:
                    message.program = ServiceProgramModel_ProgramWrite.internalBinaryRead(reader, reader.uint32(), options, message.program);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceProgramModel.ProgramWrite program = 1; */
        if (message.program)
            ServiceProgramModel_ProgramWrite.internalBinaryWrite(message.program, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramCreateRequest
 */
export const ServiceProgramCreateRequest = new ServiceProgramCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramCreateReply$Type extends MessageType<ServiceProgramCreateReply> {
    constructor() {
        super("ServiceProgramCreateReply", [
            { no: 1, name: "service_program_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramCreateReply>): ServiceProgramCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProgramId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramCreateReply): ServiceProgramCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_program_id */ 1:
                    message.serviceProgramId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_program_id = 1; */
        if (message.serviceProgramId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProgramId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramCreateReply
 */
export const ServiceProgramCreateReply = new ServiceProgramCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramUpdateRequest$Type extends MessageType<ServiceProgramUpdateRequest> {
    constructor() {
        super("ServiceProgramUpdateRequest", [
            { no: 1, name: "service_program_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "program", kind: "message", T: () => ServiceProgramModel_ProgramWrite }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramUpdateRequest>): ServiceProgramUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProgramId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramUpdateRequest): ServiceProgramUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_program_id */ 1:
                    message.serviceProgramId = reader.string();
                    break;
                case /* ServiceProgramModel.ProgramWrite program */ 2:
                    message.program = ServiceProgramModel_ProgramWrite.internalBinaryRead(reader, reader.uint32(), options, message.program);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_program_id = 1; */
        if (message.serviceProgramId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProgramId);
        /* ServiceProgramModel.ProgramWrite program = 2; */
        if (message.program)
            ServiceProgramModel_ProgramWrite.internalBinaryWrite(message.program, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramUpdateRequest
 */
export const ServiceProgramUpdateRequest = new ServiceProgramUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramUpdateReply$Type extends MessageType<ServiceProgramUpdateReply> {
    constructor() {
        super("ServiceProgramUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceProgramUpdateReply>): ServiceProgramUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramUpdateReply): ServiceProgramUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProgramUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramUpdateReply
 */
export const ServiceProgramUpdateReply = new ServiceProgramUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramRetrieveRequest$Type extends MessageType<ServiceProgramRetrieveRequest> {
    constructor() {
        super("ServiceProgramRetrieveRequest", [
            { no: 1, name: "service_program_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramRetrieveRequest>): ServiceProgramRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProgramId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramRetrieveRequest): ServiceProgramRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_program_id */ 1:
                    message.serviceProgramId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_program_id = 1; */
        if (message.serviceProgramId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProgramId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramRetrieveRequest
 */
export const ServiceProgramRetrieveRequest = new ServiceProgramRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramRetrieveReply$Type extends MessageType<ServiceProgramRetrieveReply> {
    constructor() {
        super("ServiceProgramRetrieveReply", [
            { no: 1, name: "program", kind: "message", T: () => ServiceProgramModel_ProgramRead }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramRetrieveReply>): ServiceProgramRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramRetrieveReply): ServiceProgramRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceProgramModel.ProgramRead program */ 1:
                    message.program = ServiceProgramModel_ProgramRead.internalBinaryRead(reader, reader.uint32(), options, message.program);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceProgramModel.ProgramRead program = 1; */
        if (message.program)
            ServiceProgramModel_ProgramRead.internalBinaryWrite(message.program, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramRetrieveReply
 */
export const ServiceProgramRetrieveReply = new ServiceProgramRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramGetRequest$Type extends MessageType<ServiceProgramGetRequest> {
    constructor() {
        super("ServiceProgramGetRequest", []);
    }
    create(value?: PartialMessage<ServiceProgramGetRequest>): ServiceProgramGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramGetRequest): ServiceProgramGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProgramGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramGetRequest
 */
export const ServiceProgramGetRequest = new ServiceProgramGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramGetReply$Type extends MessageType<ServiceProgramGetReply> {
    constructor() {
        super("ServiceProgramGetReply", [
            { no: 1, name: "programs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceProgramModel_ProgramRead }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramGetReply>): ServiceProgramGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.programs = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramGetReply): ServiceProgramGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceProgramModel.ProgramRead programs */ 1:
                    message.programs.push(ServiceProgramModel_ProgramRead.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceProgramModel.ProgramRead programs = 1; */
        for (let i = 0; i < message.programs.length; i++)
            ServiceProgramModel_ProgramRead.internalBinaryWrite(message.programs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramGetReply
 */
export const ServiceProgramGetReply = new ServiceProgramGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramDeleteRequest$Type extends MessageType<ServiceProgramDeleteRequest> {
    constructor() {
        super("ServiceProgramDeleteRequest", [
            { no: 1, name: "service_program_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramDeleteRequest>): ServiceProgramDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProgramId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramDeleteRequest): ServiceProgramDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_program_id */ 1:
                    message.serviceProgramId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_program_id = 1; */
        if (message.serviceProgramId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProgramId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramDeleteRequest
 */
export const ServiceProgramDeleteRequest = new ServiceProgramDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramDeleteReply$Type extends MessageType<ServiceProgramDeleteReply> {
    constructor() {
        super("ServiceProgramDeleteReply", []);
    }
    create(value?: PartialMessage<ServiceProgramDeleteReply>): ServiceProgramDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramDeleteReply): ServiceProgramDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProgramDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramDeleteReply
 */
export const ServiceProgramDeleteReply = new ServiceProgramDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service ServiceProgramService
 */
export const ServiceProgramService = new ServiceType("ServiceProgramService", [
    { name: "ServiceProgramCreate", options: {}, I: ServiceProgramCreateRequest, O: ServiceProgramCreateReply },
    { name: "ServiceProgramRetrieve", options: {}, I: ServiceProgramRetrieveRequest, O: ServiceProgramRetrieveReply },
    { name: "ServiceProgramGet", options: {}, I: ServiceProgramGetRequest, O: ServiceProgramGetReply },
    { name: "ServiceProgramUpdate", options: {}, I: ServiceProgramUpdateRequest, O: ServiceProgramUpdateReply },
    { name: "ServiceProgramDelete", options: {}, I: ServiceProgramDeleteRequest, O: ServiceProgramDeleteReply }
]);
