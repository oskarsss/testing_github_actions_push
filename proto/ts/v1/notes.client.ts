// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/notes.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NotesService } from "./notes";
import type { ReadNotesReply } from "./notes";
import type { ReadNotesRequest } from "./notes";
import type { DeleteNoteReply } from "./notes";
import type { DeleteNoteRequest } from "./notes";
import type { UpdateNoteReply } from "./notes";
import type { UpdateNoteRequest } from "./notes";
import type { CreateNoteReply } from "./notes";
import type { CreateNoteRequest } from "./notes";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetNotesReply } from "./notes";
import type { GetNotesRequest } from "./notes";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service NotesService
 */
export interface INotesServiceClient {
    /**
     * @generated from protobuf rpc: GetNotes(GetNotesRequest) returns (GetNotesReply);
     */
    getNotes(input: GetNotesRequest, options?: RpcOptions): UnaryCall<GetNotesRequest, GetNotesReply>;
    /**
     * @generated from protobuf rpc: CreateNote(CreateNoteRequest) returns (CreateNoteReply);
     */
    createNote(input: CreateNoteRequest, options?: RpcOptions): UnaryCall<CreateNoteRequest, CreateNoteReply>;
    /**
     * @generated from protobuf rpc: UpdateNote(UpdateNoteRequest) returns (UpdateNoteReply);
     */
    updateNote(input: UpdateNoteRequest, options?: RpcOptions): UnaryCall<UpdateNoteRequest, UpdateNoteReply>;
    /**
     * @generated from protobuf rpc: DeleteNote(DeleteNoteRequest) returns (DeleteNoteReply);
     */
    deleteNote(input: DeleteNoteRequest, options?: RpcOptions): UnaryCall<DeleteNoteRequest, DeleteNoteReply>;
    /**
     * @generated from protobuf rpc: ReadNotes(ReadNotesRequest) returns (ReadNotesReply);
     */
    readNotes(input: ReadNotesRequest, options?: RpcOptions): UnaryCall<ReadNotesRequest, ReadNotesReply>;
}
/**
 * @generated from protobuf service NotesService
 */
export class NotesServiceClient implements INotesServiceClient, ServiceInfo {
    typeName = NotesService.typeName;
    methods = NotesService.methods;
    options = NotesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetNotes(GetNotesRequest) returns (GetNotesReply);
     */
    getNotes(input: GetNotesRequest, options?: RpcOptions): UnaryCall<GetNotesRequest, GetNotesReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNotesRequest, GetNotesReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateNote(CreateNoteRequest) returns (CreateNoteReply);
     */
    createNote(input: CreateNoteRequest, options?: RpcOptions): UnaryCall<CreateNoteRequest, CreateNoteReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateNoteRequest, CreateNoteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateNote(UpdateNoteRequest) returns (UpdateNoteReply);
     */
    updateNote(input: UpdateNoteRequest, options?: RpcOptions): UnaryCall<UpdateNoteRequest, UpdateNoteReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateNoteRequest, UpdateNoteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteNote(DeleteNoteRequest) returns (DeleteNoteReply);
     */
    deleteNote(input: DeleteNoteRequest, options?: RpcOptions): UnaryCall<DeleteNoteRequest, DeleteNoteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteNoteRequest, DeleteNoteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadNotes(ReadNotesRequest) returns (ReadNotesReply);
     */
    readNotes(input: ReadNotesRequest, options?: RpcOptions): UnaryCall<ReadNotesRequest, ReadNotesReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadNotesRequest, ReadNotesReply>("unary", this._transport, method, opt, input);
    }
}
