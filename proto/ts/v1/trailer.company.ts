// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/trailer.company.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * TrailerCompanyGet
 *
 * @generated from protobuf message TrailerCompanyGetRequest
 */
export interface TrailerCompanyGetRequest {
}
/**
 * @generated from protobuf message TrailerCompanyGetReply
 */
export interface TrailerCompanyGetReply {
    /**
     * @generated from protobuf field: repeated TrailerCompanyGetReply.TrailerCompany trailer_companies = 1;
     */
    trailerCompanies: TrailerCompanyGetReply_TrailerCompany[];
}
/**
 * @generated from protobuf message TrailerCompanyGetReply.TrailerCompany
 */
export interface TrailerCompanyGetReply_TrailerCompany {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 4;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: int64 trailer_company_count = 5;
     */
    trailerCompanyCount: number;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 7;
     */
    deleted: boolean;
}
/**
 * TrailerCompanyRetrieve
 *
 * @generated from protobuf message TrailerCompanyRetrieveRequest
 */
export interface TrailerCompanyRetrieveRequest {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
}
/**
 * @generated from protobuf message TrailerCompanyRetrieveReply
 */
export interface TrailerCompanyRetrieveReply {
    /**
     * @generated from protobuf field: TrailerCompanyRetrieveReply.TrailerCompany trailer_company = 1;
     */
    trailerCompany?: TrailerCompanyRetrieveReply_TrailerCompany;
}
/**
 * @generated from protobuf message TrailerCompanyRetrieveReply.TrailerCompany
 */
export interface TrailerCompanyRetrieveReply_TrailerCompany {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 4;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
}
/**
 * TrailerCompanyCreate
 *
 * @generated from protobuf message TrailerCompanyCreateRequest
 */
export interface TrailerCompanyCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 3;
     */
    phoneNumber: string;
}
/**
 * @generated from protobuf message TrailerCompanyCreateReply
 */
export interface TrailerCompanyCreateReply {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
}
/**
 * TrailerCompanyDelete
 *
 * @generated from protobuf message TrailerCompanyDeleteRequest
 */
export interface TrailerCompanyDeleteRequest {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
}
/**
 * @generated from protobuf message TrailerCompanyDeleteReply
 */
export interface TrailerCompanyDeleteReply {
}
/**
 * TrailerCompanyUpdate
 *
 * @generated from protobuf message TrailerCompanyUpdateRequest
 */
export interface TrailerCompanyUpdateRequest {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 4;
     */
    phoneNumber: string;
}
/**
 * @generated from protobuf message TrailerCompanyUpdateReply
 */
export interface TrailerCompanyUpdateReply {
}
/**
 * TrailerCompanyRestore
 *
 * @generated from protobuf message TrailerCompanyRestoreRequest
 */
export interface TrailerCompanyRestoreRequest {
    /**
     * @generated from protobuf field: string trailer_company_id = 1;
     */
    trailerCompanyId: string;
}
/**
 * @generated from protobuf message TrailerCompanyRestoreReply
 */
export interface TrailerCompanyRestoreReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyGetRequest$Type extends MessageType<TrailerCompanyGetRequest> {
    constructor() {
        super("TrailerCompanyGetRequest", []);
    }
    create(value?: PartialMessage<TrailerCompanyGetRequest>): TrailerCompanyGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyGetRequest): TrailerCompanyGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerCompanyGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyGetRequest
 */
export const TrailerCompanyGetRequest = new TrailerCompanyGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyGetReply$Type extends MessageType<TrailerCompanyGetReply> {
    constructor() {
        super("TrailerCompanyGetReply", [
            { no: 1, name: "trailer_companies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrailerCompanyGetReply_TrailerCompany }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyGetReply>): TrailerCompanyGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanies = [];
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyGetReply): TrailerCompanyGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TrailerCompanyGetReply.TrailerCompany trailer_companies */ 1:
                    message.trailerCompanies.push(TrailerCompanyGetReply_TrailerCompany.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TrailerCompanyGetReply.TrailerCompany trailer_companies = 1; */
        for (let i = 0; i < message.trailerCompanies.length; i++)
            TrailerCompanyGetReply_TrailerCompany.internalBinaryWrite(message.trailerCompanies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyGetReply
 */
export const TrailerCompanyGetReply = new TrailerCompanyGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyGetReply_TrailerCompany$Type extends MessageType<TrailerCompanyGetReply_TrailerCompany> {
    constructor() {
        super("TrailerCompanyGetReply.TrailerCompany", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "trailer_company_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyGetReply_TrailerCompany>): TrailerCompanyGetReply_TrailerCompany {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        message.name = "";
        message.email = "";
        message.phoneNumber = "";
        message.trailerCompanyCount = 0;
        message.createdAt = "";
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyGetReply_TrailerCompany>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyGetReply_TrailerCompany): TrailerCompanyGetReply_TrailerCompany {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 4:
                    message.phoneNumber = reader.string();
                    break;
                case /* int64 trailer_company_count */ 5:
                    message.trailerCompanyCount = reader.int64().toNumber();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 7:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyGetReply_TrailerCompany, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 4; */
        if (message.phoneNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phoneNumber);
        /* int64 trailer_company_count = 5; */
        if (message.trailerCompanyCount !== 0)
            writer.tag(5, WireType.Varint).int64(message.trailerCompanyCount);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 7; */
        if (message.deleted !== false)
            writer.tag(7, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyGetReply.TrailerCompany
 */
export const TrailerCompanyGetReply_TrailerCompany = new TrailerCompanyGetReply_TrailerCompany$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRetrieveRequest$Type extends MessageType<TrailerCompanyRetrieveRequest> {
    constructor() {
        super("TrailerCompanyRetrieveRequest", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyRetrieveRequest>): TrailerCompanyRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRetrieveRequest): TrailerCompanyRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRetrieveRequest
 */
export const TrailerCompanyRetrieveRequest = new TrailerCompanyRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRetrieveReply$Type extends MessageType<TrailerCompanyRetrieveReply> {
    constructor() {
        super("TrailerCompanyRetrieveReply", [
            { no: 1, name: "trailer_company", kind: "message", T: () => TrailerCompanyRetrieveReply_TrailerCompany }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyRetrieveReply>): TrailerCompanyRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRetrieveReply): TrailerCompanyRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TrailerCompanyRetrieveReply.TrailerCompany trailer_company */ 1:
                    message.trailerCompany = TrailerCompanyRetrieveReply_TrailerCompany.internalBinaryRead(reader, reader.uint32(), options, message.trailerCompany);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TrailerCompanyRetrieveReply.TrailerCompany trailer_company = 1; */
        if (message.trailerCompany)
            TrailerCompanyRetrieveReply_TrailerCompany.internalBinaryWrite(message.trailerCompany, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRetrieveReply
 */
export const TrailerCompanyRetrieveReply = new TrailerCompanyRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRetrieveReply_TrailerCompany$Type extends MessageType<TrailerCompanyRetrieveReply_TrailerCompany> {
    constructor() {
        super("TrailerCompanyRetrieveReply.TrailerCompany", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyRetrieveReply_TrailerCompany>): TrailerCompanyRetrieveReply_TrailerCompany {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        message.name = "";
        message.email = "";
        message.phoneNumber = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRetrieveReply_TrailerCompany>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRetrieveReply_TrailerCompany): TrailerCompanyRetrieveReply_TrailerCompany {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 4:
                    message.phoneNumber = reader.string();
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyRetrieveReply_TrailerCompany, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 4; */
        if (message.phoneNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phoneNumber);
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRetrieveReply.TrailerCompany
 */
export const TrailerCompanyRetrieveReply_TrailerCompany = new TrailerCompanyRetrieveReply_TrailerCompany$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyCreateRequest$Type extends MessageType<TrailerCompanyCreateRequest> {
    constructor() {
        super("TrailerCompanyCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyCreateRequest>): TrailerCompanyCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.email = "";
        message.phoneNumber = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyCreateRequest): TrailerCompanyCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 3:
                    message.phoneNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 3; */
        if (message.phoneNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyCreateRequest
 */
export const TrailerCompanyCreateRequest = new TrailerCompanyCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyCreateReply$Type extends MessageType<TrailerCompanyCreateReply> {
    constructor() {
        super("TrailerCompanyCreateReply", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyCreateReply>): TrailerCompanyCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyCreateReply): TrailerCompanyCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyCreateReply
 */
export const TrailerCompanyCreateReply = new TrailerCompanyCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyDeleteRequest$Type extends MessageType<TrailerCompanyDeleteRequest> {
    constructor() {
        super("TrailerCompanyDeleteRequest", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyDeleteRequest>): TrailerCompanyDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyDeleteRequest): TrailerCompanyDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyDeleteRequest
 */
export const TrailerCompanyDeleteRequest = new TrailerCompanyDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyDeleteReply$Type extends MessageType<TrailerCompanyDeleteReply> {
    constructor() {
        super("TrailerCompanyDeleteReply", []);
    }
    create(value?: PartialMessage<TrailerCompanyDeleteReply>): TrailerCompanyDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyDeleteReply): TrailerCompanyDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerCompanyDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyDeleteReply
 */
export const TrailerCompanyDeleteReply = new TrailerCompanyDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyUpdateRequest$Type extends MessageType<TrailerCompanyUpdateRequest> {
    constructor() {
        super("TrailerCompanyUpdateRequest", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyUpdateRequest>): TrailerCompanyUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        message.name = "";
        message.email = "";
        message.phoneNumber = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyUpdateRequest): TrailerCompanyUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 4:
                    message.phoneNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 4; */
        if (message.phoneNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyUpdateRequest
 */
export const TrailerCompanyUpdateRequest = new TrailerCompanyUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyUpdateReply$Type extends MessageType<TrailerCompanyUpdateReply> {
    constructor() {
        super("TrailerCompanyUpdateReply", []);
    }
    create(value?: PartialMessage<TrailerCompanyUpdateReply>): TrailerCompanyUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyUpdateReply): TrailerCompanyUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerCompanyUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyUpdateReply
 */
export const TrailerCompanyUpdateReply = new TrailerCompanyUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRestoreRequest$Type extends MessageType<TrailerCompanyRestoreRequest> {
    constructor() {
        super("TrailerCompanyRestoreRequest", [
            { no: 1, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyRestoreRequest>): TrailerCompanyRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRestoreRequest): TrailerCompanyRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_company_id */ 1:
                    message.trailerCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_company_id = 1; */
        if (message.trailerCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRestoreRequest
 */
export const TrailerCompanyRestoreRequest = new TrailerCompanyRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRestoreReply$Type extends MessageType<TrailerCompanyRestoreReply> {
    constructor() {
        super("TrailerCompanyRestoreReply", []);
    }
    create(value?: PartialMessage<TrailerCompanyRestoreReply>): TrailerCompanyRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRestoreReply): TrailerCompanyRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerCompanyRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRestoreReply
 */
export const TrailerCompanyRestoreReply = new TrailerCompanyRestoreReply$Type();
/**
 * @generated ServiceType for protobuf service TrailerCompanyService
 */
export const TrailerCompanyService = new ServiceType("TrailerCompanyService", [
    { name: "TrailerCompanyGet", options: {}, I: TrailerCompanyGetRequest, O: TrailerCompanyGetReply },
    { name: "TrailerCompanyRetrieve", options: {}, I: TrailerCompanyRetrieveRequest, O: TrailerCompanyRetrieveReply },
    { name: "TrailerCompanyCreate", options: {}, I: TrailerCompanyCreateRequest, O: TrailerCompanyCreateReply },
    { name: "TrailerCompanyUpdate", options: {}, I: TrailerCompanyUpdateRequest, O: TrailerCompanyUpdateReply },
    { name: "TrailerCompanyDelete", options: {}, I: TrailerCompanyDeleteRequest, O: TrailerCompanyDeleteReply },
    { name: "TrailerCompanyRestore", options: {}, I: TrailerCompanyRestoreRequest, O: TrailerCompanyRestoreReply }
]);
