// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/companies.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CompaniesService } from "./companies";
import type { ConfigValueUpdateReply } from "./companies";
import type { ConfigValueUpdateRequest } from "./companies";
import type { ConfigKeyGetReply } from "./companies";
import type { ConfigKeyGetRequest } from "./companies";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CompanyCreateReply } from "./companies";
import type { CompanyCreateRequest } from "./companies";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service CompaniesService
 */
export interface ICompaniesServiceClient {
    /**
     * @generated from protobuf rpc: CompanyCreate(CompanyCreateRequest) returns (CompanyCreateReply);
     */
    companyCreate(input: CompanyCreateRequest, options?: RpcOptions): UnaryCall<CompanyCreateRequest, CompanyCreateReply>;
    /**
     * @generated from protobuf rpc: ConfigKeyGet(ConfigKeyGetRequest) returns (ConfigKeyGetReply);
     */
    configKeyGet(input: ConfigKeyGetRequest, options?: RpcOptions): UnaryCall<ConfigKeyGetRequest, ConfigKeyGetReply>;
    /**
     * @generated from protobuf rpc: ConfigValueUpdate(ConfigValueUpdateRequest) returns (ConfigValueUpdateReply);
     */
    configValueUpdate(input: ConfigValueUpdateRequest, options?: RpcOptions): UnaryCall<ConfigValueUpdateRequest, ConfigValueUpdateReply>;
}
/**
 * @generated from protobuf service CompaniesService
 */
export class CompaniesServiceClient implements ICompaniesServiceClient, ServiceInfo {
    typeName = CompaniesService.typeName;
    methods = CompaniesService.methods;
    options = CompaniesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CompanyCreate(CompanyCreateRequest) returns (CompanyCreateReply);
     */
    companyCreate(input: CompanyCreateRequest, options?: RpcOptions): UnaryCall<CompanyCreateRequest, CompanyCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompanyCreateRequest, CompanyCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConfigKeyGet(ConfigKeyGetRequest) returns (ConfigKeyGetReply);
     */
    configKeyGet(input: ConfigKeyGetRequest, options?: RpcOptions): UnaryCall<ConfigKeyGetRequest, ConfigKeyGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConfigKeyGetRequest, ConfigKeyGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConfigValueUpdate(ConfigValueUpdateRequest) returns (ConfigValueUpdateReply);
     */
    configValueUpdate(input: ConfigValueUpdateRequest, options?: RpcOptions): UnaryCall<ConfigValueUpdateRequest, ConfigValueUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConfigValueUpdateRequest, ConfigValueUpdateReply>("unary", this._transport, method, opt, input);
    }
}
