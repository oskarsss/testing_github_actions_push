// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/users.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UsersService } from "./users";
import type { ResendUserInviteReply } from "./users";
import type { ResendUserInviteRequest } from "./users";
import type { InviteUserReply } from "./users";
import type { InviteUserRequest } from "./users";
import type { DeleteUserReply } from "./users";
import type { DeleteUserRequest } from "./users";
import type { UpdateUserReply } from "./users";
import type { UpdateUserRequest } from "./users";
import type { CreateUserReply } from "./users";
import type { CreateUserRequest } from "./users";
import type { GetUsersReply } from "./users";
import type { GetUsersRequest } from "./users";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PingUserReply } from "./users";
import type { PingUserRequest } from "./users";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service UsersService
 */
export interface IUsersServiceClient {
    /**
     * @generated from protobuf rpc: PingUser(PingUserRequest) returns (PingUserReply);
     */
    pingUser(input: PingUserRequest, options?: RpcOptions): UnaryCall<PingUserRequest, PingUserReply>;
    /**
     * @generated from protobuf rpc: GetUsers(GetUsersRequest) returns (GetUsersReply);
     */
    getUsers(input: GetUsersRequest, options?: RpcOptions): UnaryCall<GetUsersRequest, GetUsersReply>;
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (CreateUserReply);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserReply>;
    /**
     * @generated from protobuf rpc: UpdateUser(UpdateUserRequest) returns (UpdateUserReply);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserReply>;
    /**
     * @generated from protobuf rpc: DeleteUser(DeleteUserRequest) returns (DeleteUserReply);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserReply>;
    /**
     * @generated from protobuf rpc: InviteUser(InviteUserRequest) returns (InviteUserReply);
     */
    inviteUser(input: InviteUserRequest, options?: RpcOptions): UnaryCall<InviteUserRequest, InviteUserReply>;
    /**
     * @generated from protobuf rpc: ResendUserInvite(ResendUserInviteRequest) returns (ResendUserInviteReply);
     */
    resendUserInvite(input: ResendUserInviteRequest, options?: RpcOptions): UnaryCall<ResendUserInviteRequest, ResendUserInviteReply>;
}
/**
 * @generated from protobuf service UsersService
 */
export class UsersServiceClient implements IUsersServiceClient, ServiceInfo {
    typeName = UsersService.typeName;
    methods = UsersService.methods;
    options = UsersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PingUser(PingUserRequest) returns (PingUserReply);
     */
    pingUser(input: PingUserRequest, options?: RpcOptions): UnaryCall<PingUserRequest, PingUserReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingUserRequest, PingUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUsers(GetUsersRequest) returns (GetUsersReply);
     */
    getUsers(input: GetUsersRequest, options?: RpcOptions): UnaryCall<GetUsersRequest, GetUsersReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUsersRequest, GetUsersReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (CreateUserReply);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, CreateUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(UpdateUserRequest) returns (UpdateUserReply);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UpdateUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(DeleteUserRequest) returns (DeleteUserReply);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteUser(InviteUserRequest) returns (InviteUserReply);
     */
    inviteUser(input: InviteUserRequest, options?: RpcOptions): UnaryCall<InviteUserRequest, InviteUserReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteUserRequest, InviteUserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResendUserInvite(ResendUserInviteRequest) returns (ResendUserInviteReply);
     */
    resendUserInvite(input: ResendUserInviteRequest, options?: RpcOptions): UnaryCall<ResendUserInviteRequest, ResendUserInviteReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResendUserInviteRequest, ResendUserInviteReply>("unary", this._transport, method, opt, input);
    }
}
