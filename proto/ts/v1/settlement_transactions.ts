// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlement_transactions.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Settlements_Cycle_Period_Settlement_Status } from "./models/model_settlement";
import { SettlementTransactionCategoryModel_EntityType } from "./models/model_settlement.transaction_category";
import { Settlements_Cycle_Period_Settlement_Transaction_Type } from "./models/model_settlement";
/**
 * @generated from protobuf message SettlementTransactionUpdateRequest
 */
export interface SettlementTransactionUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string transaction_id = 4;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string transaction_category_id = 5;
     */
    transactionCategoryId: string;
    /**
     * @generated from protobuf field: double amount = 6;
     */
    amount: number;
    /**
     * @generated from protobuf field: string description = 7;
     */
    description: string;
    /**
     * @generated from protobuf field: string transaction_date = 8;
     */
    transactionDate: string;
}
/**
 * @generated from protobuf message SettlementTransactionUpdateReply
 */
export interface SettlementTransactionUpdateReply {
}
/**
 * @generated from protobuf message SettlementTransactionDeleteRequest
 */
export interface SettlementTransactionDeleteRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string transaction_id = 4;
     */
    transactionId: string;
}
/**
 * @generated from protobuf message SettlementTransactionDeleteReply
 */
export interface SettlementTransactionDeleteReply {
}
/**
 * @generated from protobuf message SettlementTransactionCreateRequest
 */
export interface SettlementTransactionCreateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string category_id = 4;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Transaction.Type type = 5;
     */
    type: Settlements_Cycle_Period_Settlement_Transaction_Type;
    /**
     * @generated from protobuf field: double amount = 6;
     */
    amount: number;
    /**
     * @generated from protobuf field: string description = 7;
     */
    description: string;
    /**
     * @generated from protobuf field: string transaction_date = 8;
     */
    transactionDate: string;
}
/**
 * @generated from protobuf message SettlementTransactionCreateReply
 */
export interface SettlementTransactionCreateReply {
}
/**
 * @generated from protobuf message SettlementTransactionUnassignRequest
 */
export interface SettlementTransactionUnassignRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string settlement_id = 3;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string transaction_id = 4;
     */
    transactionId: string;
}
/**
 * @generated from protobuf message SettlementTransactionUnassignReply
 */
export interface SettlementTransactionUnassignReply {
}
/**
 * @generated from protobuf message SettlementEntityTransactionHistoryRequest
 */
export interface SettlementEntityTransactionHistoryRequest {
    /**
     * @generated from protobuf field: string entity_id = 1;
     */
    entityId: string;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.EntityType entity_type = 2;
     */
    entityType: SettlementTransactionCategoryModel_EntityType;
}
/**
 * @generated from protobuf message SettlementEntityTransactionHistoryReply
 */
export interface SettlementEntityTransactionHistoryReply {
    /**
     * @generated from protobuf field: SettlementEntityTransactionHistoryReply.TransactionsInfo transactions_info = 1;
     */
    transactionsInfo?: SettlementEntityTransactionHistoryReply_TransactionsInfo;
}
/**
 * @generated from protobuf message SettlementEntityTransactionHistoryReply.Transaction
 */
export interface SettlementEntityTransactionHistoryReply_Transaction {
    /**
     * @generated from protobuf field: string transaction_id = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string settlement_id = 2;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string period_id = 3;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string cycle_id = 4;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: int64 settlement_friendly_id = 5;
     */
    settlementFriendlyId: number;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Status settlement_status = 6;
     */
    settlementStatus: Settlements_Cycle_Period_Settlement_Status;
    /**
     * @generated from protobuf field: string recurring_transaction_id = 7;
     */
    recurringTransactionId: string;
    /**
     * @generated from protobuf field: string amount = 8;
     */
    amount: string;
    /**
     * @generated from protobuf field: string description = 9;
     */
    description: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Settlement.Transaction.Type type = 10;
     */
    type: Settlements_Cycle_Period_Settlement_Transaction_Type;
    /**
     * @generated from protobuf field: string category_id = 11;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: string transaction_date = 12;
     */
    transactionDate: string;
    /**
     * @generated from protobuf field: string transaction_created_at = 13;
     */
    transactionCreatedAt: string;
}
/**
 * @generated from protobuf message SettlementEntityTransactionHistoryReply.TransactionsInfo
 */
export interface SettlementEntityTransactionHistoryReply_TransactionsInfo {
    /**
     * @generated from protobuf field: repeated SettlementEntityTransactionHistoryReply.Transaction transactions = 1;
     */
    transactions: SettlementEntityTransactionHistoryReply_Transaction[];
    /**
     * @generated from protobuf field: string total_amount = 2;
     */
    totalAmount: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionUpdateRequest$Type extends MessageType<SettlementTransactionUpdateRequest> {
    constructor() {
        super("SettlementTransactionUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "transaction_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "transaction_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionUpdateRequest>): SettlementTransactionUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.transactionId = "";
        message.transactionCategoryId = "";
        message.amount = 0;
        message.description = "";
        message.transactionDate = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionUpdateRequest): SettlementTransactionUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string transaction_id */ 4:
                    message.transactionId = reader.string();
                    break;
                case /* string transaction_category_id */ 5:
                    message.transactionCategoryId = reader.string();
                    break;
                case /* double amount */ 6:
                    message.amount = reader.double();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                case /* string transaction_date */ 8:
                    message.transactionDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string transaction_id = 4; */
        if (message.transactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transactionId);
        /* string transaction_category_id = 5; */
        if (message.transactionCategoryId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.transactionCategoryId);
        /* double amount = 6; */
        if (message.amount !== 0)
            writer.tag(6, WireType.Bit64).double(message.amount);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* string transaction_date = 8; */
        if (message.transactionDate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.transactionDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionUpdateRequest
 */
export const SettlementTransactionUpdateRequest = new SettlementTransactionUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionUpdateReply$Type extends MessageType<SettlementTransactionUpdateReply> {
    constructor() {
        super("SettlementTransactionUpdateReply", []);
    }
    create(value?: PartialMessage<SettlementTransactionUpdateReply>): SettlementTransactionUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionUpdateReply): SettlementTransactionUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionUpdateReply
 */
export const SettlementTransactionUpdateReply = new SettlementTransactionUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionDeleteRequest$Type extends MessageType<SettlementTransactionDeleteRequest> {
    constructor() {
        super("SettlementTransactionDeleteRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionDeleteRequest>): SettlementTransactionDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.transactionId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionDeleteRequest): SettlementTransactionDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string transaction_id */ 4:
                    message.transactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string transaction_id = 4; */
        if (message.transactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionDeleteRequest
 */
export const SettlementTransactionDeleteRequest = new SettlementTransactionDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionDeleteReply$Type extends MessageType<SettlementTransactionDeleteReply> {
    constructor() {
        super("SettlementTransactionDeleteReply", []);
    }
    create(value?: PartialMessage<SettlementTransactionDeleteReply>): SettlementTransactionDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionDeleteReply): SettlementTransactionDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionDeleteReply
 */
export const SettlementTransactionDeleteReply = new SettlementTransactionDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCreateRequest$Type extends MessageType<SettlementTransactionCreateRequest> {
    constructor() {
        super("SettlementTransactionCreateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Transaction.Type", Settlements_Cycle_Period_Settlement_Transaction_Type] },
            { no: 6, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "transaction_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCreateRequest>): SettlementTransactionCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.categoryId = "";
        message.type = 0;
        message.amount = 0;
        message.description = "";
        message.transactionDate = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCreateRequest): SettlementTransactionCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string category_id */ 4:
                    message.categoryId = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Transaction.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* double amount */ 6:
                    message.amount = reader.double();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                case /* string transaction_date */ 8:
                    message.transactionDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string category_id = 4; */
        if (message.categoryId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.categoryId);
        /* Settlements.Cycle.Period.Settlement.Transaction.Type type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* double amount = 6; */
        if (message.amount !== 0)
            writer.tag(6, WireType.Bit64).double(message.amount);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* string transaction_date = 8; */
        if (message.transactionDate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.transactionDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCreateRequest
 */
export const SettlementTransactionCreateRequest = new SettlementTransactionCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCreateReply$Type extends MessageType<SettlementTransactionCreateReply> {
    constructor() {
        super("SettlementTransactionCreateReply", []);
    }
    create(value?: PartialMessage<SettlementTransactionCreateReply>): SettlementTransactionCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCreateReply): SettlementTransactionCreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCreateReply
 */
export const SettlementTransactionCreateReply = new SettlementTransactionCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionUnassignRequest$Type extends MessageType<SettlementTransactionUnassignRequest> {
    constructor() {
        super("SettlementTransactionUnassignRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionUnassignRequest>): SettlementTransactionUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.settlementId = "";
        message.transactionId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionUnassignRequest): SettlementTransactionUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string settlement_id */ 3:
                    message.settlementId = reader.string();
                    break;
                case /* string transaction_id */ 4:
                    message.transactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string settlement_id = 3; */
        if (message.settlementId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.settlementId);
        /* string transaction_id = 4; */
        if (message.transactionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionUnassignRequest
 */
export const SettlementTransactionUnassignRequest = new SettlementTransactionUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionUnassignReply$Type extends MessageType<SettlementTransactionUnassignReply> {
    constructor() {
        super("SettlementTransactionUnassignReply", []);
    }
    create(value?: PartialMessage<SettlementTransactionUnassignReply>): SettlementTransactionUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionUnassignReply): SettlementTransactionUnassignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionUnassignReply
 */
export const SettlementTransactionUnassignReply = new SettlementTransactionUnassignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementEntityTransactionHistoryRequest$Type extends MessageType<SettlementEntityTransactionHistoryRequest> {
    constructor() {
        super("SettlementEntityTransactionHistoryRequest", [
            { no: 1, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "enum", T: () => ["SettlementTransactionCategoryModel.EntityType", SettlementTransactionCategoryModel_EntityType, "ENTITY_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SettlementEntityTransactionHistoryRequest>): SettlementEntityTransactionHistoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityId = "";
        message.entityType = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementEntityTransactionHistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementEntityTransactionHistoryRequest): SettlementEntityTransactionHistoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entity_id */ 1:
                    message.entityId = reader.string();
                    break;
                case /* SettlementTransactionCategoryModel.EntityType entity_type */ 2:
                    message.entityType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementEntityTransactionHistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entity_id = 1; */
        if (message.entityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entityId);
        /* SettlementTransactionCategoryModel.EntityType entity_type = 2; */
        if (message.entityType !== 0)
            writer.tag(2, WireType.Varint).int32(message.entityType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementEntityTransactionHistoryRequest
 */
export const SettlementEntityTransactionHistoryRequest = new SettlementEntityTransactionHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementEntityTransactionHistoryReply$Type extends MessageType<SettlementEntityTransactionHistoryReply> {
    constructor() {
        super("SettlementEntityTransactionHistoryReply", [
            { no: 1, name: "transactions_info", kind: "message", T: () => SettlementEntityTransactionHistoryReply_TransactionsInfo }
        ]);
    }
    create(value?: PartialMessage<SettlementEntityTransactionHistoryReply>): SettlementEntityTransactionHistoryReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementEntityTransactionHistoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementEntityTransactionHistoryReply): SettlementEntityTransactionHistoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SettlementEntityTransactionHistoryReply.TransactionsInfo transactions_info */ 1:
                    message.transactionsInfo = SettlementEntityTransactionHistoryReply_TransactionsInfo.internalBinaryRead(reader, reader.uint32(), options, message.transactionsInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementEntityTransactionHistoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SettlementEntityTransactionHistoryReply.TransactionsInfo transactions_info = 1; */
        if (message.transactionsInfo)
            SettlementEntityTransactionHistoryReply_TransactionsInfo.internalBinaryWrite(message.transactionsInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementEntityTransactionHistoryReply
 */
export const SettlementEntityTransactionHistoryReply = new SettlementEntityTransactionHistoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementEntityTransactionHistoryReply_Transaction$Type extends MessageType<SettlementEntityTransactionHistoryReply_Transaction> {
    constructor() {
        super("SettlementEntityTransactionHistoryReply.Transaction", [
            { no: 1, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "settlement_friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "settlement_status", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Status", Settlements_Cycle_Period_Settlement_Status] },
            { no: 7, name: "recurring_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "type", kind: "enum", T: () => ["Settlements.Cycle.Period.Settlement.Transaction.Type", Settlements_Cycle_Period_Settlement_Transaction_Type] },
            { no: 11, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "transaction_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "transaction_created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementEntityTransactionHistoryReply_Transaction>): SettlementEntityTransactionHistoryReply_Transaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactionId = "";
        message.settlementId = "";
        message.periodId = "";
        message.cycleId = "";
        message.settlementFriendlyId = 0;
        message.settlementStatus = 0;
        message.recurringTransactionId = "";
        message.amount = "";
        message.description = "";
        message.type = 0;
        message.categoryId = "";
        message.transactionDate = "";
        message.transactionCreatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementEntityTransactionHistoryReply_Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementEntityTransactionHistoryReply_Transaction): SettlementEntityTransactionHistoryReply_Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_id */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* string settlement_id */ 2:
                    message.settlementId = reader.string();
                    break;
                case /* string period_id */ 3:
                    message.periodId = reader.string();
                    break;
                case /* string cycle_id */ 4:
                    message.cycleId = reader.string();
                    break;
                case /* int64 settlement_friendly_id */ 5:
                    message.settlementFriendlyId = reader.int64().toNumber();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Status settlement_status */ 6:
                    message.settlementStatus = reader.int32();
                    break;
                case /* string recurring_transaction_id */ 7:
                    message.recurringTransactionId = reader.string();
                    break;
                case /* string amount */ 8:
                    message.amount = reader.string();
                    break;
                case /* string description */ 9:
                    message.description = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Settlement.Transaction.Type type */ 10:
                    message.type = reader.int32();
                    break;
                case /* string category_id */ 11:
                    message.categoryId = reader.string();
                    break;
                case /* string transaction_date */ 12:
                    message.transactionDate = reader.string();
                    break;
                case /* string transaction_created_at */ 13:
                    message.transactionCreatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementEntityTransactionHistoryReply_Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_id = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* string settlement_id = 2; */
        if (message.settlementId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.settlementId);
        /* string period_id = 3; */
        if (message.periodId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.periodId);
        /* string cycle_id = 4; */
        if (message.cycleId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cycleId);
        /* int64 settlement_friendly_id = 5; */
        if (message.settlementFriendlyId !== 0)
            writer.tag(5, WireType.Varint).int64(message.settlementFriendlyId);
        /* Settlements.Cycle.Period.Settlement.Status settlement_status = 6; */
        if (message.settlementStatus !== 0)
            writer.tag(6, WireType.Varint).int32(message.settlementStatus);
        /* string recurring_transaction_id = 7; */
        if (message.recurringTransactionId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.recurringTransactionId);
        /* string amount = 8; */
        if (message.amount !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.amount);
        /* string description = 9; */
        if (message.description !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.description);
        /* Settlements.Cycle.Period.Settlement.Transaction.Type type = 10; */
        if (message.type !== 0)
            writer.tag(10, WireType.Varint).int32(message.type);
        /* string category_id = 11; */
        if (message.categoryId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.categoryId);
        /* string transaction_date = 12; */
        if (message.transactionDate !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.transactionDate);
        /* string transaction_created_at = 13; */
        if (message.transactionCreatedAt !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.transactionCreatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementEntityTransactionHistoryReply.Transaction
 */
export const SettlementEntityTransactionHistoryReply_Transaction = new SettlementEntityTransactionHistoryReply_Transaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementEntityTransactionHistoryReply_TransactionsInfo$Type extends MessageType<SettlementEntityTransactionHistoryReply_TransactionsInfo> {
    constructor() {
        super("SettlementEntityTransactionHistoryReply.TransactionsInfo", [
            { no: 1, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementEntityTransactionHistoryReply_Transaction },
            { no: 2, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementEntityTransactionHistoryReply_TransactionsInfo>): SettlementEntityTransactionHistoryReply_TransactionsInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactions = [];
        message.totalAmount = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementEntityTransactionHistoryReply_TransactionsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementEntityTransactionHistoryReply_TransactionsInfo): SettlementEntityTransactionHistoryReply_TransactionsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementEntityTransactionHistoryReply.Transaction transactions */ 1:
                    message.transactions.push(SettlementEntityTransactionHistoryReply_Transaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string total_amount */ 2:
                    message.totalAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementEntityTransactionHistoryReply_TransactionsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementEntityTransactionHistoryReply.Transaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            SettlementEntityTransactionHistoryReply_Transaction.internalBinaryWrite(message.transactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string total_amount = 2; */
        if (message.totalAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementEntityTransactionHistoryReply.TransactionsInfo
 */
export const SettlementEntityTransactionHistoryReply_TransactionsInfo = new SettlementEntityTransactionHistoryReply_TransactionsInfo$Type();
/**
 * @generated ServiceType for protobuf service SettlementTransactionsService
 */
export const SettlementTransactionsService = new ServiceType("SettlementTransactionsService", [
    { name: "SettlementTransactionUpdate", options: {}, I: SettlementTransactionUpdateRequest, O: SettlementTransactionUpdateReply },
    { name: "SettlementTransactionDelete", options: {}, I: SettlementTransactionDeleteRequest, O: SettlementTransactionDeleteReply },
    { name: "SettlementTransactionCreate", options: {}, I: SettlementTransactionCreateRequest, O: SettlementTransactionCreateReply },
    { name: "SettlementTransactionUnassign", options: {}, I: SettlementTransactionUnassignRequest, O: SettlementTransactionUnassignReply },
    { name: "SettlementEntityTransactionHistory", options: {}, I: SettlementEntityTransactionHistoryRequest, O: SettlementEntityTransactionHistoryReply }
]);
