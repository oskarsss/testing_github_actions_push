// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/events_serv.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DocumentModel_Document } from "./models/model_document";
import { DriverModel_Driver } from "./models/model_driver";
import { TrailerModel_Trailer } from "./models/model_trailer";
import { TruckModel_Truck } from "./models/model_truck";
import { LoadData_Load } from "./loads";
import { ManifestModel_Manifest } from "./models/model_manifest";
import { Event_Truck_ManifestRoute } from "./events/events";
import { Event_Truck_Route } from "./events/events";
import { NotificationModel_Notification } from "./models/model_notification";
import { NoteModel_Note } from "./models/model_note";
import { Event_Trailer_Location } from "./events/events";
import { Event_Truck_Diagnostics } from "./events/events";
import { Event_Truck_Location } from "./events/events";
import { Event_User_Ping } from "./events/events";
import { Event_Driver_Device_Ping } from "./events/events";
import { Event_Driver_Device_Location } from "./events/events";
/**
 * Listen
 *
 * @generated from protobuf message ListenRequest
 */
export interface ListenRequest {
    /**
     * @generated from protobuf field: string device_id = 1;
     */
    deviceId: string;
}
/**
 * @generated from protobuf message ListenReply
 */
export interface ListenReply {
    /**
     * @generated from protobuf oneof: Value
     */
    value: {
        oneofKind: "eventHealthPing";
        /**
         * @generated from protobuf field: ListenReply.HealthPing event_health_ping = 1;
         */
        eventHealthPing: ListenReply_HealthPing;
    } | {
        oneofKind: "eventDriverDeviceLocation";
        /**
         * @generated from protobuf field: ListenReply.DriverDeviceLocations event_driver_device_location = 2;
         */
        eventDriverDeviceLocation: ListenReply_DriverDeviceLocations;
    } | {
        oneofKind: "eventDriverDevicePing";
        /**
         * @generated from protobuf field: ListenReply.DriverPings event_driver_device_ping = 3;
         */
        eventDriverDevicePing: ListenReply_DriverPings;
    } | {
        oneofKind: "eventUserPing";
        /**
         * @generated from protobuf field: ListenReply.UserPings event_user_ping = 4;
         */
        eventUserPing: ListenReply_UserPings;
    } | {
        oneofKind: "eventTruckLocation";
        /**
         * @generated from protobuf field: ListenReply.TruckLocations event_truck_location = 5;
         */
        eventTruckLocation: ListenReply_TruckLocations;
    } | {
        oneofKind: "eventTruckDiagnostics";
        /**
         * @generated from protobuf field: ListenReply.TruckDiagnostics event_truck_diagnostics = 6;
         */
        eventTruckDiagnostics: ListenReply_TruckDiagnostics;
    } | {
        oneofKind: "eventTrailerLocation";
        /**
         * @generated from protobuf field: ListenReply.TrailerLocations event_trailer_location = 7;
         */
        eventTrailerLocation: ListenReply_TrailerLocations;
    } | {
        oneofKind: "eventNotes";
        /**
         * @generated from protobuf field: ListenReply.Notes event_notes = 8;
         */
        eventNotes: ListenReply_Notes;
    } | {
        oneofKind: "eventTruckRoute";
        /**
         * @generated from protobuf field: ListenReply.TruckRoutes event_truck_route = 9;
         */
        eventTruckRoute: ListenReply_TruckRoutes;
    } | {
        oneofKind: "eventManifestTruckRoute";
        /**
         * @generated from protobuf field: ListenReply.ManifestTruckRoutes event_manifest_truck_route = 10;
         */
        eventManifestTruckRoute: ListenReply_ManifestTruckRoutes;
    } | {
        oneofKind: "eventManifestsUpdated";
        /**
         * @generated from protobuf field: ListenReply.ManifestsUpdated event_manifests_updated = 11;
         */
        eventManifestsUpdated: ListenReply_ManifestsUpdated;
    } | {
        oneofKind: "eventLoadsUpdated";
        /**
         * @generated from protobuf field: ListenReply.LoadsUpdated event_loads_updated = 12;
         */
        eventLoadsUpdated: ListenReply_LoadsUpdated;
    } | {
        oneofKind: "eventNotifications";
        /**
         * @generated from protobuf field: ListenReply.Notifications event_notifications = 13;
         */
        eventNotifications: ListenReply_Notifications;
    } | {
        oneofKind: "eventTrucksUpdated";
        /**
         * @generated from protobuf field: ListenReply.TrucksUpdated event_trucks_updated = 14;
         */
        eventTrucksUpdated: ListenReply_TrucksUpdated;
    } | {
        oneofKind: "eventTrailersUpdated";
        /**
         * @generated from protobuf field: ListenReply.TrailersUpdated event_trailers_updated = 15;
         */
        eventTrailersUpdated: ListenReply_TrailersUpdated;
    } | {
        oneofKind: "eventDriversUpdated";
        /**
         * @generated from protobuf field: ListenReply.DriversUpdated event_drivers_updated = 16;
         */
        eventDriversUpdated: ListenReply_DriversUpdated;
    } | {
        oneofKind: "eventDocumentUpdated";
        /**
         * @generated from protobuf field: ListenReply.DocumentsUpdated event_document_updated = 17;
         */
        eventDocumentUpdated: ListenReply_DocumentsUpdated;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ListenReply.HealthPing
 */
export interface ListenReply_HealthPing {
    /**
     * @generated from protobuf field: string subscriber_id = 1;
     */
    subscriberId: string;
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message ListenReply.DriverDeviceLocations
 */
export interface ListenReply_DriverDeviceLocations {
    /**
     * @generated from protobuf field: repeated Event.Driver.Device.Location locations = 1;
     */
    locations: Event_Driver_Device_Location[];
}
/**
 * @generated from protobuf message ListenReply.DriverPings
 */
export interface ListenReply_DriverPings {
    /**
     * @generated from protobuf field: repeated Event.Driver.Device.Ping pings = 1;
     */
    pings: Event_Driver_Device_Ping[];
}
/**
 * @generated from protobuf message ListenReply.UserPings
 */
export interface ListenReply_UserPings {
    /**
     * @generated from protobuf field: repeated Event.User.Ping pings = 1;
     */
    pings: Event_User_Ping[];
}
/**
 * @generated from protobuf message ListenReply.TruckLocations
 */
export interface ListenReply_TruckLocations {
    /**
     * @generated from protobuf field: repeated Event.Truck.Location locations = 1;
     */
    locations: Event_Truck_Location[];
}
/**
 * @generated from protobuf message ListenReply.TruckDiagnostics
 */
export interface ListenReply_TruckDiagnostics {
    /**
     * @generated from protobuf field: repeated Event.Truck.Diagnostics diagnostics = 1;
     */
    diagnostics: Event_Truck_Diagnostics[];
}
/**
 * @generated from protobuf message ListenReply.TrailerLocations
 */
export interface ListenReply_TrailerLocations {
    /**
     * @generated from protobuf field: repeated Event.Trailer.Location locations = 1;
     */
    locations: Event_Trailer_Location[];
}
/**
 * @generated from protobuf message ListenReply.Notes
 */
export interface ListenReply_Notes {
    /**
     * @generated from protobuf field: repeated NoteModel.Note notes = 1;
     */
    notes: NoteModel_Note[];
}
/**
 * @generated from protobuf message ListenReply.Notifications
 */
export interface ListenReply_Notifications {
    /**
     * @generated from protobuf field: repeated NotificationModel.Notification notifications = 1;
     */
    notifications: NotificationModel_Notification[];
}
/**
 * @generated from protobuf message ListenReply.TruckRoutes
 */
export interface ListenReply_TruckRoutes {
    /**
     * @generated from protobuf field: repeated Event.Truck.Route routes = 1;
     */
    routes: Event_Truck_Route[];
}
/**
 * @generated from protobuf message ListenReply.ManifestTruckRoutes
 */
export interface ListenReply_ManifestTruckRoutes {
    /**
     * @generated from protobuf field: repeated Event.Truck.ManifestRoute routes = 1;
     */
    routes: Event_Truck_ManifestRoute[];
}
/**
 * @generated from protobuf message ListenReply.ManifestsUpdated
 */
export interface ListenReply_ManifestsUpdated {
    /**
     * @generated from protobuf field: repeated ManifestModel.Manifest manifests = 1;
     */
    manifests: ManifestModel_Manifest[];
}
/**
 * @generated from protobuf message ListenReply.LoadsUpdated
 */
export interface ListenReply_LoadsUpdated {
    /**
     * @generated from protobuf field: repeated LoadData.Load orders = 1;
     */
    orders: LoadData_Load[];
}
/**
 * @generated from protobuf message ListenReply.TrucksUpdated
 */
export interface ListenReply_TrucksUpdated {
    /**
     * @generated from protobuf field: repeated TruckModel.Truck trucks = 1;
     */
    trucks: TruckModel_Truck[];
}
/**
 * @generated from protobuf message ListenReply.TrailersUpdated
 */
export interface ListenReply_TrailersUpdated {
    /**
     * @generated from protobuf field: repeated TrailerModel.Trailer trailers = 1;
     */
    trailers: TrailerModel_Trailer[];
}
/**
 * @generated from protobuf message ListenReply.DriversUpdated
 */
export interface ListenReply_DriversUpdated {
    /**
     * @generated from protobuf field: repeated DriverModel.Driver drivers = 1;
     */
    drivers: DriverModel_Driver[];
}
/**
 * @generated from protobuf message ListenReply.DocumentsUpdated
 */
export interface ListenReply_DocumentsUpdated {
    /**
     * @generated from protobuf field: repeated DocumentModel.Document documents = 1;
     */
    documents: DocumentModel_Document[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListenRequest$Type extends MessageType<ListenRequest> {
    constructor() {
        super("ListenRequest", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListenRequest>): ListenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        if (value !== undefined)
            reflectionMergePartial<ListenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenRequest): ListenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenRequest
 */
export const ListenRequest = new ListenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply$Type extends MessageType<ListenReply> {
    constructor() {
        super("ListenReply", [
            { no: 1, name: "event_health_ping", kind: "message", oneof: "value", T: () => ListenReply_HealthPing },
            { no: 2, name: "event_driver_device_location", kind: "message", oneof: "value", T: () => ListenReply_DriverDeviceLocations },
            { no: 3, name: "event_driver_device_ping", kind: "message", oneof: "value", T: () => ListenReply_DriverPings },
            { no: 4, name: "event_user_ping", kind: "message", oneof: "value", T: () => ListenReply_UserPings },
            { no: 5, name: "event_truck_location", kind: "message", oneof: "value", T: () => ListenReply_TruckLocations },
            { no: 6, name: "event_truck_diagnostics", kind: "message", oneof: "value", T: () => ListenReply_TruckDiagnostics },
            { no: 7, name: "event_trailer_location", kind: "message", oneof: "value", T: () => ListenReply_TrailerLocations },
            { no: 8, name: "event_notes", kind: "message", oneof: "value", T: () => ListenReply_Notes },
            { no: 9, name: "event_truck_route", kind: "message", oneof: "value", T: () => ListenReply_TruckRoutes },
            { no: 10, name: "event_manifest_truck_route", kind: "message", oneof: "value", T: () => ListenReply_ManifestTruckRoutes },
            { no: 11, name: "event_manifests_updated", kind: "message", oneof: "value", T: () => ListenReply_ManifestsUpdated },
            { no: 12, name: "event_loads_updated", kind: "message", oneof: "value", T: () => ListenReply_LoadsUpdated },
            { no: 13, name: "event_notifications", kind: "message", oneof: "value", T: () => ListenReply_Notifications },
            { no: 14, name: "event_trucks_updated", kind: "message", oneof: "value", T: () => ListenReply_TrucksUpdated },
            { no: 15, name: "event_trailers_updated", kind: "message", oneof: "value", T: () => ListenReply_TrailersUpdated },
            { no: 16, name: "event_drivers_updated", kind: "message", oneof: "value", T: () => ListenReply_DriversUpdated },
            { no: 17, name: "event_document_updated", kind: "message", oneof: "value", T: () => ListenReply_DocumentsUpdated }
        ]);
    }
    create(value?: PartialMessage<ListenReply>): ListenReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ListenReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply): ListenReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ListenReply.HealthPing event_health_ping */ 1:
                    message.value = {
                        oneofKind: "eventHealthPing",
                        eventHealthPing: ListenReply_HealthPing.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventHealthPing)
                    };
                    break;
                case /* ListenReply.DriverDeviceLocations event_driver_device_location */ 2:
                    message.value = {
                        oneofKind: "eventDriverDeviceLocation",
                        eventDriverDeviceLocation: ListenReply_DriverDeviceLocations.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventDriverDeviceLocation)
                    };
                    break;
                case /* ListenReply.DriverPings event_driver_device_ping */ 3:
                    message.value = {
                        oneofKind: "eventDriverDevicePing",
                        eventDriverDevicePing: ListenReply_DriverPings.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventDriverDevicePing)
                    };
                    break;
                case /* ListenReply.UserPings event_user_ping */ 4:
                    message.value = {
                        oneofKind: "eventUserPing",
                        eventUserPing: ListenReply_UserPings.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventUserPing)
                    };
                    break;
                case /* ListenReply.TruckLocations event_truck_location */ 5:
                    message.value = {
                        oneofKind: "eventTruckLocation",
                        eventTruckLocation: ListenReply_TruckLocations.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTruckLocation)
                    };
                    break;
                case /* ListenReply.TruckDiagnostics event_truck_diagnostics */ 6:
                    message.value = {
                        oneofKind: "eventTruckDiagnostics",
                        eventTruckDiagnostics: ListenReply_TruckDiagnostics.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTruckDiagnostics)
                    };
                    break;
                case /* ListenReply.TrailerLocations event_trailer_location */ 7:
                    message.value = {
                        oneofKind: "eventTrailerLocation",
                        eventTrailerLocation: ListenReply_TrailerLocations.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTrailerLocation)
                    };
                    break;
                case /* ListenReply.Notes event_notes */ 8:
                    message.value = {
                        oneofKind: "eventNotes",
                        eventNotes: ListenReply_Notes.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventNotes)
                    };
                    break;
                case /* ListenReply.TruckRoutes event_truck_route */ 9:
                    message.value = {
                        oneofKind: "eventTruckRoute",
                        eventTruckRoute: ListenReply_TruckRoutes.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTruckRoute)
                    };
                    break;
                case /* ListenReply.ManifestTruckRoutes event_manifest_truck_route */ 10:
                    message.value = {
                        oneofKind: "eventManifestTruckRoute",
                        eventManifestTruckRoute: ListenReply_ManifestTruckRoutes.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventManifestTruckRoute)
                    };
                    break;
                case /* ListenReply.ManifestsUpdated event_manifests_updated */ 11:
                    message.value = {
                        oneofKind: "eventManifestsUpdated",
                        eventManifestsUpdated: ListenReply_ManifestsUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventManifestsUpdated)
                    };
                    break;
                case /* ListenReply.LoadsUpdated event_loads_updated */ 12:
                    message.value = {
                        oneofKind: "eventLoadsUpdated",
                        eventLoadsUpdated: ListenReply_LoadsUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventLoadsUpdated)
                    };
                    break;
                case /* ListenReply.Notifications event_notifications */ 13:
                    message.value = {
                        oneofKind: "eventNotifications",
                        eventNotifications: ListenReply_Notifications.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventNotifications)
                    };
                    break;
                case /* ListenReply.TrucksUpdated event_trucks_updated */ 14:
                    message.value = {
                        oneofKind: "eventTrucksUpdated",
                        eventTrucksUpdated: ListenReply_TrucksUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTrucksUpdated)
                    };
                    break;
                case /* ListenReply.TrailersUpdated event_trailers_updated */ 15:
                    message.value = {
                        oneofKind: "eventTrailersUpdated",
                        eventTrailersUpdated: ListenReply_TrailersUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventTrailersUpdated)
                    };
                    break;
                case /* ListenReply.DriversUpdated event_drivers_updated */ 16:
                    message.value = {
                        oneofKind: "eventDriversUpdated",
                        eventDriversUpdated: ListenReply_DriversUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventDriversUpdated)
                    };
                    break;
                case /* ListenReply.DocumentsUpdated event_document_updated */ 17:
                    message.value = {
                        oneofKind: "eventDocumentUpdated",
                        eventDocumentUpdated: ListenReply_DocumentsUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).eventDocumentUpdated)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ListenReply.HealthPing event_health_ping = 1; */
        if (message.value.oneofKind === "eventHealthPing")
            ListenReply_HealthPing.internalBinaryWrite(message.value.eventHealthPing, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.DriverDeviceLocations event_driver_device_location = 2; */
        if (message.value.oneofKind === "eventDriverDeviceLocation")
            ListenReply_DriverDeviceLocations.internalBinaryWrite(message.value.eventDriverDeviceLocation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.DriverPings event_driver_device_ping = 3; */
        if (message.value.oneofKind === "eventDriverDevicePing")
            ListenReply_DriverPings.internalBinaryWrite(message.value.eventDriverDevicePing, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.UserPings event_user_ping = 4; */
        if (message.value.oneofKind === "eventUserPing")
            ListenReply_UserPings.internalBinaryWrite(message.value.eventUserPing, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.TruckLocations event_truck_location = 5; */
        if (message.value.oneofKind === "eventTruckLocation")
            ListenReply_TruckLocations.internalBinaryWrite(message.value.eventTruckLocation, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.TruckDiagnostics event_truck_diagnostics = 6; */
        if (message.value.oneofKind === "eventTruckDiagnostics")
            ListenReply_TruckDiagnostics.internalBinaryWrite(message.value.eventTruckDiagnostics, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.TrailerLocations event_trailer_location = 7; */
        if (message.value.oneofKind === "eventTrailerLocation")
            ListenReply_TrailerLocations.internalBinaryWrite(message.value.eventTrailerLocation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.Notes event_notes = 8; */
        if (message.value.oneofKind === "eventNotes")
            ListenReply_Notes.internalBinaryWrite(message.value.eventNotes, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.TruckRoutes event_truck_route = 9; */
        if (message.value.oneofKind === "eventTruckRoute")
            ListenReply_TruckRoutes.internalBinaryWrite(message.value.eventTruckRoute, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.ManifestTruckRoutes event_manifest_truck_route = 10; */
        if (message.value.oneofKind === "eventManifestTruckRoute")
            ListenReply_ManifestTruckRoutes.internalBinaryWrite(message.value.eventManifestTruckRoute, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.ManifestsUpdated event_manifests_updated = 11; */
        if (message.value.oneofKind === "eventManifestsUpdated")
            ListenReply_ManifestsUpdated.internalBinaryWrite(message.value.eventManifestsUpdated, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.LoadsUpdated event_loads_updated = 12; */
        if (message.value.oneofKind === "eventLoadsUpdated")
            ListenReply_LoadsUpdated.internalBinaryWrite(message.value.eventLoadsUpdated, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.Notifications event_notifications = 13; */
        if (message.value.oneofKind === "eventNotifications")
            ListenReply_Notifications.internalBinaryWrite(message.value.eventNotifications, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.TrucksUpdated event_trucks_updated = 14; */
        if (message.value.oneofKind === "eventTrucksUpdated")
            ListenReply_TrucksUpdated.internalBinaryWrite(message.value.eventTrucksUpdated, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.TrailersUpdated event_trailers_updated = 15; */
        if (message.value.oneofKind === "eventTrailersUpdated")
            ListenReply_TrailersUpdated.internalBinaryWrite(message.value.eventTrailersUpdated, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.DriversUpdated event_drivers_updated = 16; */
        if (message.value.oneofKind === "eventDriversUpdated")
            ListenReply_DriversUpdated.internalBinaryWrite(message.value.eventDriversUpdated, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* ListenReply.DocumentsUpdated event_document_updated = 17; */
        if (message.value.oneofKind === "eventDocumentUpdated")
            ListenReply_DocumentsUpdated.internalBinaryWrite(message.value.eventDocumentUpdated, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply
 */
export const ListenReply = new ListenReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_HealthPing$Type extends MessageType<ListenReply_HealthPing> {
    constructor() {
        super("ListenReply.HealthPing", [
            { no: 1, name: "subscriber_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListenReply_HealthPing>): ListenReply_HealthPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriberId = "";
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<ListenReply_HealthPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_HealthPing): ListenReply_HealthPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string subscriber_id */ 1:
                    message.subscriberId = reader.string();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_HealthPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string subscriber_id = 1; */
        if (message.subscriberId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.subscriberId);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.HealthPing
 */
export const ListenReply_HealthPing = new ListenReply_HealthPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_DriverDeviceLocations$Type extends MessageType<ListenReply_DriverDeviceLocations> {
    constructor() {
        super("ListenReply.DriverDeviceLocations", [
            { no: 1, name: "locations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Driver_Device_Location }
        ]);
    }
    create(value?: PartialMessage<ListenReply_DriverDeviceLocations>): ListenReply_DriverDeviceLocations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.locations = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_DriverDeviceLocations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_DriverDeviceLocations): ListenReply_DriverDeviceLocations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Driver.Device.Location locations */ 1:
                    message.locations.push(Event_Driver_Device_Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_DriverDeviceLocations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Driver.Device.Location locations = 1; */
        for (let i = 0; i < message.locations.length; i++)
            Event_Driver_Device_Location.internalBinaryWrite(message.locations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.DriverDeviceLocations
 */
export const ListenReply_DriverDeviceLocations = new ListenReply_DriverDeviceLocations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_DriverPings$Type extends MessageType<ListenReply_DriverPings> {
    constructor() {
        super("ListenReply.DriverPings", [
            { no: 1, name: "pings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Driver_Device_Ping }
        ]);
    }
    create(value?: PartialMessage<ListenReply_DriverPings>): ListenReply_DriverPings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pings = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_DriverPings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_DriverPings): ListenReply_DriverPings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Driver.Device.Ping pings */ 1:
                    message.pings.push(Event_Driver_Device_Ping.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_DriverPings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Driver.Device.Ping pings = 1; */
        for (let i = 0; i < message.pings.length; i++)
            Event_Driver_Device_Ping.internalBinaryWrite(message.pings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.DriverPings
 */
export const ListenReply_DriverPings = new ListenReply_DriverPings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_UserPings$Type extends MessageType<ListenReply_UserPings> {
    constructor() {
        super("ListenReply.UserPings", [
            { no: 1, name: "pings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_User_Ping }
        ]);
    }
    create(value?: PartialMessage<ListenReply_UserPings>): ListenReply_UserPings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pings = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_UserPings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_UserPings): ListenReply_UserPings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.User.Ping pings */ 1:
                    message.pings.push(Event_User_Ping.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_UserPings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.User.Ping pings = 1; */
        for (let i = 0; i < message.pings.length; i++)
            Event_User_Ping.internalBinaryWrite(message.pings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.UserPings
 */
export const ListenReply_UserPings = new ListenReply_UserPings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_TruckLocations$Type extends MessageType<ListenReply_TruckLocations> {
    constructor() {
        super("ListenReply.TruckLocations", [
            { no: 1, name: "locations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Truck_Location }
        ]);
    }
    create(value?: PartialMessage<ListenReply_TruckLocations>): ListenReply_TruckLocations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.locations = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_TruckLocations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_TruckLocations): ListenReply_TruckLocations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Truck.Location locations */ 1:
                    message.locations.push(Event_Truck_Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_TruckLocations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Truck.Location locations = 1; */
        for (let i = 0; i < message.locations.length; i++)
            Event_Truck_Location.internalBinaryWrite(message.locations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.TruckLocations
 */
export const ListenReply_TruckLocations = new ListenReply_TruckLocations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_TruckDiagnostics$Type extends MessageType<ListenReply_TruckDiagnostics> {
    constructor() {
        super("ListenReply.TruckDiagnostics", [
            { no: 1, name: "diagnostics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Truck_Diagnostics }
        ]);
    }
    create(value?: PartialMessage<ListenReply_TruckDiagnostics>): ListenReply_TruckDiagnostics {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.diagnostics = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_TruckDiagnostics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_TruckDiagnostics): ListenReply_TruckDiagnostics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Truck.Diagnostics diagnostics */ 1:
                    message.diagnostics.push(Event_Truck_Diagnostics.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_TruckDiagnostics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Truck.Diagnostics diagnostics = 1; */
        for (let i = 0; i < message.diagnostics.length; i++)
            Event_Truck_Diagnostics.internalBinaryWrite(message.diagnostics[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.TruckDiagnostics
 */
export const ListenReply_TruckDiagnostics = new ListenReply_TruckDiagnostics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_TrailerLocations$Type extends MessageType<ListenReply_TrailerLocations> {
    constructor() {
        super("ListenReply.TrailerLocations", [
            { no: 1, name: "locations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Trailer_Location }
        ]);
    }
    create(value?: PartialMessage<ListenReply_TrailerLocations>): ListenReply_TrailerLocations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.locations = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_TrailerLocations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_TrailerLocations): ListenReply_TrailerLocations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Trailer.Location locations */ 1:
                    message.locations.push(Event_Trailer_Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_TrailerLocations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Trailer.Location locations = 1; */
        for (let i = 0; i < message.locations.length; i++)
            Event_Trailer_Location.internalBinaryWrite(message.locations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.TrailerLocations
 */
export const ListenReply_TrailerLocations = new ListenReply_TrailerLocations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_Notes$Type extends MessageType<ListenReply_Notes> {
    constructor() {
        super("ListenReply.Notes", [
            { no: 1, name: "notes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NoteModel_Note }
        ]);
    }
    create(value?: PartialMessage<ListenReply_Notes>): ListenReply_Notes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notes = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_Notes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_Notes): ListenReply_Notes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NoteModel.Note notes */ 1:
                    message.notes.push(NoteModel_Note.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_Notes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NoteModel.Note notes = 1; */
        for (let i = 0; i < message.notes.length; i++)
            NoteModel_Note.internalBinaryWrite(message.notes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.Notes
 */
export const ListenReply_Notes = new ListenReply_Notes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_Notifications$Type extends MessageType<ListenReply_Notifications> {
    constructor() {
        super("ListenReply.Notifications", [
            { no: 1, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationModel_Notification }
        ]);
    }
    create(value?: PartialMessage<ListenReply_Notifications>): ListenReply_Notifications {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notifications = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_Notifications>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_Notifications): ListenReply_Notifications {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated NotificationModel.Notification notifications */ 1:
                    message.notifications.push(NotificationModel_Notification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_Notifications, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated NotificationModel.Notification notifications = 1; */
        for (let i = 0; i < message.notifications.length; i++)
            NotificationModel_Notification.internalBinaryWrite(message.notifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.Notifications
 */
export const ListenReply_Notifications = new ListenReply_Notifications$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_TruckRoutes$Type extends MessageType<ListenReply_TruckRoutes> {
    constructor() {
        super("ListenReply.TruckRoutes", [
            { no: 1, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Truck_Route }
        ]);
    }
    create(value?: PartialMessage<ListenReply_TruckRoutes>): ListenReply_TruckRoutes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_TruckRoutes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_TruckRoutes): ListenReply_TruckRoutes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Truck.Route routes */ 1:
                    message.routes.push(Event_Truck_Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_TruckRoutes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Truck.Route routes = 1; */
        for (let i = 0; i < message.routes.length; i++)
            Event_Truck_Route.internalBinaryWrite(message.routes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.TruckRoutes
 */
export const ListenReply_TruckRoutes = new ListenReply_TruckRoutes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_ManifestTruckRoutes$Type extends MessageType<ListenReply_ManifestTruckRoutes> {
    constructor() {
        super("ListenReply.ManifestTruckRoutes", [
            { no: 1, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event_Truck_ManifestRoute }
        ]);
    }
    create(value?: PartialMessage<ListenReply_ManifestTruckRoutes>): ListenReply_ManifestTruckRoutes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_ManifestTruckRoutes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_ManifestTruckRoutes): ListenReply_ManifestTruckRoutes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Event.Truck.ManifestRoute routes */ 1:
                    message.routes.push(Event_Truck_ManifestRoute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_ManifestTruckRoutes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Event.Truck.ManifestRoute routes = 1; */
        for (let i = 0; i < message.routes.length; i++)
            Event_Truck_ManifestRoute.internalBinaryWrite(message.routes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.ManifestTruckRoutes
 */
export const ListenReply_ManifestTruckRoutes = new ListenReply_ManifestTruckRoutes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_ManifestsUpdated$Type extends MessageType<ListenReply_ManifestsUpdated> {
    constructor() {
        super("ListenReply.ManifestsUpdated", [
            { no: 1, name: "manifests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ListenReply_ManifestsUpdated>): ListenReply_ManifestsUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifests = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_ManifestsUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_ManifestsUpdated): ListenReply_ManifestsUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestModel.Manifest manifests */ 1:
                    message.manifests.push(ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_ManifestsUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestModel.Manifest manifests = 1; */
        for (let i = 0; i < message.manifests.length; i++)
            ManifestModel_Manifest.internalBinaryWrite(message.manifests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.ManifestsUpdated
 */
export const ListenReply_ManifestsUpdated = new ListenReply_ManifestsUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_LoadsUpdated$Type extends MessageType<ListenReply_LoadsUpdated> {
    constructor() {
        super("ListenReply.LoadsUpdated", [
            { no: 1, name: "orders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadData_Load }
        ]);
    }
    create(value?: PartialMessage<ListenReply_LoadsUpdated>): ListenReply_LoadsUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orders = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_LoadsUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_LoadsUpdated): ListenReply_LoadsUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadData.Load orders */ 1:
                    message.orders.push(LoadData_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_LoadsUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadData.Load orders = 1; */
        for (let i = 0; i < message.orders.length; i++)
            LoadData_Load.internalBinaryWrite(message.orders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.LoadsUpdated
 */
export const ListenReply_LoadsUpdated = new ListenReply_LoadsUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_TrucksUpdated$Type extends MessageType<ListenReply_TrucksUpdated> {
    constructor() {
        super("ListenReply.TrucksUpdated", [
            { no: 1, name: "trucks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TruckModel_Truck }
        ]);
    }
    create(value?: PartialMessage<ListenReply_TrucksUpdated>): ListenReply_TrucksUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trucks = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_TrucksUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_TrucksUpdated): ListenReply_TrucksUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TruckModel.Truck trucks */ 1:
                    message.trucks.push(TruckModel_Truck.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_TrucksUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TruckModel.Truck trucks = 1; */
        for (let i = 0; i < message.trucks.length; i++)
            TruckModel_Truck.internalBinaryWrite(message.trucks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.TrucksUpdated
 */
export const ListenReply_TrucksUpdated = new ListenReply_TrucksUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_TrailersUpdated$Type extends MessageType<ListenReply_TrailersUpdated> {
    constructor() {
        super("ListenReply.TrailersUpdated", [
            { no: 1, name: "trailers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrailerModel_Trailer }
        ]);
    }
    create(value?: PartialMessage<ListenReply_TrailersUpdated>): ListenReply_TrailersUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailers = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_TrailersUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_TrailersUpdated): ListenReply_TrailersUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TrailerModel.Trailer trailers */ 1:
                    message.trailers.push(TrailerModel_Trailer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_TrailersUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TrailerModel.Trailer trailers = 1; */
        for (let i = 0; i < message.trailers.length; i++)
            TrailerModel_Trailer.internalBinaryWrite(message.trailers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.TrailersUpdated
 */
export const ListenReply_TrailersUpdated = new ListenReply_TrailersUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_DriversUpdated$Type extends MessageType<ListenReply_DriversUpdated> {
    constructor() {
        super("ListenReply.DriversUpdated", [
            { no: 1, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DriverModel_Driver }
        ]);
    }
    create(value?: PartialMessage<ListenReply_DriversUpdated>): ListenReply_DriversUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.drivers = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_DriversUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_DriversUpdated): ListenReply_DriversUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated DriverModel.Driver drivers */ 1:
                    message.drivers.push(DriverModel_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_DriversUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated DriverModel.Driver drivers = 1; */
        for (let i = 0; i < message.drivers.length; i++)
            DriverModel_Driver.internalBinaryWrite(message.drivers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.DriversUpdated
 */
export const ListenReply_DriversUpdated = new ListenReply_DriversUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenReply_DocumentsUpdated$Type extends MessageType<ListenReply_DocumentsUpdated> {
    constructor() {
        super("ListenReply.DocumentsUpdated", [
            { no: 1, name: "documents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DocumentModel_Document }
        ]);
    }
    create(value?: PartialMessage<ListenReply_DocumentsUpdated>): ListenReply_DocumentsUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documents = [];
        if (value !== undefined)
            reflectionMergePartial<ListenReply_DocumentsUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenReply_DocumentsUpdated): ListenReply_DocumentsUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated DocumentModel.Document documents */ 1:
                    message.documents.push(DocumentModel_Document.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListenReply_DocumentsUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated DocumentModel.Document documents = 1; */
        for (let i = 0; i < message.documents.length; i++)
            DocumentModel_Document.internalBinaryWrite(message.documents[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListenReply.DocumentsUpdated
 */
export const ListenReply_DocumentsUpdated = new ListenReply_DocumentsUpdated$Type();
/**
 * @generated ServiceType for protobuf service EventsService
 */
export const EventsService = new ServiceType("EventsService", [
    { name: "Listen", serverStreaming: true, options: {}, I: ListenRequest, O: ListenReply }
]);
