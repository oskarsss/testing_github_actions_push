// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/trailers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TrailerModel_Trailer } from "./models/model_trailer";
import { TrailerModel_Ownership } from "./models/model_trailer";
import { TrailerModel_Status } from "./models/model_trailer";
/**
 * ////////////////////////////
 * TrailerDeleteRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerDeleteRequest
 */
export interface TrailerDeleteRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
}
/**
 * @generated from protobuf message TrailerDeleteReply
 */
export interface TrailerDeleteReply {
}
/**
 * ////////////////////////////
 * TrailerStatusUpdateRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerStatusUpdateRequest
 */
export interface TrailerStatusUpdateRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: TrailerModel.Status status = 2;
     */
    status: TrailerModel_Status;
}
/**
 * @generated from protobuf message TrailerStatusUpdateReply
 */
export interface TrailerStatusUpdateReply {
}
/**
 * ////////////////////////////
 * TrailerParkingLocationUpdateRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerParkingLocationUpdateRequest
 */
export interface TrailerParkingLocationUpdateRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string parking_location = 2;
     */
    parkingLocation: string;
}
/**
 * @generated from protobuf message TrailerParkingLocationUpdateReply
 */
export interface TrailerParkingLocationUpdateReply {
}
/**
 * ////////////////////////////
 * TrailerUpdateRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerUpdateRequest
 */
export interface TrailerUpdateRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string trailer_type_id = 3;
     */
    trailerTypeId: string;
    /**
     * @generated from protobuf field: string vendor_id = 4;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: string plate_id = 5;
     */
    plateId: string;
    /**
     * @generated from protobuf field: string trailer_company_id = 6;
     */
    trailerCompanyId: string;
    /**
     * @generated from protobuf field: TrailerModel.Ownership ownership_type = 7;
     */
    ownershipType: TrailerModel_Ownership;
    /**
     * @generated from protobuf field: string vin = 8;
     */
    vin: string;
    /**
     * @generated from protobuf field: int64 year = 9;
     */
    year: number;
    /**
     * @generated from protobuf field: string make = 10;
     */
    make: string;
    /**
     * @generated from protobuf field: string model = 11;
     */
    model: string;
    /**
     * @generated from protobuf field: double company_rent_amount = 12;
     */
    companyRentAmount: number;
    /**
     * @generated from protobuf field: double company_deposit_amount = 13;
     */
    companyDepositAmount: number;
    /**
     * @generated from protobuf field: double driver_rent_amount = 14;
     */
    driverRentAmount: number;
    /**
     * @generated from protobuf field: double driver_deposit_amount = 15;
     */
    driverDepositAmount: number;
}
/**
 * @generated from protobuf message TrailerUpdateReply
 */
export interface TrailerUpdateReply {
}
/**
 * ////////////////////////////
 * TrailerGetRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerGetRequest
 */
export interface TrailerGetRequest {
}
/**
 * @generated from protobuf message TrailerGetReply
 */
export interface TrailerGetReply {
    /**
     * @generated from protobuf field: repeated TrailerModel.Trailer trailers = 1;
     */
    trailers: TrailerModel_Trailer[];
}
/**
 * ////////////////////////////
 * TrailerCreateRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerCreateRequest
 */
export interface TrailerCreateRequest {
    /**
     * @generated from protobuf field: string trailer_type_id = 1;
     */
    trailerTypeId: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string trailer_company_id = 4;
     */
    trailerCompanyId: string;
    /**
     * @generated from protobuf field: string plate_id = 5;
     */
    plateId: string;
    /**
     * @generated from protobuf field: string vin = 6;
     */
    vin: string;
    /**
     * @generated from protobuf field: double company_rent_amount = 14;
     */
    companyRentAmount: number;
    /**
     * @generated from protobuf field: double company_deposit_amount = 7;
     */
    companyDepositAmount: number;
    /**
     * @generated from protobuf field: double driver_rent_amount = 8;
     */
    driverRentAmount: number;
    /**
     * @generated from protobuf field: TrailerModel.Ownership ownership_type = 10;
     */
    ownershipType: TrailerModel_Ownership;
}
/**
 * @generated from protobuf message TrailerCreateReply
 */
export interface TrailerCreateReply {
    /**
     * @generated from protobuf field: TrailerModel.Trailer trailer = 1;
     */
    trailer?: TrailerModel_Trailer;
}
/**
 * ////////////////////////////
 * TrailerRetrieveRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerRetrieveRequest
 */
export interface TrailerRetrieveRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
}
/**
 * @generated from protobuf message TrailerRetrieveReply
 */
export interface TrailerRetrieveReply {
    /**
     * @generated from protobuf field: TrailerModel.Trailer trailer = 1;
     */
    trailer?: TrailerModel_Trailer;
}
/**
 * ////////////////////////////
 * TrailerCompanyAssignRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerCompanyAssignRequest
 */
export interface TrailerCompanyAssignRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string trailer_company_id = 2;
     */
    trailerCompanyId: string;
}
/**
 * @generated from protobuf message TrailerCompanyAssignReply
 */
export interface TrailerCompanyAssignReply {
}
/**
 * ////////////////////////////
 * TrailerCompanyRemoveRequest
 * ////////////////////////////
 *
 * @generated from protobuf message TrailerCompanyRemoveRequest
 */
export interface TrailerCompanyRemoveRequest {
    /**
     * @generated from protobuf field: string trailer_id = 1;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string trailer_company_id = 2;
     */
    trailerCompanyId: string;
}
/**
 * @generated from protobuf message TrailerCompanyRemoveReply
 */
export interface TrailerCompanyRemoveReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class TrailerDeleteRequest$Type extends MessageType<TrailerDeleteRequest> {
    constructor() {
        super("TrailerDeleteRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerDeleteRequest>): TrailerDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerDeleteRequest): TrailerDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerDeleteRequest
 */
export const TrailerDeleteRequest = new TrailerDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerDeleteReply$Type extends MessageType<TrailerDeleteReply> {
    constructor() {
        super("TrailerDeleteReply", []);
    }
    create(value?: PartialMessage<TrailerDeleteReply>): TrailerDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerDeleteReply): TrailerDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerDeleteReply
 */
export const TrailerDeleteReply = new TrailerDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerStatusUpdateRequest$Type extends MessageType<TrailerStatusUpdateRequest> {
    constructor() {
        super("TrailerStatusUpdateRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["TrailerModel.Status", TrailerModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<TrailerStatusUpdateRequest>): TrailerStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<TrailerStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerStatusUpdateRequest): TrailerStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                case /* TrailerModel.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        /* TrailerModel.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerStatusUpdateRequest
 */
export const TrailerStatusUpdateRequest = new TrailerStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerStatusUpdateReply$Type extends MessageType<TrailerStatusUpdateReply> {
    constructor() {
        super("TrailerStatusUpdateReply", []);
    }
    create(value?: PartialMessage<TrailerStatusUpdateReply>): TrailerStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerStatusUpdateReply): TrailerStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerStatusUpdateReply
 */
export const TrailerStatusUpdateReply = new TrailerStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerParkingLocationUpdateRequest$Type extends MessageType<TrailerParkingLocationUpdateRequest> {
    constructor() {
        super("TrailerParkingLocationUpdateRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parking_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerParkingLocationUpdateRequest>): TrailerParkingLocationUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        message.parkingLocation = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerParkingLocationUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerParkingLocationUpdateRequest): TrailerParkingLocationUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                case /* string parking_location */ 2:
                    message.parkingLocation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerParkingLocationUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        /* string parking_location = 2; */
        if (message.parkingLocation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.parkingLocation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerParkingLocationUpdateRequest
 */
export const TrailerParkingLocationUpdateRequest = new TrailerParkingLocationUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerParkingLocationUpdateReply$Type extends MessageType<TrailerParkingLocationUpdateReply> {
    constructor() {
        super("TrailerParkingLocationUpdateReply", []);
    }
    create(value?: PartialMessage<TrailerParkingLocationUpdateReply>): TrailerParkingLocationUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerParkingLocationUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerParkingLocationUpdateReply): TrailerParkingLocationUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerParkingLocationUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerParkingLocationUpdateReply
 */
export const TrailerParkingLocationUpdateReply = new TrailerParkingLocationUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerUpdateRequest$Type extends MessageType<TrailerUpdateRequest> {
    constructor() {
        super("TrailerUpdateRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ownership_type", kind: "enum", T: () => ["TrailerModel.Ownership", TrailerModel_Ownership, "OWNERSHIP_"] },
            { no: 8, name: "vin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "make", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "company_rent_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "company_deposit_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 14, name: "driver_rent_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "driver_deposit_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerUpdateRequest>): TrailerUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        message.referenceId = "";
        message.trailerTypeId = "";
        message.vendorId = "";
        message.plateId = "";
        message.trailerCompanyId = "";
        message.ownershipType = 0;
        message.vin = "";
        message.year = 0;
        message.make = "";
        message.model = "";
        message.companyRentAmount = 0;
        message.companyDepositAmount = 0;
        message.driverRentAmount = 0;
        message.driverDepositAmount = 0;
        if (value !== undefined)
            reflectionMergePartial<TrailerUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerUpdateRequest): TrailerUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string trailer_type_id */ 3:
                    message.trailerTypeId = reader.string();
                    break;
                case /* string vendor_id */ 4:
                    message.vendorId = reader.string();
                    break;
                case /* string plate_id */ 5:
                    message.plateId = reader.string();
                    break;
                case /* string trailer_company_id */ 6:
                    message.trailerCompanyId = reader.string();
                    break;
                case /* TrailerModel.Ownership ownership_type */ 7:
                    message.ownershipType = reader.int32();
                    break;
                case /* string vin */ 8:
                    message.vin = reader.string();
                    break;
                case /* int64 year */ 9:
                    message.year = reader.int64().toNumber();
                    break;
                case /* string make */ 10:
                    message.make = reader.string();
                    break;
                case /* string model */ 11:
                    message.model = reader.string();
                    break;
                case /* double company_rent_amount */ 12:
                    message.companyRentAmount = reader.double();
                    break;
                case /* double company_deposit_amount */ 13:
                    message.companyDepositAmount = reader.double();
                    break;
                case /* double driver_rent_amount */ 14:
                    message.driverRentAmount = reader.double();
                    break;
                case /* double driver_deposit_amount */ 15:
                    message.driverDepositAmount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string trailer_type_id = 3; */
        if (message.trailerTypeId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.trailerTypeId);
        /* string vendor_id = 4; */
        if (message.vendorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vendorId);
        /* string plate_id = 5; */
        if (message.plateId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.plateId);
        /* string trailer_company_id = 6; */
        if (message.trailerCompanyId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.trailerCompanyId);
        /* TrailerModel.Ownership ownership_type = 7; */
        if (message.ownershipType !== 0)
            writer.tag(7, WireType.Varint).int32(message.ownershipType);
        /* string vin = 8; */
        if (message.vin !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.vin);
        /* int64 year = 9; */
        if (message.year !== 0)
            writer.tag(9, WireType.Varint).int64(message.year);
        /* string make = 10; */
        if (message.make !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.make);
        /* string model = 11; */
        if (message.model !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.model);
        /* double company_rent_amount = 12; */
        if (message.companyRentAmount !== 0)
            writer.tag(12, WireType.Bit64).double(message.companyRentAmount);
        /* double company_deposit_amount = 13; */
        if (message.companyDepositAmount !== 0)
            writer.tag(13, WireType.Bit64).double(message.companyDepositAmount);
        /* double driver_rent_amount = 14; */
        if (message.driverRentAmount !== 0)
            writer.tag(14, WireType.Bit64).double(message.driverRentAmount);
        /* double driver_deposit_amount = 15; */
        if (message.driverDepositAmount !== 0)
            writer.tag(15, WireType.Bit64).double(message.driverDepositAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerUpdateRequest
 */
export const TrailerUpdateRequest = new TrailerUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerUpdateReply$Type extends MessageType<TrailerUpdateReply> {
    constructor() {
        super("TrailerUpdateReply", []);
    }
    create(value?: PartialMessage<TrailerUpdateReply>): TrailerUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerUpdateReply): TrailerUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerUpdateReply
 */
export const TrailerUpdateReply = new TrailerUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerGetRequest$Type extends MessageType<TrailerGetRequest> {
    constructor() {
        super("TrailerGetRequest", []);
    }
    create(value?: PartialMessage<TrailerGetRequest>): TrailerGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerGetRequest): TrailerGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerGetRequest
 */
export const TrailerGetRequest = new TrailerGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerGetReply$Type extends MessageType<TrailerGetReply> {
    constructor() {
        super("TrailerGetReply", [
            { no: 1, name: "trailers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrailerModel_Trailer }
        ]);
    }
    create(value?: PartialMessage<TrailerGetReply>): TrailerGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailers = [];
        if (value !== undefined)
            reflectionMergePartial<TrailerGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerGetReply): TrailerGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TrailerModel.Trailer trailers */ 1:
                    message.trailers.push(TrailerModel_Trailer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TrailerModel.Trailer trailers = 1; */
        for (let i = 0; i < message.trailers.length; i++)
            TrailerModel_Trailer.internalBinaryWrite(message.trailers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerGetReply
 */
export const TrailerGetReply = new TrailerGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCreateRequest$Type extends MessageType<TrailerCreateRequest> {
    constructor() {
        super("TrailerCreateRequest", [
            { no: 1, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "vin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "company_rent_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "company_deposit_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "driver_rent_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "ownership_type", kind: "enum", T: () => ["TrailerModel.Ownership", TrailerModel_Ownership, "OWNERSHIP_"] }
        ]);
    }
    create(value?: PartialMessage<TrailerCreateRequest>): TrailerCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerTypeId = "";
        message.referenceId = "";
        message.trailerCompanyId = "";
        message.plateId = "";
        message.vin = "";
        message.companyRentAmount = 0;
        message.companyDepositAmount = 0;
        message.driverRentAmount = 0;
        message.ownershipType = 0;
        if (value !== undefined)
            reflectionMergePartial<TrailerCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCreateRequest): TrailerCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_type_id */ 1:
                    message.trailerTypeId = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string trailer_company_id */ 4:
                    message.trailerCompanyId = reader.string();
                    break;
                case /* string plate_id */ 5:
                    message.plateId = reader.string();
                    break;
                case /* string vin */ 6:
                    message.vin = reader.string();
                    break;
                case /* double company_rent_amount */ 14:
                    message.companyRentAmount = reader.double();
                    break;
                case /* double company_deposit_amount */ 7:
                    message.companyDepositAmount = reader.double();
                    break;
                case /* double driver_rent_amount */ 8:
                    message.driverRentAmount = reader.double();
                    break;
                case /* TrailerModel.Ownership ownership_type */ 10:
                    message.ownershipType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_type_id = 1; */
        if (message.trailerTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerTypeId);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string trailer_company_id = 4; */
        if (message.trailerCompanyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trailerCompanyId);
        /* string plate_id = 5; */
        if (message.plateId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.plateId);
        /* string vin = 6; */
        if (message.vin !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.vin);
        /* double company_rent_amount = 14; */
        if (message.companyRentAmount !== 0)
            writer.tag(14, WireType.Bit64).double(message.companyRentAmount);
        /* double company_deposit_amount = 7; */
        if (message.companyDepositAmount !== 0)
            writer.tag(7, WireType.Bit64).double(message.companyDepositAmount);
        /* double driver_rent_amount = 8; */
        if (message.driverRentAmount !== 0)
            writer.tag(8, WireType.Bit64).double(message.driverRentAmount);
        /* TrailerModel.Ownership ownership_type = 10; */
        if (message.ownershipType !== 0)
            writer.tag(10, WireType.Varint).int32(message.ownershipType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCreateRequest
 */
export const TrailerCreateRequest = new TrailerCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCreateReply$Type extends MessageType<TrailerCreateReply> {
    constructor() {
        super("TrailerCreateReply", [
            { no: 1, name: "trailer", kind: "message", T: () => TrailerModel_Trailer }
        ]);
    }
    create(value?: PartialMessage<TrailerCreateReply>): TrailerCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCreateReply): TrailerCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TrailerModel.Trailer trailer */ 1:
                    message.trailer = TrailerModel_Trailer.internalBinaryRead(reader, reader.uint32(), options, message.trailer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TrailerModel.Trailer trailer = 1; */
        if (message.trailer)
            TrailerModel_Trailer.internalBinaryWrite(message.trailer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCreateReply
 */
export const TrailerCreateReply = new TrailerCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerRetrieveRequest$Type extends MessageType<TrailerRetrieveRequest> {
    constructor() {
        super("TrailerRetrieveRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerRetrieveRequest>): TrailerRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerRetrieveRequest): TrailerRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerRetrieveRequest
 */
export const TrailerRetrieveRequest = new TrailerRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerRetrieveReply$Type extends MessageType<TrailerRetrieveReply> {
    constructor() {
        super("TrailerRetrieveReply", [
            { no: 1, name: "trailer", kind: "message", T: () => TrailerModel_Trailer }
        ]);
    }
    create(value?: PartialMessage<TrailerRetrieveReply>): TrailerRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerRetrieveReply): TrailerRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TrailerModel.Trailer trailer */ 1:
                    message.trailer = TrailerModel_Trailer.internalBinaryRead(reader, reader.uint32(), options, message.trailer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TrailerModel.Trailer trailer = 1; */
        if (message.trailer)
            TrailerModel_Trailer.internalBinaryWrite(message.trailer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerRetrieveReply
 */
export const TrailerRetrieveReply = new TrailerRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyAssignRequest$Type extends MessageType<TrailerCompanyAssignRequest> {
    constructor() {
        super("TrailerCompanyAssignRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyAssignRequest>): TrailerCompanyAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        message.trailerCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyAssignRequest): TrailerCompanyAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                case /* string trailer_company_id */ 2:
                    message.trailerCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        /* string trailer_company_id = 2; */
        if (message.trailerCompanyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trailerCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyAssignRequest
 */
export const TrailerCompanyAssignRequest = new TrailerCompanyAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyAssignReply$Type extends MessageType<TrailerCompanyAssignReply> {
    constructor() {
        super("TrailerCompanyAssignReply", []);
    }
    create(value?: PartialMessage<TrailerCompanyAssignReply>): TrailerCompanyAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyAssignReply): TrailerCompanyAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerCompanyAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyAssignReply
 */
export const TrailerCompanyAssignReply = new TrailerCompanyAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRemoveRequest$Type extends MessageType<TrailerCompanyRemoveRequest> {
    constructor() {
        super("TrailerCompanyRemoveRequest", [
            { no: 1, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailer_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrailerCompanyRemoveRequest>): TrailerCompanyRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trailerId = "";
        message.trailerCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRemoveRequest): TrailerCompanyRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trailer_id */ 1:
                    message.trailerId = reader.string();
                    break;
                case /* string trailer_company_id */ 2:
                    message.trailerCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrailerCompanyRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trailer_id = 1; */
        if (message.trailerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trailerId);
        /* string trailer_company_id = 2; */
        if (message.trailerCompanyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trailerCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRemoveRequest
 */
export const TrailerCompanyRemoveRequest = new TrailerCompanyRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrailerCompanyRemoveReply$Type extends MessageType<TrailerCompanyRemoveReply> {
    constructor() {
        super("TrailerCompanyRemoveReply", []);
    }
    create(value?: PartialMessage<TrailerCompanyRemoveReply>): TrailerCompanyRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrailerCompanyRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrailerCompanyRemoveReply): TrailerCompanyRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TrailerCompanyRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrailerCompanyRemoveReply
 */
export const TrailerCompanyRemoveReply = new TrailerCompanyRemoveReply$Type();
/**
 * @generated ServiceType for protobuf service TrailersService
 */
export const TrailersService = new ServiceType("TrailersService", [
    { name: "TrailerCreate", options: {}, I: TrailerCreateRequest, O: TrailerCreateReply },
    { name: "TrailerRetrieve", options: {}, I: TrailerRetrieveRequest, O: TrailerRetrieveReply },
    { name: "TrailerDelete", options: {}, I: TrailerDeleteRequest, O: TrailerDeleteReply },
    { name: "TrailerStatusUpdate", options: {}, I: TrailerStatusUpdateRequest, O: TrailerStatusUpdateReply },
    { name: "TrailerParkingLocationUpdate", options: {}, I: TrailerParkingLocationUpdateRequest, O: TrailerParkingLocationUpdateReply },
    { name: "TrailerUpdate", options: {}, I: TrailerUpdateRequest, O: TrailerUpdateReply },
    { name: "TrailerGet", options: {}, I: TrailerGetRequest, O: TrailerGetReply },
    { name: "TrailerCompanyAssign", options: {}, I: TrailerCompanyAssignRequest, O: TrailerCompanyAssignReply },
    { name: "TrailerCompanyRemove", options: {}, I: TrailerCompanyRemoveRequest, O: TrailerCompanyRemoveReply }
]);
