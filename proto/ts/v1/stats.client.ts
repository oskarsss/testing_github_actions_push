// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/stats.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StatsService } from "./stats";
import type { StatsFactoringCompaniesGetReply } from "./stats";
import type { StatsFactoringCompaniesGetRequest } from "./stats";
import type { GetPeriodStatsReply } from "./stats";
import type { GetPeriodStatsRequest } from "./stats";
import type { GetTrendsReply } from "./stats";
import type { GetTrendsRequest } from "./stats";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetLoadsStatsReply } from "./stats";
import type { GetLoadsStatsRequest } from "./stats";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service StatsService
 */
export interface IStatsServiceClient {
    /**
     * @generated from protobuf rpc: GetLoadsStats(GetLoadsStatsRequest) returns (stream GetLoadsStatsReply);
     */
    getLoadsStats(input: GetLoadsStatsRequest, options?: RpcOptions): ServerStreamingCall<GetLoadsStatsRequest, GetLoadsStatsReply>;
    /**
     * @generated from protobuf rpc: GetTrends(GetTrendsRequest) returns (stream GetTrendsReply);
     */
    getTrends(input: GetTrendsRequest, options?: RpcOptions): ServerStreamingCall<GetTrendsRequest, GetTrendsReply>;
    /**
     * @generated from protobuf rpc: GetPeriodStats(GetPeriodStatsRequest) returns (stream GetPeriodStatsReply);
     */
    getPeriodStats(input: GetPeriodStatsRequest, options?: RpcOptions): ServerStreamingCall<GetPeriodStatsRequest, GetPeriodStatsReply>;
    /**
     * @generated from protobuf rpc: StatsFactoringCompaniesGet(StatsFactoringCompaniesGetRequest) returns (stream StatsFactoringCompaniesGetReply);
     */
    statsFactoringCompaniesGet(input: StatsFactoringCompaniesGetRequest, options?: RpcOptions): ServerStreamingCall<StatsFactoringCompaniesGetRequest, StatsFactoringCompaniesGetReply>;
}
/**
 * @generated from protobuf service StatsService
 */
export class StatsServiceClient implements IStatsServiceClient, ServiceInfo {
    typeName = StatsService.typeName;
    methods = StatsService.methods;
    options = StatsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetLoadsStats(GetLoadsStatsRequest) returns (stream GetLoadsStatsReply);
     */
    getLoadsStats(input: GetLoadsStatsRequest, options?: RpcOptions): ServerStreamingCall<GetLoadsStatsRequest, GetLoadsStatsReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLoadsStatsRequest, GetLoadsStatsReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrends(GetTrendsRequest) returns (stream GetTrendsReply);
     */
    getTrends(input: GetTrendsRequest, options?: RpcOptions): ServerStreamingCall<GetTrendsRequest, GetTrendsReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTrendsRequest, GetTrendsReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPeriodStats(GetPeriodStatsRequest) returns (stream GetPeriodStatsReply);
     */
    getPeriodStats(input: GetPeriodStatsRequest, options?: RpcOptions): ServerStreamingCall<GetPeriodStatsRequest, GetPeriodStatsReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPeriodStatsRequest, GetPeriodStatsReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StatsFactoringCompaniesGet(StatsFactoringCompaniesGetRequest) returns (stream StatsFactoringCompaniesGetReply);
     */
    statsFactoringCompaniesGet(input: StatsFactoringCompaniesGetRequest, options?: RpcOptions): ServerStreamingCall<StatsFactoringCompaniesGetRequest, StatsFactoringCompaniesGetReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<StatsFactoringCompaniesGetRequest, StatsFactoringCompaniesGetReply>("serverStreaming", this._transport, method, opt, input);
    }
}
