// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/plates.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PlateModel_Status } from "./models/model_plate";
import { PlateModel_VehicleType } from "./models/model_plate";
import { CountryCode } from "./models/country_code";
import { PlateModel } from "./models/model_plate";
/**
 * ////////////////////////////
 * PlateGet
 * ////////////////////////////
 *
 * @generated from protobuf message PlateGetRequest
 */
export interface PlateGetRequest {
}
/**
 * @generated from protobuf message PlateGetReply
 */
export interface PlateGetReply {
    /**
     * @generated from protobuf field: repeated PlateModel plates = 1;
     */
    plates: PlateModel[];
}
/**
 * ////////////////////////////
 * PlateCreate
 * ////////////////////////////
 *
 * @generated from protobuf message PlateCreateRequest
 */
export interface PlateCreateRequest {
    /**
     * @generated from protobuf field: string plate_company_id = 1;
     */
    plateCompanyId: string;
    /**
     * @generated from protobuf field: CountryCode country_code = 2;
     */
    countryCode: CountryCode;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
    /**
     * @generated from protobuf field: string number = 4;
     */
    number: string;
    /**
     * @generated from protobuf field: PlateModel.VehicleType vehicle_type = 5;
     */
    vehicleType: PlateModel_VehicleType;
    /**
     * @generated from protobuf field: double annual_cost = 6;
     */
    annualCost: number;
    /**
     * @generated from protobuf field: bool owned = 7;
     */
    owned: boolean;
    /**
     * @generated from protobuf field: string owner_name = 8;
     */
    ownerName: string;
}
/**
 * @generated from protobuf message PlateCreateReply
 */
export interface PlateCreateReply {
    /**
     * @generated from protobuf field: string plate_id = 1;
     */
    plateId: string;
}
/**
 * ////////////////////////////
 * PlateRetrieve
 * ////////////////////////////
 *
 * @generated from protobuf message PlateRetrieveRequest
 */
export interface PlateRetrieveRequest {
    /**
     * @generated from protobuf field: string plate_id = 1;
     */
    plateId: string;
}
/**
 * @generated from protobuf message PlateRetrieveReply
 */
export interface PlateRetrieveReply {
    /**
     * @generated from protobuf field: PlateModel plate = 1;
     */
    plate?: PlateModel;
}
/**
 * ////////////////////////////
 * PlateUpdate
 * ////////////////////////////
 *
 * @generated from protobuf message PlateUpdateRequest
 */
export interface PlateUpdateRequest {
    /**
     * @generated from protobuf field: string plate_id = 1;
     */
    plateId: string;
    /**
     * @generated from protobuf field: string plate_company_id = 2;
     */
    plateCompanyId: string;
    /**
     * @generated from protobuf field: CountryCode country_code = 3;
     */
    countryCode: CountryCode;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
    /**
     * @generated from protobuf field: string number = 5;
     */
    number: string;
    /**
     * @generated from protobuf field: PlateModel.VehicleType vehicle_type = 6;
     */
    vehicleType: PlateModel_VehicleType;
    /**
     * @generated from protobuf field: double annual_cost = 7;
     */
    annualCost: number;
    /**
     * @generated from protobuf field: bool owned = 8;
     */
    owned: boolean;
    /**
     * @generated from protobuf field: string owner_name = 9;
     */
    ownerName: string;
}
/**
 * @generated from protobuf message PlateUpdateReply
 */
export interface PlateUpdateReply {
}
/**
 * ////////////////////////////
 * PlateDelete
 * ////////////////////////////
 *
 * @generated from protobuf message PlateDeleteRequest
 */
export interface PlateDeleteRequest {
    /**
     * @generated from protobuf field: string plate_id = 1;
     */
    plateId: string;
}
/**
 * @generated from protobuf message PlateDeleteReply
 */
export interface PlateDeleteReply {
}
/**
 * ////////////////////////////
 * PlateStatusUpdate
 * ////////////////////////////
 *
 * @generated from protobuf message PlateStatusUpdateRequest
 */
export interface PlateStatusUpdateRequest {
    /**
     * @generated from protobuf field: string plate_id = 1;
     */
    plateId: string;
    /**
     * @generated from protobuf field: PlateModel.Status status = 2;
     */
    status: PlateModel_Status;
}
/**
 * @generated from protobuf message PlateStatusUpdateReply
 */
export interface PlateStatusUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class PlateGetRequest$Type extends MessageType<PlateGetRequest> {
    constructor() {
        super("PlateGetRequest", []);
    }
    create(value?: PartialMessage<PlateGetRequest>): PlateGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateGetRequest): PlateGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateGetRequest
 */
export const PlateGetRequest = new PlateGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateGetReply$Type extends MessageType<PlateGetReply> {
    constructor() {
        super("PlateGetReply", [
            { no: 1, name: "plates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlateModel }
        ]);
    }
    create(value?: PartialMessage<PlateGetReply>): PlateGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plates = [];
        if (value !== undefined)
            reflectionMergePartial<PlateGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateGetReply): PlateGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PlateModel plates */ 1:
                    message.plates.push(PlateModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PlateModel plates = 1; */
        for (let i = 0; i < message.plates.length; i++)
            PlateModel.internalBinaryWrite(message.plates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateGetReply
 */
export const PlateGetReply = new PlateGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCreateRequest$Type extends MessageType<PlateCreateRequest> {
    constructor() {
        super("PlateCreateRequest", [
            { no: 1, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "country_code", kind: "enum", T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vehicle_type", kind: "enum", T: () => ["PlateModel.VehicleType", PlateModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 6, name: "annual_cost", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "owned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "owner_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCreateRequest>): PlateCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateCompanyId = "";
        message.countryCode = 0;
        message.state = "";
        message.number = "";
        message.vehicleType = 0;
        message.annualCost = 0;
        message.owned = false;
        message.ownerName = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCreateRequest): PlateCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_company_id */ 1:
                    message.plateCompanyId = reader.string();
                    break;
                case /* CountryCode country_code */ 2:
                    message.countryCode = reader.int32();
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                case /* string number */ 4:
                    message.number = reader.string();
                    break;
                case /* PlateModel.VehicleType vehicle_type */ 5:
                    message.vehicleType = reader.int32();
                    break;
                case /* double annual_cost */ 6:
                    message.annualCost = reader.double();
                    break;
                case /* bool owned */ 7:
                    message.owned = reader.bool();
                    break;
                case /* string owner_name */ 8:
                    message.ownerName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_company_id = 1; */
        if (message.plateCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateCompanyId);
        /* CountryCode country_code = 2; */
        if (message.countryCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.countryCode);
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        /* string number = 4; */
        if (message.number !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.number);
        /* PlateModel.VehicleType vehicle_type = 5; */
        if (message.vehicleType !== 0)
            writer.tag(5, WireType.Varint).int32(message.vehicleType);
        /* double annual_cost = 6; */
        if (message.annualCost !== 0)
            writer.tag(6, WireType.Bit64).double(message.annualCost);
        /* bool owned = 7; */
        if (message.owned !== false)
            writer.tag(7, WireType.Varint).bool(message.owned);
        /* string owner_name = 8; */
        if (message.ownerName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ownerName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCreateRequest
 */
export const PlateCreateRequest = new PlateCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateCreateReply$Type extends MessageType<PlateCreateReply> {
    constructor() {
        super("PlateCreateReply", [
            { no: 1, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateCreateReply>): PlateCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateCreateReply): PlateCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_id */ 1:
                    message.plateId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_id = 1; */
        if (message.plateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateCreateReply
 */
export const PlateCreateReply = new PlateCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateRetrieveRequest$Type extends MessageType<PlateRetrieveRequest> {
    constructor() {
        super("PlateRetrieveRequest", [
            { no: 1, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateRetrieveRequest>): PlateRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateRetrieveRequest): PlateRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_id */ 1:
                    message.plateId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_id = 1; */
        if (message.plateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateRetrieveRequest
 */
export const PlateRetrieveRequest = new PlateRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateRetrieveReply$Type extends MessageType<PlateRetrieveReply> {
    constructor() {
        super("PlateRetrieveReply", [
            { no: 1, name: "plate", kind: "message", T: () => PlateModel }
        ]);
    }
    create(value?: PartialMessage<PlateRetrieveReply>): PlateRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateRetrieveReply): PlateRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlateModel plate */ 1:
                    message.plate = PlateModel.internalBinaryRead(reader, reader.uint32(), options, message.plate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlateModel plate = 1; */
        if (message.plate)
            PlateModel.internalBinaryWrite(message.plate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateRetrieveReply
 */
export const PlateRetrieveReply = new PlateRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateUpdateRequest$Type extends MessageType<PlateUpdateRequest> {
    constructor() {
        super("PlateUpdateRequest", [
            { no: 1, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country_code", kind: "enum", T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "vehicle_type", kind: "enum", T: () => ["PlateModel.VehicleType", PlateModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 7, name: "annual_cost", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "owned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "owner_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateUpdateRequest>): PlateUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateId = "";
        message.plateCompanyId = "";
        message.countryCode = 0;
        message.state = "";
        message.number = "";
        message.vehicleType = 0;
        message.annualCost = 0;
        message.owned = false;
        message.ownerName = "";
        if (value !== undefined)
            reflectionMergePartial<PlateUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateUpdateRequest): PlateUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_id */ 1:
                    message.plateId = reader.string();
                    break;
                case /* string plate_company_id */ 2:
                    message.plateCompanyId = reader.string();
                    break;
                case /* CountryCode country_code */ 3:
                    message.countryCode = reader.int32();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                case /* string number */ 5:
                    message.number = reader.string();
                    break;
                case /* PlateModel.VehicleType vehicle_type */ 6:
                    message.vehicleType = reader.int32();
                    break;
                case /* double annual_cost */ 7:
                    message.annualCost = reader.double();
                    break;
                case /* bool owned */ 8:
                    message.owned = reader.bool();
                    break;
                case /* string owner_name */ 9:
                    message.ownerName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_id = 1; */
        if (message.plateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateId);
        /* string plate_company_id = 2; */
        if (message.plateCompanyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.plateCompanyId);
        /* CountryCode country_code = 3; */
        if (message.countryCode !== 0)
            writer.tag(3, WireType.Varint).int32(message.countryCode);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        /* string number = 5; */
        if (message.number !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.number);
        /* PlateModel.VehicleType vehicle_type = 6; */
        if (message.vehicleType !== 0)
            writer.tag(6, WireType.Varint).int32(message.vehicleType);
        /* double annual_cost = 7; */
        if (message.annualCost !== 0)
            writer.tag(7, WireType.Bit64).double(message.annualCost);
        /* bool owned = 8; */
        if (message.owned !== false)
            writer.tag(8, WireType.Varint).bool(message.owned);
        /* string owner_name = 9; */
        if (message.ownerName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.ownerName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateUpdateRequest
 */
export const PlateUpdateRequest = new PlateUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateUpdateReply$Type extends MessageType<PlateUpdateReply> {
    constructor() {
        super("PlateUpdateReply", []);
    }
    create(value?: PartialMessage<PlateUpdateReply>): PlateUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateUpdateReply): PlateUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateUpdateReply
 */
export const PlateUpdateReply = new PlateUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateDeleteRequest$Type extends MessageType<PlateDeleteRequest> {
    constructor() {
        super("PlateDeleteRequest", [
            { no: 1, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateDeleteRequest>): PlateDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateId = "";
        if (value !== undefined)
            reflectionMergePartial<PlateDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateDeleteRequest): PlateDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_id */ 1:
                    message.plateId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_id = 1; */
        if (message.plateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateDeleteRequest
 */
export const PlateDeleteRequest = new PlateDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateDeleteReply$Type extends MessageType<PlateDeleteReply> {
    constructor() {
        super("PlateDeleteReply", []);
    }
    create(value?: PartialMessage<PlateDeleteReply>): PlateDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateDeleteReply): PlateDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateDeleteReply
 */
export const PlateDeleteReply = new PlateDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateStatusUpdateRequest$Type extends MessageType<PlateStatusUpdateRequest> {
    constructor() {
        super("PlateStatusUpdateRequest", [
            { no: 1, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["PlateModel.Status", PlateModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<PlateStatusUpdateRequest>): PlateStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<PlateStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateStatusUpdateRequest): PlateStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_id */ 1:
                    message.plateId = reader.string();
                    break;
                case /* PlateModel.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_id = 1; */
        if (message.plateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateId);
        /* PlateModel.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateStatusUpdateRequest
 */
export const PlateStatusUpdateRequest = new PlateStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateStatusUpdateReply$Type extends MessageType<PlateStatusUpdateReply> {
    constructor() {
        super("PlateStatusUpdateReply", []);
    }
    create(value?: PartialMessage<PlateStatusUpdateReply>): PlateStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlateStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateStatusUpdateReply): PlateStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlateStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateStatusUpdateReply
 */
export const PlateStatusUpdateReply = new PlateStatusUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service PlatesService
 */
export const PlatesService = new ServiceType("PlatesService", [
    { name: "PlateGet", options: {}, I: PlateGetRequest, O: PlateGetReply },
    { name: "PlateCreate", options: {}, I: PlateCreateRequest, O: PlateCreateReply },
    { name: "PlateRetrieve", options: {}, I: PlateRetrieveRequest, O: PlateRetrieveReply },
    { name: "PlateUpdate", options: {}, I: PlateUpdateRequest, O: PlateUpdateReply },
    { name: "PlateDelete", options: {}, I: PlateDeleteRequest, O: PlateDeleteReply },
    { name: "PlateStatusUpdate", options: {}, I: PlateStatusUpdateRequest, O: PlateStatusUpdateReply }
]);
