// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/driver_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DriverTypeModel_Icon } from "./models/model_driver_type";
import { DriverTypeModel } from "./models/model_driver_type";
/**
 * @generated from protobuf message DriverTypeGetRequest
 */
export interface DriverTypeGetRequest {
}
/**
 * @generated from protobuf message DriverTypeGetReply
 */
export interface DriverTypeGetReply {
    /**
     * @generated from protobuf field: repeated DriverTypeModel driver_types = 1;
     */
    driverTypes: DriverTypeModel[];
}
/**
 * @generated from protobuf message DriverTypeCreateRequest
 */
export interface DriverTypeCreateRequest {
    /**
     * @generated from protobuf field: DriverTypeCreateRequest.DriverType driver_type = 1;
     */
    driverType?: DriverTypeCreateRequest_DriverType;
}
/**
 * @generated from protobuf message DriverTypeCreateRequest.DriverType
 */
export interface DriverTypeCreateRequest_DriverType {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: DriverTypeModel.Icon icon = 2;
     */
    icon: DriverTypeModel_Icon;
    /**
     * @generated from protobuf field: bool is_default = 3;
     */
    isDefault: boolean;
    /**
     * @generated from protobuf field: bool permission_settlements = 4;
     */
    permissionSettlements: boolean;
    /**
     * @generated from protobuf field: bool permission_bank_accounts = 5;
     */
    permissionBankAccounts: boolean;
    /**
     * @generated from protobuf field: bool permission_completed_loads = 6;
     */
    permissionCompletedLoads: boolean;
    /**
     * @generated from protobuf field: bool permission_loads_total_amount = 7;
     */
    permissionLoadsTotalAmount: boolean;
    /**
     * @generated from protobuf field: bool permission_loads_driver_pay_amount = 8;
     */
    permissionLoadsDriverPayAmount: boolean;
    /**
     * @generated from protobuf field: bool permission_loads_distance = 9;
     */
    permissionLoadsDistance: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_loads = 10;
     */
    permissionSettlementViewLoads: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_load_total_amount = 11;
     */
    permissionSettlementViewLoadTotalAmount: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_loads_pay_amount = 12;
     */
    permissionSettlementViewLoadsPayAmount: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_loads_distance = 13;
     */
    permissionSettlementViewLoadsDistance: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_fuel = 14;
     */
    permissionSettlementViewFuel: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_tolls = 15;
     */
    permissionSettlementViewTolls: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_company_fee = 16;
     */
    permissionSettlementViewCompanyFee: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_debits = 17;
     */
    permissionSettlementViewDebits: boolean;
    /**
     * @generated from protobuf field: bool permission_settlement_view_credits = 18;
     */
    permissionSettlementViewCredits: boolean;
    /**
     * @generated from protobuf field: bool permission_app_take_screenshots = 19;
     */
    permissionAppTakeScreenshots: boolean;
    /**
     * @generated from protobuf field: bool permission_order_commodity_update = 20;
     */
    permissionOrderCommodityUpdate: boolean;
    /**
     * @generated from protobuf field: bool permission_truck_self_assign = 21;
     */
    permissionTruckSelfAssign: boolean;
    /**
     * @generated from protobuf field: bool permission_trailer_self_assign = 22;
     */
    permissionTrailerSelfAssign: boolean;
}
/**
 * @generated from protobuf message DriverTypeCreateReply
 */
export interface DriverTypeCreateReply {
    /**
     * @generated from protobuf field: string driver_type_id = 1;
     */
    driverTypeId: string;
}
/**
 * @generated from protobuf message DriverTypeUpdateRequest
 */
export interface DriverTypeUpdateRequest {
    /**
     * @generated from protobuf field: DriverTypeModel driver_type = 1;
     */
    driverType?: DriverTypeModel;
}
/**
 * @generated from protobuf message DriverTypeUpdateReply
 */
export interface DriverTypeUpdateReply {
}
/**
 * @generated from protobuf message DriverTypeDeleteRequest
 */
export interface DriverTypeDeleteRequest {
    /**
     * @generated from protobuf field: string driver_type_id = 1;
     */
    driverTypeId: string;
}
/**
 * @generated from protobuf message DriverTypeDeleteReply
 */
export interface DriverTypeDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeGetRequest$Type extends MessageType<DriverTypeGetRequest> {
    constructor() {
        super("DriverTypeGetRequest", []);
    }
    create(value?: PartialMessage<DriverTypeGetRequest>): DriverTypeGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverTypeGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeGetRequest): DriverTypeGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverTypeGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeGetRequest
 */
export const DriverTypeGetRequest = new DriverTypeGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeGetReply$Type extends MessageType<DriverTypeGetReply> {
    constructor() {
        super("DriverTypeGetReply", [
            { no: 1, name: "driver_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DriverTypeModel }
        ]);
    }
    create(value?: PartialMessage<DriverTypeGetReply>): DriverTypeGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverTypes = [];
        if (value !== undefined)
            reflectionMergePartial<DriverTypeGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeGetReply): DriverTypeGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated DriverTypeModel driver_types */ 1:
                    message.driverTypes.push(DriverTypeModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated DriverTypeModel driver_types = 1; */
        for (let i = 0; i < message.driverTypes.length; i++)
            DriverTypeModel.internalBinaryWrite(message.driverTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeGetReply
 */
export const DriverTypeGetReply = new DriverTypeGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeCreateRequest$Type extends MessageType<DriverTypeCreateRequest> {
    constructor() {
        super("DriverTypeCreateRequest", [
            { no: 1, name: "driver_type", kind: "message", T: () => DriverTypeCreateRequest_DriverType }
        ]);
    }
    create(value?: PartialMessage<DriverTypeCreateRequest>): DriverTypeCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverTypeCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeCreateRequest): DriverTypeCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DriverTypeCreateRequest.DriverType driver_type */ 1:
                    message.driverType = DriverTypeCreateRequest_DriverType.internalBinaryRead(reader, reader.uint32(), options, message.driverType);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* DriverTypeCreateRequest.DriverType driver_type = 1; */
        if (message.driverType)
            DriverTypeCreateRequest_DriverType.internalBinaryWrite(message.driverType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeCreateRequest
 */
export const DriverTypeCreateRequest = new DriverTypeCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeCreateRequest_DriverType$Type extends MessageType<DriverTypeCreateRequest_DriverType> {
    constructor() {
        super("DriverTypeCreateRequest.DriverType", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon", kind: "enum", T: () => ["DriverTypeModel.Icon", DriverTypeModel_Icon, "ICON_"] },
            { no: 3, name: "is_default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "permission_settlements", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "permission_bank_accounts", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "permission_completed_loads", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "permission_loads_total_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "permission_loads_driver_pay_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "permission_loads_distance", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "permission_settlement_view_loads", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "permission_settlement_view_load_total_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "permission_settlement_view_loads_pay_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "permission_settlement_view_loads_distance", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "permission_settlement_view_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "permission_settlement_view_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "permission_settlement_view_company_fee", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "permission_settlement_view_debits", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "permission_settlement_view_credits", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "permission_app_take_screenshots", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "permission_order_commodity_update", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "permission_truck_self_assign", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "permission_trailer_self_assign", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeCreateRequest_DriverType>): DriverTypeCreateRequest_DriverType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.icon = 0;
        message.isDefault = false;
        message.permissionSettlements = false;
        message.permissionBankAccounts = false;
        message.permissionCompletedLoads = false;
        message.permissionLoadsTotalAmount = false;
        message.permissionLoadsDriverPayAmount = false;
        message.permissionLoadsDistance = false;
        message.permissionSettlementViewLoads = false;
        message.permissionSettlementViewLoadTotalAmount = false;
        message.permissionSettlementViewLoadsPayAmount = false;
        message.permissionSettlementViewLoadsDistance = false;
        message.permissionSettlementViewFuel = false;
        message.permissionSettlementViewTolls = false;
        message.permissionSettlementViewCompanyFee = false;
        message.permissionSettlementViewDebits = false;
        message.permissionSettlementViewCredits = false;
        message.permissionAppTakeScreenshots = false;
        message.permissionOrderCommodityUpdate = false;
        message.permissionTruckSelfAssign = false;
        message.permissionTrailerSelfAssign = false;
        if (value !== undefined)
            reflectionMergePartial<DriverTypeCreateRequest_DriverType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeCreateRequest_DriverType): DriverTypeCreateRequest_DriverType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* DriverTypeModel.Icon icon */ 2:
                    message.icon = reader.int32();
                    break;
                case /* bool is_default */ 3:
                    message.isDefault = reader.bool();
                    break;
                case /* bool permission_settlements */ 4:
                    message.permissionSettlements = reader.bool();
                    break;
                case /* bool permission_bank_accounts */ 5:
                    message.permissionBankAccounts = reader.bool();
                    break;
                case /* bool permission_completed_loads */ 6:
                    message.permissionCompletedLoads = reader.bool();
                    break;
                case /* bool permission_loads_total_amount */ 7:
                    message.permissionLoadsTotalAmount = reader.bool();
                    break;
                case /* bool permission_loads_driver_pay_amount */ 8:
                    message.permissionLoadsDriverPayAmount = reader.bool();
                    break;
                case /* bool permission_loads_distance */ 9:
                    message.permissionLoadsDistance = reader.bool();
                    break;
                case /* bool permission_settlement_view_loads */ 10:
                    message.permissionSettlementViewLoads = reader.bool();
                    break;
                case /* bool permission_settlement_view_load_total_amount */ 11:
                    message.permissionSettlementViewLoadTotalAmount = reader.bool();
                    break;
                case /* bool permission_settlement_view_loads_pay_amount */ 12:
                    message.permissionSettlementViewLoadsPayAmount = reader.bool();
                    break;
                case /* bool permission_settlement_view_loads_distance */ 13:
                    message.permissionSettlementViewLoadsDistance = reader.bool();
                    break;
                case /* bool permission_settlement_view_fuel */ 14:
                    message.permissionSettlementViewFuel = reader.bool();
                    break;
                case /* bool permission_settlement_view_tolls */ 15:
                    message.permissionSettlementViewTolls = reader.bool();
                    break;
                case /* bool permission_settlement_view_company_fee */ 16:
                    message.permissionSettlementViewCompanyFee = reader.bool();
                    break;
                case /* bool permission_settlement_view_debits */ 17:
                    message.permissionSettlementViewDebits = reader.bool();
                    break;
                case /* bool permission_settlement_view_credits */ 18:
                    message.permissionSettlementViewCredits = reader.bool();
                    break;
                case /* bool permission_app_take_screenshots */ 19:
                    message.permissionAppTakeScreenshots = reader.bool();
                    break;
                case /* bool permission_order_commodity_update */ 20:
                    message.permissionOrderCommodityUpdate = reader.bool();
                    break;
                case /* bool permission_truck_self_assign */ 21:
                    message.permissionTruckSelfAssign = reader.bool();
                    break;
                case /* bool permission_trailer_self_assign */ 22:
                    message.permissionTrailerSelfAssign = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeCreateRequest_DriverType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* DriverTypeModel.Icon icon = 2; */
        if (message.icon !== 0)
            writer.tag(2, WireType.Varint).int32(message.icon);
        /* bool is_default = 3; */
        if (message.isDefault !== false)
            writer.tag(3, WireType.Varint).bool(message.isDefault);
        /* bool permission_settlements = 4; */
        if (message.permissionSettlements !== false)
            writer.tag(4, WireType.Varint).bool(message.permissionSettlements);
        /* bool permission_bank_accounts = 5; */
        if (message.permissionBankAccounts !== false)
            writer.tag(5, WireType.Varint).bool(message.permissionBankAccounts);
        /* bool permission_completed_loads = 6; */
        if (message.permissionCompletedLoads !== false)
            writer.tag(6, WireType.Varint).bool(message.permissionCompletedLoads);
        /* bool permission_loads_total_amount = 7; */
        if (message.permissionLoadsTotalAmount !== false)
            writer.tag(7, WireType.Varint).bool(message.permissionLoadsTotalAmount);
        /* bool permission_loads_driver_pay_amount = 8; */
        if (message.permissionLoadsDriverPayAmount !== false)
            writer.tag(8, WireType.Varint).bool(message.permissionLoadsDriverPayAmount);
        /* bool permission_loads_distance = 9; */
        if (message.permissionLoadsDistance !== false)
            writer.tag(9, WireType.Varint).bool(message.permissionLoadsDistance);
        /* bool permission_settlement_view_loads = 10; */
        if (message.permissionSettlementViewLoads !== false)
            writer.tag(10, WireType.Varint).bool(message.permissionSettlementViewLoads);
        /* bool permission_settlement_view_load_total_amount = 11; */
        if (message.permissionSettlementViewLoadTotalAmount !== false)
            writer.tag(11, WireType.Varint).bool(message.permissionSettlementViewLoadTotalAmount);
        /* bool permission_settlement_view_loads_pay_amount = 12; */
        if (message.permissionSettlementViewLoadsPayAmount !== false)
            writer.tag(12, WireType.Varint).bool(message.permissionSettlementViewLoadsPayAmount);
        /* bool permission_settlement_view_loads_distance = 13; */
        if (message.permissionSettlementViewLoadsDistance !== false)
            writer.tag(13, WireType.Varint).bool(message.permissionSettlementViewLoadsDistance);
        /* bool permission_settlement_view_fuel = 14; */
        if (message.permissionSettlementViewFuel !== false)
            writer.tag(14, WireType.Varint).bool(message.permissionSettlementViewFuel);
        /* bool permission_settlement_view_tolls = 15; */
        if (message.permissionSettlementViewTolls !== false)
            writer.tag(15, WireType.Varint).bool(message.permissionSettlementViewTolls);
        /* bool permission_settlement_view_company_fee = 16; */
        if (message.permissionSettlementViewCompanyFee !== false)
            writer.tag(16, WireType.Varint).bool(message.permissionSettlementViewCompanyFee);
        /* bool permission_settlement_view_debits = 17; */
        if (message.permissionSettlementViewDebits !== false)
            writer.tag(17, WireType.Varint).bool(message.permissionSettlementViewDebits);
        /* bool permission_settlement_view_credits = 18; */
        if (message.permissionSettlementViewCredits !== false)
            writer.tag(18, WireType.Varint).bool(message.permissionSettlementViewCredits);
        /* bool permission_app_take_screenshots = 19; */
        if (message.permissionAppTakeScreenshots !== false)
            writer.tag(19, WireType.Varint).bool(message.permissionAppTakeScreenshots);
        /* bool permission_order_commodity_update = 20; */
        if (message.permissionOrderCommodityUpdate !== false)
            writer.tag(20, WireType.Varint).bool(message.permissionOrderCommodityUpdate);
        /* bool permission_truck_self_assign = 21; */
        if (message.permissionTruckSelfAssign !== false)
            writer.tag(21, WireType.Varint).bool(message.permissionTruckSelfAssign);
        /* bool permission_trailer_self_assign = 22; */
        if (message.permissionTrailerSelfAssign !== false)
            writer.tag(22, WireType.Varint).bool(message.permissionTrailerSelfAssign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeCreateRequest.DriverType
 */
export const DriverTypeCreateRequest_DriverType = new DriverTypeCreateRequest_DriverType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeCreateReply$Type extends MessageType<DriverTypeCreateReply> {
    constructor() {
        super("DriverTypeCreateReply", [
            { no: 1, name: "driver_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeCreateReply>): DriverTypeCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverTypeCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeCreateReply): DriverTypeCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_type_id */ 1:
                    message.driverTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_type_id = 1; */
        if (message.driverTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeCreateReply
 */
export const DriverTypeCreateReply = new DriverTypeCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeUpdateRequest$Type extends MessageType<DriverTypeUpdateRequest> {
    constructor() {
        super("DriverTypeUpdateRequest", [
            { no: 1, name: "driver_type", kind: "message", T: () => DriverTypeModel }
        ]);
    }
    create(value?: PartialMessage<DriverTypeUpdateRequest>): DriverTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeUpdateRequest): DriverTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DriverTypeModel driver_type */ 1:
                    message.driverType = DriverTypeModel.internalBinaryRead(reader, reader.uint32(), options, message.driverType);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* DriverTypeModel driver_type = 1; */
        if (message.driverType)
            DriverTypeModel.internalBinaryWrite(message.driverType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeUpdateRequest
 */
export const DriverTypeUpdateRequest = new DriverTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeUpdateReply$Type extends MessageType<DriverTypeUpdateReply> {
    constructor() {
        super("DriverTypeUpdateReply", []);
    }
    create(value?: PartialMessage<DriverTypeUpdateReply>): DriverTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeUpdateReply): DriverTypeUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeUpdateReply
 */
export const DriverTypeUpdateReply = new DriverTypeUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeDeleteRequest$Type extends MessageType<DriverTypeDeleteRequest> {
    constructor() {
        super("DriverTypeDeleteRequest", [
            { no: 1, name: "driver_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeDeleteRequest>): DriverTypeDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<DriverTypeDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeDeleteRequest): DriverTypeDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_type_id */ 1:
                    message.driverTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_type_id = 1; */
        if (message.driverTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeDeleteRequest
 */
export const DriverTypeDeleteRequest = new DriverTypeDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeDeleteReply$Type extends MessageType<DriverTypeDeleteReply> {
    constructor() {
        super("DriverTypeDeleteReply", []);
    }
    create(value?: PartialMessage<DriverTypeDeleteReply>): DriverTypeDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverTypeDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeDeleteReply): DriverTypeDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DriverTypeDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeDeleteReply
 */
export const DriverTypeDeleteReply = new DriverTypeDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service DriverTypeService
 */
export const DriverTypeService = new ServiceType("DriverTypeService", [
    { name: "DriverTypeGet", options: {}, I: DriverTypeGetRequest, O: DriverTypeGetReply },
    { name: "DriverTypeCreate", options: {}, I: DriverTypeCreateRequest, O: DriverTypeCreateReply },
    { name: "DriverTypeUpdate", options: {}, I: DriverTypeUpdateRequest, O: DriverTypeUpdateReply },
    { name: "DriverTypeDelete", options: {}, I: DriverTypeDeleteRequest, O: DriverTypeDeleteReply }
]);
