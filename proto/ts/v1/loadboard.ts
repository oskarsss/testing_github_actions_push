// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/loadboard.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadboardSearch_SortResultDirection } from "./models/model_loadboard_search";
import { LoadboardSearch_SortResultBy } from "./models/model_loadboard_search";
import { Measures_Weight } from "./models/model_measures";
import { Measures_Distance } from "./models/model_measures";
import { LoadboardSearch } from "./models/model_loadboard_search";
/**
 * @generated from protobuf message LB_GetEquipmentsRequest
 */
export interface LB_GetEquipmentsRequest {
}
/**
 * @generated from protobuf message LB_GetEquipmentsReply
 */
export interface LB_GetEquipmentsReply {
    /**
     * @generated from protobuf field: repeated LB_GetEquipmentsReply.Equipment equipments = 1;
     */
    equipments: LB_GetEquipmentsReply_Equipment[];
}
/**
 * @generated from protobuf message LB_GetEquipmentsReply.Equipment
 */
export interface LB_GetEquipmentsReply_Equipment {
    /**
     * @generated from protobuf field: string equipment_id = 1;
     */
    equipmentId: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
}
/**
 * @generated from protobuf message LB_GetSearchesRequest
 */
export interface LB_GetSearchesRequest {
}
/**
 * @generated from protobuf message LB_GetSearchesReply
 */
export interface LB_GetSearchesReply {
    /**
     * @generated from protobuf field: repeated v1.models.LoadboardSearch searches = 1;
     */
    searches: LoadboardSearch[];
}
/**
 * CreateSearch
 *
 * @generated from protobuf message LB_CreateSearchRequest
 */
export interface LB_CreateSearchRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
    /**
     * @generated from protobuf field: LB_CreateSearchRequest.Origin origin = 3;
     */
    origin?: LB_CreateSearchRequest_Origin;
    /**
     * @generated from protobuf field: LB_CreateSearchRequest.Destination destination = 4;
     */
    destination?: LB_CreateSearchRequest_Destination;
    /**
     * @generated from protobuf field: LB_CreateSearchRequest.PickupDateRange pickup_date_range = 5;
     */
    pickupDateRange?: LB_CreateSearchRequest_PickupDateRange;
    /**
     * @generated from protobuf field: LB_CreateSearchRequest.Filters filters = 6;
     */
    filters?: LB_CreateSearchRequest_Filters;
}
/**
 * @generated from protobuf message LB_CreateSearchRequest.Origin
 */
export interface LB_CreateSearchRequest_Origin {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 radius = 5;
     */
    radius: number;
}
/**
 * @generated from protobuf message LB_CreateSearchRequest.Destination
 */
export interface LB_CreateSearchRequest_Destination {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 radius = 5;
     */
    radius: number;
}
/**
 * @generated from protobuf message LB_CreateSearchRequest.PickupDateRange
 */
export interface LB_CreateSearchRequest_PickupDateRange {
    /**
     * @generated from protobuf field: string start = 1;
     */
    start: string;
    /**
     * @generated from protobuf field: string end = 2;
     */
    end: string;
}
/**
 * @generated from protobuf message LB_CreateSearchRequest.Filters
 */
export interface LB_CreateSearchRequest_Filters {
    /**
     * @generated from protobuf field: repeated string equipment_ids = 1;
     */
    equipmentIds: string[];
    /**
     * @generated from protobuf field: v1.models.Measures.Distance min_distance = 2;
     */
    minDistance?: Measures_Distance;
    /**
     * @generated from protobuf field: v1.models.Measures.Distance max_distance = 3;
     */
    maxDistance?: Measures_Distance;
    /**
     * @generated from protobuf field: int64 min_rate = 4;
     */
    minRate: number;
    /**
     * @generated from protobuf field: int64 max_rate = 5;
     */
    maxRate: number;
    /**
     * @generated from protobuf field: float min_rpm = 6;
     */
    minRpm: number;
    /**
     * @generated from protobuf field: float max_rpm = 7;
     */
    maxRpm: number;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight min_weight = 8;
     */
    minWeight?: Measures_Weight;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight max_weight = 9;
     */
    maxWeight?: Measures_Weight;
    /**
     * @generated from protobuf field: int64 min_length = 10;
     */
    minLength: number;
    /**
     * @generated from protobuf field: int64 max_length = 11;
     */
    maxLength: number;
    /**
     * @generated from protobuf field: int64 max_age_minutes = 12;
     */
    maxAgeMinutes: number;
    /**
     * @generated from protobuf field: bool requires_team = 13;
     */
    requiresTeam: boolean;
    /**
     * @generated from protobuf field: bool has_rate = 14;
     */
    hasRate: boolean;
}
/**
 * @generated from protobuf message LB_CreateSearchReply
 */
export interface LB_CreateSearchReply {
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch search = 1;
     */
    search?: LoadboardSearch;
}
/**
 * UpdateSearch
 *
 * @generated from protobuf message LB_UpdateSearchRequest
 */
export interface LB_UpdateSearchRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string truck_id = 3;
     */
    truckId: string;
    /**
     * @generated from protobuf field: LB_UpdateSearchRequest.Origin origin = 4;
     */
    origin?: LB_UpdateSearchRequest_Origin;
    /**
     * @generated from protobuf field: LB_UpdateSearchRequest.Destination destination = 5;
     */
    destination?: LB_UpdateSearchRequest_Destination;
    /**
     * @generated from protobuf field: LB_UpdateSearchRequest.PickupDateRange pickup_date_range = 6;
     */
    pickupDateRange?: LB_UpdateSearchRequest_PickupDateRange;
    /**
     * @generated from protobuf field: LB_UpdateSearchRequest.Filters filters = 7;
     */
    filters?: LB_UpdateSearchRequest_Filters;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.SortResultBy sort_result_by = 8;
     */
    sortResultBy: LoadboardSearch_SortResultBy;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.SortResultDirection sort_result_direction = 9;
     */
    sortResultDirection: LoadboardSearch_SortResultDirection;
}
/**
 * @generated from protobuf message LB_UpdateSearchRequest.Origin
 */
export interface LB_UpdateSearchRequest_Origin {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 radius = 5;
     */
    radius: number;
}
/**
 * @generated from protobuf message LB_UpdateSearchRequest.Destination
 */
export interface LB_UpdateSearchRequest_Destination {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 radius = 5;
     */
    radius: number;
}
/**
 * @generated from protobuf message LB_UpdateSearchRequest.PickupDateRange
 */
export interface LB_UpdateSearchRequest_PickupDateRange {
    /**
     * @generated from protobuf field: string start = 1;
     */
    start: string;
    /**
     * @generated from protobuf field: string end = 2;
     */
    end: string;
}
/**
 * @generated from protobuf message LB_UpdateSearchRequest.Filters
 */
export interface LB_UpdateSearchRequest_Filters {
    /**
     * @generated from protobuf field: repeated string equipment_ids = 1;
     */
    equipmentIds: string[];
    /**
     * @generated from protobuf field: v1.models.Measures.Distance min_distance = 2;
     */
    minDistance?: Measures_Distance;
    /**
     * @generated from protobuf field: v1.models.Measures.Distance max_distance = 3;
     */
    maxDistance?: Measures_Distance;
    /**
     * @generated from protobuf field: int64 min_rate = 4;
     */
    minRate: number;
    /**
     * @generated from protobuf field: int64 max_rate = 5;
     */
    maxRate: number;
    /**
     * @generated from protobuf field: float min_rpm = 6;
     */
    minRpm: number;
    /**
     * @generated from protobuf field: float max_rpm = 7;
     */
    maxRpm: number;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight min_weight = 8;
     */
    minWeight?: Measures_Weight;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight max_weight = 9;
     */
    maxWeight?: Measures_Weight;
    /**
     * @generated from protobuf field: int64 min_length = 10;
     */
    minLength: number;
    /**
     * @generated from protobuf field: int64 max_length = 11;
     */
    maxLength: number;
    /**
     * @generated from protobuf field: int64 max_age_minutes = 12;
     */
    maxAgeMinutes: number;
    /**
     * @generated from protobuf field: bool requires_team = 13;
     */
    requiresTeam: boolean;
    /**
     * @generated from protobuf field: bool has_rate = 14;
     */
    hasRate: boolean;
}
/**
 * @generated from protobuf message LB_UpdateSearchReply
 */
export interface LB_UpdateSearchReply {
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch search = 1;
     */
    search?: LoadboardSearch;
}
/**
 * DeleteSearch
 *
 * @generated from protobuf message LB_DeleteSearchRequest
 */
export interface LB_DeleteSearchRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
}
/**
 * @generated from protobuf message LB_DeleteSearchReply
 */
export interface LB_DeleteSearchReply {
}
/**
 * RefreshSearch
 *
 * @generated from protobuf message LB_RefreshSearchResultsRequest
 */
export interface LB_RefreshSearchResultsRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
}
/**
 * @generated from protobuf message LB_RefreshSearchResultsReply
 */
export interface LB_RefreshSearchResultsReply {
}
/**
 * GetSearchResult
 *
 * @generated from protobuf message LB_ListenSearchResultsRequest
 */
export interface LB_ListenSearchResultsRequest {
    /**
     * @generated from protobuf field: string device_id = 1;
     */
    deviceId: string;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply
 */
export interface LB_ListenSearchResultsReply {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
    /**
     * @generated from protobuf field: repeated LB_ListenSearchResultsReply.SearchResult search_results = 2;
     */
    searchResults: LB_ListenSearchResultsReply_SearchResult[];
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.LoadboardSearchResultToDelete search_results_to_delete = 3;
     */
    searchResultsToDelete?: LB_ListenSearchResultsReply_LoadboardSearchResultToDelete;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult
 */
export interface LB_ListenSearchResultsReply_SearchResult {
    /**
     * @generated from protobuf field: string result_id = 1;
     */
    resultId: string;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Broker broker = 2;
     */
    broker?: LB_ListenSearchResultsReply_SearchResult_Broker;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Origin origin = 3;
     */
    origin?: LB_ListenSearchResultsReply_SearchResult_Origin;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Destination destination = 4;
     */
    destination?: LB_ListenSearchResultsReply_SearchResult_Destination;
    /**
     * @generated from protobuf field: v1.models.Measures.Distance distance = 5;
     */
    distance?: Measures_Distance;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight weight = 6;
     */
    weight?: Measures_Weight;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Equipment equipment = 7;
     */
    equipment?: LB_ListenSearchResultsReply_SearchResult_Equipment;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Rate rate = 8;
     */
    rate?: LB_ListenSearchResultsReply_SearchResult_Rate;
    /**
     * @generated from protobuf field: string notes = 9;
     */
    notes: string;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.FilterPreference filter_preferences = 10;
     */
    filterPreferences?: LB_ListenSearchResultsReply_SearchResult_FilterPreference;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Loadboard loadboard = 11;
     */
    loadboard?: LB_ListenSearchResultsReply_SearchResult_Loadboard;
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Age age = 12;
     */
    age?: LB_ListenSearchResultsReply_SearchResult_Age;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Broker
 */
export interface LB_ListenSearchResultsReply_SearchResult_Broker {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string mc = 4;
     */
    mc: string;
    /**
     * @generated from protobuf field: bool factoring_approved = 5;
     */
    factoringApproved: boolean;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Origin
 */
export interface LB_ListenSearchResultsReply_SearchResult_Origin {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: string start_at = 5;
     */
    startAt: string;
    /**
     * @generated from protobuf field: string end_at = 6;
     */
    endAt: string;
    /**
     * @generated from protobuf field: int64 deadhead = 7;
     */
    deadhead: number;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Destination
 */
export interface LB_ListenSearchResultsReply_SearchResult_Destination {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: string start_at = 5;
     */
    startAt: string;
    /**
     * @generated from protobuf field: string end_at = 6;
     */
    endAt: string;
    /**
     * @generated from protobuf field: int64 deadhead = 7;
     */
    deadhead: number;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Equipment
 */
export interface LB_ListenSearchResultsReply_SearchResult_Equipment {
    /**
     * @generated from protobuf field: string equipment_id = 1;
     */
    equipmentId: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
    /**
     * @generated from protobuf field: string icon = 3;
     */
    icon: string;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Rate
 */
export interface LB_ListenSearchResultsReply_SearchResult_Rate {
    /**
     * @generated from protobuf field: LB_ListenSearchResultsReply.SearchResult.Rate.Type type = 1;
     */
    type: LB_ListenSearchResultsReply_SearchResult_Rate_Type;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
    /**
     * @generated from protobuf field: string rpm = 3;
     */
    rpm: string;
}
/**
 * @generated from protobuf enum LB_ListenSearchResultsReply.SearchResult.Rate.Type
 */
export enum LB_ListenSearchResultsReply_SearchResult_Rate_Type {
    /**
     * @generated from protobuf enum value: TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: TYPE_ACTUAL = 1;
     */
    ACTUAL = 1,
    /**
     * @generated from protobuf enum value: TYPE_ESTIMATED = 2;
     */
    ESTIMATED = 2
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.FilterPreference
 */
export interface LB_ListenSearchResultsReply_SearchResult_FilterPreference {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 stars = 2;
     */
    stars: number;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Loadboard
 */
export interface LB_ListenSearchResultsReply_SearchResult_Loadboard {
    /**
     * @generated from protobuf field: string loadboard_id = 1;
     */
    loadboardId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.SearchResult.Age
 */
export interface LB_ListenSearchResultsReply_SearchResult_Age {
    /**
     * @generated from protobuf field: bool supported = 1;
     */
    supported: boolean;
    /**
     * @generated from protobuf field: string age = 2;
     */
    age: string;
    /**
     * @generated from protobuf field: string updated_at = 3;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.LoadboardSearchResultToDelete
 */
export interface LB_ListenSearchResultsReply_LoadboardSearchResultToDelete {
    /**
     * @generated from protobuf field: repeated LB_ListenSearchResultsReply.LoadboardSearchResultToDelete.ResultData result_data = 2;
     */
    resultData: LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData[];
}
/**
 * @generated from protobuf message LB_ListenSearchResultsReply.LoadboardSearchResultToDelete.ResultData
 */
export interface LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData {
    /**
     * @generated from protobuf field: string result_id = 1;
     */
    resultId: string;
    /**
     * @generated from protobuf field: string integration_id = 2;
     */
    integrationId: string;
}
/**
 * CreateViewedSearchResult
 *
 * @generated from protobuf message LB_CreateViewedSearchResultRequest
 */
export interface LB_CreateViewedSearchResultRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
    /**
     * @generated from protobuf field: string result_id = 2;
     */
    resultId: string;
    /**
     * @generated from protobuf field: string integration_id = 3;
     */
    integrationId: string;
}
/**
 * @generated from protobuf message LB_CreateViewedSearchResultReply
 */
export interface LB_CreateViewedSearchResultReply {
}
/**
 * GetViewedSearchResults
 *
 * @generated from protobuf message LB_GetViewedSearchResultsRequest
 */
export interface LB_GetViewedSearchResultsRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
}
/**
 * @generated from protobuf message LB_GetViewedSearchResultsReply
 */
export interface LB_GetViewedSearchResultsReply {
    /**
     * @generated from protobuf field: repeated string result_ids = 1;
     */
    resultIds: string[];
}
/**
 * Mute Search
 *
 * @generated from protobuf message LB_MuteSearchRequest
 */
export interface LB_MuteSearchRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
}
/**
 * @generated from protobuf message LB_MuteSearchReply
 */
export interface LB_MuteSearchReply {
}
/**
 * @generated from protobuf message LB_UnmuteSearchRequest
 */
export interface LB_UnmuteSearchRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
}
/**
 * @generated from protobuf message LB_UnmuteSearchReply
 */
export interface LB_UnmuteSearchReply {
}
/**
 * Polyline
 *
 * @generated from protobuf message LB_SearchResultRouteRetrieveRequest
 */
export interface LB_SearchResultRouteRetrieveRequest {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
    /**
     * @generated from protobuf field: string integration_id = 2;
     */
    integrationId: string;
    /**
     * @generated from protobuf field: string result_id = 3;
     */
    resultId: string;
}
/**
 * @generated from protobuf message LB_SearchResultRouteRetrieveReply
 */
export interface LB_SearchResultRouteRetrieveReply {
    /**
     * @generated from protobuf field: string polyline = 1;
     */
    polyline: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetEquipmentsRequest$Type extends MessageType<LB_GetEquipmentsRequest> {
    constructor() {
        super("LB_GetEquipmentsRequest", []);
    }
    create(value?: PartialMessage<LB_GetEquipmentsRequest>): LB_GetEquipmentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_GetEquipmentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetEquipmentsRequest): LB_GetEquipmentsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_GetEquipmentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetEquipmentsRequest
 */
export const LB_GetEquipmentsRequest = new LB_GetEquipmentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetEquipmentsReply$Type extends MessageType<LB_GetEquipmentsReply> {
    constructor() {
        super("LB_GetEquipmentsReply", [
            { no: 1, name: "equipments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LB_GetEquipmentsReply_Equipment }
        ]);
    }
    create(value?: PartialMessage<LB_GetEquipmentsReply>): LB_GetEquipmentsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipments = [];
        if (value !== undefined)
            reflectionMergePartial<LB_GetEquipmentsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetEquipmentsReply): LB_GetEquipmentsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LB_GetEquipmentsReply.Equipment equipments */ 1:
                    message.equipments.push(LB_GetEquipmentsReply_Equipment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_GetEquipmentsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LB_GetEquipmentsReply.Equipment equipments = 1; */
        for (let i = 0; i < message.equipments.length; i++)
            LB_GetEquipmentsReply_Equipment.internalBinaryWrite(message.equipments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetEquipmentsReply
 */
export const LB_GetEquipmentsReply = new LB_GetEquipmentsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetEquipmentsReply_Equipment$Type extends MessageType<LB_GetEquipmentsReply_Equipment> {
    constructor() {
        super("LB_GetEquipmentsReply.Equipment", [
            { no: 1, name: "equipment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_GetEquipmentsReply_Equipment>): LB_GetEquipmentsReply_Equipment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentId = "";
        message.code = "";
        message.name = "";
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial<LB_GetEquipmentsReply_Equipment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetEquipmentsReply_Equipment): LB_GetEquipmentsReply_Equipment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_id */ 1:
                    message.equipmentId = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_GetEquipmentsReply_Equipment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_id = 1; */
        if (message.equipmentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentId);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetEquipmentsReply.Equipment
 */
export const LB_GetEquipmentsReply_Equipment = new LB_GetEquipmentsReply_Equipment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetSearchesRequest$Type extends MessageType<LB_GetSearchesRequest> {
    constructor() {
        super("LB_GetSearchesRequest", []);
    }
    create(value?: PartialMessage<LB_GetSearchesRequest>): LB_GetSearchesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_GetSearchesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetSearchesRequest): LB_GetSearchesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_GetSearchesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetSearchesRequest
 */
export const LB_GetSearchesRequest = new LB_GetSearchesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetSearchesReply$Type extends MessageType<LB_GetSearchesReply> {
    constructor() {
        super("LB_GetSearchesReply", [
            { no: 1, name: "searches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadboardSearch }
        ]);
    }
    create(value?: PartialMessage<LB_GetSearchesReply>): LB_GetSearchesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searches = [];
        if (value !== undefined)
            reflectionMergePartial<LB_GetSearchesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetSearchesReply): LB_GetSearchesReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.models.LoadboardSearch searches */ 1:
                    message.searches.push(LoadboardSearch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_GetSearchesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.models.LoadboardSearch searches = 1; */
        for (let i = 0; i < message.searches.length; i++)
            LoadboardSearch.internalBinaryWrite(message.searches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetSearchesReply
 */
export const LB_GetSearchesReply = new LB_GetSearchesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateSearchRequest$Type extends MessageType<LB_CreateSearchRequest> {
    constructor() {
        super("LB_CreateSearchRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "origin", kind: "message", T: () => LB_CreateSearchRequest_Origin },
            { no: 4, name: "destination", kind: "message", T: () => LB_CreateSearchRequest_Destination },
            { no: 5, name: "pickup_date_range", kind: "message", T: () => LB_CreateSearchRequest_PickupDateRange },
            { no: 6, name: "filters", kind: "message", T: () => LB_CreateSearchRequest_Filters }
        ]);
    }
    create(value?: PartialMessage<LB_CreateSearchRequest>): LB_CreateSearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_CreateSearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateSearchRequest): LB_CreateSearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                case /* LB_CreateSearchRequest.Origin origin */ 3:
                    message.origin = LB_CreateSearchRequest_Origin.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                case /* LB_CreateSearchRequest.Destination destination */ 4:
                    message.destination = LB_CreateSearchRequest_Destination.internalBinaryRead(reader, reader.uint32(), options, message.destination);
                    break;
                case /* LB_CreateSearchRequest.PickupDateRange pickup_date_range */ 5:
                    message.pickupDateRange = LB_CreateSearchRequest_PickupDateRange.internalBinaryRead(reader, reader.uint32(), options, message.pickupDateRange);
                    break;
                case /* LB_CreateSearchRequest.Filters filters */ 6:
                    message.filters = LB_CreateSearchRequest_Filters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateSearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        /* LB_CreateSearchRequest.Origin origin = 3; */
        if (message.origin)
            LB_CreateSearchRequest_Origin.internalBinaryWrite(message.origin, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* LB_CreateSearchRequest.Destination destination = 4; */
        if (message.destination)
            LB_CreateSearchRequest_Destination.internalBinaryWrite(message.destination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* LB_CreateSearchRequest.PickupDateRange pickup_date_range = 5; */
        if (message.pickupDateRange)
            LB_CreateSearchRequest_PickupDateRange.internalBinaryWrite(message.pickupDateRange, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* LB_CreateSearchRequest.Filters filters = 6; */
        if (message.filters)
            LB_CreateSearchRequest_Filters.internalBinaryWrite(message.filters, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateSearchRequest
 */
export const LB_CreateSearchRequest = new LB_CreateSearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateSearchRequest_Origin$Type extends MessageType<LB_CreateSearchRequest_Origin> {
    constructor() {
        super("LB_CreateSearchRequest.Origin", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radius", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_CreateSearchRequest_Origin>): LB_CreateSearchRequest_Origin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.radius = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_CreateSearchRequest_Origin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateSearchRequest_Origin): LB_CreateSearchRequest_Origin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* int64 radius */ 5:
                    message.radius = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateSearchRequest_Origin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* int64 radius = 5; */
        if (message.radius !== 0)
            writer.tag(5, WireType.Varint).int64(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateSearchRequest.Origin
 */
export const LB_CreateSearchRequest_Origin = new LB_CreateSearchRequest_Origin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateSearchRequest_Destination$Type extends MessageType<LB_CreateSearchRequest_Destination> {
    constructor() {
        super("LB_CreateSearchRequest.Destination", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radius", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_CreateSearchRequest_Destination>): LB_CreateSearchRequest_Destination {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.radius = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_CreateSearchRequest_Destination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateSearchRequest_Destination): LB_CreateSearchRequest_Destination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* int64 radius */ 5:
                    message.radius = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateSearchRequest_Destination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* int64 radius = 5; */
        if (message.radius !== 0)
            writer.tag(5, WireType.Varint).int64(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateSearchRequest.Destination
 */
export const LB_CreateSearchRequest_Destination = new LB_CreateSearchRequest_Destination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateSearchRequest_PickupDateRange$Type extends MessageType<LB_CreateSearchRequest_PickupDateRange> {
    constructor() {
        super("LB_CreateSearchRequest.PickupDateRange", [
            { no: 1, name: "start", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_CreateSearchRequest_PickupDateRange>): LB_CreateSearchRequest_PickupDateRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = "";
        message.end = "";
        if (value !== undefined)
            reflectionMergePartial<LB_CreateSearchRequest_PickupDateRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateSearchRequest_PickupDateRange): LB_CreateSearchRequest_PickupDateRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start */ 1:
                    message.start = reader.string();
                    break;
                case /* string end */ 2:
                    message.end = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateSearchRequest_PickupDateRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start = 1; */
        if (message.start !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.start);
        /* string end = 2; */
        if (message.end !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateSearchRequest.PickupDateRange
 */
export const LB_CreateSearchRequest_PickupDateRange = new LB_CreateSearchRequest_PickupDateRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateSearchRequest_Filters$Type extends MessageType<LB_CreateSearchRequest_Filters> {
    constructor() {
        super("LB_CreateSearchRequest.Filters", [
            { no: 1, name: "equipment_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "min_distance", kind: "message", T: () => Measures_Distance },
            { no: 3, name: "max_distance", kind: "message", T: () => Measures_Distance },
            { no: 4, name: "min_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "max_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "min_rpm", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "max_rpm", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "min_weight", kind: "message", T: () => Measures_Weight },
            { no: 9, name: "max_weight", kind: "message", T: () => Measures_Weight },
            { no: 10, name: "min_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "max_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "max_age_minutes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "requires_team", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "has_rate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LB_CreateSearchRequest_Filters>): LB_CreateSearchRequest_Filters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentIds = [];
        message.minRate = 0;
        message.maxRate = 0;
        message.minRpm = 0;
        message.maxRpm = 0;
        message.minLength = 0;
        message.maxLength = 0;
        message.maxAgeMinutes = 0;
        message.requiresTeam = false;
        message.hasRate = false;
        if (value !== undefined)
            reflectionMergePartial<LB_CreateSearchRequest_Filters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateSearchRequest_Filters): LB_CreateSearchRequest_Filters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string equipment_ids */ 1:
                    message.equipmentIds.push(reader.string());
                    break;
                case /* v1.models.Measures.Distance min_distance */ 2:
                    message.minDistance = Measures_Distance.internalBinaryRead(reader, reader.uint32(), options, message.minDistance);
                    break;
                case /* v1.models.Measures.Distance max_distance */ 3:
                    message.maxDistance = Measures_Distance.internalBinaryRead(reader, reader.uint32(), options, message.maxDistance);
                    break;
                case /* int64 min_rate */ 4:
                    message.minRate = reader.int64().toNumber();
                    break;
                case /* int64 max_rate */ 5:
                    message.maxRate = reader.int64().toNumber();
                    break;
                case /* float min_rpm */ 6:
                    message.minRpm = reader.float();
                    break;
                case /* float max_rpm */ 7:
                    message.maxRpm = reader.float();
                    break;
                case /* v1.models.Measures.Weight min_weight */ 8:
                    message.minWeight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.minWeight);
                    break;
                case /* v1.models.Measures.Weight max_weight */ 9:
                    message.maxWeight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.maxWeight);
                    break;
                case /* int64 min_length */ 10:
                    message.minLength = reader.int64().toNumber();
                    break;
                case /* int64 max_length */ 11:
                    message.maxLength = reader.int64().toNumber();
                    break;
                case /* int64 max_age_minutes */ 12:
                    message.maxAgeMinutes = reader.int64().toNumber();
                    break;
                case /* bool requires_team */ 13:
                    message.requiresTeam = reader.bool();
                    break;
                case /* bool has_rate */ 14:
                    message.hasRate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateSearchRequest_Filters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string equipment_ids = 1; */
        for (let i = 0; i < message.equipmentIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentIds[i]);
        /* v1.models.Measures.Distance min_distance = 2; */
        if (message.minDistance)
            Measures_Distance.internalBinaryWrite(message.minDistance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Distance max_distance = 3; */
        if (message.maxDistance)
            Measures_Distance.internalBinaryWrite(message.maxDistance, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 min_rate = 4; */
        if (message.minRate !== 0)
            writer.tag(4, WireType.Varint).int64(message.minRate);
        /* int64 max_rate = 5; */
        if (message.maxRate !== 0)
            writer.tag(5, WireType.Varint).int64(message.maxRate);
        /* float min_rpm = 6; */
        if (message.minRpm !== 0)
            writer.tag(6, WireType.Bit32).float(message.minRpm);
        /* float max_rpm = 7; */
        if (message.maxRpm !== 0)
            writer.tag(7, WireType.Bit32).float(message.maxRpm);
        /* v1.models.Measures.Weight min_weight = 8; */
        if (message.minWeight)
            Measures_Weight.internalBinaryWrite(message.minWeight, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Weight max_weight = 9; */
        if (message.maxWeight)
            Measures_Weight.internalBinaryWrite(message.maxWeight, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 min_length = 10; */
        if (message.minLength !== 0)
            writer.tag(10, WireType.Varint).int64(message.minLength);
        /* int64 max_length = 11; */
        if (message.maxLength !== 0)
            writer.tag(11, WireType.Varint).int64(message.maxLength);
        /* int64 max_age_minutes = 12; */
        if (message.maxAgeMinutes !== 0)
            writer.tag(12, WireType.Varint).int64(message.maxAgeMinutes);
        /* bool requires_team = 13; */
        if (message.requiresTeam !== false)
            writer.tag(13, WireType.Varint).bool(message.requiresTeam);
        /* bool has_rate = 14; */
        if (message.hasRate !== false)
            writer.tag(14, WireType.Varint).bool(message.hasRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateSearchRequest.Filters
 */
export const LB_CreateSearchRequest_Filters = new LB_CreateSearchRequest_Filters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateSearchReply$Type extends MessageType<LB_CreateSearchReply> {
    constructor() {
        super("LB_CreateSearchReply", [
            { no: 1, name: "search", kind: "message", T: () => LoadboardSearch }
        ]);
    }
    create(value?: PartialMessage<LB_CreateSearchReply>): LB_CreateSearchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_CreateSearchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateSearchReply): LB_CreateSearchReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.models.LoadboardSearch search */ 1:
                    message.search = LoadboardSearch.internalBinaryRead(reader, reader.uint32(), options, message.search);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateSearchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.models.LoadboardSearch search = 1; */
        if (message.search)
            LoadboardSearch.internalBinaryWrite(message.search, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateSearchReply
 */
export const LB_CreateSearchReply = new LB_CreateSearchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UpdateSearchRequest$Type extends MessageType<LB_UpdateSearchRequest> {
    constructor() {
        super("LB_UpdateSearchRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "origin", kind: "message", T: () => LB_UpdateSearchRequest_Origin },
            { no: 5, name: "destination", kind: "message", T: () => LB_UpdateSearchRequest_Destination },
            { no: 6, name: "pickup_date_range", kind: "message", T: () => LB_UpdateSearchRequest_PickupDateRange },
            { no: 7, name: "filters", kind: "message", T: () => LB_UpdateSearchRequest_Filters },
            { no: 8, name: "sort_result_by", kind: "enum", T: () => ["v1.models.LoadboardSearch.SortResultBy", LoadboardSearch_SortResultBy] },
            { no: 9, name: "sort_result_direction", kind: "enum", T: () => ["v1.models.LoadboardSearch.SortResultDirection", LoadboardSearch_SortResultDirection] }
        ]);
    }
    create(value?: PartialMessage<LB_UpdateSearchRequest>): LB_UpdateSearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        message.name = "";
        message.truckId = "";
        message.sortResultBy = 0;
        message.sortResultDirection = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_UpdateSearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UpdateSearchRequest): LB_UpdateSearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string truck_id */ 3:
                    message.truckId = reader.string();
                    break;
                case /* LB_UpdateSearchRequest.Origin origin */ 4:
                    message.origin = LB_UpdateSearchRequest_Origin.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                case /* LB_UpdateSearchRequest.Destination destination */ 5:
                    message.destination = LB_UpdateSearchRequest_Destination.internalBinaryRead(reader, reader.uint32(), options, message.destination);
                    break;
                case /* LB_UpdateSearchRequest.PickupDateRange pickup_date_range */ 6:
                    message.pickupDateRange = LB_UpdateSearchRequest_PickupDateRange.internalBinaryRead(reader, reader.uint32(), options, message.pickupDateRange);
                    break;
                case /* LB_UpdateSearchRequest.Filters filters */ 7:
                    message.filters = LB_UpdateSearchRequest_Filters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                case /* v1.models.LoadboardSearch.SortResultBy sort_result_by */ 8:
                    message.sortResultBy = reader.int32();
                    break;
                case /* v1.models.LoadboardSearch.SortResultDirection sort_result_direction */ 9:
                    message.sortResultDirection = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UpdateSearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string truck_id = 3; */
        if (message.truckId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.truckId);
        /* LB_UpdateSearchRequest.Origin origin = 4; */
        if (message.origin)
            LB_UpdateSearchRequest_Origin.internalBinaryWrite(message.origin, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* LB_UpdateSearchRequest.Destination destination = 5; */
        if (message.destination)
            LB_UpdateSearchRequest_Destination.internalBinaryWrite(message.destination, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* LB_UpdateSearchRequest.PickupDateRange pickup_date_range = 6; */
        if (message.pickupDateRange)
            LB_UpdateSearchRequest_PickupDateRange.internalBinaryWrite(message.pickupDateRange, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* LB_UpdateSearchRequest.Filters filters = 7; */
        if (message.filters)
            LB_UpdateSearchRequest_Filters.internalBinaryWrite(message.filters, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.LoadboardSearch.SortResultBy sort_result_by = 8; */
        if (message.sortResultBy !== 0)
            writer.tag(8, WireType.Varint).int32(message.sortResultBy);
        /* v1.models.LoadboardSearch.SortResultDirection sort_result_direction = 9; */
        if (message.sortResultDirection !== 0)
            writer.tag(9, WireType.Varint).int32(message.sortResultDirection);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UpdateSearchRequest
 */
export const LB_UpdateSearchRequest = new LB_UpdateSearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UpdateSearchRequest_Origin$Type extends MessageType<LB_UpdateSearchRequest_Origin> {
    constructor() {
        super("LB_UpdateSearchRequest.Origin", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radius", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_UpdateSearchRequest_Origin>): LB_UpdateSearchRequest_Origin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.radius = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_UpdateSearchRequest_Origin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UpdateSearchRequest_Origin): LB_UpdateSearchRequest_Origin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* int64 radius */ 5:
                    message.radius = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UpdateSearchRequest_Origin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* int64 radius = 5; */
        if (message.radius !== 0)
            writer.tag(5, WireType.Varint).int64(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UpdateSearchRequest.Origin
 */
export const LB_UpdateSearchRequest_Origin = new LB_UpdateSearchRequest_Origin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UpdateSearchRequest_Destination$Type extends MessageType<LB_UpdateSearchRequest_Destination> {
    constructor() {
        super("LB_UpdateSearchRequest.Destination", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radius", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_UpdateSearchRequest_Destination>): LB_UpdateSearchRequest_Destination {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.radius = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_UpdateSearchRequest_Destination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UpdateSearchRequest_Destination): LB_UpdateSearchRequest_Destination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* int64 radius */ 5:
                    message.radius = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UpdateSearchRequest_Destination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* int64 radius = 5; */
        if (message.radius !== 0)
            writer.tag(5, WireType.Varint).int64(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UpdateSearchRequest.Destination
 */
export const LB_UpdateSearchRequest_Destination = new LB_UpdateSearchRequest_Destination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UpdateSearchRequest_PickupDateRange$Type extends MessageType<LB_UpdateSearchRequest_PickupDateRange> {
    constructor() {
        super("LB_UpdateSearchRequest.PickupDateRange", [
            { no: 1, name: "start", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_UpdateSearchRequest_PickupDateRange>): LB_UpdateSearchRequest_PickupDateRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = "";
        message.end = "";
        if (value !== undefined)
            reflectionMergePartial<LB_UpdateSearchRequest_PickupDateRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UpdateSearchRequest_PickupDateRange): LB_UpdateSearchRequest_PickupDateRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start */ 1:
                    message.start = reader.string();
                    break;
                case /* string end */ 2:
                    message.end = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UpdateSearchRequest_PickupDateRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start = 1; */
        if (message.start !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.start);
        /* string end = 2; */
        if (message.end !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UpdateSearchRequest.PickupDateRange
 */
export const LB_UpdateSearchRequest_PickupDateRange = new LB_UpdateSearchRequest_PickupDateRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UpdateSearchRequest_Filters$Type extends MessageType<LB_UpdateSearchRequest_Filters> {
    constructor() {
        super("LB_UpdateSearchRequest.Filters", [
            { no: 1, name: "equipment_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "min_distance", kind: "message", T: () => Measures_Distance },
            { no: 3, name: "max_distance", kind: "message", T: () => Measures_Distance },
            { no: 4, name: "min_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "max_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "min_rpm", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "max_rpm", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "min_weight", kind: "message", T: () => Measures_Weight },
            { no: 9, name: "max_weight", kind: "message", T: () => Measures_Weight },
            { no: 10, name: "min_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "max_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "max_age_minutes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "requires_team", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "has_rate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LB_UpdateSearchRequest_Filters>): LB_UpdateSearchRequest_Filters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentIds = [];
        message.minRate = 0;
        message.maxRate = 0;
        message.minRpm = 0;
        message.maxRpm = 0;
        message.minLength = 0;
        message.maxLength = 0;
        message.maxAgeMinutes = 0;
        message.requiresTeam = false;
        message.hasRate = false;
        if (value !== undefined)
            reflectionMergePartial<LB_UpdateSearchRequest_Filters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UpdateSearchRequest_Filters): LB_UpdateSearchRequest_Filters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string equipment_ids */ 1:
                    message.equipmentIds.push(reader.string());
                    break;
                case /* v1.models.Measures.Distance min_distance */ 2:
                    message.minDistance = Measures_Distance.internalBinaryRead(reader, reader.uint32(), options, message.minDistance);
                    break;
                case /* v1.models.Measures.Distance max_distance */ 3:
                    message.maxDistance = Measures_Distance.internalBinaryRead(reader, reader.uint32(), options, message.maxDistance);
                    break;
                case /* int64 min_rate */ 4:
                    message.minRate = reader.int64().toNumber();
                    break;
                case /* int64 max_rate */ 5:
                    message.maxRate = reader.int64().toNumber();
                    break;
                case /* float min_rpm */ 6:
                    message.minRpm = reader.float();
                    break;
                case /* float max_rpm */ 7:
                    message.maxRpm = reader.float();
                    break;
                case /* v1.models.Measures.Weight min_weight */ 8:
                    message.minWeight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.minWeight);
                    break;
                case /* v1.models.Measures.Weight max_weight */ 9:
                    message.maxWeight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.maxWeight);
                    break;
                case /* int64 min_length */ 10:
                    message.minLength = reader.int64().toNumber();
                    break;
                case /* int64 max_length */ 11:
                    message.maxLength = reader.int64().toNumber();
                    break;
                case /* int64 max_age_minutes */ 12:
                    message.maxAgeMinutes = reader.int64().toNumber();
                    break;
                case /* bool requires_team */ 13:
                    message.requiresTeam = reader.bool();
                    break;
                case /* bool has_rate */ 14:
                    message.hasRate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UpdateSearchRequest_Filters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string equipment_ids = 1; */
        for (let i = 0; i < message.equipmentIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentIds[i]);
        /* v1.models.Measures.Distance min_distance = 2; */
        if (message.minDistance)
            Measures_Distance.internalBinaryWrite(message.minDistance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Distance max_distance = 3; */
        if (message.maxDistance)
            Measures_Distance.internalBinaryWrite(message.maxDistance, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 min_rate = 4; */
        if (message.minRate !== 0)
            writer.tag(4, WireType.Varint).int64(message.minRate);
        /* int64 max_rate = 5; */
        if (message.maxRate !== 0)
            writer.tag(5, WireType.Varint).int64(message.maxRate);
        /* float min_rpm = 6; */
        if (message.minRpm !== 0)
            writer.tag(6, WireType.Bit32).float(message.minRpm);
        /* float max_rpm = 7; */
        if (message.maxRpm !== 0)
            writer.tag(7, WireType.Bit32).float(message.maxRpm);
        /* v1.models.Measures.Weight min_weight = 8; */
        if (message.minWeight)
            Measures_Weight.internalBinaryWrite(message.minWeight, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Weight max_weight = 9; */
        if (message.maxWeight)
            Measures_Weight.internalBinaryWrite(message.maxWeight, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 min_length = 10; */
        if (message.minLength !== 0)
            writer.tag(10, WireType.Varint).int64(message.minLength);
        /* int64 max_length = 11; */
        if (message.maxLength !== 0)
            writer.tag(11, WireType.Varint).int64(message.maxLength);
        /* int64 max_age_minutes = 12; */
        if (message.maxAgeMinutes !== 0)
            writer.tag(12, WireType.Varint).int64(message.maxAgeMinutes);
        /* bool requires_team = 13; */
        if (message.requiresTeam !== false)
            writer.tag(13, WireType.Varint).bool(message.requiresTeam);
        /* bool has_rate = 14; */
        if (message.hasRate !== false)
            writer.tag(14, WireType.Varint).bool(message.hasRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UpdateSearchRequest.Filters
 */
export const LB_UpdateSearchRequest_Filters = new LB_UpdateSearchRequest_Filters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UpdateSearchReply$Type extends MessageType<LB_UpdateSearchReply> {
    constructor() {
        super("LB_UpdateSearchReply", [
            { no: 1, name: "search", kind: "message", T: () => LoadboardSearch }
        ]);
    }
    create(value?: PartialMessage<LB_UpdateSearchReply>): LB_UpdateSearchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_UpdateSearchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UpdateSearchReply): LB_UpdateSearchReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.models.LoadboardSearch search */ 1:
                    message.search = LoadboardSearch.internalBinaryRead(reader, reader.uint32(), options, message.search);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UpdateSearchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.models.LoadboardSearch search = 1; */
        if (message.search)
            LoadboardSearch.internalBinaryWrite(message.search, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UpdateSearchReply
 */
export const LB_UpdateSearchReply = new LB_UpdateSearchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_DeleteSearchRequest$Type extends MessageType<LB_DeleteSearchRequest> {
    constructor() {
        super("LB_DeleteSearchRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_DeleteSearchRequest>): LB_DeleteSearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_DeleteSearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_DeleteSearchRequest): LB_DeleteSearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_DeleteSearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_DeleteSearchRequest
 */
export const LB_DeleteSearchRequest = new LB_DeleteSearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_DeleteSearchReply$Type extends MessageType<LB_DeleteSearchReply> {
    constructor() {
        super("LB_DeleteSearchReply", []);
    }
    create(value?: PartialMessage<LB_DeleteSearchReply>): LB_DeleteSearchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_DeleteSearchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_DeleteSearchReply): LB_DeleteSearchReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_DeleteSearchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_DeleteSearchReply
 */
export const LB_DeleteSearchReply = new LB_DeleteSearchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_RefreshSearchResultsRequest$Type extends MessageType<LB_RefreshSearchResultsRequest> {
    constructor() {
        super("LB_RefreshSearchResultsRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_RefreshSearchResultsRequest>): LB_RefreshSearchResultsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_RefreshSearchResultsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_RefreshSearchResultsRequest): LB_RefreshSearchResultsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_RefreshSearchResultsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_RefreshSearchResultsRequest
 */
export const LB_RefreshSearchResultsRequest = new LB_RefreshSearchResultsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_RefreshSearchResultsReply$Type extends MessageType<LB_RefreshSearchResultsReply> {
    constructor() {
        super("LB_RefreshSearchResultsReply", []);
    }
    create(value?: PartialMessage<LB_RefreshSearchResultsReply>): LB_RefreshSearchResultsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_RefreshSearchResultsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_RefreshSearchResultsReply): LB_RefreshSearchResultsReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_RefreshSearchResultsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_RefreshSearchResultsReply
 */
export const LB_RefreshSearchResultsReply = new LB_RefreshSearchResultsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsRequest$Type extends MessageType<LB_ListenSearchResultsRequest> {
    constructor() {
        super("LB_ListenSearchResultsRequest", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsRequest>): LB_ListenSearchResultsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsRequest): LB_ListenSearchResultsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsRequest
 */
export const LB_ListenSearchResultsRequest = new LB_ListenSearchResultsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply$Type extends MessageType<LB_ListenSearchResultsReply> {
    constructor() {
        super("LB_ListenSearchResultsReply", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "search_results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LB_ListenSearchResultsReply_SearchResult },
            { no: 3, name: "search_results_to_delete", kind: "message", T: () => LB_ListenSearchResultsReply_LoadboardSearchResultToDelete }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply>): LB_ListenSearchResultsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        message.searchResults = [];
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply): LB_ListenSearchResultsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                case /* repeated LB_ListenSearchResultsReply.SearchResult search_results */ 2:
                    message.searchResults.push(LB_ListenSearchResultsReply_SearchResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* LB_ListenSearchResultsReply.LoadboardSearchResultToDelete search_results_to_delete */ 3:
                    message.searchResultsToDelete = LB_ListenSearchResultsReply_LoadboardSearchResultToDelete.internalBinaryRead(reader, reader.uint32(), options, message.searchResultsToDelete);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        /* repeated LB_ListenSearchResultsReply.SearchResult search_results = 2; */
        for (let i = 0; i < message.searchResults.length; i++)
            LB_ListenSearchResultsReply_SearchResult.internalBinaryWrite(message.searchResults[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.LoadboardSearchResultToDelete search_results_to_delete = 3; */
        if (message.searchResultsToDelete)
            LB_ListenSearchResultsReply_LoadboardSearchResultToDelete.internalBinaryWrite(message.searchResultsToDelete, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply
 */
export const LB_ListenSearchResultsReply = new LB_ListenSearchResultsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult", [
            { no: 1, name: "result_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "broker", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Broker },
            { no: 3, name: "origin", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Origin },
            { no: 4, name: "destination", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Destination },
            { no: 5, name: "distance", kind: "message", T: () => Measures_Distance },
            { no: 6, name: "weight", kind: "message", T: () => Measures_Weight },
            { no: 7, name: "equipment", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Equipment },
            { no: 8, name: "rate", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Rate },
            { no: 9, name: "notes", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "filter_preferences", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_FilterPreference },
            { no: 11, name: "loadboard", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Loadboard },
            { no: 12, name: "age", kind: "message", T: () => LB_ListenSearchResultsReply_SearchResult_Age }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult>): LB_ListenSearchResultsReply_SearchResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resultId = "";
        message.notes = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult): LB_ListenSearchResultsReply_SearchResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string result_id */ 1:
                    message.resultId = reader.string();
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Broker broker */ 2:
                    message.broker = LB_ListenSearchResultsReply_SearchResult_Broker.internalBinaryRead(reader, reader.uint32(), options, message.broker);
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Origin origin */ 3:
                    message.origin = LB_ListenSearchResultsReply_SearchResult_Origin.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Destination destination */ 4:
                    message.destination = LB_ListenSearchResultsReply_SearchResult_Destination.internalBinaryRead(reader, reader.uint32(), options, message.destination);
                    break;
                case /* v1.models.Measures.Distance distance */ 5:
                    message.distance = Measures_Distance.internalBinaryRead(reader, reader.uint32(), options, message.distance);
                    break;
                case /* v1.models.Measures.Weight weight */ 6:
                    message.weight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.weight);
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Equipment equipment */ 7:
                    message.equipment = LB_ListenSearchResultsReply_SearchResult_Equipment.internalBinaryRead(reader, reader.uint32(), options, message.equipment);
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Rate rate */ 8:
                    message.rate = LB_ListenSearchResultsReply_SearchResult_Rate.internalBinaryRead(reader, reader.uint32(), options, message.rate);
                    break;
                case /* string notes */ 9:
                    message.notes = reader.string();
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.FilterPreference filter_preferences */ 10:
                    message.filterPreferences = LB_ListenSearchResultsReply_SearchResult_FilterPreference.internalBinaryRead(reader, reader.uint32(), options, message.filterPreferences);
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Loadboard loadboard */ 11:
                    message.loadboard = LB_ListenSearchResultsReply_SearchResult_Loadboard.internalBinaryRead(reader, reader.uint32(), options, message.loadboard);
                    break;
                case /* LB_ListenSearchResultsReply.SearchResult.Age age */ 12:
                    message.age = LB_ListenSearchResultsReply_SearchResult_Age.internalBinaryRead(reader, reader.uint32(), options, message.age);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string result_id = 1; */
        if (message.resultId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resultId);
        /* LB_ListenSearchResultsReply.SearchResult.Broker broker = 2; */
        if (message.broker)
            LB_ListenSearchResultsReply_SearchResult_Broker.internalBinaryWrite(message.broker, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.SearchResult.Origin origin = 3; */
        if (message.origin)
            LB_ListenSearchResultsReply_SearchResult_Origin.internalBinaryWrite(message.origin, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.SearchResult.Destination destination = 4; */
        if (message.destination)
            LB_ListenSearchResultsReply_SearchResult_Destination.internalBinaryWrite(message.destination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Distance distance = 5; */
        if (message.distance)
            Measures_Distance.internalBinaryWrite(message.distance, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Weight weight = 6; */
        if (message.weight)
            Measures_Weight.internalBinaryWrite(message.weight, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.SearchResult.Equipment equipment = 7; */
        if (message.equipment)
            LB_ListenSearchResultsReply_SearchResult_Equipment.internalBinaryWrite(message.equipment, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.SearchResult.Rate rate = 8; */
        if (message.rate)
            LB_ListenSearchResultsReply_SearchResult_Rate.internalBinaryWrite(message.rate, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string notes = 9; */
        if (message.notes !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.notes);
        /* LB_ListenSearchResultsReply.SearchResult.FilterPreference filter_preferences = 10; */
        if (message.filterPreferences)
            LB_ListenSearchResultsReply_SearchResult_FilterPreference.internalBinaryWrite(message.filterPreferences, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.SearchResult.Loadboard loadboard = 11; */
        if (message.loadboard)
            LB_ListenSearchResultsReply_SearchResult_Loadboard.internalBinaryWrite(message.loadboard, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* LB_ListenSearchResultsReply.SearchResult.Age age = 12; */
        if (message.age)
            LB_ListenSearchResultsReply_SearchResult_Age.internalBinaryWrite(message.age, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult
 */
export const LB_ListenSearchResultsReply_SearchResult = new LB_ListenSearchResultsReply_SearchResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Broker$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Broker> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Broker", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "factoring_approved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Broker>): LB_ListenSearchResultsReply_SearchResult_Broker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.phone = "";
        message.name = "";
        message.mc = "";
        message.factoringApproved = false;
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Broker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Broker): LB_ListenSearchResultsReply_SearchResult_Broker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string mc */ 4:
                    message.mc = reader.string();
                    break;
                case /* bool factoring_approved */ 5:
                    message.factoringApproved = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Broker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string mc = 4; */
        if (message.mc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.mc);
        /* bool factoring_approved = 5; */
        if (message.factoringApproved !== false)
            writer.tag(5, WireType.Varint).bool(message.factoringApproved);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Broker
 */
export const LB_ListenSearchResultsReply_SearchResult_Broker = new LB_ListenSearchResultsReply_SearchResult_Broker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Origin$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Origin> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Origin", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "deadhead", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Origin>): LB_ListenSearchResultsReply_SearchResult_Origin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.startAt = "";
        message.endAt = "";
        message.deadhead = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Origin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Origin): LB_ListenSearchResultsReply_SearchResult_Origin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* string start_at */ 5:
                    message.startAt = reader.string();
                    break;
                case /* string end_at */ 6:
                    message.endAt = reader.string();
                    break;
                case /* int64 deadhead */ 7:
                    message.deadhead = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Origin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* string start_at = 5; */
        if (message.startAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startAt);
        /* string end_at = 6; */
        if (message.endAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.endAt);
        /* int64 deadhead = 7; */
        if (message.deadhead !== 0)
            writer.tag(7, WireType.Varint).int64(message.deadhead);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Origin
 */
export const LB_ListenSearchResultsReply_SearchResult_Origin = new LB_ListenSearchResultsReply_SearchResult_Origin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Destination$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Destination> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Destination", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "deadhead", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Destination>): LB_ListenSearchResultsReply_SearchResult_Destination {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.startAt = "";
        message.endAt = "";
        message.deadhead = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Destination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Destination): LB_ListenSearchResultsReply_SearchResult_Destination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* string start_at */ 5:
                    message.startAt = reader.string();
                    break;
                case /* string end_at */ 6:
                    message.endAt = reader.string();
                    break;
                case /* int64 deadhead */ 7:
                    message.deadhead = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Destination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* string start_at = 5; */
        if (message.startAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startAt);
        /* string end_at = 6; */
        if (message.endAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.endAt);
        /* int64 deadhead = 7; */
        if (message.deadhead !== 0)
            writer.tag(7, WireType.Varint).int64(message.deadhead);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Destination
 */
export const LB_ListenSearchResultsReply_SearchResult_Destination = new LB_ListenSearchResultsReply_SearchResult_Destination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Equipment$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Equipment> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Equipment", [
            { no: 1, name: "equipment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Equipment>): LB_ListenSearchResultsReply_SearchResult_Equipment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentId = "";
        message.code = "";
        message.icon = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Equipment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Equipment): LB_ListenSearchResultsReply_SearchResult_Equipment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_id */ 1:
                    message.equipmentId = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Equipment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_id = 1; */
        if (message.equipmentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentId);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Equipment
 */
export const LB_ListenSearchResultsReply_SearchResult_Equipment = new LB_ListenSearchResultsReply_SearchResult_Equipment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Rate$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Rate> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Rate", [
            { no: 1, name: "type", kind: "enum", T: () => ["LB_ListenSearchResultsReply.SearchResult.Rate.Type", LB_ListenSearchResultsReply_SearchResult_Rate_Type, "TYPE_"] },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Rate>): LB_ListenSearchResultsReply_SearchResult_Rate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.amount = "";
        message.rpm = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Rate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Rate): LB_ListenSearchResultsReply_SearchResult_Rate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LB_ListenSearchResultsReply.SearchResult.Rate.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string amount */ 2:
                    message.amount = reader.string();
                    break;
                case /* string rpm */ 3:
                    message.rpm = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Rate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LB_ListenSearchResultsReply.SearchResult.Rate.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string amount = 2; */
        if (message.amount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amount);
        /* string rpm = 3; */
        if (message.rpm !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rpm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Rate
 */
export const LB_ListenSearchResultsReply_SearchResult_Rate = new LB_ListenSearchResultsReply_SearchResult_Rate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_FilterPreference$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_FilterPreference> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.FilterPreference", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stars", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_FilterPreference>): LB_ListenSearchResultsReply_SearchResult_FilterPreference {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.stars = 0;
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_FilterPreference>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_FilterPreference): LB_ListenSearchResultsReply_SearchResult_FilterPreference {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 stars */ 2:
                    message.stars = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_FilterPreference, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 stars = 2; */
        if (message.stars !== 0)
            writer.tag(2, WireType.Varint).int64(message.stars);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.FilterPreference
 */
export const LB_ListenSearchResultsReply_SearchResult_FilterPreference = new LB_ListenSearchResultsReply_SearchResult_FilterPreference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Loadboard$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Loadboard> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Loadboard", [
            { no: 1, name: "loadboard_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Loadboard>): LB_ListenSearchResultsReply_SearchResult_Loadboard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadboardId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Loadboard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Loadboard): LB_ListenSearchResultsReply_SearchResult_Loadboard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string loadboard_id */ 1:
                    message.loadboardId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Loadboard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string loadboard_id = 1; */
        if (message.loadboardId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadboardId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Loadboard
 */
export const LB_ListenSearchResultsReply_SearchResult_Loadboard = new LB_ListenSearchResultsReply_SearchResult_Loadboard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_SearchResult_Age$Type extends MessageType<LB_ListenSearchResultsReply_SearchResult_Age> {
    constructor() {
        super("LB_ListenSearchResultsReply.SearchResult.Age", [
            { no: 1, name: "supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "age", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_SearchResult_Age>): LB_ListenSearchResultsReply_SearchResult_Age {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supported = false;
        message.age = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_SearchResult_Age>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_SearchResult_Age): LB_ListenSearchResultsReply_SearchResult_Age {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool();
                    break;
                case /* string age */ 2:
                    message.age = reader.string();
                    break;
                case /* string updated_at */ 3:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_SearchResult_Age, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported);
        /* string age = 2; */
        if (message.age !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.age);
        /* string updated_at = 3; */
        if (message.updatedAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.SearchResult.Age
 */
export const LB_ListenSearchResultsReply_SearchResult_Age = new LB_ListenSearchResultsReply_SearchResult_Age$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_LoadboardSearchResultToDelete$Type extends MessageType<LB_ListenSearchResultsReply_LoadboardSearchResultToDelete> {
    constructor() {
        super("LB_ListenSearchResultsReply.LoadboardSearchResultToDelete", [
            { no: 2, name: "result_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_LoadboardSearchResultToDelete>): LB_ListenSearchResultsReply_LoadboardSearchResultToDelete {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resultData = [];
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_LoadboardSearchResultToDelete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_LoadboardSearchResultToDelete): LB_ListenSearchResultsReply_LoadboardSearchResultToDelete {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LB_ListenSearchResultsReply.LoadboardSearchResultToDelete.ResultData result_data */ 2:
                    message.resultData.push(LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_LoadboardSearchResultToDelete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LB_ListenSearchResultsReply.LoadboardSearchResultToDelete.ResultData result_data = 2; */
        for (let i = 0; i < message.resultData.length; i++)
            LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData.internalBinaryWrite(message.resultData[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.LoadboardSearchResultToDelete
 */
export const LB_ListenSearchResultsReply_LoadboardSearchResultToDelete = new LB_ListenSearchResultsReply_LoadboardSearchResultToDelete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData$Type extends MessageType<LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData> {
    constructor() {
        super("LB_ListenSearchResultsReply.LoadboardSearchResultToDelete.ResultData", [
            { no: 1, name: "result_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "integration_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData>): LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resultId = "";
        message.integrationId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData): LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string result_id */ 1:
                    message.resultId = reader.string();
                    break;
                case /* string integration_id */ 2:
                    message.integrationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string result_id = 1; */
        if (message.resultId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resultId);
        /* string integration_id = 2; */
        if (message.integrationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.integrationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_ListenSearchResultsReply.LoadboardSearchResultToDelete.ResultData
 */
export const LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData = new LB_ListenSearchResultsReply_LoadboardSearchResultToDelete_ResultData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateViewedSearchResultRequest$Type extends MessageType<LB_CreateViewedSearchResultRequest> {
    constructor() {
        super("LB_CreateViewedSearchResultRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "result_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "integration_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_CreateViewedSearchResultRequest>): LB_CreateViewedSearchResultRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        message.resultId = "";
        message.integrationId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_CreateViewedSearchResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateViewedSearchResultRequest): LB_CreateViewedSearchResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                case /* string result_id */ 2:
                    message.resultId = reader.string();
                    break;
                case /* string integration_id */ 3:
                    message.integrationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_CreateViewedSearchResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        /* string result_id = 2; */
        if (message.resultId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultId);
        /* string integration_id = 3; */
        if (message.integrationId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.integrationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateViewedSearchResultRequest
 */
export const LB_CreateViewedSearchResultRequest = new LB_CreateViewedSearchResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_CreateViewedSearchResultReply$Type extends MessageType<LB_CreateViewedSearchResultReply> {
    constructor() {
        super("LB_CreateViewedSearchResultReply", []);
    }
    create(value?: PartialMessage<LB_CreateViewedSearchResultReply>): LB_CreateViewedSearchResultReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_CreateViewedSearchResultReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_CreateViewedSearchResultReply): LB_CreateViewedSearchResultReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_CreateViewedSearchResultReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_CreateViewedSearchResultReply
 */
export const LB_CreateViewedSearchResultReply = new LB_CreateViewedSearchResultReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetViewedSearchResultsRequest$Type extends MessageType<LB_GetViewedSearchResultsRequest> {
    constructor() {
        super("LB_GetViewedSearchResultsRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_GetViewedSearchResultsRequest>): LB_GetViewedSearchResultsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_GetViewedSearchResultsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetViewedSearchResultsRequest): LB_GetViewedSearchResultsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_GetViewedSearchResultsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetViewedSearchResultsRequest
 */
export const LB_GetViewedSearchResultsRequest = new LB_GetViewedSearchResultsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_GetViewedSearchResultsReply$Type extends MessageType<LB_GetViewedSearchResultsReply> {
    constructor() {
        super("LB_GetViewedSearchResultsReply", [
            { no: 1, name: "result_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_GetViewedSearchResultsReply>): LB_GetViewedSearchResultsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resultIds = [];
        if (value !== undefined)
            reflectionMergePartial<LB_GetViewedSearchResultsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_GetViewedSearchResultsReply): LB_GetViewedSearchResultsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string result_ids */ 1:
                    message.resultIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_GetViewedSearchResultsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string result_ids = 1; */
        for (let i = 0; i < message.resultIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.resultIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_GetViewedSearchResultsReply
 */
export const LB_GetViewedSearchResultsReply = new LB_GetViewedSearchResultsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_MuteSearchRequest$Type extends MessageType<LB_MuteSearchRequest> {
    constructor() {
        super("LB_MuteSearchRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_MuteSearchRequest>): LB_MuteSearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_MuteSearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_MuteSearchRequest): LB_MuteSearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_MuteSearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_MuteSearchRequest
 */
export const LB_MuteSearchRequest = new LB_MuteSearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_MuteSearchReply$Type extends MessageType<LB_MuteSearchReply> {
    constructor() {
        super("LB_MuteSearchReply", []);
    }
    create(value?: PartialMessage<LB_MuteSearchReply>): LB_MuteSearchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_MuteSearchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_MuteSearchReply): LB_MuteSearchReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_MuteSearchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_MuteSearchReply
 */
export const LB_MuteSearchReply = new LB_MuteSearchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UnmuteSearchRequest$Type extends MessageType<LB_UnmuteSearchRequest> {
    constructor() {
        super("LB_UnmuteSearchRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_UnmuteSearchRequest>): LB_UnmuteSearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_UnmuteSearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UnmuteSearchRequest): LB_UnmuteSearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_UnmuteSearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UnmuteSearchRequest
 */
export const LB_UnmuteSearchRequest = new LB_UnmuteSearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_UnmuteSearchReply$Type extends MessageType<LB_UnmuteSearchReply> {
    constructor() {
        super("LB_UnmuteSearchReply", []);
    }
    create(value?: PartialMessage<LB_UnmuteSearchReply>): LB_UnmuteSearchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LB_UnmuteSearchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_UnmuteSearchReply): LB_UnmuteSearchReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LB_UnmuteSearchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_UnmuteSearchReply
 */
export const LB_UnmuteSearchReply = new LB_UnmuteSearchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_SearchResultRouteRetrieveRequest$Type extends MessageType<LB_SearchResultRouteRetrieveRequest> {
    constructor() {
        super("LB_SearchResultRouteRetrieveRequest", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "integration_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "result_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_SearchResultRouteRetrieveRequest>): LB_SearchResultRouteRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        message.integrationId = "";
        message.resultId = "";
        if (value !== undefined)
            reflectionMergePartial<LB_SearchResultRouteRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_SearchResultRouteRetrieveRequest): LB_SearchResultRouteRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                case /* string integration_id */ 2:
                    message.integrationId = reader.string();
                    break;
                case /* string result_id */ 3:
                    message.resultId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_SearchResultRouteRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        /* string integration_id = 2; */
        if (message.integrationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.integrationId);
        /* string result_id = 3; */
        if (message.resultId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.resultId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_SearchResultRouteRetrieveRequest
 */
export const LB_SearchResultRouteRetrieveRequest = new LB_SearchResultRouteRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LB_SearchResultRouteRetrieveReply$Type extends MessageType<LB_SearchResultRouteRetrieveReply> {
    constructor() {
        super("LB_SearchResultRouteRetrieveReply", [
            { no: 1, name: "polyline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LB_SearchResultRouteRetrieveReply>): LB_SearchResultRouteRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.polyline = "";
        if (value !== undefined)
            reflectionMergePartial<LB_SearchResultRouteRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LB_SearchResultRouteRetrieveReply): LB_SearchResultRouteRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string polyline */ 1:
                    message.polyline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LB_SearchResultRouteRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string polyline = 1; */
        if (message.polyline !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.polyline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LB_SearchResultRouteRetrieveReply
 */
export const LB_SearchResultRouteRetrieveReply = new LB_SearchResultRouteRetrieveReply$Type();
/**
 * @generated ServiceType for protobuf service LoadboardService
 */
export const LoadboardService = new ServiceType("LoadboardService", [
    { name: "LB_GetEquipments", options: {}, I: LB_GetEquipmentsRequest, O: LB_GetEquipmentsReply },
    { name: "LB_GetSearches", options: {}, I: LB_GetSearchesRequest, O: LB_GetSearchesReply },
    { name: "LB_CreateSearch", options: {}, I: LB_CreateSearchRequest, O: LB_CreateSearchReply },
    { name: "LB_UpdateSearch", options: {}, I: LB_UpdateSearchRequest, O: LB_UpdateSearchReply },
    { name: "LB_DeleteSearch", options: {}, I: LB_DeleteSearchRequest, O: LB_DeleteSearchReply },
    { name: "LB_RefreshSearchResults", options: {}, I: LB_RefreshSearchResultsRequest, O: LB_RefreshSearchResultsReply },
    { name: "LB_ListenSearchResults", serverStreaming: true, options: {}, I: LB_ListenSearchResultsRequest, O: LB_ListenSearchResultsReply },
    { name: "LB_CreateViewedSearchResult", options: {}, I: LB_CreateViewedSearchResultRequest, O: LB_CreateViewedSearchResultReply },
    { name: "LB_GetViewedSearchResults", options: {}, I: LB_GetViewedSearchResultsRequest, O: LB_GetViewedSearchResultsReply },
    { name: "LB_MuteSearch", options: {}, I: LB_MuteSearchRequest, O: LB_MuteSearchReply },
    { name: "LB_UnmuteSearch", options: {}, I: LB_UnmuteSearchRequest, O: LB_UnmuteSearchReply },
    { name: "LB_SearchResultRouteRetrieve", options: {}, I: LB_SearchResultRouteRetrieveRequest, O: LB_SearchResultRouteRetrieveReply }
]);
