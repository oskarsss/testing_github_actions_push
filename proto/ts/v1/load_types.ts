// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_types.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadModel_Type_Icon } from "./models/model_load";
/**
 * @generated from protobuf message LoadTypeCreateRequest
 */
export interface LoadTypeCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
    /**
     * @generated from protobuf field: LoadModel.Type.Icon icon = 3;
     */
    icon: LoadModel_Type_Icon;
}
/**
 * @generated from protobuf message LoadTypeCreateReply
 */
export interface LoadTypeCreateReply {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
}
/**
 * @generated from protobuf message LoadTypeUpdateRequest
 */
export interface LoadTypeUpdateRequest {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: LoadModel.Type.Icon icon = 4;
     */
    icon: LoadModel_Type_Icon;
}
/**
 * @generated from protobuf message LoadTypeUpdateReply
 */
export interface LoadTypeUpdateReply {
}
/**
 * @generated from protobuf message LoadTypeDeleteRequest
 */
export interface LoadTypeDeleteRequest {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
}
/**
 * @generated from protobuf message LoadTypeDeleteReply
 */
export interface LoadTypeDeleteReply {
}
/**
 * @generated from protobuf message LoadTypeRestoreRequest
 */
export interface LoadTypeRestoreRequest {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
}
/**
 * @generated from protobuf message LoadTypeRestoreReply
 */
export interface LoadTypeRestoreReply {
}
/**
 * @generated from protobuf message LoadTypesGetRequest
 */
export interface LoadTypesGetRequest {
}
/**
 * @generated from protobuf message LoadTypesGetReply
 */
export interface LoadTypesGetReply {
    /**
     * @generated from protobuf field: repeated LoadTypesGetReply.LoadType load_types = 1;
     */
    loadTypes: LoadTypesGetReply_LoadType[];
}
/**
 * @generated from protobuf message LoadTypesGetReply.LoadType
 */
export interface LoadTypesGetReply_LoadType {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: bool deleted = 4;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: LoadModel.Type.Icon icon = 5;
     */
    icon: LoadModel_Type_Icon;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 7;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message LoadTypeRetrieveRequest
 */
export interface LoadTypeRetrieveRequest {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
}
/**
 * @generated from protobuf message LoadTypeRetrieveReply
 */
export interface LoadTypeRetrieveReply {
    /**
     * @generated from protobuf field: string load_type_id = 1;
     */
    loadTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: bool deleted = 4;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: LoadModel.Type.Icon icon = 5;
     */
    icon: LoadModel_Type_Icon;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 7;
     */
    updatedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeCreateRequest$Type extends MessageType<LoadTypeCreateRequest> {
    constructor() {
        super("LoadTypeCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "enum", T: () => ["LoadModel.Type.Icon", LoadModel_Type_Icon] }
        ]);
    }
    create(value?: PartialMessage<LoadTypeCreateRequest>): LoadTypeCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadTypeCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeCreateRequest): LoadTypeCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* LoadModel.Type.Icon icon */ 3:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* LoadModel.Type.Icon icon = 3; */
        if (message.icon !== 0)
            writer.tag(3, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeCreateRequest
 */
export const LoadTypeCreateRequest = new LoadTypeCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeCreateReply$Type extends MessageType<LoadTypeCreateReply> {
    constructor() {
        super("LoadTypeCreateReply", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTypeCreateReply>): LoadTypeCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTypeCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeCreateReply): LoadTypeCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeCreateReply
 */
export const LoadTypeCreateReply = new LoadTypeCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeUpdateRequest$Type extends MessageType<LoadTypeUpdateRequest> {
    constructor() {
        super("LoadTypeUpdateRequest", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "enum", T: () => ["LoadModel.Type.Icon", LoadModel_Type_Icon] }
        ]);
    }
    create(value?: PartialMessage<LoadTypeUpdateRequest>): LoadTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        message.name = "";
        message.code = "";
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeUpdateRequest): LoadTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* LoadModel.Type.Icon icon */ 4:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* LoadModel.Type.Icon icon = 4; */
        if (message.icon !== 0)
            writer.tag(4, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeUpdateRequest
 */
export const LoadTypeUpdateRequest = new LoadTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeUpdateReply$Type extends MessageType<LoadTypeUpdateReply> {
    constructor() {
        super("LoadTypeUpdateReply", []);
    }
    create(value?: PartialMessage<LoadTypeUpdateReply>): LoadTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeUpdateReply): LoadTypeUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeUpdateReply
 */
export const LoadTypeUpdateReply = new LoadTypeUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeDeleteRequest$Type extends MessageType<LoadTypeDeleteRequest> {
    constructor() {
        super("LoadTypeDeleteRequest", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTypeDeleteRequest>): LoadTypeDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTypeDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeDeleteRequest): LoadTypeDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeDeleteRequest
 */
export const LoadTypeDeleteRequest = new LoadTypeDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeDeleteReply$Type extends MessageType<LoadTypeDeleteReply> {
    constructor() {
        super("LoadTypeDeleteReply", []);
    }
    create(value?: PartialMessage<LoadTypeDeleteReply>): LoadTypeDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadTypeDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeDeleteReply): LoadTypeDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadTypeDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeDeleteReply
 */
export const LoadTypeDeleteReply = new LoadTypeDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeRestoreRequest$Type extends MessageType<LoadTypeRestoreRequest> {
    constructor() {
        super("LoadTypeRestoreRequest", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTypeRestoreRequest>): LoadTypeRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTypeRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeRestoreRequest): LoadTypeRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeRestoreRequest
 */
export const LoadTypeRestoreRequest = new LoadTypeRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeRestoreReply$Type extends MessageType<LoadTypeRestoreReply> {
    constructor() {
        super("LoadTypeRestoreReply", []);
    }
    create(value?: PartialMessage<LoadTypeRestoreReply>): LoadTypeRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadTypeRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeRestoreReply): LoadTypeRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadTypeRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeRestoreReply
 */
export const LoadTypeRestoreReply = new LoadTypeRestoreReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypesGetRequest$Type extends MessageType<LoadTypesGetRequest> {
    constructor() {
        super("LoadTypesGetRequest", []);
    }
    create(value?: PartialMessage<LoadTypesGetRequest>): LoadTypesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadTypesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypesGetRequest): LoadTypesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadTypesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypesGetRequest
 */
export const LoadTypesGetRequest = new LoadTypesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypesGetReply$Type extends MessageType<LoadTypesGetReply> {
    constructor() {
        super("LoadTypesGetReply", [
            { no: 1, name: "load_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadTypesGetReply_LoadType }
        ]);
    }
    create(value?: PartialMessage<LoadTypesGetReply>): LoadTypesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypes = [];
        if (value !== undefined)
            reflectionMergePartial<LoadTypesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypesGetReply): LoadTypesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadTypesGetReply.LoadType load_types */ 1:
                    message.loadTypes.push(LoadTypesGetReply_LoadType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadTypesGetReply.LoadType load_types = 1; */
        for (let i = 0; i < message.loadTypes.length; i++)
            LoadTypesGetReply_LoadType.internalBinaryWrite(message.loadTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypesGetReply
 */
export const LoadTypesGetReply = new LoadTypesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypesGetReply_LoadType$Type extends MessageType<LoadTypesGetReply_LoadType> {
    constructor() {
        super("LoadTypesGetReply.LoadType", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "icon", kind: "enum", T: () => ["LoadModel.Type.Icon", LoadModel_Type_Icon] },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTypesGetReply_LoadType>): LoadTypesGetReply_LoadType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        message.name = "";
        message.code = "";
        message.deleted = false;
        message.icon = 0;
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTypesGetReply_LoadType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypesGetReply_LoadType): LoadTypesGetReply_LoadType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                case /* LoadModel.Type.Icon icon */ 5:
                    message.icon = reader.int32();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 7:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypesGetReply_LoadType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, WireType.Varint).bool(message.deleted);
        /* LoadModel.Type.Icon icon = 5; */
        if (message.icon !== 0)
            writer.tag(5, WireType.Varint).int32(message.icon);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypesGetReply.LoadType
 */
export const LoadTypesGetReply_LoadType = new LoadTypesGetReply_LoadType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeRetrieveRequest$Type extends MessageType<LoadTypeRetrieveRequest> {
    constructor() {
        super("LoadTypeRetrieveRequest", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTypeRetrieveRequest>): LoadTypeRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTypeRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeRetrieveRequest): LoadTypeRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeRetrieveRequest
 */
export const LoadTypeRetrieveRequest = new LoadTypeRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTypeRetrieveReply$Type extends MessageType<LoadTypeRetrieveReply> {
    constructor() {
        super("LoadTypeRetrieveReply", [
            { no: 1, name: "load_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "icon", kind: "enum", T: () => ["LoadModel.Type.Icon", LoadModel_Type_Icon] },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTypeRetrieveReply>): LoadTypeRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadTypeId = "";
        message.name = "";
        message.code = "";
        message.deleted = false;
        message.icon = 0;
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTypeRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTypeRetrieveReply): LoadTypeRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_type_id */ 1:
                    message.loadTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                case /* LoadModel.Type.Icon icon */ 5:
                    message.icon = reader.int32();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 7:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTypeRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_type_id = 1; */
        if (message.loadTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, WireType.Varint).bool(message.deleted);
        /* LoadModel.Type.Icon icon = 5; */
        if (message.icon !== 0)
            writer.tag(5, WireType.Varint).int32(message.icon);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTypeRetrieveReply
 */
export const LoadTypeRetrieveReply = new LoadTypeRetrieveReply$Type();
/**
 * @generated ServiceType for protobuf service LoadTypesService
 */
export const LoadTypesService = new ServiceType("LoadTypesService", [
    { name: "LoadTypeCreate", options: {}, I: LoadTypeCreateRequest, O: LoadTypeCreateReply },
    { name: "LoadTypeUpdate", options: {}, I: LoadTypeUpdateRequest, O: LoadTypeUpdateReply },
    { name: "LoadTypeDelete", options: {}, I: LoadTypeDeleteRequest, O: LoadTypeDeleteReply },
    { name: "LoadTypeRestore", options: {}, I: LoadTypeRestoreRequest, O: LoadTypeRestoreReply },
    { name: "LoadTypesGet", options: {}, I: LoadTypesGetRequest, O: LoadTypesGetReply },
    { name: "LoadTypeRetrieve", options: {}, I: LoadTypeRetrieveRequest, O: LoadTypeRetrieveReply }
]);
