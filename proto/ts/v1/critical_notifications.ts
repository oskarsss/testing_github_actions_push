// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/critical_notifications.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CriticalNotificationsGetRequest
 */
export interface CriticalNotificationsGetRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
}
/**
 * @generated from protobuf message CriticalNotificationsGetReply
 */
export interface CriticalNotificationsGetReply {
    /**
     * @generated from protobuf field: repeated CriticalNotificationsGetReply.CriticalNotification critical_notifications = 1;
     */
    criticalNotifications: CriticalNotificationsGetReply_CriticalNotification[];
}
/**
 * @generated from protobuf message CriticalNotificationsGetReply.CriticalNotification
 */
export interface CriticalNotificationsGetReply_CriticalNotification {
    /**
     * @generated from protobuf field: string notification_id = 1;
     */
    notificationId: string;
    /**
     * @generated from protobuf field: string body = 2;
     */
    body: string;
    /**
     * @generated from protobuf field: string sent_at = 3;
     */
    sentAt: string;
    /**
     * @generated from protobuf field: bool delivered = 4;
     */
    delivered: boolean;
    /**
     * @generated from protobuf field: string delivered_at = 5;
     */
    deliveredAt: string;
    /**
     * @generated from protobuf field: bool confirmed = 6;
     */
    confirmed: boolean;
    /**
     * @generated from protobuf field: string confirmed_at = 7;
     */
    confirmedAt: string;
    /**
     * @generated from protobuf field: string user_id = 8;
     */
    userId: string;
    /**
     * @generated from protobuf field: string user_first_name = 9;
     */
    userFirstName: string;
    /**
     * @generated from protobuf field: string user_last_name = 10;
     */
    userLastName: string;
}
/**
 * @generated from protobuf message CriticalNotificationSendRequest
 */
export interface CriticalNotificationSendRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string body = 2;
     */
    body: string;
}
/**
 * @generated from protobuf message CriticalNotificationSendReply
 */
export interface CriticalNotificationSendReply {
    /**
     * @generated from protobuf field: string notification_id = 1;
     */
    notificationId: string;
}
/**
 * @generated from protobuf message CriticalNotificationsClearRequest
 */
export interface CriticalNotificationsClearRequest {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
}
/**
 * @generated from protobuf message CriticalNotificationsClearReply
 */
export interface CriticalNotificationsClearReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationsGetRequest$Type extends MessageType<CriticalNotificationsGetRequest> {
    constructor() {
        super("CriticalNotificationsGetRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CriticalNotificationsGetRequest>): CriticalNotificationsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationsGetRequest): CriticalNotificationsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CriticalNotificationsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationsGetRequest
 */
export const CriticalNotificationsGetRequest = new CriticalNotificationsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationsGetReply$Type extends MessageType<CriticalNotificationsGetReply> {
    constructor() {
        super("CriticalNotificationsGetReply", [
            { no: 1, name: "critical_notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CriticalNotificationsGetReply_CriticalNotification }
        ]);
    }
    create(value?: PartialMessage<CriticalNotificationsGetReply>): CriticalNotificationsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.criticalNotifications = [];
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationsGetReply): CriticalNotificationsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CriticalNotificationsGetReply.CriticalNotification critical_notifications */ 1:
                    message.criticalNotifications.push(CriticalNotificationsGetReply_CriticalNotification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CriticalNotificationsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CriticalNotificationsGetReply.CriticalNotification critical_notifications = 1; */
        for (let i = 0; i < message.criticalNotifications.length; i++)
            CriticalNotificationsGetReply_CriticalNotification.internalBinaryWrite(message.criticalNotifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationsGetReply
 */
export const CriticalNotificationsGetReply = new CriticalNotificationsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationsGetReply_CriticalNotification$Type extends MessageType<CriticalNotificationsGetReply_CriticalNotification> {
    constructor() {
        super("CriticalNotificationsGetReply.CriticalNotification", [
            { no: 1, name: "notification_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sent_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "delivered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "delivered_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "confirmed_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "user_first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "user_last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CriticalNotificationsGetReply_CriticalNotification>): CriticalNotificationsGetReply_CriticalNotification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationId = "";
        message.body = "";
        message.sentAt = "";
        message.delivered = false;
        message.deliveredAt = "";
        message.confirmed = false;
        message.confirmedAt = "";
        message.userId = "";
        message.userFirstName = "";
        message.userLastName = "";
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationsGetReply_CriticalNotification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationsGetReply_CriticalNotification): CriticalNotificationsGetReply_CriticalNotification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string notification_id */ 1:
                    message.notificationId = reader.string();
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                case /* string sent_at */ 3:
                    message.sentAt = reader.string();
                    break;
                case /* bool delivered */ 4:
                    message.delivered = reader.bool();
                    break;
                case /* string delivered_at */ 5:
                    message.deliveredAt = reader.string();
                    break;
                case /* bool confirmed */ 6:
                    message.confirmed = reader.bool();
                    break;
                case /* string confirmed_at */ 7:
                    message.confirmedAt = reader.string();
                    break;
                case /* string user_id */ 8:
                    message.userId = reader.string();
                    break;
                case /* string user_first_name */ 9:
                    message.userFirstName = reader.string();
                    break;
                case /* string user_last_name */ 10:
                    message.userLastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CriticalNotificationsGetReply_CriticalNotification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string notification_id = 1; */
        if (message.notificationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        /* string sent_at = 3; */
        if (message.sentAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sentAt);
        /* bool delivered = 4; */
        if (message.delivered !== false)
            writer.tag(4, WireType.Varint).bool(message.delivered);
        /* string delivered_at = 5; */
        if (message.deliveredAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deliveredAt);
        /* bool confirmed = 6; */
        if (message.confirmed !== false)
            writer.tag(6, WireType.Varint).bool(message.confirmed);
        /* string confirmed_at = 7; */
        if (message.confirmedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.confirmedAt);
        /* string user_id = 8; */
        if (message.userId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.userId);
        /* string user_first_name = 9; */
        if (message.userFirstName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.userFirstName);
        /* string user_last_name = 10; */
        if (message.userLastName !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.userLastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationsGetReply.CriticalNotification
 */
export const CriticalNotificationsGetReply_CriticalNotification = new CriticalNotificationsGetReply_CriticalNotification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationSendRequest$Type extends MessageType<CriticalNotificationSendRequest> {
    constructor() {
        super("CriticalNotificationSendRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CriticalNotificationSendRequest>): CriticalNotificationSendRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationSendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationSendRequest): CriticalNotificationSendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CriticalNotificationSendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationSendRequest
 */
export const CriticalNotificationSendRequest = new CriticalNotificationSendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationSendReply$Type extends MessageType<CriticalNotificationSendReply> {
    constructor() {
        super("CriticalNotificationSendReply", [
            { no: 1, name: "notification_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CriticalNotificationSendReply>): CriticalNotificationSendReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationId = "";
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationSendReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationSendReply): CriticalNotificationSendReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string notification_id */ 1:
                    message.notificationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CriticalNotificationSendReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string notification_id = 1; */
        if (message.notificationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationSendReply
 */
export const CriticalNotificationSendReply = new CriticalNotificationSendReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationsClearRequest$Type extends MessageType<CriticalNotificationsClearRequest> {
    constructor() {
        super("CriticalNotificationsClearRequest", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CriticalNotificationsClearRequest>): CriticalNotificationsClearRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationsClearRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationsClearRequest): CriticalNotificationsClearRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CriticalNotificationsClearRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationsClearRequest
 */
export const CriticalNotificationsClearRequest = new CriticalNotificationsClearRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CriticalNotificationsClearReply$Type extends MessageType<CriticalNotificationsClearReply> {
    constructor() {
        super("CriticalNotificationsClearReply", []);
    }
    create(value?: PartialMessage<CriticalNotificationsClearReply>): CriticalNotificationsClearReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CriticalNotificationsClearReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CriticalNotificationsClearReply): CriticalNotificationsClearReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CriticalNotificationsClearReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CriticalNotificationsClearReply
 */
export const CriticalNotificationsClearReply = new CriticalNotificationsClearReply$Type();
/**
 * @generated ServiceType for protobuf service CriticalNotificationService
 */
export const CriticalNotificationService = new ServiceType("CriticalNotificationService", [
    { name: "CriticalNotificationsGet", options: {}, I: CriticalNotificationsGetRequest, O: CriticalNotificationsGetReply },
    { name: "CriticalNotificationSend", options: {}, I: CriticalNotificationSendRequest, O: CriticalNotificationSendReply },
    { name: "CriticalNotificationsClear", options: {}, I: CriticalNotificationsClearRequest, O: CriticalNotificationsClearReply }
]);
