// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/roles.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * //////////////////////
 * RoleGet
 * //////////////////////
 *
 * @generated from protobuf message RoleGetRequest
 */
export interface RoleGetRequest {
}
/**
 * @generated from protobuf message RoleGetReply
 */
export interface RoleGetReply {
    /**
     * @generated from protobuf field: repeated RoleGetReply.Role roles = 1;
     */
    roles: RoleGetReply_Role[];
}
/**
 * @generated from protobuf message RoleGetReply.Role
 */
export interface RoleGetReply_Role {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool deleted = 4;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: map<string, bool> permissions = 3;
     */
    permissions: {
        [key: string]: boolean;
    };
}
/**
 * //////////////////////
 * RoleCreate
 * //////////////////////
 *
 * @generated from protobuf message RoleCreateRequest
 */
export interface RoleCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message RoleCreateReply
 */
export interface RoleCreateReply {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
}
/**
 * //////////////////////
 * RoleUpdate
 * //////////////////////
 *
 * @generated from protobuf message RoleUpdateRequest
 */
export interface RoleUpdateRequest {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message RoleUpdateReply
 */
export interface RoleUpdateReply {
}
/**
 * //////////////////////
 * RoleDelete
 * //////////////////////
 *
 * @generated from protobuf message RoleDeleteRequest
 */
export interface RoleDeleteRequest {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
}
/**
 * @generated from protobuf message RoleDeleteReply
 */
export interface RoleDeleteReply {
}
/**
 * //////////////////////
 * RolePermissionAssign
 * //////////////////////
 *
 * @generated from protobuf message RolePermissionAssignRequest
 */
export interface RolePermissionAssignRequest {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string permission_id = 2;
     */
    permissionId: string;
}
/**
 * @generated from protobuf message RolePermissionAssignReply
 */
export interface RolePermissionAssignReply {
}
/**
 * //////////////////////
 * RolePermissionRemove
 * //////////////////////
 *
 * @generated from protobuf message RolePermissionRemoveRequest
 */
export interface RolePermissionRemoveRequest {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string permission_id = 2;
     */
    permissionId: string;
}
/**
 * @generated from protobuf message RolePermissionRemoveReply
 */
export interface RolePermissionRemoveReply {
}
/**
 * //////////////////////
 * RoleRestore
 * //////////////////////
 *
 * @generated from protobuf message RoleRestoreRequest
 */
export interface RoleRestoreRequest {
    /**
     * @generated from protobuf field: string role_id = 1;
     */
    roleId: string;
}
/**
 * @generated from protobuf message RoleRestoreReply
 */
export interface RoleRestoreReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class RoleGetRequest$Type extends MessageType<RoleGetRequest> {
    constructor() {
        super("RoleGetRequest", []);
    }
    create(value?: PartialMessage<RoleGetRequest>): RoleGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoleGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleGetRequest): RoleGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleGetRequest
 */
export const RoleGetRequest = new RoleGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleGetReply$Type extends MessageType<RoleGetReply> {
    constructor() {
        super("RoleGetReply", [
            { no: 1, name: "roles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoleGetReply_Role }
        ]);
    }
    create(value?: PartialMessage<RoleGetReply>): RoleGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roles = [];
        if (value !== undefined)
            reflectionMergePartial<RoleGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleGetReply): RoleGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RoleGetReply.Role roles */ 1:
                    message.roles.push(RoleGetReply_Role.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RoleGetReply.Role roles = 1; */
        for (let i = 0; i < message.roles.length; i++)
            RoleGetReply_Role.internalBinaryWrite(message.roles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleGetReply
 */
export const RoleGetReply = new RoleGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleGetReply_Role$Type extends MessageType<RoleGetReply_Role> {
    constructor() {
        super("RoleGetReply.Role", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "permissions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } }
        ]);
    }
    create(value?: PartialMessage<RoleGetReply_Role>): RoleGetReply_Role {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        message.name = "";
        message.deleted = false;
        message.permissions = {};
        if (value !== undefined)
            reflectionMergePartial<RoleGetReply_Role>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleGetReply_Role): RoleGetReply_Role {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                case /* map<string, bool> permissions */ 3:
                    this.binaryReadMap3(message.permissions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: RoleGetReply_Role["permissions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RoleGetReply_Role["permissions"] | undefined, val: RoleGetReply_Role["permissions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field RoleGetReply.Role.permissions");
            }
        }
        map[key ?? ""] = val ?? false;
    }
    internalBinaryWrite(message: RoleGetReply_Role, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, WireType.Varint).bool(message.deleted);
        /* map<string, bool> permissions = 3; */
        for (let k of globalThis.Object.keys(message.permissions))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).bool(message.permissions[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleGetReply.Role
 */
export const RoleGetReply_Role = new RoleGetReply_Role$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleCreateRequest$Type extends MessageType<RoleCreateRequest> {
    constructor() {
        super("RoleCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleCreateRequest>): RoleCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<RoleCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleCreateRequest): RoleCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleCreateRequest
 */
export const RoleCreateRequest = new RoleCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleCreateReply$Type extends MessageType<RoleCreateReply> {
    constructor() {
        super("RoleCreateReply", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleCreateReply>): RoleCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        if (value !== undefined)
            reflectionMergePartial<RoleCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleCreateReply): RoleCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleCreateReply
 */
export const RoleCreateReply = new RoleCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleUpdateRequest$Type extends MessageType<RoleUpdateRequest> {
    constructor() {
        super("RoleUpdateRequest", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleUpdateRequest>): RoleUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<RoleUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleUpdateRequest): RoleUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleUpdateRequest
 */
export const RoleUpdateRequest = new RoleUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleUpdateReply$Type extends MessageType<RoleUpdateReply> {
    constructor() {
        super("RoleUpdateReply", []);
    }
    create(value?: PartialMessage<RoleUpdateReply>): RoleUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoleUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleUpdateReply): RoleUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleUpdateReply
 */
export const RoleUpdateReply = new RoleUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleDeleteRequest$Type extends MessageType<RoleDeleteRequest> {
    constructor() {
        super("RoleDeleteRequest", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleDeleteRequest>): RoleDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        if (value !== undefined)
            reflectionMergePartial<RoleDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleDeleteRequest): RoleDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleDeleteRequest
 */
export const RoleDeleteRequest = new RoleDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleDeleteReply$Type extends MessageType<RoleDeleteReply> {
    constructor() {
        super("RoleDeleteReply", []);
    }
    create(value?: PartialMessage<RoleDeleteReply>): RoleDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoleDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleDeleteReply): RoleDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleDeleteReply
 */
export const RoleDeleteReply = new RoleDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RolePermissionAssignRequest$Type extends MessageType<RolePermissionAssignRequest> {
    constructor() {
        super("RolePermissionAssignRequest", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "permission_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RolePermissionAssignRequest>): RolePermissionAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        message.permissionId = "";
        if (value !== undefined)
            reflectionMergePartial<RolePermissionAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolePermissionAssignRequest): RolePermissionAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                case /* string permission_id */ 2:
                    message.permissionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RolePermissionAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        /* string permission_id = 2; */
        if (message.permissionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.permissionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RolePermissionAssignRequest
 */
export const RolePermissionAssignRequest = new RolePermissionAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RolePermissionAssignReply$Type extends MessageType<RolePermissionAssignReply> {
    constructor() {
        super("RolePermissionAssignReply", []);
    }
    create(value?: PartialMessage<RolePermissionAssignReply>): RolePermissionAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RolePermissionAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolePermissionAssignReply): RolePermissionAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RolePermissionAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RolePermissionAssignReply
 */
export const RolePermissionAssignReply = new RolePermissionAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RolePermissionRemoveRequest$Type extends MessageType<RolePermissionRemoveRequest> {
    constructor() {
        super("RolePermissionRemoveRequest", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "permission_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RolePermissionRemoveRequest>): RolePermissionRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        message.permissionId = "";
        if (value !== undefined)
            reflectionMergePartial<RolePermissionRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolePermissionRemoveRequest): RolePermissionRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                case /* string permission_id */ 2:
                    message.permissionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RolePermissionRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        /* string permission_id = 2; */
        if (message.permissionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.permissionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RolePermissionRemoveRequest
 */
export const RolePermissionRemoveRequest = new RolePermissionRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RolePermissionRemoveReply$Type extends MessageType<RolePermissionRemoveReply> {
    constructor() {
        super("RolePermissionRemoveReply", []);
    }
    create(value?: PartialMessage<RolePermissionRemoveReply>): RolePermissionRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RolePermissionRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolePermissionRemoveReply): RolePermissionRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RolePermissionRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RolePermissionRemoveReply
 */
export const RolePermissionRemoveReply = new RolePermissionRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleRestoreRequest$Type extends MessageType<RoleRestoreRequest> {
    constructor() {
        super("RoleRestoreRequest", [
            { no: 1, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleRestoreRequest>): RoleRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = "";
        if (value !== undefined)
            reflectionMergePartial<RoleRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleRestoreRequest): RoleRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string role_id */ 1:
                    message.roleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string role_id = 1; */
        if (message.roleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleRestoreRequest
 */
export const RoleRestoreRequest = new RoleRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleRestoreReply$Type extends MessageType<RoleRestoreReply> {
    constructor() {
        super("RoleRestoreReply", []);
    }
    create(value?: PartialMessage<RoleRestoreReply>): RoleRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoleRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleRestoreReply): RoleRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoleRestoreReply
 */
export const RoleRestoreReply = new RoleRestoreReply$Type();
/**
 * @generated ServiceType for protobuf service RolesService
 */
export const RolesService = new ServiceType("RolesService", [
    { name: "RoleGet", options: {}, I: RoleGetRequest, O: RoleGetReply },
    { name: "RoleCreate", options: {}, I: RoleCreateRequest, O: RoleCreateReply },
    { name: "RoleUpdate", options: {}, I: RoleUpdateRequest, O: RoleUpdateReply },
    { name: "RoleDelete", options: {}, I: RoleDeleteRequest, O: RoleDeleteReply },
    { name: "RoleRestore", options: {}, I: RoleRestoreRequest, O: RoleRestoreReply },
    { name: "RolePermissionAssign", options: {}, I: RolePermissionAssignRequest, O: RolePermissionAssignReply },
    { name: "RolePermissionRemove", options: {}, I: RolePermissionRemoveRequest, O: RolePermissionRemoveReply }
]);
