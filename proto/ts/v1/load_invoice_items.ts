// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_invoice_items.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message LoadInvoiceItemUpdateRequest
 */
export interface LoadInvoiceItemUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string invoice_item_id = 2;
     */
    invoiceItemId: string;
    /**
     * @generated from protobuf field: string invoice_item_category_id = 3;
     */
    invoiceItemCategoryId: string;
    /**
     * @generated from protobuf field: int64 units = 4;
     */
    units: number;
    /**
     * @generated from protobuf field: double amount_per_unit = 5;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemUpdateReply
 */
export interface LoadInvoiceItemUpdateReply {
}
/**
 * @generated from protobuf message LoadInvoiceItemAddRequest
 */
export interface LoadInvoiceItemAddRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string invoice_item_category_id = 2;
     */
    invoiceItemCategoryId: string;
    /**
     * @generated from protobuf field: int64 units = 3;
     */
    units: number;
    /**
     * @generated from protobuf field: double amount_per_unit = 4;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemAddReply
 */
export interface LoadInvoiceItemAddReply {
    /**
     * @generated from protobuf field: string invoice_item_id = 1;
     */
    invoiceItemId: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemDeleteRequest
 */
export interface LoadInvoiceItemDeleteRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string invoice_item_id = 2;
     */
    invoiceItemId: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemDeleteReply
 */
export interface LoadInvoiceItemDeleteReply {
}
/**
 * @generated from protobuf message LoadInvoiceItemRetrieveRequest
 */
export interface LoadInvoiceItemRetrieveRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string invoice_item_id = 2;
     */
    invoiceItemId: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemRetrieveReply
 */
export interface LoadInvoiceItemRetrieveReply {
    /**
     * @generated from protobuf field: string invoice_item_category_id = 1;
     */
    invoiceItemCategoryId: string;
    /**
     * @generated from protobuf field: double amount_per_unit = 2;
     */
    amountPerUnit: number;
    /**
     * @generated from protobuf field: int64 units = 3;
     */
    units: number;
    /**
     * @generated from protobuf field: double total_amount = 4;
     */
    totalAmount: number;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: string updated_at = 6;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 7;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemGetForLoadRequest
 */
export interface LoadInvoiceItemGetForLoadRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadInvoiceItemGetForLoadReply
 */
export interface LoadInvoiceItemGetForLoadReply {
    /**
     * @generated from protobuf field: repeated LoadInvoiceItemGetForLoadReply.InvoiceItem invoice_items = 1;
     */
    invoiceItems: LoadInvoiceItemGetForLoadReply_InvoiceItem[];
}
/**
 * @generated from protobuf message LoadInvoiceItemGetForLoadReply.InvoiceItem
 */
export interface LoadInvoiceItemGetForLoadReply_InvoiceItem {
    /**
     * @generated from protobuf field: string invoice_item_id = 1;
     */
    invoiceItemId: string;
    /**
     * @generated from protobuf field: string category_id = 2;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: double amount_per_unit_float = 3;
     */
    amountPerUnitFloat: number;
    /**
     * @generated from protobuf field: string amount_per_unit = 4;
     */
    amountPerUnit: string;
    /**
     * @generated from protobuf field: int64 units = 5;
     */
    units: number;
    /**
     * @generated from protobuf field: string total_amount = 6;
     */
    totalAmount: string;
    /**
     * @generated from protobuf field: string description = 7;
     */
    description: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemUpdateRequest$Type extends MessageType<LoadInvoiceItemUpdateRequest> {
    constructor() {
        super("LoadInvoiceItemUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "invoice_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemUpdateRequest>): LoadInvoiceItemUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoiceItemId = "";
        message.invoiceItemCategoryId = "";
        message.units = 0;
        message.amountPerUnit = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemUpdateRequest): LoadInvoiceItemUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string invoice_item_id */ 2:
                    message.invoiceItemId = reader.string();
                    break;
                case /* string invoice_item_category_id */ 3:
                    message.invoiceItemCategoryId = reader.string();
                    break;
                case /* int64 units */ 4:
                    message.units = reader.int64().toNumber();
                    break;
                case /* double amount_per_unit */ 5:
                    message.amountPerUnit = reader.double();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string invoice_item_id = 2; */
        if (message.invoiceItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoiceItemId);
        /* string invoice_item_category_id = 3; */
        if (message.invoiceItemCategoryId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.invoiceItemCategoryId);
        /* int64 units = 4; */
        if (message.units !== 0)
            writer.tag(4, WireType.Varint).int64(message.units);
        /* double amount_per_unit = 5; */
        if (message.amountPerUnit !== 0)
            writer.tag(5, WireType.Bit64).double(message.amountPerUnit);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemUpdateRequest
 */
export const LoadInvoiceItemUpdateRequest = new LoadInvoiceItemUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemUpdateReply$Type extends MessageType<LoadInvoiceItemUpdateReply> {
    constructor() {
        super("LoadInvoiceItemUpdateReply", []);
    }
    create(value?: PartialMessage<LoadInvoiceItemUpdateReply>): LoadInvoiceItemUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemUpdateReply): LoadInvoiceItemUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoiceItemUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemUpdateReply
 */
export const LoadInvoiceItemUpdateReply = new LoadInvoiceItemUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemAddRequest$Type extends MessageType<LoadInvoiceItemAddRequest> {
    constructor() {
        super("LoadInvoiceItemAddRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemAddRequest>): LoadInvoiceItemAddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoiceItemCategoryId = "";
        message.units = 0;
        message.amountPerUnit = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemAddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemAddRequest): LoadInvoiceItemAddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string invoice_item_category_id */ 2:
                    message.invoiceItemCategoryId = reader.string();
                    break;
                case /* int64 units */ 3:
                    message.units = reader.int64().toNumber();
                    break;
                case /* double amount_per_unit */ 4:
                    message.amountPerUnit = reader.double();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemAddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string invoice_item_category_id = 2; */
        if (message.invoiceItemCategoryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoiceItemCategoryId);
        /* int64 units = 3; */
        if (message.units !== 0)
            writer.tag(3, WireType.Varint).int64(message.units);
        /* double amount_per_unit = 4; */
        if (message.amountPerUnit !== 0)
            writer.tag(4, WireType.Bit64).double(message.amountPerUnit);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemAddRequest
 */
export const LoadInvoiceItemAddRequest = new LoadInvoiceItemAddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemAddReply$Type extends MessageType<LoadInvoiceItemAddReply> {
    constructor() {
        super("LoadInvoiceItemAddReply", [
            { no: 1, name: "invoice_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemAddReply>): LoadInvoiceItemAddReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemAddReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemAddReply): LoadInvoiceItemAddReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invoice_item_id */ 1:
                    message.invoiceItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemAddReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invoice_item_id = 1; */
        if (message.invoiceItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invoiceItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemAddReply
 */
export const LoadInvoiceItemAddReply = new LoadInvoiceItemAddReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemDeleteRequest$Type extends MessageType<LoadInvoiceItemDeleteRequest> {
    constructor() {
        super("LoadInvoiceItemDeleteRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemDeleteRequest>): LoadInvoiceItemDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoiceItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemDeleteRequest): LoadInvoiceItemDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string invoice_item_id */ 2:
                    message.invoiceItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string invoice_item_id = 2; */
        if (message.invoiceItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoiceItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemDeleteRequest
 */
export const LoadInvoiceItemDeleteRequest = new LoadInvoiceItemDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemDeleteReply$Type extends MessageType<LoadInvoiceItemDeleteReply> {
    constructor() {
        super("LoadInvoiceItemDeleteReply", []);
    }
    create(value?: PartialMessage<LoadInvoiceItemDeleteReply>): LoadInvoiceItemDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemDeleteReply): LoadInvoiceItemDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoiceItemDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemDeleteReply
 */
export const LoadInvoiceItemDeleteReply = new LoadInvoiceItemDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemRetrieveRequest$Type extends MessageType<LoadInvoiceItemRetrieveRequest> {
    constructor() {
        super("LoadInvoiceItemRetrieveRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemRetrieveRequest>): LoadInvoiceItemRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoiceItemId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemRetrieveRequest): LoadInvoiceItemRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string invoice_item_id */ 2:
                    message.invoiceItemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string invoice_item_id = 2; */
        if (message.invoiceItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoiceItemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemRetrieveRequest
 */
export const LoadInvoiceItemRetrieveRequest = new LoadInvoiceItemRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemRetrieveReply$Type extends MessageType<LoadInvoiceItemRetrieveReply> {
    constructor() {
        super("LoadInvoiceItemRetrieveReply", [
            { no: 1, name: "invoice_item_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount_per_unit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemRetrieveReply>): LoadInvoiceItemRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceItemCategoryId = "";
        message.amountPerUnit = 0;
        message.units = 0;
        message.totalAmount = 0;
        message.description = "";
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemRetrieveReply): LoadInvoiceItemRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invoice_item_category_id */ 1:
                    message.invoiceItemCategoryId = reader.string();
                    break;
                case /* double amount_per_unit */ 2:
                    message.amountPerUnit = reader.double();
                    break;
                case /* int64 units */ 3:
                    message.units = reader.int64().toNumber();
                    break;
                case /* double total_amount */ 4:
                    message.totalAmount = reader.double();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* string updated_at */ 6:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invoice_item_category_id = 1; */
        if (message.invoiceItemCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invoiceItemCategoryId);
        /* double amount_per_unit = 2; */
        if (message.amountPerUnit !== 0)
            writer.tag(2, WireType.Bit64).double(message.amountPerUnit);
        /* int64 units = 3; */
        if (message.units !== 0)
            writer.tag(3, WireType.Varint).int64(message.units);
        /* double total_amount = 4; */
        if (message.totalAmount !== 0)
            writer.tag(4, WireType.Bit64).double(message.totalAmount);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string updated_at = 6; */
        if (message.updatedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemRetrieveReply
 */
export const LoadInvoiceItemRetrieveReply = new LoadInvoiceItemRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemGetForLoadRequest$Type extends MessageType<LoadInvoiceItemGetForLoadRequest> {
    constructor() {
        super("LoadInvoiceItemGetForLoadRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemGetForLoadRequest>): LoadInvoiceItemGetForLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemGetForLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemGetForLoadRequest): LoadInvoiceItemGetForLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemGetForLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemGetForLoadRequest
 */
export const LoadInvoiceItemGetForLoadRequest = new LoadInvoiceItemGetForLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemGetForLoadReply$Type extends MessageType<LoadInvoiceItemGetForLoadReply> {
    constructor() {
        super("LoadInvoiceItemGetForLoadReply", [
            { no: 1, name: "invoice_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadInvoiceItemGetForLoadReply_InvoiceItem }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemGetForLoadReply>): LoadInvoiceItemGetForLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceItems = [];
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemGetForLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemGetForLoadReply): LoadInvoiceItemGetForLoadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadInvoiceItemGetForLoadReply.InvoiceItem invoice_items */ 1:
                    message.invoiceItems.push(LoadInvoiceItemGetForLoadReply_InvoiceItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemGetForLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadInvoiceItemGetForLoadReply.InvoiceItem invoice_items = 1; */
        for (let i = 0; i < message.invoiceItems.length; i++)
            LoadInvoiceItemGetForLoadReply_InvoiceItem.internalBinaryWrite(message.invoiceItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemGetForLoadReply
 */
export const LoadInvoiceItemGetForLoadReply = new LoadInvoiceItemGetForLoadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceItemGetForLoadReply_InvoiceItem$Type extends MessageType<LoadInvoiceItemGetForLoadReply_InvoiceItem> {
    constructor() {
        super("LoadInvoiceItemGetForLoadReply.InvoiceItem", [
            { no: 1, name: "invoice_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount_per_unit_float", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "amount_per_unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "units", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "total_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceItemGetForLoadReply_InvoiceItem>): LoadInvoiceItemGetForLoadReply_InvoiceItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceItemId = "";
        message.categoryId = "";
        message.amountPerUnitFloat = 0;
        message.amountPerUnit = "";
        message.units = 0;
        message.totalAmount = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceItemGetForLoadReply_InvoiceItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceItemGetForLoadReply_InvoiceItem): LoadInvoiceItemGetForLoadReply_InvoiceItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invoice_item_id */ 1:
                    message.invoiceItemId = reader.string();
                    break;
                case /* string category_id */ 2:
                    message.categoryId = reader.string();
                    break;
                case /* double amount_per_unit_float */ 3:
                    message.amountPerUnitFloat = reader.double();
                    break;
                case /* string amount_per_unit */ 4:
                    message.amountPerUnit = reader.string();
                    break;
                case /* int64 units */ 5:
                    message.units = reader.int64().toNumber();
                    break;
                case /* string total_amount */ 6:
                    message.totalAmount = reader.string();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceItemGetForLoadReply_InvoiceItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invoice_item_id = 1; */
        if (message.invoiceItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invoiceItemId);
        /* string category_id = 2; */
        if (message.categoryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.categoryId);
        /* double amount_per_unit_float = 3; */
        if (message.amountPerUnitFloat !== 0)
            writer.tag(3, WireType.Bit64).double(message.amountPerUnitFloat);
        /* string amount_per_unit = 4; */
        if (message.amountPerUnit !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amountPerUnit);
        /* int64 units = 5; */
        if (message.units !== 0)
            writer.tag(5, WireType.Varint).int64(message.units);
        /* string total_amount = 6; */
        if (message.totalAmount !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.totalAmount);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceItemGetForLoadReply.InvoiceItem
 */
export const LoadInvoiceItemGetForLoadReply_InvoiceItem = new LoadInvoiceItemGetForLoadReply_InvoiceItem$Type();
/**
 * @generated ServiceType for protobuf service LoadsInvoiceItemService
 */
export const LoadsInvoiceItemService = new ServiceType("LoadsInvoiceItemService", [
    { name: "LoadInvoiceItemAdd", options: {}, I: LoadInvoiceItemAddRequest, O: LoadInvoiceItemAddReply },
    { name: "LoadInvoiceItemUpdate", options: {}, I: LoadInvoiceItemUpdateRequest, O: LoadInvoiceItemUpdateReply },
    { name: "LoadInvoiceItemDelete", options: {}, I: LoadInvoiceItemDeleteRequest, O: LoadInvoiceItemDeleteReply },
    { name: "LoadInvoiceItemRetrieve", options: {}, I: LoadInvoiceItemRetrieveRequest, O: LoadInvoiceItemRetrieveReply },
    { name: "LoadInvoiceItemGetForLoad", options: {}, I: LoadInvoiceItemGetForLoadRequest, O: LoadInvoiceItemGetForLoadReply }
]);
