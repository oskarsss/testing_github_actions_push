// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlements.transaction_category.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SettlementTransactionCategoryModel_Category } from "./models/model_settlement.transaction_category";
import { SettlementTransactionCategoryModel_MasterType } from "./models/model_settlement.transaction_category";
import { SettlementTransactionCategoryModel_RecurringTransactionCyclePeriodFrequency } from "./models/model_settlement.transaction_category";
import { SettlementTransactionCategoryModel_EntityType } from "./models/model_settlement.transaction_category";
import { SettlementTransactionCategoryModel_Type } from "./models/model_settlement.transaction_category";
/**
 * SettlementTransactionCategoryRestore
 *
 * @generated from protobuf message SettlementTransactionCategoryRestoreRequest
 */
export interface SettlementTransactionCategoryRestoreRequest {
    /**
     * @generated from protobuf field: string settlement_transaction_category_id = 1;
     */
    settlementTransactionCategoryId: string;
}
/**
 * @generated from protobuf message SettlementTransactionCategoryRestoreReply
 */
export interface SettlementTransactionCategoryRestoreReply {
}
/**
 * SettlementTransactionCategoryCreate
 *
 * @generated from protobuf message SettlementTransactionCategoryCreateRequest
 */
export interface SettlementTransactionCategoryCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.Type type = 2;
     */
    type: SettlementTransactionCategoryModel_Type;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.EntityType entity_type = 3;
     */
    entityType: SettlementTransactionCategoryModel_EntityType;
    /**
     * @generated from protobuf field: repeated string driver_types = 4;
     */
    driverTypes: string[];
    /**
     * @generated from protobuf field: bool required = 5;
     */
    required: boolean;
    /**
     * @generated from protobuf field: bool recurring = 6;
     */
    recurring: boolean;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency recurring_transaction_cycle_period_frequency = 7;
     */
    recurringTransactionCyclePeriodFrequency: SettlementTransactionCategoryModel_RecurringTransactionCyclePeriodFrequency;
    /**
     * @generated from protobuf field: optional SettlementTransactionCategoryModel.MasterType master_type = 8;
     */
    masterType?: SettlementTransactionCategoryModel_MasterType;
}
/**
 * @generated from protobuf message SettlementTransactionCategoryCreateReply
 */
export interface SettlementTransactionCategoryCreateReply {
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.Category settlement_transaction_category = 1;
     */
    settlementTransactionCategory?: SettlementTransactionCategoryModel_Category;
}
/**
 * SettlementTransactionCategoryRetrieve
 *
 * @generated from protobuf message SettlementTransactionCategoryRetrieveRequest
 */
export interface SettlementTransactionCategoryRetrieveRequest {
    /**
     * @generated from protobuf field: string settlement_transaction_category_id = 1;
     */
    settlementTransactionCategoryId: string;
}
/**
 * @generated from protobuf message SettlementTransactionCategoryRetrieveReply
 */
export interface SettlementTransactionCategoryRetrieveReply {
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.Category settlement_transaction_category = 1;
     */
    settlementTransactionCategory?: SettlementTransactionCategoryModel_Category;
}
/**
 * SettlementTransactionCategoryGet
 *
 * @generated from protobuf message SettlementTransactionCategoryGetRequest
 */
export interface SettlementTransactionCategoryGetRequest {
}
/**
 * @generated from protobuf message SettlementTransactionCategoryGetReply
 */
export interface SettlementTransactionCategoryGetReply {
    /**
     * @generated from protobuf field: repeated SettlementTransactionCategoryModel.Category settlement_transaction_category = 1;
     */
    settlementTransactionCategory: SettlementTransactionCategoryModel_Category[];
}
/**
 * SettlementTransactionCategoryUpdate
 *
 * @generated from protobuf message SettlementTransactionCategoryUpdateRequest
 */
export interface SettlementTransactionCategoryUpdateRequest {
    /**
     * @generated from protobuf field: string settlement_transaction_category_id = 1;
     */
    settlementTransactionCategoryId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.Type type = 3;
     */
    type: SettlementTransactionCategoryModel_Type;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.EntityType entity_type = 4;
     */
    entityType: SettlementTransactionCategoryModel_EntityType;
    /**
     * @generated from protobuf field: repeated string driver_types = 5;
     */
    driverTypes: string[];
    /**
     * @generated from protobuf field: bool required = 6;
     */
    required: boolean;
    /**
     * @generated from protobuf field: bool recurring = 7;
     */
    recurring: boolean;
    /**
     * @generated from protobuf field: optional SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency recurring_transaction_cycle_period_frequency = 8;
     */
    recurringTransactionCyclePeriodFrequency?: SettlementTransactionCategoryModel_RecurringTransactionCyclePeriodFrequency;
    /**
     * @generated from protobuf field: optional SettlementTransactionCategoryModel.MasterType master_type = 9;
     */
    masterType?: SettlementTransactionCategoryModel_MasterType;
}
/**
 * @generated from protobuf message SettlementTransactionCategoryUpdateReply
 */
export interface SettlementTransactionCategoryUpdateReply {
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.Category settlement_transaction_category = 1;
     */
    settlementTransactionCategory?: SettlementTransactionCategoryModel_Category;
}
/**
 * SettlementTransactionCategoryDelete
 *
 * @generated from protobuf message SettlementTransactionCategoryDeleteRequest
 */
export interface SettlementTransactionCategoryDeleteRequest {
    /**
     * @generated from protobuf field: string settlement_transaction_category_id = 1;
     */
    settlementTransactionCategoryId: string;
}
/**
 * @generated from protobuf message SettlementTransactionCategoryDeleteReply
 */
export interface SettlementTransactionCategoryDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryRestoreRequest$Type extends MessageType<SettlementTransactionCategoryRestoreRequest> {
    constructor() {
        super("SettlementTransactionCategoryRestoreRequest", [
            { no: 1, name: "settlement_transaction_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryRestoreRequest>): SettlementTransactionCategoryRestoreRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementTransactionCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryRestoreRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryRestoreRequest): SettlementTransactionCategoryRestoreRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string settlement_transaction_category_id */ 1:
                    message.settlementTransactionCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryRestoreRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string settlement_transaction_category_id = 1; */
        if (message.settlementTransactionCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.settlementTransactionCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryRestoreRequest
 */
export const SettlementTransactionCategoryRestoreRequest = new SettlementTransactionCategoryRestoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryRestoreReply$Type extends MessageType<SettlementTransactionCategoryRestoreReply> {
    constructor() {
        super("SettlementTransactionCategoryRestoreReply", []);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryRestoreReply>): SettlementTransactionCategoryRestoreReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryRestoreReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryRestoreReply): SettlementTransactionCategoryRestoreReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionCategoryRestoreReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryRestoreReply
 */
export const SettlementTransactionCategoryRestoreReply = new SettlementTransactionCategoryRestoreReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryCreateRequest$Type extends MessageType<SettlementTransactionCategoryCreateRequest> {
    constructor() {
        super("SettlementTransactionCategoryCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["SettlementTransactionCategoryModel.Type", SettlementTransactionCategoryModel_Type, "TYPE_"] },
            { no: 3, name: "entity_type", kind: "enum", T: () => ["SettlementTransactionCategoryModel.EntityType", SettlementTransactionCategoryModel_EntityType, "ENTITY_TYPE_"] },
            { no: 4, name: "driver_types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "recurring", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "recurring_transaction_cycle_period_frequency", kind: "enum", T: () => ["SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency", SettlementTransactionCategoryModel_RecurringTransactionCyclePeriodFrequency, "RECURRING_TRANSACTION_CYCLE_PERIOD_FREQUENCY_"] },
            { no: 8, name: "master_type", kind: "enum", opt: true, T: () => ["SettlementTransactionCategoryModel.MasterType", SettlementTransactionCategoryModel_MasterType, "MASTER_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryCreateRequest>): SettlementTransactionCategoryCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = 0;
        message.entityType = 0;
        message.driverTypes = [];
        message.required = false;
        message.recurring = false;
        message.recurringTransactionCyclePeriodFrequency = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryCreateRequest): SettlementTransactionCategoryCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* SettlementTransactionCategoryModel.Type type */ 2:
                    message.type = reader.int32();
                    break;
                case /* SettlementTransactionCategoryModel.EntityType entity_type */ 3:
                    message.entityType = reader.int32();
                    break;
                case /* repeated string driver_types */ 4:
                    message.driverTypes.push(reader.string());
                    break;
                case /* bool required */ 5:
                    message.required = reader.bool();
                    break;
                case /* bool recurring */ 6:
                    message.recurring = reader.bool();
                    break;
                case /* SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency recurring_transaction_cycle_period_frequency */ 7:
                    message.recurringTransactionCyclePeriodFrequency = reader.int32();
                    break;
                case /* optional SettlementTransactionCategoryModel.MasterType master_type */ 8:
                    message.masterType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* SettlementTransactionCategoryModel.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* SettlementTransactionCategoryModel.EntityType entity_type = 3; */
        if (message.entityType !== 0)
            writer.tag(3, WireType.Varint).int32(message.entityType);
        /* repeated string driver_types = 4; */
        for (let i = 0; i < message.driverTypes.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.driverTypes[i]);
        /* bool required = 5; */
        if (message.required !== false)
            writer.tag(5, WireType.Varint).bool(message.required);
        /* bool recurring = 6; */
        if (message.recurring !== false)
            writer.tag(6, WireType.Varint).bool(message.recurring);
        /* SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency recurring_transaction_cycle_period_frequency = 7; */
        if (message.recurringTransactionCyclePeriodFrequency !== 0)
            writer.tag(7, WireType.Varint).int32(message.recurringTransactionCyclePeriodFrequency);
        /* optional SettlementTransactionCategoryModel.MasterType master_type = 8; */
        if (message.masterType !== undefined)
            writer.tag(8, WireType.Varint).int32(message.masterType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryCreateRequest
 */
export const SettlementTransactionCategoryCreateRequest = new SettlementTransactionCategoryCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryCreateReply$Type extends MessageType<SettlementTransactionCategoryCreateReply> {
    constructor() {
        super("SettlementTransactionCategoryCreateReply", [
            { no: 1, name: "settlement_transaction_category", kind: "message", T: () => SettlementTransactionCategoryModel_Category }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryCreateReply>): SettlementTransactionCategoryCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryCreateReply): SettlementTransactionCategoryCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SettlementTransactionCategoryModel.Category settlement_transaction_category */ 1:
                    message.settlementTransactionCategory = SettlementTransactionCategoryModel_Category.internalBinaryRead(reader, reader.uint32(), options, message.settlementTransactionCategory);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SettlementTransactionCategoryModel.Category settlement_transaction_category = 1; */
        if (message.settlementTransactionCategory)
            SettlementTransactionCategoryModel_Category.internalBinaryWrite(message.settlementTransactionCategory, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryCreateReply
 */
export const SettlementTransactionCategoryCreateReply = new SettlementTransactionCategoryCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryRetrieveRequest$Type extends MessageType<SettlementTransactionCategoryRetrieveRequest> {
    constructor() {
        super("SettlementTransactionCategoryRetrieveRequest", [
            { no: 1, name: "settlement_transaction_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryRetrieveRequest>): SettlementTransactionCategoryRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementTransactionCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryRetrieveRequest): SettlementTransactionCategoryRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string settlement_transaction_category_id */ 1:
                    message.settlementTransactionCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string settlement_transaction_category_id = 1; */
        if (message.settlementTransactionCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.settlementTransactionCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryRetrieveRequest
 */
export const SettlementTransactionCategoryRetrieveRequest = new SettlementTransactionCategoryRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryRetrieveReply$Type extends MessageType<SettlementTransactionCategoryRetrieveReply> {
    constructor() {
        super("SettlementTransactionCategoryRetrieveReply", [
            { no: 1, name: "settlement_transaction_category", kind: "message", T: () => SettlementTransactionCategoryModel_Category }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryRetrieveReply>): SettlementTransactionCategoryRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryRetrieveReply): SettlementTransactionCategoryRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SettlementTransactionCategoryModel.Category settlement_transaction_category */ 1:
                    message.settlementTransactionCategory = SettlementTransactionCategoryModel_Category.internalBinaryRead(reader, reader.uint32(), options, message.settlementTransactionCategory);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SettlementTransactionCategoryModel.Category settlement_transaction_category = 1; */
        if (message.settlementTransactionCategory)
            SettlementTransactionCategoryModel_Category.internalBinaryWrite(message.settlementTransactionCategory, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryRetrieveReply
 */
export const SettlementTransactionCategoryRetrieveReply = new SettlementTransactionCategoryRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryGetRequest$Type extends MessageType<SettlementTransactionCategoryGetRequest> {
    constructor() {
        super("SettlementTransactionCategoryGetRequest", []);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryGetRequest>): SettlementTransactionCategoryGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryGetRequest): SettlementTransactionCategoryGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionCategoryGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryGetRequest
 */
export const SettlementTransactionCategoryGetRequest = new SettlementTransactionCategoryGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryGetReply$Type extends MessageType<SettlementTransactionCategoryGetReply> {
    constructor() {
        super("SettlementTransactionCategoryGetReply", [
            { no: 1, name: "settlement_transaction_category", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementTransactionCategoryModel_Category }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryGetReply>): SettlementTransactionCategoryGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementTransactionCategory = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryGetReply): SettlementTransactionCategoryGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SettlementTransactionCategoryModel.Category settlement_transaction_category */ 1:
                    message.settlementTransactionCategory.push(SettlementTransactionCategoryModel_Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SettlementTransactionCategoryModel.Category settlement_transaction_category = 1; */
        for (let i = 0; i < message.settlementTransactionCategory.length; i++)
            SettlementTransactionCategoryModel_Category.internalBinaryWrite(message.settlementTransactionCategory[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryGetReply
 */
export const SettlementTransactionCategoryGetReply = new SettlementTransactionCategoryGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryUpdateRequest$Type extends MessageType<SettlementTransactionCategoryUpdateRequest> {
    constructor() {
        super("SettlementTransactionCategoryUpdateRequest", [
            { no: 1, name: "settlement_transaction_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["SettlementTransactionCategoryModel.Type", SettlementTransactionCategoryModel_Type, "TYPE_"] },
            { no: 4, name: "entity_type", kind: "enum", T: () => ["SettlementTransactionCategoryModel.EntityType", SettlementTransactionCategoryModel_EntityType, "ENTITY_TYPE_"] },
            { no: 5, name: "driver_types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "recurring", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "recurring_transaction_cycle_period_frequency", kind: "enum", opt: true, T: () => ["SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency", SettlementTransactionCategoryModel_RecurringTransactionCyclePeriodFrequency, "RECURRING_TRANSACTION_CYCLE_PERIOD_FREQUENCY_"] },
            { no: 9, name: "master_type", kind: "enum", opt: true, T: () => ["SettlementTransactionCategoryModel.MasterType", SettlementTransactionCategoryModel_MasterType, "MASTER_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryUpdateRequest>): SettlementTransactionCategoryUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementTransactionCategoryId = "";
        message.name = "";
        message.type = 0;
        message.entityType = 0;
        message.driverTypes = [];
        message.required = false;
        message.recurring = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryUpdateRequest): SettlementTransactionCategoryUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string settlement_transaction_category_id */ 1:
                    message.settlementTransactionCategoryId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* SettlementTransactionCategoryModel.Type type */ 3:
                    message.type = reader.int32();
                    break;
                case /* SettlementTransactionCategoryModel.EntityType entity_type */ 4:
                    message.entityType = reader.int32();
                    break;
                case /* repeated string driver_types */ 5:
                    message.driverTypes.push(reader.string());
                    break;
                case /* bool required */ 6:
                    message.required = reader.bool();
                    break;
                case /* bool recurring */ 7:
                    message.recurring = reader.bool();
                    break;
                case /* optional SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency recurring_transaction_cycle_period_frequency */ 8:
                    message.recurringTransactionCyclePeriodFrequency = reader.int32();
                    break;
                case /* optional SettlementTransactionCategoryModel.MasterType master_type */ 9:
                    message.masterType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string settlement_transaction_category_id = 1; */
        if (message.settlementTransactionCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.settlementTransactionCategoryId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* SettlementTransactionCategoryModel.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* SettlementTransactionCategoryModel.EntityType entity_type = 4; */
        if (message.entityType !== 0)
            writer.tag(4, WireType.Varint).int32(message.entityType);
        /* repeated string driver_types = 5; */
        for (let i = 0; i < message.driverTypes.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.driverTypes[i]);
        /* bool required = 6; */
        if (message.required !== false)
            writer.tag(6, WireType.Varint).bool(message.required);
        /* bool recurring = 7; */
        if (message.recurring !== false)
            writer.tag(7, WireType.Varint).bool(message.recurring);
        /* optional SettlementTransactionCategoryModel.RecurringTransactionCyclePeriodFrequency recurring_transaction_cycle_period_frequency = 8; */
        if (message.recurringTransactionCyclePeriodFrequency !== undefined)
            writer.tag(8, WireType.Varint).int32(message.recurringTransactionCyclePeriodFrequency);
        /* optional SettlementTransactionCategoryModel.MasterType master_type = 9; */
        if (message.masterType !== undefined)
            writer.tag(9, WireType.Varint).int32(message.masterType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryUpdateRequest
 */
export const SettlementTransactionCategoryUpdateRequest = new SettlementTransactionCategoryUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryUpdateReply$Type extends MessageType<SettlementTransactionCategoryUpdateReply> {
    constructor() {
        super("SettlementTransactionCategoryUpdateReply", [
            { no: 1, name: "settlement_transaction_category", kind: "message", T: () => SettlementTransactionCategoryModel_Category }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryUpdateReply>): SettlementTransactionCategoryUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryUpdateReply): SettlementTransactionCategoryUpdateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SettlementTransactionCategoryModel.Category settlement_transaction_category */ 1:
                    message.settlementTransactionCategory = SettlementTransactionCategoryModel_Category.internalBinaryRead(reader, reader.uint32(), options, message.settlementTransactionCategory);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SettlementTransactionCategoryModel.Category settlement_transaction_category = 1; */
        if (message.settlementTransactionCategory)
            SettlementTransactionCategoryModel_Category.internalBinaryWrite(message.settlementTransactionCategory, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryUpdateReply
 */
export const SettlementTransactionCategoryUpdateReply = new SettlementTransactionCategoryUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryDeleteRequest$Type extends MessageType<SettlementTransactionCategoryDeleteRequest> {
    constructor() {
        super("SettlementTransactionCategoryDeleteRequest", [
            { no: 1, name: "settlement_transaction_category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryDeleteRequest>): SettlementTransactionCategoryDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlementTransactionCategoryId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryDeleteRequest): SettlementTransactionCategoryDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string settlement_transaction_category_id */ 1:
                    message.settlementTransactionCategoryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementTransactionCategoryDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string settlement_transaction_category_id = 1; */
        if (message.settlementTransactionCategoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.settlementTransactionCategoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryDeleteRequest
 */
export const SettlementTransactionCategoryDeleteRequest = new SettlementTransactionCategoryDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementTransactionCategoryDeleteReply$Type extends MessageType<SettlementTransactionCategoryDeleteReply> {
    constructor() {
        super("SettlementTransactionCategoryDeleteReply", []);
    }
    create(value?: PartialMessage<SettlementTransactionCategoryDeleteReply>): SettlementTransactionCategoryDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementTransactionCategoryDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementTransactionCategoryDeleteReply): SettlementTransactionCategoryDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementTransactionCategoryDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementTransactionCategoryDeleteReply
 */
export const SettlementTransactionCategoryDeleteReply = new SettlementTransactionCategoryDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service SettlementTransactionCategoriesService
 */
export const SettlementTransactionCategoriesService = new ServiceType("SettlementTransactionCategoriesService", [
    { name: "SettlementTransactionCategoryCreate", options: {}, I: SettlementTransactionCategoryCreateRequest, O: SettlementTransactionCategoryCreateReply },
    { name: "SettlementTransactionCategoryRetrieve", options: {}, I: SettlementTransactionCategoryRetrieveRequest, O: SettlementTransactionCategoryRetrieveReply },
    { name: "SettlementTransactionCategoryGet", options: {}, I: SettlementTransactionCategoryGetRequest, O: SettlementTransactionCategoryGetReply },
    { name: "SettlementTransactionCategoryUpdate", options: {}, I: SettlementTransactionCategoryUpdateRequest, O: SettlementTransactionCategoryUpdateReply },
    { name: "SettlementTransactionCategoryDelete", options: {}, I: SettlementTransactionCategoryDeleteRequest, O: SettlementTransactionCategoryDeleteReply },
    { name: "SettlementTransactionCategoryRestore", options: {}, I: SettlementTransactionCategoryRestoreRequest, O: SettlementTransactionCategoryRestoreReply }
]);
