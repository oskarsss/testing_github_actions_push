// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/account.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserModel_Status } from "./models/model_user";
/**
 * ====================
 * RequestCode
 * ====================
 *
 * @generated from protobuf message GetAccountRequest
 */
export interface GetAccountRequest {
}
/**
 * @generated from protobuf message GetAccountReply
 */
export interface GetAccountReply {
    /**
     * @generated from protobuf field: GetAccountReply.User user = 1;
     */
    user?: GetAccountReply_User;
    /**
     * @generated from protobuf field: repeated GetAccountReply.Company companies = 2;
     */
    companies: GetAccountReply_Company[];
    /**
     * @generated from protobuf field: GetAccountReply.Chatpilot chatpilot = 3;
     */
    chatpilot?: GetAccountReply_Chatpilot;
}
/**
 * @generated from protobuf message GetAccountReply.User
 */
export interface GetAccountReply_User {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string first_name = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 3;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 5;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string selfie_url = 6;
     */
    selfieUrl: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 7;
     */
    selfieThumbUrl: string;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: UserModel.Status status = 9;
     */
    status: UserModel_Status;
}
/**
 * @generated from protobuf message GetAccountReply.Company
 */
export interface GetAccountReply_Company {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string role_id = 2;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 5;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string light_logo_url = 6;
     */
    lightLogoUrl: string;
    /**
     * @generated from protobuf field: string dark_logo_url = 7;
     */
    darkLogoUrl: string;
    /**
     * @generated from protobuf field: int64 mc = 8;
     */
    mc: number;
    /**
     * @generated from protobuf field: int64 dot = 9;
     */
    dot: number;
    /**
     * @generated from protobuf field: string status = 10;
     */
    status: string;
    /**
     * @generated from protobuf field: string timezone = 11;
     */
    timezone: string;
    /**
     * @generated from protobuf field: string currency = 12;
     */
    currency: string;
    /**
     * @generated from protobuf field: string address_line_1 = 13;
     */
    addressLine1: string;
    /**
     * @generated from protobuf field: string address_line_2 = 14;
     */
    addressLine2: string;
    /**
     * @generated from protobuf field: string address_city = 15;
     */
    addressCity: string;
    /**
     * @generated from protobuf field: string address_state = 16;
     */
    addressState: string;
    /**
     * @generated from protobuf field: string address_postal_code = 17;
     */
    addressPostalCode: string;
    /**
     * @generated from protobuf field: string ein = 18;
     */
    ein: string;
    /**
     * @generated from protobuf field: string load_id_prefix = 19;
     */
    loadIdPrefix: string;
    /**
     * @generated from protobuf field: int64 load_id_start_number = 20;
     */
    loadIdStartNumber: number;
    /**
     * @generated from protobuf field: bool enforce_second_step_auth = 21;
     */
    enforceSecondStepAuth: boolean;
    /**
     * @generated from protobuf field: bool enforce_strong_password = 22;
     */
    enforceStrongPassword: boolean;
    /**
     * @generated from protobuf field: int64 settlement_id_start_number = 23;
     */
    settlementIdStartNumber: number;
    /**
     * @generated from protobuf field: string settlement_logo_url = 24;
     */
    settlementLogoUrl: string;
    /**
     * @generated from protobuf field: string settlement_company_name = 25;
     */
    settlementCompanyName: string;
    /**
     * @generated from protobuf field: string settlement_phone_number = 26;
     */
    settlementPhoneNumber: string;
    /**
     * @generated from protobuf field: string settlement_fax = 27;
     */
    settlementFax: string;
    /**
     * @generated from protobuf field: string settlement_email = 28;
     */
    settlementEmail: string;
    /**
     * @generated from protobuf field: string settlement_address_line_1 = 29;
     */
    settlementAddressLine1: string;
    /**
     * @generated from protobuf field: string settlement_address_line_2 = 30;
     */
    settlementAddressLine2: string;
    /**
     * @generated from protobuf field: string settlement_address_city = 31;
     */
    settlementAddressCity: string;
    /**
     * @generated from protobuf field: string settlement_address_state = 32;
     */
    settlementAddressState: string;
    /**
     * @generated from protobuf field: string settlement_address_postal_code = 33;
     */
    settlementAddressPostalCode: string;
    /**
     * @generated from protobuf field: string settlement_reply_to_emails = 34;
     */
    settlementReplyToEmails: string;
    /**
     * @generated from protobuf field: string settlement_cc_emails = 35;
     */
    settlementCcEmails: string;
    /**
     * @generated from protobuf field: map<string, bool> permissions = 36;
     */
    permissions: {
        [key: string]: boolean;
    };
    /**
     * @generated from protobuf field: bool onboarding_completed = 37;
     */
    onboardingCompleted: boolean;
}
/**
 * @generated from protobuf message GetAccountReply.Chatpilot
 */
export interface GetAccountReply_Chatpilot {
    /**
     * @generated from protobuf field: string chatpilot_user_id = 1;
     */
    chatpilotUserId: string;
    /**
     * @generated from protobuf field: string chatpilot_token = 2;
     */
    chatpilotToken: string;
}
/**
 * @generated from protobuf message AccountUpdateRequest
 */
export interface AccountUpdateRequest {
    /**
     * @generated from protobuf field: string first_name = 1;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 2;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string phone_number = 3;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 5;
     */
    secondStepAuthEnabled: boolean;
}
/**
 * @generated from protobuf message AccountUpdateReply
 */
export interface AccountUpdateReply {
}
/**
 * Get Chat Pilot Account
 *
 * @generated from protobuf message GetChatPilotAccountRequest
 */
export interface GetChatPilotAccountRequest {
}
/**
 * @generated from protobuf message GetChatPilotAccountReply
 */
export interface GetChatPilotAccountReply {
    /**
     * @generated from protobuf field: string chatpilot_token = 1;
     */
    chatpilotToken: string;
}
/**
 * @generated from protobuf message PasswordUpdateRequest
 */
export interface PasswordUpdateRequest {
    /**
     * @generated from protobuf field: string current_password = 1;
     */
    currentPassword: string;
    /**
     * @generated from protobuf field: string new_password = 2;
     */
    newPassword: string;
}
/**
 * @generated from protobuf message PasswordUpdateReply
 */
export interface PasswordUpdateReply {
}
/**
 * @generated from protobuf message AccountSelfieUploadRequest
 */
export interface AccountSelfieUploadRequest {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
    /**
     * @generated from protobuf field: string thumb_file_id = 2;
     */
    thumbFileId: string;
}
/**
 * @generated from protobuf message AccountSelfieUploadReply
 */
export interface AccountSelfieUploadReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountRequest$Type extends MessageType<GetAccountRequest> {
    constructor() {
        super("GetAccountRequest", []);
    }
    create(value?: PartialMessage<GetAccountRequest>): GetAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountRequest): GetAccountRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAccountRequest
 */
export const GetAccountRequest = new GetAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountReply$Type extends MessageType<GetAccountReply> {
    constructor() {
        super("GetAccountReply", [
            { no: 1, name: "user", kind: "message", T: () => GetAccountReply_User },
            { no: 2, name: "companies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetAccountReply_Company },
            { no: 3, name: "chatpilot", kind: "message", T: () => GetAccountReply_Chatpilot }
        ]);
    }
    create(value?: PartialMessage<GetAccountReply>): GetAccountReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companies = [];
        if (value !== undefined)
            reflectionMergePartial<GetAccountReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountReply): GetAccountReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetAccountReply.User user */ 1:
                    message.user = GetAccountReply_User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated GetAccountReply.Company companies */ 2:
                    message.companies.push(GetAccountReply_Company.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GetAccountReply.Chatpilot chatpilot */ 3:
                    message.chatpilot = GetAccountReply_Chatpilot.internalBinaryRead(reader, reader.uint32(), options, message.chatpilot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetAccountReply.User user = 1; */
        if (message.user)
            GetAccountReply_User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetAccountReply.Company companies = 2; */
        for (let i = 0; i < message.companies.length; i++)
            GetAccountReply_Company.internalBinaryWrite(message.companies[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetAccountReply.Chatpilot chatpilot = 3; */
        if (message.chatpilot)
            GetAccountReply_Chatpilot.internalBinaryWrite(message.chatpilot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAccountReply
 */
export const GetAccountReply = new GetAccountReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountReply_User$Type extends MessageType<GetAccountReply_User> {
    constructor() {
        super("GetAccountReply.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "selfie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "status", kind: "enum", T: () => ["UserModel.Status", UserModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<GetAccountReply_User>): GetAccountReply_User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phoneNumber = "";
        message.selfieUrl = "";
        message.selfieThumbUrl = "";
        message.secondStepAuthEnabled = false;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAccountReply_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountReply_User): GetAccountReply_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string first_name */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 3:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 5:
                    message.phoneNumber = reader.string();
                    break;
                case /* string selfie_url */ 6:
                    message.selfieUrl = reader.string();
                    break;
                case /* string selfie_thumb_url */ 7:
                    message.selfieThumbUrl = reader.string();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* UserModel.Status status */ 9:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountReply_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string first_name = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 3; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 5; */
        if (message.phoneNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.phoneNumber);
        /* string selfie_url = 6; */
        if (message.selfieUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.selfieUrl);
        /* string selfie_thumb_url = 7; */
        if (message.selfieThumbUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.selfieThumbUrl);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* UserModel.Status status = 9; */
        if (message.status !== 0)
            writer.tag(9, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAccountReply.User
 */
export const GetAccountReply_User = new GetAccountReply_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountReply_Company$Type extends MessageType<GetAccountReply_Company> {
    constructor() {
        super("GetAccountReply.Company", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "light_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "dark_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "mc", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "dot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "address_line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "address_line_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "address_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "address_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "address_postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "ein", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "load_id_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "load_id_start_number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 21, name: "enforce_second_step_auth", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "enforce_strong_password", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "settlement_id_start_number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 24, name: "settlement_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "settlement_company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "settlement_phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "settlement_fax", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "settlement_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "settlement_address_line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "settlement_address_line_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "settlement_address_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "settlement_address_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 33, name: "settlement_address_postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "settlement_reply_to_emails", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 35, name: "settlement_cc_emails", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "permissions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 37, name: "onboarding_completed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetAccountReply_Company>): GetAccountReply_Company {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.roleId = "";
        message.name = "";
        message.email = "";
        message.phoneNumber = "";
        message.lightLogoUrl = "";
        message.darkLogoUrl = "";
        message.mc = 0;
        message.dot = 0;
        message.status = "";
        message.timezone = "";
        message.currency = "";
        message.addressLine1 = "";
        message.addressLine2 = "";
        message.addressCity = "";
        message.addressState = "";
        message.addressPostalCode = "";
        message.ein = "";
        message.loadIdPrefix = "";
        message.loadIdStartNumber = 0;
        message.enforceSecondStepAuth = false;
        message.enforceStrongPassword = false;
        message.settlementIdStartNumber = 0;
        message.settlementLogoUrl = "";
        message.settlementCompanyName = "";
        message.settlementPhoneNumber = "";
        message.settlementFax = "";
        message.settlementEmail = "";
        message.settlementAddressLine1 = "";
        message.settlementAddressLine2 = "";
        message.settlementAddressCity = "";
        message.settlementAddressState = "";
        message.settlementAddressPostalCode = "";
        message.settlementReplyToEmails = "";
        message.settlementCcEmails = "";
        message.permissions = {};
        message.onboardingCompleted = false;
        if (value !== undefined)
            reflectionMergePartial<GetAccountReply_Company>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountReply_Company): GetAccountReply_Company {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string role_id */ 2:
                    message.roleId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 5:
                    message.phoneNumber = reader.string();
                    break;
                case /* string light_logo_url */ 6:
                    message.lightLogoUrl = reader.string();
                    break;
                case /* string dark_logo_url */ 7:
                    message.darkLogoUrl = reader.string();
                    break;
                case /* int64 mc */ 8:
                    message.mc = reader.int64().toNumber();
                    break;
                case /* int64 dot */ 9:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* string status */ 10:
                    message.status = reader.string();
                    break;
                case /* string timezone */ 11:
                    message.timezone = reader.string();
                    break;
                case /* string currency */ 12:
                    message.currency = reader.string();
                    break;
                case /* string address_line_1 */ 13:
                    message.addressLine1 = reader.string();
                    break;
                case /* string address_line_2 */ 14:
                    message.addressLine2 = reader.string();
                    break;
                case /* string address_city */ 15:
                    message.addressCity = reader.string();
                    break;
                case /* string address_state */ 16:
                    message.addressState = reader.string();
                    break;
                case /* string address_postal_code */ 17:
                    message.addressPostalCode = reader.string();
                    break;
                case /* string ein */ 18:
                    message.ein = reader.string();
                    break;
                case /* string load_id_prefix */ 19:
                    message.loadIdPrefix = reader.string();
                    break;
                case /* int64 load_id_start_number */ 20:
                    message.loadIdStartNumber = reader.int64().toNumber();
                    break;
                case /* bool enforce_second_step_auth */ 21:
                    message.enforceSecondStepAuth = reader.bool();
                    break;
                case /* bool enforce_strong_password */ 22:
                    message.enforceStrongPassword = reader.bool();
                    break;
                case /* int64 settlement_id_start_number */ 23:
                    message.settlementIdStartNumber = reader.int64().toNumber();
                    break;
                case /* string settlement_logo_url */ 24:
                    message.settlementLogoUrl = reader.string();
                    break;
                case /* string settlement_company_name */ 25:
                    message.settlementCompanyName = reader.string();
                    break;
                case /* string settlement_phone_number */ 26:
                    message.settlementPhoneNumber = reader.string();
                    break;
                case /* string settlement_fax */ 27:
                    message.settlementFax = reader.string();
                    break;
                case /* string settlement_email */ 28:
                    message.settlementEmail = reader.string();
                    break;
                case /* string settlement_address_line_1 */ 29:
                    message.settlementAddressLine1 = reader.string();
                    break;
                case /* string settlement_address_line_2 */ 30:
                    message.settlementAddressLine2 = reader.string();
                    break;
                case /* string settlement_address_city */ 31:
                    message.settlementAddressCity = reader.string();
                    break;
                case /* string settlement_address_state */ 32:
                    message.settlementAddressState = reader.string();
                    break;
                case /* string settlement_address_postal_code */ 33:
                    message.settlementAddressPostalCode = reader.string();
                    break;
                case /* string settlement_reply_to_emails */ 34:
                    message.settlementReplyToEmails = reader.string();
                    break;
                case /* string settlement_cc_emails */ 35:
                    message.settlementCcEmails = reader.string();
                    break;
                case /* map<string, bool> permissions */ 36:
                    this.binaryReadMap36(message.permissions, reader, options);
                    break;
                case /* bool onboarding_completed */ 37:
                    message.onboardingCompleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap36(map: GetAccountReply_Company["permissions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetAccountReply_Company["permissions"] | undefined, val: GetAccountReply_Company["permissions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GetAccountReply.Company.permissions");
            }
        }
        map[key ?? ""] = val ?? false;
    }
    internalBinaryWrite(message: GetAccountReply_Company, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string role_id = 2; */
        if (message.roleId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roleId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 5; */
        if (message.phoneNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.phoneNumber);
        /* string light_logo_url = 6; */
        if (message.lightLogoUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lightLogoUrl);
        /* string dark_logo_url = 7; */
        if (message.darkLogoUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.darkLogoUrl);
        /* int64 mc = 8; */
        if (message.mc !== 0)
            writer.tag(8, WireType.Varint).int64(message.mc);
        /* int64 dot = 9; */
        if (message.dot !== 0)
            writer.tag(9, WireType.Varint).int64(message.dot);
        /* string status = 10; */
        if (message.status !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.status);
        /* string timezone = 11; */
        if (message.timezone !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.timezone);
        /* string currency = 12; */
        if (message.currency !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.currency);
        /* string address_line_1 = 13; */
        if (message.addressLine1 !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.addressLine1);
        /* string address_line_2 = 14; */
        if (message.addressLine2 !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.addressLine2);
        /* string address_city = 15; */
        if (message.addressCity !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.addressCity);
        /* string address_state = 16; */
        if (message.addressState !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.addressState);
        /* string address_postal_code = 17; */
        if (message.addressPostalCode !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.addressPostalCode);
        /* string ein = 18; */
        if (message.ein !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.ein);
        /* string load_id_prefix = 19; */
        if (message.loadIdPrefix !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.loadIdPrefix);
        /* int64 load_id_start_number = 20; */
        if (message.loadIdStartNumber !== 0)
            writer.tag(20, WireType.Varint).int64(message.loadIdStartNumber);
        /* bool enforce_second_step_auth = 21; */
        if (message.enforceSecondStepAuth !== false)
            writer.tag(21, WireType.Varint).bool(message.enforceSecondStepAuth);
        /* bool enforce_strong_password = 22; */
        if (message.enforceStrongPassword !== false)
            writer.tag(22, WireType.Varint).bool(message.enforceStrongPassword);
        /* int64 settlement_id_start_number = 23; */
        if (message.settlementIdStartNumber !== 0)
            writer.tag(23, WireType.Varint).int64(message.settlementIdStartNumber);
        /* string settlement_logo_url = 24; */
        if (message.settlementLogoUrl !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.settlementLogoUrl);
        /* string settlement_company_name = 25; */
        if (message.settlementCompanyName !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.settlementCompanyName);
        /* string settlement_phone_number = 26; */
        if (message.settlementPhoneNumber !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.settlementPhoneNumber);
        /* string settlement_fax = 27; */
        if (message.settlementFax !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.settlementFax);
        /* string settlement_email = 28; */
        if (message.settlementEmail !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.settlementEmail);
        /* string settlement_address_line_1 = 29; */
        if (message.settlementAddressLine1 !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.settlementAddressLine1);
        /* string settlement_address_line_2 = 30; */
        if (message.settlementAddressLine2 !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.settlementAddressLine2);
        /* string settlement_address_city = 31; */
        if (message.settlementAddressCity !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.settlementAddressCity);
        /* string settlement_address_state = 32; */
        if (message.settlementAddressState !== "")
            writer.tag(32, WireType.LengthDelimited).string(message.settlementAddressState);
        /* string settlement_address_postal_code = 33; */
        if (message.settlementAddressPostalCode !== "")
            writer.tag(33, WireType.LengthDelimited).string(message.settlementAddressPostalCode);
        /* string settlement_reply_to_emails = 34; */
        if (message.settlementReplyToEmails !== "")
            writer.tag(34, WireType.LengthDelimited).string(message.settlementReplyToEmails);
        /* string settlement_cc_emails = 35; */
        if (message.settlementCcEmails !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.settlementCcEmails);
        /* map<string, bool> permissions = 36; */
        for (let k of globalThis.Object.keys(message.permissions))
            writer.tag(36, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).bool(message.permissions[k]).join();
        /* bool onboarding_completed = 37; */
        if (message.onboardingCompleted !== false)
            writer.tag(37, WireType.Varint).bool(message.onboardingCompleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAccountReply.Company
 */
export const GetAccountReply_Company = new GetAccountReply_Company$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountReply_Chatpilot$Type extends MessageType<GetAccountReply_Chatpilot> {
    constructor() {
        super("GetAccountReply.Chatpilot", [
            { no: 1, name: "chatpilot_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatpilot_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAccountReply_Chatpilot>): GetAccountReply_Chatpilot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatpilotUserId = "";
        message.chatpilotToken = "";
        if (value !== undefined)
            reflectionMergePartial<GetAccountReply_Chatpilot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountReply_Chatpilot): GetAccountReply_Chatpilot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatpilot_user_id */ 1:
                    message.chatpilotUserId = reader.string();
                    break;
                case /* string chatpilot_token */ 2:
                    message.chatpilotToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountReply_Chatpilot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatpilot_user_id = 1; */
        if (message.chatpilotUserId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatpilotUserId);
        /* string chatpilot_token = 2; */
        if (message.chatpilotToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatpilotToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAccountReply.Chatpilot
 */
export const GetAccountReply_Chatpilot = new GetAccountReply_Chatpilot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountUpdateRequest$Type extends MessageType<AccountUpdateRequest> {
    constructor() {
        super("AccountUpdateRequest", [
            { no: 1, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AccountUpdateRequest>): AccountUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstName = "";
        message.lastName = "";
        message.phoneNumber = "";
        message.email = "";
        message.secondStepAuthEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<AccountUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountUpdateRequest): AccountUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string first_name */ 1:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 2:
                    message.lastName = reader.string();
                    break;
                case /* string phone_number */ 3:
                    message.phoneNumber = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* bool second_step_auth_enabled */ 5:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string first_name = 1; */
        if (message.firstName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 2; */
        if (message.lastName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastName);
        /* string phone_number = 3; */
        if (message.phoneNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phoneNumber);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* bool second_step_auth_enabled = 5; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(5, WireType.Varint).bool(message.secondStepAuthEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AccountUpdateRequest
 */
export const AccountUpdateRequest = new AccountUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountUpdateReply$Type extends MessageType<AccountUpdateReply> {
    constructor() {
        super("AccountUpdateReply", []);
    }
    create(value?: PartialMessage<AccountUpdateReply>): AccountUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AccountUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountUpdateReply): AccountUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AccountUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AccountUpdateReply
 */
export const AccountUpdateReply = new AccountUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatPilotAccountRequest$Type extends MessageType<GetChatPilotAccountRequest> {
    constructor() {
        super("GetChatPilotAccountRequest", []);
    }
    create(value?: PartialMessage<GetChatPilotAccountRequest>): GetChatPilotAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetChatPilotAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatPilotAccountRequest): GetChatPilotAccountRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetChatPilotAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatPilotAccountRequest
 */
export const GetChatPilotAccountRequest = new GetChatPilotAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatPilotAccountReply$Type extends MessageType<GetChatPilotAccountReply> {
    constructor() {
        super("GetChatPilotAccountReply", [
            { no: 1, name: "chatpilot_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatPilotAccountReply>): GetChatPilotAccountReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatpilotToken = "";
        if (value !== undefined)
            reflectionMergePartial<GetChatPilotAccountReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatPilotAccountReply): GetChatPilotAccountReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatpilot_token */ 1:
                    message.chatpilotToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatPilotAccountReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatpilot_token = 1; */
        if (message.chatpilotToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatpilotToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatPilotAccountReply
 */
export const GetChatPilotAccountReply = new GetChatPilotAccountReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordUpdateRequest$Type extends MessageType<PasswordUpdateRequest> {
    constructor() {
        super("PasswordUpdateRequest", [
            { no: 1, name: "current_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PasswordUpdateRequest>): PasswordUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currentPassword = "";
        message.newPassword = "";
        if (value !== undefined)
            reflectionMergePartial<PasswordUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordUpdateRequest): PasswordUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string current_password */ 1:
                    message.currentPassword = reader.string();
                    break;
                case /* string new_password */ 2:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PasswordUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string current_password = 1; */
        if (message.currentPassword !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.currentPassword);
        /* string new_password = 2; */
        if (message.newPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PasswordUpdateRequest
 */
export const PasswordUpdateRequest = new PasswordUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordUpdateReply$Type extends MessageType<PasswordUpdateReply> {
    constructor() {
        super("PasswordUpdateReply", []);
    }
    create(value?: PartialMessage<PasswordUpdateReply>): PasswordUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PasswordUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordUpdateReply): PasswordUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PasswordUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PasswordUpdateReply
 */
export const PasswordUpdateReply = new PasswordUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountSelfieUploadRequest$Type extends MessageType<AccountSelfieUploadRequest> {
    constructor() {
        super("AccountSelfieUploadRequest", [
            { no: 1, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "thumb_file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AccountSelfieUploadRequest>): AccountSelfieUploadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileId = "";
        message.thumbFileId = "";
        if (value !== undefined)
            reflectionMergePartial<AccountSelfieUploadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountSelfieUploadRequest): AccountSelfieUploadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_id */ 1:
                    message.fileId = reader.string();
                    break;
                case /* string thumb_file_id */ 2:
                    message.thumbFileId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountSelfieUploadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_id = 1; */
        if (message.fileId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileId);
        /* string thumb_file_id = 2; */
        if (message.thumbFileId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.thumbFileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AccountSelfieUploadRequest
 */
export const AccountSelfieUploadRequest = new AccountSelfieUploadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountSelfieUploadReply$Type extends MessageType<AccountSelfieUploadReply> {
    constructor() {
        super("AccountSelfieUploadReply", []);
    }
    create(value?: PartialMessage<AccountSelfieUploadReply>): AccountSelfieUploadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AccountSelfieUploadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountSelfieUploadReply): AccountSelfieUploadReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AccountSelfieUploadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AccountSelfieUploadReply
 */
export const AccountSelfieUploadReply = new AccountSelfieUploadReply$Type();
/**
 * @generated ServiceType for protobuf service AccountService
 */
export const AccountService = new ServiceType("AccountService", [
    { name: "GetAccount", options: {}, I: GetAccountRequest, O: GetAccountReply },
    { name: "UpdateAccount", options: {}, I: AccountUpdateRequest, O: AccountUpdateReply },
    { name: "GetChatPilotAccount", options: {}, I: GetChatPilotAccountRequest, O: GetChatPilotAccountReply },
    { name: "PasswordUpdate", options: {}, I: PasswordUpdateRequest, O: PasswordUpdateReply },
    { name: "AccountSelfieUpload", options: {}, I: AccountSelfieUploadRequest, O: AccountSelfieUploadReply }
]);
