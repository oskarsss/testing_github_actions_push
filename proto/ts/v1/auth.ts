// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/auth.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ====================
 * RequestCode
 * ====================
 *
 * @generated from protobuf message RequestCodeRequest
 */
export interface RequestCodeRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: optional VerificationType verification_type = 3;
     */
    verificationType?: VerificationType;
}
/**
 * @generated from protobuf message RequestCodeReply
 */
export interface RequestCodeReply {
    /**
     * @generated from protobuf field: RequestCodeReply.Action action = 4;
     */
    action: RequestCodeReply_Action;
    /**
     * @generated from protobuf field: optional VerificationType verification_type = 5;
     */
    verificationType?: VerificationType;
    /**
     * @generated from protobuf field: optional string token = 6;
     */
    token?: string;
    /**
     * @generated from protobuf field: optional string change_password_url = 7;
     */
    changePasswordUrl?: string;
}
/**
 * @generated from protobuf enum RequestCodeReply.Action
 */
export enum RequestCodeReply_Action {
    /**
     * @generated from protobuf enum value: VERIFY_CODE = 0;
     */
    VERIFY_CODE = 0,
    /**
     * @generated from protobuf enum value: LOGIN = 1;
     */
    LOGIN = 1,
    /**
     * @generated from protobuf enum value: CHANGE_PASSWORD = 2;
     */
    CHANGE_PASSWORD = 2
}
/**
 * ====================
 * VerifyCode
 * ====================
 *
 * @generated from protobuf message VerifyCodeRequest
 */
export interface VerifyCodeRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: optional VerificationType type = 3;
     */
    type?: VerificationType;
    /**
     * @generated from protobuf field: string verification_code = 4;
     */
    verificationCode: string;
}
/**
 * @generated from protobuf message VerifyCodeReply
 */
export interface VerifyCodeReply {
    /**
     * @generated from protobuf field: VerifyCodeReply.Action action = 1;
     */
    action: VerifyCodeReply_Action;
    /**
     * @generated from protobuf field: optional string token = 2;
     */
    token?: string;
    /**
     * @generated from protobuf field: optional string change_password_url = 3;
     */
    changePasswordUrl?: string;
}
/**
 * @generated from protobuf enum VerifyCodeReply.Action
 */
export enum VerifyCodeReply_Action {
    /**
     * @generated from protobuf enum value: LOGIN = 0;
     */
    LOGIN = 0,
    /**
     * @generated from protobuf enum value: CHANGE_PASSWORD = 1;
     */
    CHANGE_PASSWORD = 1
}
/**
 * @generated from protobuf message SendResetPasswordLinkRequest
 */
export interface SendResetPasswordLinkRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string partner_id = 2;
     */
    partnerId: string;
}
/**
 * @generated from protobuf message SendResetPasswordLinkReply
 */
export interface SendResetPasswordLinkReply {
}
/**
 * @generated from protobuf message ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string confirm_password = 3;
     */
    confirmPassword: string;
    /**
     * @generated from protobuf field: string token = 4;
     */
    token: string;
}
/**
 * @generated from protobuf message ResetPasswordReply
 */
export interface ResetPasswordReply {
}
/**
 * @generated from protobuf message InviteRetrieveRequest
 */
export interface InviteRetrieveRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message InviteRetrieveReply
 */
export interface InviteRetrieveReply {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string company_name = 2;
     */
    companyName: string;
    /**
     * @generated from protobuf field: bool is_user_registered = 3;
     */
    isUserRegistered: boolean;
}
/**
 * @generated from protobuf message InviteAcceptAndRegisterRequest
 */
export interface InviteAcceptAndRegisterRequest {
    /**
     * @generated from protobuf field: string first_name = 1;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 2;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
    /**
     * @generated from protobuf field: string phone_number = 4;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string token = 5;
     */
    token: string;
    /**
     * @generated from protobuf field: string email = 6;
     */
    email: string;
}
/**
 * @generated from protobuf message InviteAcceptAndRegisterReply
 */
export interface InviteAcceptAndRegisterReply {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone_number = 6;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 7;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string role_id = 8;
     */
    roleId: string;
    /**
     * @generated from protobuf field: string company_id = 9;
     */
    companyId: string;
}
/**
 * @generated from protobuf message InviteAcceptAndLoginRequest
 */
export interface InviteAcceptAndLoginRequest {
    /**
     * @generated from protobuf field: string invite_token = 2;
     */
    inviteToken: string;
}
/**
 * @generated from protobuf message InviteAcceptAndLoginReply
 */
export interface InviteAcceptAndLoginReply {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message InviteGetRequest
 */
export interface InviteGetRequest {
}
/**
 * @generated from protobuf message InviteGetReply
 */
export interface InviteGetReply {
    /**
     * @generated from protobuf field: repeated InviteGetReply.Invite invites = 1;
     */
    invites: InviteGetReply_Invite[];
}
/**
 * @generated from protobuf message InviteGetReply.Invite
 */
export interface InviteGetReply_Invite {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string company_name = 2;
     */
    companyName: string;
    /**
     * @generated from protobuf field: string dark_logo_url = 3;
     */
    darkLogoUrl: string;
    /**
     * @generated from protobuf field: string light_logo_url = 4;
     */
    lightLogoUrl: string;
    /**
     * @generated from protobuf field: string invited_at = 5;
     */
    invitedAt: string;
}
/**
 * @generated from protobuf message InviteDeclineRequest
 */
export interface InviteDeclineRequest {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
}
/**
 * @generated from protobuf message InviteDeclineReply
 */
export interface InviteDeclineReply {
}
/**
 * @generated from protobuf message InviteAcceptRequest
 */
export interface InviteAcceptRequest {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
}
/**
 * @generated from protobuf message InviteAcceptReply
 */
export interface InviteAcceptReply {
}
/**
 * @generated from protobuf enum VerificationType
 */
export enum VerificationType {
    /**
     * @generated from protobuf enum value: SMS = 0;
     */
    SMS = 0,
    /**
     * @generated from protobuf enum value: CALL = 1;
     */
    CALL = 1,
    /**
     * @generated from protobuf enum value: EMAIL = 2;
     */
    EMAIL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestCodeRequest$Type extends MessageType<RequestCodeRequest> {
    constructor() {
        super("RequestCodeRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "verification_type", kind: "enum", opt: true, T: () => ["VerificationType", VerificationType] }
        ]);
    }
    create(value?: PartialMessage<RequestCodeRequest>): RequestCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<RequestCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestCodeRequest): RequestCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* optional VerificationType verification_type */ 3:
                    message.verificationType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* optional VerificationType verification_type = 3; */
        if (message.verificationType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.verificationType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestCodeRequest
 */
export const RequestCodeRequest = new RequestCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestCodeReply$Type extends MessageType<RequestCodeReply> {
    constructor() {
        super("RequestCodeReply", [
            { no: 4, name: "action", kind: "enum", T: () => ["RequestCodeReply.Action", RequestCodeReply_Action] },
            { no: 5, name: "verification_type", kind: "enum", opt: true, T: () => ["VerificationType", VerificationType] },
            { no: 6, name: "token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "change_password_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestCodeReply>): RequestCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestCodeReply): RequestCodeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* RequestCodeReply.Action action */ 4:
                    message.action = reader.int32();
                    break;
                case /* optional VerificationType verification_type */ 5:
                    message.verificationType = reader.int32();
                    break;
                case /* optional string token */ 6:
                    message.token = reader.string();
                    break;
                case /* optional string change_password_url */ 7:
                    message.changePasswordUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* RequestCodeReply.Action action = 4; */
        if (message.action !== 0)
            writer.tag(4, WireType.Varint).int32(message.action);
        /* optional VerificationType verification_type = 5; */
        if (message.verificationType !== undefined)
            writer.tag(5, WireType.Varint).int32(message.verificationType);
        /* optional string token = 6; */
        if (message.token !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.token);
        /* optional string change_password_url = 7; */
        if (message.changePasswordUrl !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.changePasswordUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestCodeReply
 */
export const RequestCodeReply = new RequestCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyCodeRequest$Type extends MessageType<VerifyCodeRequest> {
    constructor() {
        super("VerifyCodeRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", opt: true, T: () => ["VerificationType", VerificationType] },
            { no: 4, name: "verification_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyCodeRequest>): VerifyCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        message.verificationCode = "";
        if (value !== undefined)
            reflectionMergePartial<VerifyCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyCodeRequest): VerifyCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* optional VerificationType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string verification_code */ 4:
                    message.verificationCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* optional VerificationType type = 3; */
        if (message.type !== undefined)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string verification_code = 4; */
        if (message.verificationCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.verificationCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VerifyCodeRequest
 */
export const VerifyCodeRequest = new VerifyCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyCodeReply$Type extends MessageType<VerifyCodeReply> {
    constructor() {
        super("VerifyCodeReply", [
            { no: 1, name: "action", kind: "enum", T: () => ["VerifyCodeReply.Action", VerifyCodeReply_Action] },
            { no: 2, name: "token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "change_password_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyCodeReply>): VerifyCodeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial<VerifyCodeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyCodeReply): VerifyCodeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VerifyCodeReply.Action action */ 1:
                    message.action = reader.int32();
                    break;
                case /* optional string token */ 2:
                    message.token = reader.string();
                    break;
                case /* optional string change_password_url */ 3:
                    message.changePasswordUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyCodeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VerifyCodeReply.Action action = 1; */
        if (message.action !== 0)
            writer.tag(1, WireType.Varint).int32(message.action);
        /* optional string token = 2; */
        if (message.token !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        /* optional string change_password_url = 3; */
        if (message.changePasswordUrl !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.changePasswordUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VerifyCodeReply
 */
export const VerifyCodeReply = new VerifyCodeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendResetPasswordLinkRequest$Type extends MessageType<SendResetPasswordLinkRequest> {
    constructor() {
        super("SendResetPasswordLinkRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "partner_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendResetPasswordLinkRequest>): SendResetPasswordLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.partnerId = "";
        if (value !== undefined)
            reflectionMergePartial<SendResetPasswordLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendResetPasswordLinkRequest): SendResetPasswordLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string partner_id */ 2:
                    message.partnerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendResetPasswordLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string partner_id = 2; */
        if (message.partnerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.partnerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendResetPasswordLinkRequest
 */
export const SendResetPasswordLinkRequest = new SendResetPasswordLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendResetPasswordLinkReply$Type extends MessageType<SendResetPasswordLinkReply> {
    constructor() {
        super("SendResetPasswordLinkReply", []);
    }
    create(value?: PartialMessage<SendResetPasswordLinkReply>): SendResetPasswordLinkReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendResetPasswordLinkReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendResetPasswordLinkReply): SendResetPasswordLinkReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendResetPasswordLinkReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendResetPasswordLinkReply
 */
export const SendResetPasswordLinkReply = new SendResetPasswordLinkReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPasswordRequest$Type extends MessageType<ResetPasswordRequest> {
    constructor() {
        super("ResetPasswordRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "confirm_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResetPasswordRequest>): ResetPasswordRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        message.confirmPassword = "";
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<ResetPasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPasswordRequest): ResetPasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string confirm_password */ 3:
                    message.confirmPassword = reader.string();
                    break;
                case /* string token */ 4:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string confirm_password = 3; */
        if (message.confirmPassword !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.confirmPassword);
        /* string token = 4; */
        if (message.token !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResetPasswordRequest
 */
export const ResetPasswordRequest = new ResetPasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPasswordReply$Type extends MessageType<ResetPasswordReply> {
    constructor() {
        super("ResetPasswordReply", []);
    }
    create(value?: PartialMessage<ResetPasswordReply>): ResetPasswordReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetPasswordReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPasswordReply): ResetPasswordReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ResetPasswordReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResetPasswordReply
 */
export const ResetPasswordReply = new ResetPasswordReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteRetrieveRequest$Type extends MessageType<InviteRetrieveRequest> {
    constructor() {
        super("InviteRetrieveRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteRetrieveRequest>): InviteRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<InviteRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteRetrieveRequest): InviteRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteRetrieveRequest
 */
export const InviteRetrieveRequest = new InviteRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteRetrieveReply$Type extends MessageType<InviteRetrieveReply> {
    constructor() {
        super("InviteRetrieveReply", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_user_registered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<InviteRetrieveReply>): InviteRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.companyName = "";
        message.isUserRegistered = false;
        if (value !== undefined)
            reflectionMergePartial<InviteRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteRetrieveReply): InviteRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string company_name */ 2:
                    message.companyName = reader.string();
                    break;
                case /* bool is_user_registered */ 3:
                    message.isUserRegistered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string company_name = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* bool is_user_registered = 3; */
        if (message.isUserRegistered !== false)
            writer.tag(3, WireType.Varint).bool(message.isUserRegistered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteRetrieveReply
 */
export const InviteRetrieveReply = new InviteRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteAcceptAndRegisterRequest$Type extends MessageType<InviteAcceptAndRegisterRequest> {
    constructor() {
        super("InviteAcceptAndRegisterRequest", [
            { no: 1, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteAcceptAndRegisterRequest>): InviteAcceptAndRegisterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstName = "";
        message.lastName = "";
        message.password = "";
        message.phoneNumber = "";
        message.token = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<InviteAcceptAndRegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteAcceptAndRegisterRequest): InviteAcceptAndRegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string first_name */ 1:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 2:
                    message.lastName = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                case /* string phone_number */ 4:
                    message.phoneNumber = reader.string();
                    break;
                case /* string token */ 5:
                    message.token = reader.string();
                    break;
                case /* string email */ 6:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteAcceptAndRegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string first_name = 1; */
        if (message.firstName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 2; */
        if (message.lastName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastName);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* string phone_number = 4; */
        if (message.phoneNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phoneNumber);
        /* string token = 5; */
        if (message.token !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.token);
        /* string email = 6; */
        if (message.email !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteAcceptAndRegisterRequest
 */
export const InviteAcceptAndRegisterRequest = new InviteAcceptAndRegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteAcceptAndRegisterReply$Type extends MessageType<InviteAcceptAndRegisterReply> {
    constructor() {
        super("InviteAcceptAndRegisterReply", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteAcceptAndRegisterReply>): InviteAcceptAndRegisterReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.userId = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phoneNumber = "";
        message.secondStepAuthEnabled = false;
        message.roleId = "";
        message.companyId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteAcceptAndRegisterReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteAcceptAndRegisterReply): InviteAcceptAndRegisterReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone_number */ 6:
                    message.phoneNumber = reader.string();
                    break;
                case /* bool second_step_auth_enabled */ 7:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string role_id */ 8:
                    message.roleId = reader.string();
                    break;
                case /* string company_id */ 9:
                    message.companyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteAcceptAndRegisterReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone_number = 6; */
        if (message.phoneNumber !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phoneNumber);
        /* bool second_step_auth_enabled = 7; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(7, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string role_id = 8; */
        if (message.roleId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.roleId);
        /* string company_id = 9; */
        if (message.companyId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.companyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteAcceptAndRegisterReply
 */
export const InviteAcceptAndRegisterReply = new InviteAcceptAndRegisterReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteAcceptAndLoginRequest$Type extends MessageType<InviteAcceptAndLoginRequest> {
    constructor() {
        super("InviteAcceptAndLoginRequest", [
            { no: 2, name: "invite_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteAcceptAndLoginRequest>): InviteAcceptAndLoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inviteToken = "";
        if (value !== undefined)
            reflectionMergePartial<InviteAcceptAndLoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteAcceptAndLoginRequest): InviteAcceptAndLoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invite_token */ 2:
                    message.inviteToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteAcceptAndLoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invite_token = 2; */
        if (message.inviteToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.inviteToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteAcceptAndLoginRequest
 */
export const InviteAcceptAndLoginRequest = new InviteAcceptAndLoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteAcceptAndLoginReply$Type extends MessageType<InviteAcceptAndLoginReply> {
    constructor() {
        super("InviteAcceptAndLoginReply", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteAcceptAndLoginReply>): InviteAcceptAndLoginReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<InviteAcceptAndLoginReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteAcceptAndLoginReply): InviteAcceptAndLoginReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteAcceptAndLoginReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteAcceptAndLoginReply
 */
export const InviteAcceptAndLoginReply = new InviteAcceptAndLoginReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteGetRequest$Type extends MessageType<InviteGetRequest> {
    constructor() {
        super("InviteGetRequest", []);
    }
    create(value?: PartialMessage<InviteGetRequest>): InviteGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InviteGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteGetRequest): InviteGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InviteGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteGetRequest
 */
export const InviteGetRequest = new InviteGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteGetReply$Type extends MessageType<InviteGetReply> {
    constructor() {
        super("InviteGetReply", [
            { no: 1, name: "invites", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InviteGetReply_Invite }
        ]);
    }
    create(value?: PartialMessage<InviteGetReply>): InviteGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invites = [];
        if (value !== undefined)
            reflectionMergePartial<InviteGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteGetReply): InviteGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated InviteGetReply.Invite invites */ 1:
                    message.invites.push(InviteGetReply_Invite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated InviteGetReply.Invite invites = 1; */
        for (let i = 0; i < message.invites.length; i++)
            InviteGetReply_Invite.internalBinaryWrite(message.invites[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteGetReply
 */
export const InviteGetReply = new InviteGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteGetReply_Invite$Type extends MessageType<InviteGetReply_Invite> {
    constructor() {
        super("InviteGetReply.Invite", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dark_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "light_logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "invited_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteGetReply_Invite>): InviteGetReply_Invite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.companyName = "";
        message.darkLogoUrl = "";
        message.lightLogoUrl = "";
        message.invitedAt = "";
        if (value !== undefined)
            reflectionMergePartial<InviteGetReply_Invite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteGetReply_Invite): InviteGetReply_Invite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string company_name */ 2:
                    message.companyName = reader.string();
                    break;
                case /* string dark_logo_url */ 3:
                    message.darkLogoUrl = reader.string();
                    break;
                case /* string light_logo_url */ 4:
                    message.lightLogoUrl = reader.string();
                    break;
                case /* string invited_at */ 5:
                    message.invitedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteGetReply_Invite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string company_name = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* string dark_logo_url = 3; */
        if (message.darkLogoUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.darkLogoUrl);
        /* string light_logo_url = 4; */
        if (message.lightLogoUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lightLogoUrl);
        /* string invited_at = 5; */
        if (message.invitedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.invitedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteGetReply.Invite
 */
export const InviteGetReply_Invite = new InviteGetReply_Invite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteDeclineRequest$Type extends MessageType<InviteDeclineRequest> {
    constructor() {
        super("InviteDeclineRequest", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteDeclineRequest>): InviteDeclineRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteDeclineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteDeclineRequest): InviteDeclineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteDeclineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteDeclineRequest
 */
export const InviteDeclineRequest = new InviteDeclineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteDeclineReply$Type extends MessageType<InviteDeclineReply> {
    constructor() {
        super("InviteDeclineReply", []);
    }
    create(value?: PartialMessage<InviteDeclineReply>): InviteDeclineReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InviteDeclineReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteDeclineReply): InviteDeclineReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InviteDeclineReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteDeclineReply
 */
export const InviteDeclineReply = new InviteDeclineReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteAcceptRequest$Type extends MessageType<InviteAcceptRequest> {
    constructor() {
        super("InviteAcceptRequest", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteAcceptRequest>): InviteAcceptRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteAcceptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteAcceptRequest): InviteAcceptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteAcceptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteAcceptRequest
 */
export const InviteAcceptRequest = new InviteAcceptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteAcceptReply$Type extends MessageType<InviteAcceptReply> {
    constructor() {
        super("InviteAcceptReply", []);
    }
    create(value?: PartialMessage<InviteAcceptReply>): InviteAcceptReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InviteAcceptReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteAcceptReply): InviteAcceptReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InviteAcceptReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteAcceptReply
 */
export const InviteAcceptReply = new InviteAcceptReply$Type();
/**
 * @generated ServiceType for protobuf service AuthService
 */
export const AuthService = new ServiceType("AuthService", [
    { name: "RequestCode", options: {}, I: RequestCodeRequest, O: RequestCodeReply },
    { name: "VerifyCode", options: {}, I: VerifyCodeRequest, O: VerifyCodeReply },
    { name: "SendResetPasswordLink", options: {}, I: SendResetPasswordLinkRequest, O: SendResetPasswordLinkReply },
    { name: "ResetPassword", options: {}, I: ResetPasswordRequest, O: ResetPasswordReply },
    { name: "InviteRetrieve", options: {}, I: InviteRetrieveRequest, O: InviteRetrieveReply },
    { name: "InviteAcceptAndRegister", options: {}, I: InviteAcceptAndRegisterRequest, O: InviteAcceptAndRegisterReply },
    { name: "InviteGet", options: {}, I: InviteGetRequest, O: InviteGetReply },
    { name: "InviteDecline", options: {}, I: InviteDeclineRequest, O: InviteDeclineReply },
    { name: "InviteAccept", options: {}, I: InviteAcceptRequest, O: InviteAcceptReply },
    { name: "InviteAcceptAndLogin", options: {}, I: InviteAcceptAndLoginRequest, O: InviteAcceptAndLoginReply }
]);
