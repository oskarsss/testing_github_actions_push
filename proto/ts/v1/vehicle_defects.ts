// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/vehicle_defects.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VehicleDefectModel_DefectUpdateInput } from "./models/model_vehicle_defect";
import { VehicleDefectModel_DefectStatus } from "./models/model_vehicle_defect";
import { VehicleDefectModel_Defect } from "./models/model_vehicle_defect";
import { VehicleDefectModel_DefectCreateInput } from "./models/model_vehicle_defect";
/**
 * Create
 *
 * @generated from protobuf message DefectCreateRequest
 */
export interface DefectCreateRequest {
    /**
     * @generated from protobuf field: VehicleDefectModel.DefectCreateInput defect = 1;
     */
    defect?: VehicleDefectModel_DefectCreateInput;
}
/**
 * @generated from protobuf message DefectCreateReply
 */
export interface DefectCreateReply {
    /**
     * @generated from protobuf field: string vehicle_defect_id = 1;
     */
    vehicleDefectId: string;
}
/**
 * Read
 *
 * @generated from protobuf message DefectRetrieveRequest
 */
export interface DefectRetrieveRequest {
    /**
     * @generated from protobuf field: string vehicle_defect_id = 1;
     */
    vehicleDefectId: string;
}
/**
 * @generated from protobuf message DefectRetrieveReply
 */
export interface DefectRetrieveReply {
    /**
     * @generated from protobuf field: VehicleDefectModel.Defect defect = 1;
     */
    defect?: VehicleDefectModel_Defect;
}
/**
 * @generated from protobuf message DefectsGetRequest
 */
export interface DefectsGetRequest {
    /**
     * @generated from protobuf field: optional string vehicle_inspection_id = 1;
     */
    vehicleInspectionId?: string; // get all inspections defects
    /**
     * @generated from protobuf field: repeated string truck_ids = 2;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 3;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: repeated string defect_type_ids = 4;
     */
    defectTypeIds: string[];
    /**
     * @generated from protobuf field: repeated VehicleDefectModel.DefectStatus defect_statuses = 5;
     */
    defectStatuses: VehicleDefectModel_DefectStatus[];
    /**
     * @generated from protobuf field: optional string search = 6;
     */
    search?: string;
    /**
     * @generated from protobuf field: int64 per_page = 7;
     */
    perPage: number;
    /**
     * @generated from protobuf field: int64 page = 8;
     */
    page: number;
}
/**
 * @generated from protobuf message DefectsGetReply
 */
export interface DefectsGetReply {
    /**
     * @generated from protobuf field: repeated VehicleDefectModel.Defect defect = 1;
     */
    defect: VehicleDefectModel_Defect[];
}
/**
 * Update
 *
 * @generated from protobuf message DefectUpdateRequest
 */
export interface DefectUpdateRequest {
    /**
     * @generated from protobuf field: VehicleDefectModel.DefectCreateInput defect = 1;
     */
    defect?: VehicleDefectModel_DefectCreateInput;
}
/**
 * @generated from protobuf message DefectUpdateReply
 */
export interface DefectUpdateReply {
    /**
     * @generated from protobuf field: VehicleDefectModel.DefectUpdateInput defect = 1;
     */
    defect?: VehicleDefectModel_DefectUpdateInput;
}
/**
 * Delete
 *
 * @generated from protobuf message DefectDeleteRequest
 */
export interface DefectDeleteRequest {
    /**
     * @generated from protobuf field: string vehicle_defect_id = 1;
     */
    vehicleDefectId: string;
}
/**
 * @generated from protobuf message DefectDeleteReply
 */
export interface DefectDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class DefectCreateRequest$Type extends MessageType<DefectCreateRequest> {
    constructor() {
        super("DefectCreateRequest", [
            { no: 1, name: "defect", kind: "message", T: () => VehicleDefectModel_DefectCreateInput }
        ]);
    }
    create(value?: PartialMessage<DefectCreateRequest>): DefectCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DefectCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectCreateRequest): DefectCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleDefectModel.DefectCreateInput defect */ 1:
                    message.defect = VehicleDefectModel_DefectCreateInput.internalBinaryRead(reader, reader.uint32(), options, message.defect);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleDefectModel.DefectCreateInput defect = 1; */
        if (message.defect)
            VehicleDefectModel_DefectCreateInput.internalBinaryWrite(message.defect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectCreateRequest
 */
export const DefectCreateRequest = new DefectCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectCreateReply$Type extends MessageType<DefectCreateReply> {
    constructor() {
        super("DefectCreateReply", [
            { no: 1, name: "vehicle_defect_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DefectCreateReply>): DefectCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleDefectId = "";
        if (value !== undefined)
            reflectionMergePartial<DefectCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectCreateReply): DefectCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_defect_id */ 1:
                    message.vehicleDefectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_defect_id = 1; */
        if (message.vehicleDefectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleDefectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectCreateReply
 */
export const DefectCreateReply = new DefectCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectRetrieveRequest$Type extends MessageType<DefectRetrieveRequest> {
    constructor() {
        super("DefectRetrieveRequest", [
            { no: 1, name: "vehicle_defect_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DefectRetrieveRequest>): DefectRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleDefectId = "";
        if (value !== undefined)
            reflectionMergePartial<DefectRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectRetrieveRequest): DefectRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_defect_id */ 1:
                    message.vehicleDefectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_defect_id = 1; */
        if (message.vehicleDefectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleDefectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectRetrieveRequest
 */
export const DefectRetrieveRequest = new DefectRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectRetrieveReply$Type extends MessageType<DefectRetrieveReply> {
    constructor() {
        super("DefectRetrieveReply", [
            { no: 1, name: "defect", kind: "message", T: () => VehicleDefectModel_Defect }
        ]);
    }
    create(value?: PartialMessage<DefectRetrieveReply>): DefectRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DefectRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectRetrieveReply): DefectRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleDefectModel.Defect defect */ 1:
                    message.defect = VehicleDefectModel_Defect.internalBinaryRead(reader, reader.uint32(), options, message.defect);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleDefectModel.Defect defect = 1; */
        if (message.defect)
            VehicleDefectModel_Defect.internalBinaryWrite(message.defect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectRetrieveReply
 */
export const DefectRetrieveReply = new DefectRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectsGetRequest$Type extends MessageType<DefectsGetRequest> {
    constructor() {
        super("DefectsGetRequest", [
            { no: 1, name: "vehicle_inspection_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "defect_type_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "defect_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["VehicleDefectModel.DefectStatus", VehicleDefectModel_DefectStatus] },
            { no: 6, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "per_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DefectsGetRequest>): DefectsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckIds = [];
        message.trailerIds = [];
        message.defectTypeIds = [];
        message.defectStatuses = [];
        message.perPage = 0;
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<DefectsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectsGetRequest): DefectsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string vehicle_inspection_id */ 1:
                    message.vehicleInspectionId = reader.string();
                    break;
                case /* repeated string truck_ids */ 2:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 3:
                    message.trailerIds.push(reader.string());
                    break;
                case /* repeated string defect_type_ids */ 4:
                    message.defectTypeIds.push(reader.string());
                    break;
                case /* repeated VehicleDefectModel.DefectStatus defect_statuses */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.defectStatuses.push(reader.int32());
                    else
                        message.defectStatuses.push(reader.int32());
                    break;
                case /* optional string search */ 6:
                    message.search = reader.string();
                    break;
                case /* int64 per_page */ 7:
                    message.perPage = reader.int64().toNumber();
                    break;
                case /* int64 page */ 8:
                    message.page = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string vehicle_inspection_id = 1; */
        if (message.vehicleInspectionId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleInspectionId);
        /* repeated string truck_ids = 2; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string trailer_ids = 3; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* repeated string defect_type_ids = 4; */
        for (let i = 0; i < message.defectTypeIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.defectTypeIds[i]);
        /* repeated VehicleDefectModel.DefectStatus defect_statuses = 5; */
        if (message.defectStatuses.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.defectStatuses.length; i++)
                writer.int32(message.defectStatuses[i]);
            writer.join();
        }
        /* optional string search = 6; */
        if (message.search !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.search);
        /* int64 per_page = 7; */
        if (message.perPage !== 0)
            writer.tag(7, WireType.Varint).int64(message.perPage);
        /* int64 page = 8; */
        if (message.page !== 0)
            writer.tag(8, WireType.Varint).int64(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectsGetRequest
 */
export const DefectsGetRequest = new DefectsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectsGetReply$Type extends MessageType<DefectsGetReply> {
    constructor() {
        super("DefectsGetReply", [
            { no: 1, name: "defect", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VehicleDefectModel_Defect }
        ]);
    }
    create(value?: PartialMessage<DefectsGetReply>): DefectsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.defect = [];
        if (value !== undefined)
            reflectionMergePartial<DefectsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectsGetReply): DefectsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated VehicleDefectModel.Defect defect */ 1:
                    message.defect.push(VehicleDefectModel_Defect.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated VehicleDefectModel.Defect defect = 1; */
        for (let i = 0; i < message.defect.length; i++)
            VehicleDefectModel_Defect.internalBinaryWrite(message.defect[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectsGetReply
 */
export const DefectsGetReply = new DefectsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectUpdateRequest$Type extends MessageType<DefectUpdateRequest> {
    constructor() {
        super("DefectUpdateRequest", [
            { no: 1, name: "defect", kind: "message", T: () => VehicleDefectModel_DefectCreateInput }
        ]);
    }
    create(value?: PartialMessage<DefectUpdateRequest>): DefectUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DefectUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectUpdateRequest): DefectUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleDefectModel.DefectCreateInput defect */ 1:
                    message.defect = VehicleDefectModel_DefectCreateInput.internalBinaryRead(reader, reader.uint32(), options, message.defect);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleDefectModel.DefectCreateInput defect = 1; */
        if (message.defect)
            VehicleDefectModel_DefectCreateInput.internalBinaryWrite(message.defect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectUpdateRequest
 */
export const DefectUpdateRequest = new DefectUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectUpdateReply$Type extends MessageType<DefectUpdateReply> {
    constructor() {
        super("DefectUpdateReply", [
            { no: 1, name: "defect", kind: "message", T: () => VehicleDefectModel_DefectUpdateInput }
        ]);
    }
    create(value?: PartialMessage<DefectUpdateReply>): DefectUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DefectUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectUpdateReply): DefectUpdateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleDefectModel.DefectUpdateInput defect */ 1:
                    message.defect = VehicleDefectModel_DefectUpdateInput.internalBinaryRead(reader, reader.uint32(), options, message.defect);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleDefectModel.DefectUpdateInput defect = 1; */
        if (message.defect)
            VehicleDefectModel_DefectUpdateInput.internalBinaryWrite(message.defect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectUpdateReply
 */
export const DefectUpdateReply = new DefectUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectDeleteRequest$Type extends MessageType<DefectDeleteRequest> {
    constructor() {
        super("DefectDeleteRequest", [
            { no: 1, name: "vehicle_defect_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DefectDeleteRequest>): DefectDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleDefectId = "";
        if (value !== undefined)
            reflectionMergePartial<DefectDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectDeleteRequest): DefectDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vehicle_defect_id */ 1:
                    message.vehicleDefectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefectDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vehicle_defect_id = 1; */
        if (message.vehicleDefectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vehicleDefectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectDeleteRequest
 */
export const DefectDeleteRequest = new DefectDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefectDeleteReply$Type extends MessageType<DefectDeleteReply> {
    constructor() {
        super("DefectDeleteReply", []);
    }
    create(value?: PartialMessage<DefectDeleteReply>): DefectDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DefectDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefectDeleteReply): DefectDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DefectDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DefectDeleteReply
 */
export const DefectDeleteReply = new DefectDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service VehicleDefectsService
 */
export const VehicleDefectsService = new ServiceType("VehicleDefectsService", [
    { name: "DefectRetrieve", options: {}, I: DefectRetrieveRequest, O: DefectRetrieveReply },
    { name: "DefectsGet", options: {}, I: DefectsGetRequest, O: DefectsGetReply },
    { name: "DefectUpdate", options: {}, I: DefectUpdateRequest, O: DefectUpdateReply },
    { name: "DefectDelete", options: {}, I: DefectDeleteRequest, O: DefectDeleteReply }
]);
