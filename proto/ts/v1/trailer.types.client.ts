// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/trailer.types.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TrailerTypesService } from "./trailer.types";
import type { TrailerTypesDeleteReply } from "./trailer.types";
import type { TrailerTypesDeleteRequest } from "./trailer.types";
import type { TrailerTypesUpdateReply } from "./trailer.types";
import type { TrailerTypesUpdateRequest } from "./trailer.types";
import type { TrailerTypesCreateReply } from "./trailer.types";
import type { TrailerTypesCreateRequest } from "./trailer.types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TrailerTypesGetReply } from "./trailer.types";
import type { TrailerTypesGetRequest } from "./trailer.types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service TrailerTypesService
 */
export interface ITrailerTypesServiceClient {
    /**
     * @generated from protobuf rpc: Get(TrailerTypesGetRequest) returns (TrailerTypesGetReply);
     */
    get(input: TrailerTypesGetRequest, options?: RpcOptions): UnaryCall<TrailerTypesGetRequest, TrailerTypesGetReply>;
    /**
     * @generated from protobuf rpc: Create(TrailerTypesCreateRequest) returns (TrailerTypesCreateReply);
     */
    create(input: TrailerTypesCreateRequest, options?: RpcOptions): UnaryCall<TrailerTypesCreateRequest, TrailerTypesCreateReply>;
    /**
     * @generated from protobuf rpc: Update(TrailerTypesUpdateRequest) returns (TrailerTypesUpdateReply);
     */
    update(input: TrailerTypesUpdateRequest, options?: RpcOptions): UnaryCall<TrailerTypesUpdateRequest, TrailerTypesUpdateReply>;
    /**
     * @generated from protobuf rpc: Delete(TrailerTypesDeleteRequest) returns (TrailerTypesDeleteReply);
     */
    delete(input: TrailerTypesDeleteRequest, options?: RpcOptions): UnaryCall<TrailerTypesDeleteRequest, TrailerTypesDeleteReply>;
}
/**
 * @generated from protobuf service TrailerTypesService
 */
export class TrailerTypesServiceClient implements ITrailerTypesServiceClient, ServiceInfo {
    typeName = TrailerTypesService.typeName;
    methods = TrailerTypesService.methods;
    options = TrailerTypesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Get(TrailerTypesGetRequest) returns (TrailerTypesGetReply);
     */
    get(input: TrailerTypesGetRequest, options?: RpcOptions): UnaryCall<TrailerTypesGetRequest, TrailerTypesGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrailerTypesGetRequest, TrailerTypesGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(TrailerTypesCreateRequest) returns (TrailerTypesCreateReply);
     */
    create(input: TrailerTypesCreateRequest, options?: RpcOptions): UnaryCall<TrailerTypesCreateRequest, TrailerTypesCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrailerTypesCreateRequest, TrailerTypesCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(TrailerTypesUpdateRequest) returns (TrailerTypesUpdateReply);
     */
    update(input: TrailerTypesUpdateRequest, options?: RpcOptions): UnaryCall<TrailerTypesUpdateRequest, TrailerTypesUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrailerTypesUpdateRequest, TrailerTypesUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(TrailerTypesDeleteRequest) returns (TrailerTypesDeleteReply);
     */
    delete(input: TrailerTypesDeleteRequest, options?: RpcOptions): UnaryCall<TrailerTypesDeleteRequest, TrailerTypesDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrailerTypesDeleteRequest, TrailerTypesDeleteReply>("unary", this._transport, method, opt, input);
    }
}
