// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlement.cycle.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SettlementCycleService } from "./settlement.cycle";
import type { SettlementCycleUpdateReply } from "./settlement.cycle";
import type { SettlementCycleUpdateRequest } from "./settlement.cycle";
import type { SettlementCycleCreateReply } from "./settlement.cycle";
import type { SettlementCycleCreateRequest } from "./settlement.cycle";
import type { SettlementCycleDeactivateReply } from "./settlement.cycle";
import type { SettlementCycleDeactivateRequest } from "./settlement.cycle";
import type { SettlementCycleActivateReply } from "./settlement.cycle";
import type { SettlementCycleActivateRequest } from "./settlement.cycle";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SettlementCycleGetReply } from "./settlement.cycle";
import type { SettlementCycleGetRequest } from "./settlement.cycle";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SettlementCycleService
 */
export interface ISettlementCycleServiceClient {
    /**
     * @generated from protobuf rpc: SettlementCycleGet(SettlementCycleGetRequest) returns (SettlementCycleGetReply);
     */
    settlementCycleGet(input: SettlementCycleGetRequest, options?: RpcOptions): UnaryCall<SettlementCycleGetRequest, SettlementCycleGetReply>;
    /**
     * @generated from protobuf rpc: SettlementCycleActivate(SettlementCycleActivateRequest) returns (SettlementCycleActivateReply);
     */
    settlementCycleActivate(input: SettlementCycleActivateRequest, options?: RpcOptions): UnaryCall<SettlementCycleActivateRequest, SettlementCycleActivateReply>;
    /**
     * @generated from protobuf rpc: SettlementCycleDeactivate(SettlementCycleDeactivateRequest) returns (SettlementCycleDeactivateReply);
     */
    settlementCycleDeactivate(input: SettlementCycleDeactivateRequest, options?: RpcOptions): UnaryCall<SettlementCycleDeactivateRequest, SettlementCycleDeactivateReply>;
    /**
     * @generated from protobuf rpc: SettlementCycleCreate(SettlementCycleCreateRequest) returns (SettlementCycleCreateReply);
     */
    settlementCycleCreate(input: SettlementCycleCreateRequest, options?: RpcOptions): UnaryCall<SettlementCycleCreateRequest, SettlementCycleCreateReply>;
    /**
     * @generated from protobuf rpc: SettlementCycleUpdate(SettlementCycleUpdateRequest) returns (SettlementCycleUpdateReply);
     */
    settlementCycleUpdate(input: SettlementCycleUpdateRequest, options?: RpcOptions): UnaryCall<SettlementCycleUpdateRequest, SettlementCycleUpdateReply>;
}
/**
 * @generated from protobuf service SettlementCycleService
 */
export class SettlementCycleServiceClient implements ISettlementCycleServiceClient, ServiceInfo {
    typeName = SettlementCycleService.typeName;
    methods = SettlementCycleService.methods;
    options = SettlementCycleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SettlementCycleGet(SettlementCycleGetRequest) returns (SettlementCycleGetReply);
     */
    settlementCycleGet(input: SettlementCycleGetRequest, options?: RpcOptions): UnaryCall<SettlementCycleGetRequest, SettlementCycleGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCycleGetRequest, SettlementCycleGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCycleActivate(SettlementCycleActivateRequest) returns (SettlementCycleActivateReply);
     */
    settlementCycleActivate(input: SettlementCycleActivateRequest, options?: RpcOptions): UnaryCall<SettlementCycleActivateRequest, SettlementCycleActivateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCycleActivateRequest, SettlementCycleActivateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCycleDeactivate(SettlementCycleDeactivateRequest) returns (SettlementCycleDeactivateReply);
     */
    settlementCycleDeactivate(input: SettlementCycleDeactivateRequest, options?: RpcOptions): UnaryCall<SettlementCycleDeactivateRequest, SettlementCycleDeactivateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCycleDeactivateRequest, SettlementCycleDeactivateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCycleCreate(SettlementCycleCreateRequest) returns (SettlementCycleCreateReply);
     */
    settlementCycleCreate(input: SettlementCycleCreateRequest, options?: RpcOptions): UnaryCall<SettlementCycleCreateRequest, SettlementCycleCreateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCycleCreateRequest, SettlementCycleCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCycleUpdate(SettlementCycleUpdateRequest) returns (SettlementCycleUpdateReply);
     */
    settlementCycleUpdate(input: SettlementCycleUpdateRequest, options?: RpcOptions): UnaryCall<SettlementCycleUpdateRequest, SettlementCycleUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCycleUpdateRequest, SettlementCycleUpdateReply>("unary", this._transport, method, opt, input);
    }
}
