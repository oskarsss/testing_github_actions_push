// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/trucks.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TruckModel_Status } from "./models/model_truck";
import { ManifestModel_Manifest } from "./models/model_manifest";
import { LoadModel_Stop_Status } from "./models/model_load";
import { LoadModel_Status } from "./models/model_load";
import { NoteModel_EntityNote } from "./models/model_note";
import { FilterModel_Filter } from "./models/model_filter_type";
import { TruckModel_Truck } from "./models/model_truck";
import { TruckModel_Type } from "./models/model_truck";
/**
 * /////////////////////////
 * TruckStatsGet
 * /////////////////////////
 *
 * @generated from protobuf message TruckStatsRetrieveRequest
 */
export interface TruckStatsRetrieveRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
}
/**
 * @generated from protobuf message TruckStatsRetrieveReply
 */
export interface TruckStatsRetrieveReply {
    /**
     * @generated from protobuf field: int64 orders = 1;
     */
    orders: number;
    /**
     * @generated from protobuf field: int64 miles = 2;
     */
    miles: number;
}
/**
 * /////////////////////////
 * TruckCreate
 * /////////////////////////
 *
 * @generated from protobuf message TruckCreateRequest
 */
export interface TruckCreateRequest {
    /**
     * @generated from protobuf field: string reference_id = 1;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string vin = 2;
     */
    vin: string;
    /**
     * @generated from protobuf field: TruckModel.Type type = 3;
     */
    type: TruckModel_Type;
}
/**
 * @generated from protobuf message TruckCreateReply
 */
export interface TruckCreateReply {
    /**
     * @generated from protobuf field: TruckModel.Truck truck = 1;
     */
    truck?: TruckModel_Truck;
}
/**
 * /////////////////////////
 * TruckUserAssign
 * /////////////////////////
 *
 * @generated from protobuf message TruckUserAssignRequest
 */
export interface TruckUserAssignRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message TruckUserAssignReply
 */
export interface TruckUserAssignReply {
}
/**
 * /////////////////////////
 * TruckUserRemove
 * /////////////////////////
 *
 * @generated from protobuf message TruckUserRemoveRequest
 */
export interface TruckUserRemoveRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message TruckUserRemoveReply
 */
export interface TruckUserRemoveReply {
}
/**
 * /////////////////////////
 * TruckTrailerAssign
 * /////////////////////////
 *
 * @generated from protobuf message TruckTrailerAssignRequest
 */
export interface TruckTrailerAssignRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 2;
     */
    trailerId: string;
}
/**
 * @generated from protobuf message TruckTrailerAssignReply
 */
export interface TruckTrailerAssignReply {
}
/**
 * /////////////////////////
 * TruckTrailerRemove
 * /////////////////////////
 *
 * @generated from protobuf message TruckTrailerRemoveRequest
 */
export interface TruckTrailerRemoveRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 2;
     */
    trailerId: string;
}
/**
 * @generated from protobuf message TruckTrailerRemoveReply
 */
export interface TruckTrailerRemoveReply {
}
/**
 * /////////////////////////
 * TruckDriverPrimarySet
 * /////////////////////////
 *
 * @generated from protobuf message TruckDriverPrimarySetRequest
 */
export interface TruckDriverPrimarySetRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message TruckDriverPrimarySetReply
 */
export interface TruckDriverPrimarySetReply {
}
/**
 * /////////////////////////
 * TruckDriverRemove
 * /////////////////////////
 *
 * @generated from protobuf message TruckDriverRemoveRequest
 */
export interface TruckDriverRemoveRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message TruckDriverRemoveReply
 */
export interface TruckDriverRemoveReply {
}
/**
 * /////////////////////////
 * TruckDriverAssign
 * /////////////////////////
 *
 * @generated from protobuf message TruckDriverAssignRequest
 */
export interface TruckDriverAssignRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
    /**
     * @generated from protobuf field: bool primary = 3;
     */
    primary: boolean;
}
/**
 * @generated from protobuf message TruckDriverAssignReply
 */
export interface TruckDriverAssignReply {
}
/**
 * /////////////////////////
 * GetTrucksLoads
 * /////////////////////////
 *
 * @generated from protobuf message GetTrucksLoadsRequest
 */
export interface GetTrucksLoadsRequest {
    /**
     * @generated from protobuf field: string from_date = 1;
     */
    fromDate: string;
    /**
     * @generated from protobuf field: string end_date = 2;
     */
    endDate: string;
    /**
     * @generated from protobuf field: bool only_with_drivers = 3;
     */
    onlyWithDrivers: boolean;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply
 */
export interface GetTrucksLoadsReply {
    /**
     * @generated from protobuf field: repeated GetTrucksLoadsReply.Truck trucks = 1;
     */
    trucks: GetTrucksLoadsReply_Truck[];
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck
 */
export interface GetTrucksLoadsReply_Truck {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: repeated NoteModel.EntityNote notes = 4;
     */
    notes: NoteModel_EntityNote[];
    /**
     * @generated from protobuf field: int64 year = 5;
     */
    year: number;
    /**
     * @generated from protobuf field: string model = 6;
     */
    model: string;
    /**
     * @generated from protobuf field: string make = 7;
     */
    make: string;
    /**
     * @generated from protobuf field: string truck_title = 8;
     */
    truckTitle: string;
    /**
     * @generated from protobuf field: bool online = 9;
     */
    online: boolean;
    /**
     * @generated from protobuf field: repeated GetTrucksLoadsReply.Truck.Tag tags = 10;
     */
    tags: GetTrucksLoadsReply_Truck_Tag[];
    /**
     * Adjusted field numbers
     *
     * @generated from protobuf field: string status = 11;
     */
    status: string;
    /**
     * @generated from protobuf field: repeated GetTrucksLoadsReply.Truck.Driver drivers = 12;
     */
    drivers: GetTrucksLoadsReply_Truck_Driver[];
    /**
     * @generated from protobuf field: repeated GetTrucksLoadsReply.Truck.TimeOff time_offs = 13;
     */
    timeOffs: GetTrucksLoadsReply_Truck_TimeOff[];
    /**
     * @generated from protobuf field: repeated GetTrucksLoadsReply.Truck.Load loads = 14;
     */
    loads: GetTrucksLoadsReply_Truck_Load[];
    /**
     * @generated from protobuf field: bool covered = 15;
     */
    covered: boolean;
    /**
     * @generated from protobuf field: string time_uncovered = 16;
     */
    timeUncovered: string;
    /**
     * @generated from protobuf field: repeated string users = 17;
     */
    users: string[];
    /**
     * @generated from protobuf field: string vendor_id = 18;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: string trailer_id = 19;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string plate_id = 20;
     */
    plateId: string;
    /**
     * @generated from protobuf field: bool in_transit = 21;
     */
    inTransit: boolean;
    /**
     * @generated from protobuf field: repeated string load_statuses = 22;
     */
    loadStatuses: string[];
    /**
     * @generated from protobuf field: string trailer_type_id = 23;
     */
    trailerTypeId: string;
    /**
     * @generated from protobuf field: string avg_rpm = 24;
     */
    avgRpm: string;
    /**
     * @generated from protobuf field: string total_gross_amount = 25;
     */
    totalGrossAmount: string;
    /**
     * @generated from protobuf field: GetTrucksLoadsReply.Truck.Miles miles = 26;
     */
    miles?: GetTrucksLoadsReply_Truck_Miles;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.Tag
 */
export interface GetTrucksLoadsReply_Truck_Tag {
    /**
     * @generated from protobuf field: string tag_id = 1;
     */
    tagId: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.File
 */
export interface GetTrucksLoadsReply_Truck_File {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.Driver
 */
export interface GetTrucksLoadsReply_Truck_Driver {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_type_id = 2;
     */
    driverTypeId: string;
    /**
     * @generated from protobuf field: bool primary = 3;
     */
    primary: boolean;
    /**
     * @generated from protobuf field: int64 drive_time_available = 4;
     */
    driveTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 drive_time_accumulated = 5;
     */
    driveTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 drive_time_limit = 6;
     */
    driveTimeLimit: number;
    /**
     * @generated from protobuf field: int64 break_time_available = 7;
     */
    breakTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 break_time_accumulated = 8;
     */
    breakTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 break_time_limit = 9;
     */
    breakTimeLimit: number;
    /**
     * @generated from protobuf field: int64 shift_time_available = 10;
     */
    shiftTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 shift_time_accumulated = 11;
     */
    shiftTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 shift_time_limit = 12;
     */
    shiftTimeLimit: number;
    /**
     * @generated from protobuf field: int64 cycle_time_available = 13;
     */
    cycleTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 cycle_time_accumulated = 14;
     */
    cycleTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 cycle_time_limit = 15;
     */
    cycleTimeLimit: number;
    /**
     * @generated from protobuf field: string duty_status = 16;
     */
    dutyStatus: string;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.TimeOff
 */
export interface GetTrucksLoadsReply_Truck_TimeOff {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string start_at = 2;
     */
    startAt: string;
    /**
     * @generated from protobuf field: string end_at = 3;
     */
    endAt: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.Load
 */
export interface GetTrucksLoadsReply_Truck_Load {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string friendly_id = 2;
     */
    friendlyId: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string broker_id = 4;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string customer_id = 5;
     */
    customerId: string;
    /**
     * @generated from protobuf field: bool shipper_confirmed = 6;
     */
    shipperConfirmed: boolean;
    /**
     * @generated from protobuf field: bool driver_confirmed = 7;
     */
    driverConfirmed: boolean;
    /**
     * @generated from protobuf field: float gross_amount = 8;
     */
    grossAmount: number;
    /**
     * @generated from protobuf field: string gross_amount_formatted = 9;
     */
    grossAmountFormatted: string;
    /**
     * @generated from protobuf field: int64 total_miles = 10;
     */
    totalMiles: number;
    /**
     * @generated from protobuf field: int64 loaded_miles = 11;
     */
    loadedMiles: number;
    /**
     * @generated from protobuf field: int64 empty_miles = 12;
     */
    emptyMiles: number;
    /**
     * @generated from protobuf field: string rate_per_mile = 13;
     */
    ratePerMile: string;
    /**
     * @generated from protobuf field: LoadModel.Status status = 14;
     */
    status: LoadModel_Status;
    /**
     * @generated from protobuf field: repeated GetTrucksLoadsReply.Truck.Load.Stop stops = 15;
     */
    stops: GetTrucksLoadsReply_Truck_Load_Stop[];
    /**
     * @generated from protobuf field: string rpm = 16;
     */
    rpm: string;
    /**
     * @generated from protobuf field: string rpm_formatted = 17;
     */
    rpmFormatted: string;
    /**
     * @generated from protobuf field: string dispatcher_id = 18;
     */
    dispatcherId: string;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.Load.Stop
 */
export interface GetTrucksLoadsReply_Truck_Load_Stop {
    /**
     * @generated from protobuf field: string stop_id = 1;
     */
    stopId: string;
    /**
     * @generated from protobuf field: string load_id = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf field: int64 sequence = 3;
     */
    sequence: number;
    /**
     * @generated from protobuf field: int64 eta = 4;
     */
    eta: number;
    /**
     * @generated from protobuf field: string appointment_start_at = 5;
     */
    appointmentStartAt: string;
    /**
     * @generated from protobuf field: string appointment_end_at = 6;
     */
    appointmentEndAt: string;
    /**
     * @generated from protobuf field: string appointment_start_at_utc = 7;
     */
    appointmentStartAtUtc: string;
    /**
     * @generated from protobuf field: string appointment_end_at_utc = 8;
     */
    appointmentEndAtUtc: string;
    /**
     * @generated from protobuf field: string appointment_start_at_local = 9;
     */
    appointmentStartAtLocal: string;
    /**
     * @generated from protobuf field: string appointment_end_at_local = 10;
     */
    appointmentEndAtLocal: string;
    /**
     * @generated from protobuf field: string checked_in_at = 15;
     */
    checkedInAt: string;
    /**
     * @generated from protobuf field: string checked_in_at_utc = 16;
     */
    checkedInAtUtc: string;
    /**
     * @generated from protobuf field: string checked_in_at_local = 17;
     */
    checkedInAtLocal: string;
    /**
     * @generated from protobuf field: string type = 11;
     */
    type: string;
    /**
     * @generated from protobuf field: string note = 12;
     */
    note: string;
    /**
     * @generated from protobuf field: LoadModel.Stop.Status status = 13;
     */
    status: LoadModel_Stop_Status;
    /**
     * @generated from protobuf field: GetTrucksLoadsReply.Truck.Load.Stop.Location location = 14;
     */
    location?: GetTrucksLoadsReply_Truck_Load_Stop_Location;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.Load.Stop.Location
 */
export interface GetTrucksLoadsReply_Truck_Load_Stop_Location {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string city = 3;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
    /**
     * @generated from protobuf field: string address = 5;
     */
    address: string;
    /**
     * @generated from protobuf field: double lat = 6;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 7;
     */
    lon: number;
    /**
     * @generated from protobuf field: string timezone = 8;
     */
    timezone: string;
}
/**
 * @generated from protobuf message GetTrucksLoadsReply.Truck.Miles
 */
export interface GetTrucksLoadsReply_Truck_Miles {
    /**
     * @generated from protobuf field: int64 total = 1;
     */
    total: number;
    /**
     * @generated from protobuf field: int64 loaded = 2;
     */
    loaded: number;
    /**
     * @generated from protobuf field: int64 empty = 3;
     */
    empty: number;
}
/**
 * /////////////////////////
 * TrucksManifestsGet
 * /////////////////////////
 *
 * @generated from protobuf message TrucksManifestsGetRequest
 */
export interface TrucksManifestsGetRequest {
    /**
     * @generated from protobuf field: string from_date = 1;
     */
    fromDate: string;
    /**
     * @generated from protobuf field: string end_date = 2;
     */
    endDate: string;
    /**
     * @generated from protobuf field: bool only_with_drivers = 3;
     */
    onlyWithDrivers: boolean;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply
 */
export interface TrucksManifestsGetReply {
    /**
     * @generated from protobuf field: repeated TrucksManifestsGetReply.Truck trucks = 1;
     */
    trucks: TrucksManifestsGetReply_Truck[];
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck
 */
export interface TrucksManifestsGetReply_Truck {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: repeated NoteModel.EntityNote notes = 4;
     */
    notes: NoteModel_EntityNote[];
    /**
     * @generated from protobuf field: int64 year = 5;
     */
    year: number;
    /**
     * @generated from protobuf field: string model = 6;
     */
    model: string;
    /**
     * @generated from protobuf field: string make = 7;
     */
    make: string;
    /**
     * @generated from protobuf field: string truck_title = 8;
     */
    truckTitle: string;
    /**
     * @generated from protobuf field: bool online = 9;
     */
    online: boolean;
    /**
     * @generated from protobuf field: repeated TrucksManifestsGetReply.Truck.Tag tags = 10;
     */
    tags: TrucksManifestsGetReply_Truck_Tag[];
    /**
     * Adjusted field numbers
     *
     * @generated from protobuf field: string status = 11;
     */
    status: string;
    /**
     * @generated from protobuf field: repeated TrucksManifestsGetReply.Truck.Driver drivers = 12;
     */
    drivers: TrucksManifestsGetReply_Truck_Driver[];
    /**
     * @generated from protobuf field: repeated TrucksManifestsGetReply.Truck.TimeOff time_offs = 13;
     */
    timeOffs: TrucksManifestsGetReply_Truck_TimeOff[];
    /**
     * @generated from protobuf field: repeated TrucksManifestsGetReply.Truck.Load loads = 14;
     */
    loads: TrucksManifestsGetReply_Truck_Load[];
    /**
     * @generated from protobuf field: bool covered = 15;
     */
    covered: boolean;
    /**
     * @generated from protobuf field: string time_uncovered = 16;
     */
    timeUncovered: string;
    /**
     * @generated from protobuf field: repeated string users = 17;
     */
    users: string[];
    /**
     * @generated from protobuf field: string vendor_id = 18;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: string trailer_id = 19;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string plate_id = 20;
     */
    plateId: string;
    /**
     * @generated from protobuf field: bool in_transit = 21;
     */
    inTransit: boolean;
    /**
     * @generated from protobuf field: repeated string load_statuses = 22;
     */
    loadStatuses: string[];
    /**
     * @generated from protobuf field: string trailer_type_id = 23;
     */
    trailerTypeId: string;
    /**
     * @generated from protobuf field: string avg_rpm = 24;
     */
    avgRpm: string;
    /**
     * @generated from protobuf field: string total_gross_amount = 25;
     */
    totalGrossAmount: string;
    /**
     * @generated from protobuf field: TrucksManifestsGetReply.Truck.Miles miles = 26;
     */
    miles?: TrucksManifestsGetReply_Truck_Miles;
    /**
     * @generated from protobuf field: repeated ManifestModel.Manifest manifests = 27;
     */
    manifests: ManifestModel_Manifest[];
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.Tag
 */
export interface TrucksManifestsGetReply_Truck_Tag {
    /**
     * @generated from protobuf field: string tag_id = 1;
     */
    tagId: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.File
 */
export interface TrucksManifestsGetReply_Truck_File {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.Driver
 */
export interface TrucksManifestsGetReply_Truck_Driver {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_type_id = 2;
     */
    driverTypeId: string;
    /**
     * @generated from protobuf field: bool primary = 3;
     */
    primary: boolean;
    /**
     * @generated from protobuf field: int64 drive_time_available = 4;
     */
    driveTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 drive_time_accumulated = 5;
     */
    driveTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 drive_time_limit = 6;
     */
    driveTimeLimit: number;
    /**
     * @generated from protobuf field: int64 break_time_available = 7;
     */
    breakTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 break_time_accumulated = 8;
     */
    breakTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 break_time_limit = 9;
     */
    breakTimeLimit: number;
    /**
     * @generated from protobuf field: int64 shift_time_available = 10;
     */
    shiftTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 shift_time_accumulated = 11;
     */
    shiftTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 shift_time_limit = 12;
     */
    shiftTimeLimit: number;
    /**
     * @generated from protobuf field: int64 cycle_time_available = 13;
     */
    cycleTimeAvailable: number;
    /**
     * @generated from protobuf field: int64 cycle_time_accumulated = 14;
     */
    cycleTimeAccumulated: number;
    /**
     * @generated from protobuf field: int64 cycle_time_limit = 15;
     */
    cycleTimeLimit: number;
    /**
     * @generated from protobuf field: string duty_status = 16;
     */
    dutyStatus: string;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.TimeOff
 */
export interface TrucksManifestsGetReply_Truck_TimeOff {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string start_at = 2;
     */
    startAt: string;
    /**
     * @generated from protobuf field: string end_at = 3;
     */
    endAt: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.Load
 */
export interface TrucksManifestsGetReply_Truck_Load {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string friendly_id = 2;
     */
    friendlyId: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string broker_id = 4;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string customer_id = 5;
     */
    customerId: string;
    /**
     * @generated from protobuf field: bool shipper_confirmed = 6;
     */
    shipperConfirmed: boolean;
    /**
     * @generated from protobuf field: bool driver_confirmed = 7;
     */
    driverConfirmed: boolean;
    /**
     * @generated from protobuf field: float gross_amount = 8;
     */
    grossAmount: number;
    /**
     * @generated from protobuf field: string gross_amount_formatted = 9;
     */
    grossAmountFormatted: string;
    /**
     * @generated from protobuf field: int64 total_miles = 10;
     */
    totalMiles: number;
    /**
     * @generated from protobuf field: int64 loaded_miles = 11;
     */
    loadedMiles: number;
    /**
     * @generated from protobuf field: int64 empty_miles = 12;
     */
    emptyMiles: number;
    /**
     * @generated from protobuf field: string rate_per_mile = 13;
     */
    ratePerMile: string;
    /**
     * @generated from protobuf field: LoadModel.Status status = 14;
     */
    status: LoadModel_Status;
    /**
     * @generated from protobuf field: repeated TrucksManifestsGetReply.Truck.Load.Stop stops = 15;
     */
    stops: TrucksManifestsGetReply_Truck_Load_Stop[];
    /**
     * @generated from protobuf field: string rpm = 16;
     */
    rpm: string;
    /**
     * @generated from protobuf field: string rpm_formatted = 17;
     */
    rpmFormatted: string;
    /**
     * @generated from protobuf field: string dispatcher_id = 18;
     */
    dispatcherId: string;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.Load.Stop
 */
export interface TrucksManifestsGetReply_Truck_Load_Stop {
    /**
     * @generated from protobuf field: string stop_id = 1;
     */
    stopId: string;
    /**
     * @generated from protobuf field: string load_id = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf field: int64 sequence = 3;
     */
    sequence: number;
    /**
     * @generated from protobuf field: int64 eta = 4;
     */
    eta: number;
    /**
     * @generated from protobuf field: string appointment_start_at = 5;
     */
    appointmentStartAt: string;
    /**
     * @generated from protobuf field: string appointment_end_at = 6;
     */
    appointmentEndAt: string;
    /**
     * @generated from protobuf field: string appointment_start_at_utc = 7;
     */
    appointmentStartAtUtc: string;
    /**
     * @generated from protobuf field: string appointment_end_at_utc = 8;
     */
    appointmentEndAtUtc: string;
    /**
     * @generated from protobuf field: string appointment_start_at_local = 9;
     */
    appointmentStartAtLocal: string;
    /**
     * @generated from protobuf field: string appointment_end_at_local = 10;
     */
    appointmentEndAtLocal: string;
    /**
     * @generated from protobuf field: string checked_in_at = 15;
     */
    checkedInAt: string;
    /**
     * @generated from protobuf field: string checked_in_at_utc = 16;
     */
    checkedInAtUtc: string;
    /**
     * @generated from protobuf field: string checked_in_at_local = 17;
     */
    checkedInAtLocal: string;
    /**
     * @generated from protobuf field: string type = 11;
     */
    type: string;
    /**
     * @generated from protobuf field: string note = 12;
     */
    note: string;
    /**
     * @generated from protobuf field: LoadModel.Stop.Status status = 13;
     */
    status: LoadModel_Stop_Status;
    /**
     * @generated from protobuf field: TrucksManifestsGetReply.Truck.Load.Stop.Location location = 14;
     */
    location?: TrucksManifestsGetReply_Truck_Load_Stop_Location;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.Load.Stop.Location
 */
export interface TrucksManifestsGetReply_Truck_Load_Stop_Location {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string city = 3;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
    /**
     * @generated from protobuf field: string address = 5;
     */
    address: string;
    /**
     * @generated from protobuf field: double lat = 6;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 7;
     */
    lon: number;
    /**
     * @generated from protobuf field: string timezone = 8;
     */
    timezone: string;
}
/**
 * @generated from protobuf message TrucksManifestsGetReply.Truck.Miles
 */
export interface TrucksManifestsGetReply_Truck_Miles {
    /**
     * @generated from protobuf field: int64 total = 1;
     */
    total: number;
    /**
     * @generated from protobuf field: int64 loaded = 2;
     */
    loaded: number;
    /**
     * @generated from protobuf field: int64 empty = 3;
     */
    empty: number;
}
/**
 * /////////////////////////
 * GetTruckRoute
 * /////////////////////////
 *
 * @generated from protobuf message GetTruckRouteRequest
 */
export interface GetTruckRouteRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
}
/**
 * @generated from protobuf message GetTruckRouteReply
 */
export interface GetTruckRouteReply {
    /**
     * @generated from protobuf field: string polyline_to_next_stop = 1;
     */
    polylineToNextStop: string;
    /**
     * @generated from protobuf field: string polyline_to_destination = 2;
     */
    polylineToDestination: string;
    /**
     * @generated from protobuf field: map<string, GetTruckRouteReply.Stop> stops = 3;
     */
    stops: {
        [key: string]: GetTruckRouteReply_Stop;
    };
}
/**
 * @generated from protobuf message GetTruckRouteReply.Stop
 */
export interface GetTruckRouteReply_Stop {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string stop_id = 2;
     */
    stopId: string;
    /**
     * @generated from protobuf field: int64 load_friendly_id = 3;
     */
    loadFriendlyId: number;
    /**
     * @generated from protobuf field: GetTruckRouteReply.Stop.Location location = 4;
     */
    location?: GetTruckRouteReply_Stop_Location;
    /**
     * @generated from protobuf field: string appointment_start_at = 5;
     */
    appointmentStartAt: string;
    /**
     * @generated from protobuf field: string appointment_end_at = 6;
     */
    appointmentEndAt: string;
    /**
     * @generated from protobuf field: string arrived_at = 7;
     */
    arrivedAt: string;
    /**
     * @generated from protobuf field: string checked_in_at = 8;
     */
    checkedInAt: string;
    /**
     * @generated from protobuf field: string checked_out_at = 9;
     */
    checkedOutAt: string;
    /**
     * @generated from protobuf field: LoadModel.Stop.Status status = 10;
     */
    status: LoadModel_Stop_Status;
}
/**
 * @generated from protobuf message GetTruckRouteReply.Stop.Location
 */
export interface GetTruckRouteReply_Stop_Location {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
}
/**
 * /////////////////////////
 * TruckDelete
 * /////////////////////////
 *
 * @generated from protobuf message TruckDeleteRequest
 */
export interface TruckDeleteRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
}
/**
 * @generated from protobuf message TruckDeleteReply
 */
export interface TruckDeleteReply {
}
/**
 * /////////////////////////
 * TruckStatusUpdate
 * /////////////////////////
 *
 * @generated from protobuf message TruckStatusUpdateRequest
 */
export interface TruckStatusUpdateRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: TruckModel.Status status = 2;
     */
    status: TruckModel_Status;
}
/**
 * @generated from protobuf message TruckStatusUpdateReply
 */
export interface TruckStatusUpdateReply {
}
/**
 * /////////////////////////
 * TruckParkingLocationUpdate
 * /////////////////////////
 *
 * @generated from protobuf message TruckParkingLocationUpdateRequest
 */
export interface TruckParkingLocationUpdateRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string parking_location = 2;
     */
    parkingLocation: string;
}
/**
 * @generated from protobuf message TruckParkingLocationUpdateReply
 */
export interface TruckParkingLocationUpdateReply {
}
/**
 * /////////////////////////
 * TruckInsuranceEndorsedUpdate
 * /////////////////////////
 *
 * @generated from protobuf message TruckInsuranceEndorsedRequest
 */
export interface TruckInsuranceEndorsedRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: bool insurance_endorsed = 2;
     */
    insuranceEndorsed: boolean;
}
/**
 * @generated from protobuf message TruckInsuranceEndorsedReply
 */
export interface TruckInsuranceEndorsedReply {
}
/**
 * /////////////////////////
 * TruckUpdate
 * /////////////////////////
 *
 * @generated from protobuf message TruckUpdateRequest
 */
export interface TruckUpdateRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: TruckModel.Type type = 3;
     */
    type: TruckModel_Type;
    /**
     * @generated from protobuf field: string vin = 4;
     */
    vin: string;
    /**
     * @generated from protobuf field: string make = 5;
     */
    make: string;
    /**
     * @generated from protobuf field: string model = 6;
     */
    model: string;
    /**
     * @generated from protobuf field: int64 year = 7;
     */
    year: number;
    /**
     * @generated from protobuf field: string color = 8;
     */
    color: string;
    /**
     * @generated from protobuf field: string plate_id = 9;
     */
    plateId: string;
    /**
     * @generated from protobuf field: string vendor_id = 10;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: string toll_transponder = 11;
     */
    tollTransponder: string;
    /**
     * @generated from protobuf field: bool fuel_discounts_enabled = 12;
     */
    fuelDiscountsEnabled: boolean;
}
/**
 * @generated from protobuf message TruckUpdateReply
 */
export interface TruckUpdateReply {
}
/**
 * /////////////////////////
 * Truck Retrieve
 * /////////////////////////
 *
 * @generated from protobuf message TruckRetrieveRequest
 */
export interface TruckRetrieveRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
}
/**
 * @generated from protobuf message TruckRetrieveReply
 */
export interface TruckRetrieveReply {
    /**
     * @generated from protobuf field: TruckModel.Truck truck = 1;
     */
    truck?: TruckModel_Truck;
}
/**
 * /////////////////////////
 * Truck Get
 * /////////////////////////
 *
 * @generated from protobuf message TruckGetRequest
 */
export interface TruckGetRequest {
}
/**
 * @generated from protobuf message TruckGetReply
 */
export interface TruckGetReply {
    /**
     * @generated from protobuf field: repeated TruckModel.Truck trucks = 1;
     */
    trucks: TruckModel_Truck[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TruckStatsRetrieveRequest$Type extends MessageType<TruckStatsRetrieveRequest> {
    constructor() {
        super("TruckStatsRetrieveRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckStatsRetrieveRequest>): TruckStatsRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckStatsRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckStatsRetrieveRequest): TruckStatsRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckStatsRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckStatsRetrieveRequest
 */
export const TruckStatsRetrieveRequest = new TruckStatsRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckStatsRetrieveReply$Type extends MessageType<TruckStatsRetrieveReply> {
    constructor() {
        super("TruckStatsRetrieveReply", [
            { no: 1, name: "orders", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TruckStatsRetrieveReply>): TruckStatsRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orders = 0;
        message.miles = 0;
        if (value !== undefined)
            reflectionMergePartial<TruckStatsRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckStatsRetrieveReply): TruckStatsRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 orders */ 1:
                    message.orders = reader.int64().toNumber();
                    break;
                case /* int64 miles */ 2:
                    message.miles = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckStatsRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 orders = 1; */
        if (message.orders !== 0)
            writer.tag(1, WireType.Varint).int64(message.orders);
        /* int64 miles = 2; */
        if (message.miles !== 0)
            writer.tag(2, WireType.Varint).int64(message.miles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckStatsRetrieveReply
 */
export const TruckStatsRetrieveReply = new TruckStatsRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckCreateRequest$Type extends MessageType<TruckCreateRequest> {
    constructor() {
        super("TruckCreateRequest", [
            { no: 1, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["TruckModel.Type", TruckModel_Type, "TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<TruckCreateRequest>): TruckCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.referenceId = "";
        message.vin = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<TruckCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckCreateRequest): TruckCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reference_id */ 1:
                    message.referenceId = reader.string();
                    break;
                case /* string vin */ 2:
                    message.vin = reader.string();
                    break;
                case /* TruckModel.Type type */ 3:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reference_id = 1; */
        if (message.referenceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.referenceId);
        /* string vin = 2; */
        if (message.vin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vin);
        /* TruckModel.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckCreateRequest
 */
export const TruckCreateRequest = new TruckCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckCreateReply$Type extends MessageType<TruckCreateReply> {
    constructor() {
        super("TruckCreateReply", [
            { no: 1, name: "truck", kind: "message", T: () => TruckModel_Truck }
        ]);
    }
    create(value?: PartialMessage<TruckCreateReply>): TruckCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckCreateReply): TruckCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TruckModel.Truck truck */ 1:
                    message.truck = TruckModel_Truck.internalBinaryRead(reader, reader.uint32(), options, message.truck);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TruckModel.Truck truck = 1; */
        if (message.truck)
            TruckModel_Truck.internalBinaryWrite(message.truck, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckCreateReply
 */
export const TruckCreateReply = new TruckCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckUserAssignRequest$Type extends MessageType<TruckUserAssignRequest> {
    constructor() {
        super("TruckUserAssignRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckUserAssignRequest>): TruckUserAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckUserAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckUserAssignRequest): TruckUserAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckUserAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckUserAssignRequest
 */
export const TruckUserAssignRequest = new TruckUserAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckUserAssignReply$Type extends MessageType<TruckUserAssignReply> {
    constructor() {
        super("TruckUserAssignReply", []);
    }
    create(value?: PartialMessage<TruckUserAssignReply>): TruckUserAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckUserAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckUserAssignReply): TruckUserAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckUserAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckUserAssignReply
 */
export const TruckUserAssignReply = new TruckUserAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckUserRemoveRequest$Type extends MessageType<TruckUserRemoveRequest> {
    constructor() {
        super("TruckUserRemoveRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckUserRemoveRequest>): TruckUserRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckUserRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckUserRemoveRequest): TruckUserRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckUserRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckUserRemoveRequest
 */
export const TruckUserRemoveRequest = new TruckUserRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckUserRemoveReply$Type extends MessageType<TruckUserRemoveReply> {
    constructor() {
        super("TruckUserRemoveReply", []);
    }
    create(value?: PartialMessage<TruckUserRemoveReply>): TruckUserRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckUserRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckUserRemoveReply): TruckUserRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckUserRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckUserRemoveReply
 */
export const TruckUserRemoveReply = new TruckUserRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckTrailerAssignRequest$Type extends MessageType<TruckTrailerAssignRequest> {
    constructor() {
        super("TruckTrailerAssignRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckTrailerAssignRequest>): TruckTrailerAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.trailerId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckTrailerAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckTrailerAssignRequest): TruckTrailerAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 2:
                    message.trailerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckTrailerAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 2; */
        if (message.trailerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trailerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckTrailerAssignRequest
 */
export const TruckTrailerAssignRequest = new TruckTrailerAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckTrailerAssignReply$Type extends MessageType<TruckTrailerAssignReply> {
    constructor() {
        super("TruckTrailerAssignReply", []);
    }
    create(value?: PartialMessage<TruckTrailerAssignReply>): TruckTrailerAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckTrailerAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckTrailerAssignReply): TruckTrailerAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckTrailerAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckTrailerAssignReply
 */
export const TruckTrailerAssignReply = new TruckTrailerAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckTrailerRemoveRequest$Type extends MessageType<TruckTrailerRemoveRequest> {
    constructor() {
        super("TruckTrailerRemoveRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckTrailerRemoveRequest>): TruckTrailerRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.trailerId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckTrailerRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckTrailerRemoveRequest): TruckTrailerRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 2:
                    message.trailerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckTrailerRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 2; */
        if (message.trailerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trailerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckTrailerRemoveRequest
 */
export const TruckTrailerRemoveRequest = new TruckTrailerRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckTrailerRemoveReply$Type extends MessageType<TruckTrailerRemoveReply> {
    constructor() {
        super("TruckTrailerRemoveReply", []);
    }
    create(value?: PartialMessage<TruckTrailerRemoveReply>): TruckTrailerRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckTrailerRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckTrailerRemoveReply): TruckTrailerRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckTrailerRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckTrailerRemoveReply
 */
export const TruckTrailerRemoveReply = new TruckTrailerRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDriverPrimarySetRequest$Type extends MessageType<TruckDriverPrimarySetRequest> {
    constructor() {
        super("TruckDriverPrimarySetRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckDriverPrimarySetRequest>): TruckDriverPrimarySetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckDriverPrimarySetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDriverPrimarySetRequest): TruckDriverPrimarySetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckDriverPrimarySetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDriverPrimarySetRequest
 */
export const TruckDriverPrimarySetRequest = new TruckDriverPrimarySetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDriverPrimarySetReply$Type extends MessageType<TruckDriverPrimarySetReply> {
    constructor() {
        super("TruckDriverPrimarySetReply", []);
    }
    create(value?: PartialMessage<TruckDriverPrimarySetReply>): TruckDriverPrimarySetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckDriverPrimarySetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDriverPrimarySetReply): TruckDriverPrimarySetReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckDriverPrimarySetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDriverPrimarySetReply
 */
export const TruckDriverPrimarySetReply = new TruckDriverPrimarySetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDriverRemoveRequest$Type extends MessageType<TruckDriverRemoveRequest> {
    constructor() {
        super("TruckDriverRemoveRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckDriverRemoveRequest>): TruckDriverRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckDriverRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDriverRemoveRequest): TruckDriverRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckDriverRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDriverRemoveRequest
 */
export const TruckDriverRemoveRequest = new TruckDriverRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDriverRemoveReply$Type extends MessageType<TruckDriverRemoveReply> {
    constructor() {
        super("TruckDriverRemoveReply", []);
    }
    create(value?: PartialMessage<TruckDriverRemoveReply>): TruckDriverRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckDriverRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDriverRemoveReply): TruckDriverRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckDriverRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDriverRemoveReply
 */
export const TruckDriverRemoveReply = new TruckDriverRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDriverAssignRequest$Type extends MessageType<TruckDriverAssignRequest> {
    constructor() {
        super("TruckDriverAssignRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TruckDriverAssignRequest>): TruckDriverAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.driverId = "";
        message.primary = false;
        if (value !== undefined)
            reflectionMergePartial<TruckDriverAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDriverAssignRequest): TruckDriverAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                case /* bool primary */ 3:
                    message.primary = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckDriverAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        /* bool primary = 3; */
        if (message.primary !== false)
            writer.tag(3, WireType.Varint).bool(message.primary);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDriverAssignRequest
 */
export const TruckDriverAssignRequest = new TruckDriverAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDriverAssignReply$Type extends MessageType<TruckDriverAssignReply> {
    constructor() {
        super("TruckDriverAssignReply", []);
    }
    create(value?: PartialMessage<TruckDriverAssignReply>): TruckDriverAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckDriverAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDriverAssignReply): TruckDriverAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckDriverAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDriverAssignReply
 */
export const TruckDriverAssignReply = new TruckDriverAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsRequest$Type extends MessageType<GetTrucksLoadsRequest> {
    constructor() {
        super("GetTrucksLoadsRequest", [
            { no: 1, name: "from_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "only_with_drivers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsRequest>): GetTrucksLoadsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fromDate = "";
        message.endDate = "";
        message.onlyWithDrivers = false;
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsRequest): GetTrucksLoadsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_date */ 1:
                    message.fromDate = reader.string();
                    break;
                case /* string end_date */ 2:
                    message.endDate = reader.string();
                    break;
                case /* bool only_with_drivers */ 3:
                    message.onlyWithDrivers = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_date = 1; */
        if (message.fromDate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromDate);
        /* string end_date = 2; */
        if (message.endDate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.endDate);
        /* bool only_with_drivers = 3; */
        if (message.onlyWithDrivers !== false)
            writer.tag(3, WireType.Varint).bool(message.onlyWithDrivers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsRequest
 */
export const GetTrucksLoadsRequest = new GetTrucksLoadsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply$Type extends MessageType<GetTrucksLoadsReply> {
    constructor() {
        super("GetTrucksLoadsReply", [
            { no: 1, name: "trucks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTrucksLoadsReply_Truck },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply>): GetTrucksLoadsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trucks = [];
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply): GetTrucksLoadsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetTrucksLoadsReply.Truck trucks */ 1:
                    message.trucks.push(GetTrucksLoadsReply_Truck.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetTrucksLoadsReply.Truck trucks = 1; */
        for (let i = 0; i < message.trucks.length; i++)
            GetTrucksLoadsReply_Truck.internalBinaryWrite(message.trucks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply
 */
export const GetTrucksLoadsReply = new GetTrucksLoadsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck$Type extends MessageType<GetTrucksLoadsReply_Truck> {
    constructor() {
        super("GetTrucksLoadsReply.Truck", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "notes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NoteModel_EntityNote },
            { no: 5, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "make", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "truck_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "online", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTrucksLoadsReply_Truck_Tag },
            { no: 11, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTrucksLoadsReply_Truck_Driver },
            { no: 13, name: "time_offs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTrucksLoadsReply_Truck_TimeOff },
            { no: 14, name: "loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTrucksLoadsReply_Truck_Load },
            { no: 15, name: "covered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "time_uncovered", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "in_transit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "load_statuses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "avg_rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "total_gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "miles", kind: "message", T: () => GetTrucksLoadsReply_Truck_Miles }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck>): GetTrucksLoadsReply_Truck {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.referenceId = "";
        message.type = "";
        message.notes = [];
        message.year = 0;
        message.model = "";
        message.make = "";
        message.truckTitle = "";
        message.online = false;
        message.tags = [];
        message.status = "";
        message.drivers = [];
        message.timeOffs = [];
        message.loads = [];
        message.covered = false;
        message.timeUncovered = "";
        message.users = [];
        message.vendorId = "";
        message.trailerId = "";
        message.plateId = "";
        message.inTransit = false;
        message.loadStatuses = [];
        message.trailerTypeId = "";
        message.avgRpm = "";
        message.totalGrossAmount = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck): GetTrucksLoadsReply_Truck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* repeated NoteModel.EntityNote notes */ 4:
                    message.notes.push(NoteModel_EntityNote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 year */ 5:
                    message.year = reader.int64().toNumber();
                    break;
                case /* string model */ 6:
                    message.model = reader.string();
                    break;
                case /* string make */ 7:
                    message.make = reader.string();
                    break;
                case /* string truck_title */ 8:
                    message.truckTitle = reader.string();
                    break;
                case /* bool online */ 9:
                    message.online = reader.bool();
                    break;
                case /* repeated GetTrucksLoadsReply.Truck.Tag tags */ 10:
                    message.tags.push(GetTrucksLoadsReply_Truck_Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string status */ 11:
                    message.status = reader.string();
                    break;
                case /* repeated GetTrucksLoadsReply.Truck.Driver drivers */ 12:
                    message.drivers.push(GetTrucksLoadsReply_Truck_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated GetTrucksLoadsReply.Truck.TimeOff time_offs */ 13:
                    message.timeOffs.push(GetTrucksLoadsReply_Truck_TimeOff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated GetTrucksLoadsReply.Truck.Load loads */ 14:
                    message.loads.push(GetTrucksLoadsReply_Truck_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool covered */ 15:
                    message.covered = reader.bool();
                    break;
                case /* string time_uncovered */ 16:
                    message.timeUncovered = reader.string();
                    break;
                case /* repeated string users */ 17:
                    message.users.push(reader.string());
                    break;
                case /* string vendor_id */ 18:
                    message.vendorId = reader.string();
                    break;
                case /* string trailer_id */ 19:
                    message.trailerId = reader.string();
                    break;
                case /* string plate_id */ 20:
                    message.plateId = reader.string();
                    break;
                case /* bool in_transit */ 21:
                    message.inTransit = reader.bool();
                    break;
                case /* repeated string load_statuses */ 22:
                    message.loadStatuses.push(reader.string());
                    break;
                case /* string trailer_type_id */ 23:
                    message.trailerTypeId = reader.string();
                    break;
                case /* string avg_rpm */ 24:
                    message.avgRpm = reader.string();
                    break;
                case /* string total_gross_amount */ 25:
                    message.totalGrossAmount = reader.string();
                    break;
                case /* GetTrucksLoadsReply.Truck.Miles miles */ 26:
                    message.miles = GetTrucksLoadsReply_Truck_Miles.internalBinaryRead(reader, reader.uint32(), options, message.miles);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* repeated NoteModel.EntityNote notes = 4; */
        for (let i = 0; i < message.notes.length; i++)
            NoteModel_EntityNote.internalBinaryWrite(message.notes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 year = 5; */
        if (message.year !== 0)
            writer.tag(5, WireType.Varint).int64(message.year);
        /* string model = 6; */
        if (message.model !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.model);
        /* string make = 7; */
        if (message.make !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.make);
        /* string truck_title = 8; */
        if (message.truckTitle !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.truckTitle);
        /* bool online = 9; */
        if (message.online !== false)
            writer.tag(9, WireType.Varint).bool(message.online);
        /* repeated GetTrucksLoadsReply.Truck.Tag tags = 10; */
        for (let i = 0; i < message.tags.length; i++)
            GetTrucksLoadsReply_Truck_Tag.internalBinaryWrite(message.tags[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string status = 11; */
        if (message.status !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.status);
        /* repeated GetTrucksLoadsReply.Truck.Driver drivers = 12; */
        for (let i = 0; i < message.drivers.length; i++)
            GetTrucksLoadsReply_Truck_Driver.internalBinaryWrite(message.drivers[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetTrucksLoadsReply.Truck.TimeOff time_offs = 13; */
        for (let i = 0; i < message.timeOffs.length; i++)
            GetTrucksLoadsReply_Truck_TimeOff.internalBinaryWrite(message.timeOffs[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetTrucksLoadsReply.Truck.Load loads = 14; */
        for (let i = 0; i < message.loads.length; i++)
            GetTrucksLoadsReply_Truck_Load.internalBinaryWrite(message.loads[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool covered = 15; */
        if (message.covered !== false)
            writer.tag(15, WireType.Varint).bool(message.covered);
        /* string time_uncovered = 16; */
        if (message.timeUncovered !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.timeUncovered);
        /* repeated string users = 17; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(17, WireType.LengthDelimited).string(message.users[i]);
        /* string vendor_id = 18; */
        if (message.vendorId !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.vendorId);
        /* string trailer_id = 19; */
        if (message.trailerId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.trailerId);
        /* string plate_id = 20; */
        if (message.plateId !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.plateId);
        /* bool in_transit = 21; */
        if (message.inTransit !== false)
            writer.tag(21, WireType.Varint).bool(message.inTransit);
        /* repeated string load_statuses = 22; */
        for (let i = 0; i < message.loadStatuses.length; i++)
            writer.tag(22, WireType.LengthDelimited).string(message.loadStatuses[i]);
        /* string trailer_type_id = 23; */
        if (message.trailerTypeId !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.trailerTypeId);
        /* string avg_rpm = 24; */
        if (message.avgRpm !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.avgRpm);
        /* string total_gross_amount = 25; */
        if (message.totalGrossAmount !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.totalGrossAmount);
        /* GetTrucksLoadsReply.Truck.Miles miles = 26; */
        if (message.miles)
            GetTrucksLoadsReply_Truck_Miles.internalBinaryWrite(message.miles, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck
 */
export const GetTrucksLoadsReply_Truck = new GetTrucksLoadsReply_Truck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_Tag$Type extends MessageType<GetTrucksLoadsReply_Truck_Tag> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.Tag", [
            { no: 1, name: "tag_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_Tag>): GetTrucksLoadsReply_Truck_Tag {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tagId = "";
        message.value = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_Tag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_Tag): GetTrucksLoadsReply_Truck_Tag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag_id */ 1:
                    message.tagId = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_Tag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tag_id = 1; */
        if (message.tagId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tagId);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.Tag
 */
export const GetTrucksLoadsReply_Truck_Tag = new GetTrucksLoadsReply_Truck_Tag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_File$Type extends MessageType<GetTrucksLoadsReply_Truck_File> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.File", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_File>): GetTrucksLoadsReply_Truck_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_File): GetTrucksLoadsReply_Truck_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.File
 */
export const GetTrucksLoadsReply_Truck_File = new GetTrucksLoadsReply_Truck_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_Driver$Type extends MessageType<GetTrucksLoadsReply_Truck_Driver> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.Driver", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "drive_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "drive_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "drive_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "break_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "break_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "break_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "shift_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "shift_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "shift_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "cycle_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "cycle_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "cycle_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 16, name: "duty_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_Driver>): GetTrucksLoadsReply_Truck_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.driverTypeId = "";
        message.primary = false;
        message.driveTimeAvailable = 0;
        message.driveTimeAccumulated = 0;
        message.driveTimeLimit = 0;
        message.breakTimeAvailable = 0;
        message.breakTimeAccumulated = 0;
        message.breakTimeLimit = 0;
        message.shiftTimeAvailable = 0;
        message.shiftTimeAccumulated = 0;
        message.shiftTimeLimit = 0;
        message.cycleTimeAvailable = 0;
        message.cycleTimeAccumulated = 0;
        message.cycleTimeLimit = 0;
        message.dutyStatus = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_Driver): GetTrucksLoadsReply_Truck_Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string driver_type_id */ 2:
                    message.driverTypeId = reader.string();
                    break;
                case /* bool primary */ 3:
                    message.primary = reader.bool();
                    break;
                case /* int64 drive_time_available */ 4:
                    message.driveTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 drive_time_accumulated */ 5:
                    message.driveTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 drive_time_limit */ 6:
                    message.driveTimeLimit = reader.int64().toNumber();
                    break;
                case /* int64 break_time_available */ 7:
                    message.breakTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 break_time_accumulated */ 8:
                    message.breakTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 break_time_limit */ 9:
                    message.breakTimeLimit = reader.int64().toNumber();
                    break;
                case /* int64 shift_time_available */ 10:
                    message.shiftTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 shift_time_accumulated */ 11:
                    message.shiftTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 shift_time_limit */ 12:
                    message.shiftTimeLimit = reader.int64().toNumber();
                    break;
                case /* int64 cycle_time_available */ 13:
                    message.cycleTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 cycle_time_accumulated */ 14:
                    message.cycleTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 cycle_time_limit */ 15:
                    message.cycleTimeLimit = reader.int64().toNumber();
                    break;
                case /* string duty_status */ 16:
                    message.dutyStatus = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string driver_type_id = 2; */
        if (message.driverTypeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverTypeId);
        /* bool primary = 3; */
        if (message.primary !== false)
            writer.tag(3, WireType.Varint).bool(message.primary);
        /* int64 drive_time_available = 4; */
        if (message.driveTimeAvailable !== 0)
            writer.tag(4, WireType.Varint).int64(message.driveTimeAvailable);
        /* int64 drive_time_accumulated = 5; */
        if (message.driveTimeAccumulated !== 0)
            writer.tag(5, WireType.Varint).int64(message.driveTimeAccumulated);
        /* int64 drive_time_limit = 6; */
        if (message.driveTimeLimit !== 0)
            writer.tag(6, WireType.Varint).int64(message.driveTimeLimit);
        /* int64 break_time_available = 7; */
        if (message.breakTimeAvailable !== 0)
            writer.tag(7, WireType.Varint).int64(message.breakTimeAvailable);
        /* int64 break_time_accumulated = 8; */
        if (message.breakTimeAccumulated !== 0)
            writer.tag(8, WireType.Varint).int64(message.breakTimeAccumulated);
        /* int64 break_time_limit = 9; */
        if (message.breakTimeLimit !== 0)
            writer.tag(9, WireType.Varint).int64(message.breakTimeLimit);
        /* int64 shift_time_available = 10; */
        if (message.shiftTimeAvailable !== 0)
            writer.tag(10, WireType.Varint).int64(message.shiftTimeAvailable);
        /* int64 shift_time_accumulated = 11; */
        if (message.shiftTimeAccumulated !== 0)
            writer.tag(11, WireType.Varint).int64(message.shiftTimeAccumulated);
        /* int64 shift_time_limit = 12; */
        if (message.shiftTimeLimit !== 0)
            writer.tag(12, WireType.Varint).int64(message.shiftTimeLimit);
        /* int64 cycle_time_available = 13; */
        if (message.cycleTimeAvailable !== 0)
            writer.tag(13, WireType.Varint).int64(message.cycleTimeAvailable);
        /* int64 cycle_time_accumulated = 14; */
        if (message.cycleTimeAccumulated !== 0)
            writer.tag(14, WireType.Varint).int64(message.cycleTimeAccumulated);
        /* int64 cycle_time_limit = 15; */
        if (message.cycleTimeLimit !== 0)
            writer.tag(15, WireType.Varint).int64(message.cycleTimeLimit);
        /* string duty_status = 16; */
        if (message.dutyStatus !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.dutyStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.Driver
 */
export const GetTrucksLoadsReply_Truck_Driver = new GetTrucksLoadsReply_Truck_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_TimeOff$Type extends MessageType<GetTrucksLoadsReply_Truck_TimeOff> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.TimeOff", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_TimeOff>): GetTrucksLoadsReply_Truck_TimeOff {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.startAt = "";
        message.endAt = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_TimeOff>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_TimeOff): GetTrucksLoadsReply_Truck_TimeOff {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string start_at */ 2:
                    message.startAt = reader.string();
                    break;
                case /* string end_at */ 3:
                    message.endAt = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_TimeOff, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string start_at = 2; */
        if (message.startAt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startAt);
        /* string end_at = 3; */
        if (message.endAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.endAt);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.TimeOff
 */
export const GetTrucksLoadsReply_Truck_TimeOff = new GetTrucksLoadsReply_Truck_TimeOff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_Load$Type extends MessageType<GetTrucksLoadsReply_Truck_Load> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.Load", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "shipper_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "driver_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "gross_amount", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "gross_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "total_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "empty_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "rate_per_mile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 15, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTrucksLoadsReply_Truck_Load_Stop },
            { no: 16, name: "rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "rpm_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "dispatcher_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_Load>): GetTrucksLoadsReply_Truck_Load {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.friendlyId = "";
        message.referenceId = "";
        message.brokerId = "";
        message.customerId = "";
        message.shipperConfirmed = false;
        message.driverConfirmed = false;
        message.grossAmount = 0;
        message.grossAmountFormatted = "";
        message.totalMiles = 0;
        message.loadedMiles = 0;
        message.emptyMiles = 0;
        message.ratePerMile = "";
        message.status = 0;
        message.stops = [];
        message.rpm = "";
        message.rpmFormatted = "";
        message.dispatcherId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_Load>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_Load): GetTrucksLoadsReply_Truck_Load {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string friendly_id */ 2:
                    message.friendlyId = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string broker_id */ 4:
                    message.brokerId = reader.string();
                    break;
                case /* string customer_id */ 5:
                    message.customerId = reader.string();
                    break;
                case /* bool shipper_confirmed */ 6:
                    message.shipperConfirmed = reader.bool();
                    break;
                case /* bool driver_confirmed */ 7:
                    message.driverConfirmed = reader.bool();
                    break;
                case /* float gross_amount */ 8:
                    message.grossAmount = reader.float();
                    break;
                case /* string gross_amount_formatted */ 9:
                    message.grossAmountFormatted = reader.string();
                    break;
                case /* int64 total_miles */ 10:
                    message.totalMiles = reader.int64().toNumber();
                    break;
                case /* int64 loaded_miles */ 11:
                    message.loadedMiles = reader.int64().toNumber();
                    break;
                case /* int64 empty_miles */ 12:
                    message.emptyMiles = reader.int64().toNumber();
                    break;
                case /* string rate_per_mile */ 13:
                    message.ratePerMile = reader.string();
                    break;
                case /* LoadModel.Status status */ 14:
                    message.status = reader.int32();
                    break;
                case /* repeated GetTrucksLoadsReply.Truck.Load.Stop stops */ 15:
                    message.stops.push(GetTrucksLoadsReply_Truck_Load_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string rpm */ 16:
                    message.rpm = reader.string();
                    break;
                case /* string rpm_formatted */ 17:
                    message.rpmFormatted = reader.string();
                    break;
                case /* string dispatcher_id */ 18:
                    message.dispatcherId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_Load, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string friendly_id = 2; */
        if (message.friendlyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyId);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string broker_id = 4; */
        if (message.brokerId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.brokerId);
        /* string customer_id = 5; */
        if (message.customerId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.customerId);
        /* bool shipper_confirmed = 6; */
        if (message.shipperConfirmed !== false)
            writer.tag(6, WireType.Varint).bool(message.shipperConfirmed);
        /* bool driver_confirmed = 7; */
        if (message.driverConfirmed !== false)
            writer.tag(7, WireType.Varint).bool(message.driverConfirmed);
        /* float gross_amount = 8; */
        if (message.grossAmount !== 0)
            writer.tag(8, WireType.Bit32).float(message.grossAmount);
        /* string gross_amount_formatted = 9; */
        if (message.grossAmountFormatted !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.grossAmountFormatted);
        /* int64 total_miles = 10; */
        if (message.totalMiles !== 0)
            writer.tag(10, WireType.Varint).int64(message.totalMiles);
        /* int64 loaded_miles = 11; */
        if (message.loadedMiles !== 0)
            writer.tag(11, WireType.Varint).int64(message.loadedMiles);
        /* int64 empty_miles = 12; */
        if (message.emptyMiles !== 0)
            writer.tag(12, WireType.Varint).int64(message.emptyMiles);
        /* string rate_per_mile = 13; */
        if (message.ratePerMile !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.ratePerMile);
        /* LoadModel.Status status = 14; */
        if (message.status !== 0)
            writer.tag(14, WireType.Varint).int32(message.status);
        /* repeated GetTrucksLoadsReply.Truck.Load.Stop stops = 15; */
        for (let i = 0; i < message.stops.length; i++)
            GetTrucksLoadsReply_Truck_Load_Stop.internalBinaryWrite(message.stops[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string rpm = 16; */
        if (message.rpm !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.rpm);
        /* string rpm_formatted = 17; */
        if (message.rpmFormatted !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.rpmFormatted);
        /* string dispatcher_id = 18; */
        if (message.dispatcherId !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.dispatcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.Load
 */
export const GetTrucksLoadsReply_Truck_Load = new GetTrucksLoadsReply_Truck_Load$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_Load_Stop$Type extends MessageType<GetTrucksLoadsReply_Truck_Load_Stop> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.Load.Stop", [
            { no: 1, name: "stop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "eta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "appointment_start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "appointment_end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "appointment_start_at_utc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "appointment_end_at_utc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "appointment_start_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "appointment_end_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "checked_in_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "checked_in_at_utc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "checked_in_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "status", kind: "enum", T: () => ["LoadModel.Stop.Status", LoadModel_Stop_Status] },
            { no: 14, name: "location", kind: "message", T: () => GetTrucksLoadsReply_Truck_Load_Stop_Location }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_Load_Stop>): GetTrucksLoadsReply_Truck_Load_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stopId = "";
        message.loadId = "";
        message.sequence = 0;
        message.eta = 0;
        message.appointmentStartAt = "";
        message.appointmentEndAt = "";
        message.appointmentStartAtUtc = "";
        message.appointmentEndAtUtc = "";
        message.appointmentStartAtLocal = "";
        message.appointmentEndAtLocal = "";
        message.checkedInAt = "";
        message.checkedInAtUtc = "";
        message.checkedInAtLocal = "";
        message.type = "";
        message.note = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_Load_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_Load_Stop): GetTrucksLoadsReply_Truck_Load_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stop_id */ 1:
                    message.stopId = reader.string();
                    break;
                case /* string load_id */ 2:
                    message.loadId = reader.string();
                    break;
                case /* int64 sequence */ 3:
                    message.sequence = reader.int64().toNumber();
                    break;
                case /* int64 eta */ 4:
                    message.eta = reader.int64().toNumber();
                    break;
                case /* string appointment_start_at */ 5:
                    message.appointmentStartAt = reader.string();
                    break;
                case /* string appointment_end_at */ 6:
                    message.appointmentEndAt = reader.string();
                    break;
                case /* string appointment_start_at_utc */ 7:
                    message.appointmentStartAtUtc = reader.string();
                    break;
                case /* string appointment_end_at_utc */ 8:
                    message.appointmentEndAtUtc = reader.string();
                    break;
                case /* string appointment_start_at_local */ 9:
                    message.appointmentStartAtLocal = reader.string();
                    break;
                case /* string appointment_end_at_local */ 10:
                    message.appointmentEndAtLocal = reader.string();
                    break;
                case /* string checked_in_at */ 15:
                    message.checkedInAt = reader.string();
                    break;
                case /* string checked_in_at_utc */ 16:
                    message.checkedInAtUtc = reader.string();
                    break;
                case /* string checked_in_at_local */ 17:
                    message.checkedInAtLocal = reader.string();
                    break;
                case /* string type */ 11:
                    message.type = reader.string();
                    break;
                case /* string note */ 12:
                    message.note = reader.string();
                    break;
                case /* LoadModel.Stop.Status status */ 13:
                    message.status = reader.int32();
                    break;
                case /* GetTrucksLoadsReply.Truck.Load.Stop.Location location */ 14:
                    message.location = GetTrucksLoadsReply_Truck_Load_Stop_Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_Load_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stop_id = 1; */
        if (message.stopId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stopId);
        /* string load_id = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* int64 sequence = 3; */
        if (message.sequence !== 0)
            writer.tag(3, WireType.Varint).int64(message.sequence);
        /* int64 eta = 4; */
        if (message.eta !== 0)
            writer.tag(4, WireType.Varint).int64(message.eta);
        /* string appointment_start_at = 5; */
        if (message.appointmentStartAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appointmentStartAt);
        /* string appointment_end_at = 6; */
        if (message.appointmentEndAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.appointmentEndAt);
        /* string appointment_start_at_utc = 7; */
        if (message.appointmentStartAtUtc !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.appointmentStartAtUtc);
        /* string appointment_end_at_utc = 8; */
        if (message.appointmentEndAtUtc !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appointmentEndAtUtc);
        /* string appointment_start_at_local = 9; */
        if (message.appointmentStartAtLocal !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.appointmentStartAtLocal);
        /* string appointment_end_at_local = 10; */
        if (message.appointmentEndAtLocal !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.appointmentEndAtLocal);
        /* string checked_in_at = 15; */
        if (message.checkedInAt !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.checkedInAt);
        /* string checked_in_at_utc = 16; */
        if (message.checkedInAtUtc !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.checkedInAtUtc);
        /* string checked_in_at_local = 17; */
        if (message.checkedInAtLocal !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.checkedInAtLocal);
        /* string type = 11; */
        if (message.type !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.type);
        /* string note = 12; */
        if (message.note !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.note);
        /* LoadModel.Stop.Status status = 13; */
        if (message.status !== 0)
            writer.tag(13, WireType.Varint).int32(message.status);
        /* GetTrucksLoadsReply.Truck.Load.Stop.Location location = 14; */
        if (message.location)
            GetTrucksLoadsReply_Truck_Load_Stop_Location.internalBinaryWrite(message.location, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.Load.Stop
 */
export const GetTrucksLoadsReply_Truck_Load_Stop = new GetTrucksLoadsReply_Truck_Load_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_Load_Stop_Location$Type extends MessageType<GetTrucksLoadsReply_Truck_Load_Stop_Location> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.Load.Stop.Location", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_Load_Stop_Location>): GetTrucksLoadsReply_Truck_Load_Stop_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.city = "";
        message.state = "";
        message.address = "";
        message.lat = 0;
        message.lon = 0;
        message.timezone = "";
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_Load_Stop_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_Load_Stop_Location): GetTrucksLoadsReply_Truck_Load_Stop_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string city */ 3:
                    message.city = reader.string();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                case /* string address */ 5:
                    message.address = reader.string();
                    break;
                case /* double lat */ 6:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 7:
                    message.lon = reader.double();
                    break;
                case /* string timezone */ 8:
                    message.timezone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_Load_Stop_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string city = 3; */
        if (message.city !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.city);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        /* string address = 5; */
        if (message.address !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.address);
        /* double lat = 6; */
        if (message.lat !== 0)
            writer.tag(6, WireType.Bit64).double(message.lat);
        /* double lon = 7; */
        if (message.lon !== 0)
            writer.tag(7, WireType.Bit64).double(message.lon);
        /* string timezone = 8; */
        if (message.timezone !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.timezone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.Load.Stop.Location
 */
export const GetTrucksLoadsReply_Truck_Load_Stop_Location = new GetTrucksLoadsReply_Truck_Load_Stop_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrucksLoadsReply_Truck_Miles$Type extends MessageType<GetTrucksLoadsReply_Truck_Miles> {
    constructor() {
        super("GetTrucksLoadsReply.Truck.Miles", [
            { no: 1, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "loaded", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "empty", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetTrucksLoadsReply_Truck_Miles>): GetTrucksLoadsReply_Truck_Miles {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.total = 0;
        message.loaded = 0;
        message.empty = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTrucksLoadsReply_Truck_Miles>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrucksLoadsReply_Truck_Miles): GetTrucksLoadsReply_Truck_Miles {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total */ 1:
                    message.total = reader.int64().toNumber();
                    break;
                case /* int64 loaded */ 2:
                    message.loaded = reader.int64().toNumber();
                    break;
                case /* int64 empty */ 3:
                    message.empty = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrucksLoadsReply_Truck_Miles, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).int64(message.total);
        /* int64 loaded = 2; */
        if (message.loaded !== 0)
            writer.tag(2, WireType.Varint).int64(message.loaded);
        /* int64 empty = 3; */
        if (message.empty !== 0)
            writer.tag(3, WireType.Varint).int64(message.empty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrucksLoadsReply.Truck.Miles
 */
export const GetTrucksLoadsReply_Truck_Miles = new GetTrucksLoadsReply_Truck_Miles$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetRequest$Type extends MessageType<TrucksManifestsGetRequest> {
    constructor() {
        super("TrucksManifestsGetRequest", [
            { no: 1, name: "from_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "only_with_drivers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetRequest>): TrucksManifestsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fromDate = "";
        message.endDate = "";
        message.onlyWithDrivers = false;
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetRequest): TrucksManifestsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_date */ 1:
                    message.fromDate = reader.string();
                    break;
                case /* string end_date */ 2:
                    message.endDate = reader.string();
                    break;
                case /* bool only_with_drivers */ 3:
                    message.onlyWithDrivers = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_date = 1; */
        if (message.fromDate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromDate);
        /* string end_date = 2; */
        if (message.endDate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.endDate);
        /* bool only_with_drivers = 3; */
        if (message.onlyWithDrivers !== false)
            writer.tag(3, WireType.Varint).bool(message.onlyWithDrivers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetRequest
 */
export const TrucksManifestsGetRequest = new TrucksManifestsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply$Type extends MessageType<TrucksManifestsGetReply> {
    constructor() {
        super("TrucksManifestsGetReply", [
            { no: 1, name: "trucks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrucksManifestsGetReply_Truck },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply>): TrucksManifestsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trucks = [];
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply): TrucksManifestsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TrucksManifestsGetReply.Truck trucks */ 1:
                    message.trucks.push(TrucksManifestsGetReply_Truck.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TrucksManifestsGetReply.Truck trucks = 1; */
        for (let i = 0; i < message.trucks.length; i++)
            TrucksManifestsGetReply_Truck.internalBinaryWrite(message.trucks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply
 */
export const TrucksManifestsGetReply = new TrucksManifestsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck$Type extends MessageType<TrucksManifestsGetReply_Truck> {
    constructor() {
        super("TrucksManifestsGetReply.Truck", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "notes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NoteModel_EntityNote },
            { no: 5, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "make", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "truck_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "online", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrucksManifestsGetReply_Truck_Tag },
            { no: 11, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrucksManifestsGetReply_Truck_Driver },
            { no: 13, name: "time_offs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrucksManifestsGetReply_Truck_TimeOff },
            { no: 14, name: "loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrucksManifestsGetReply_Truck_Load },
            { no: 15, name: "covered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "time_uncovered", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "in_transit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "load_statuses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "trailer_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "avg_rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "total_gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "miles", kind: "message", T: () => TrucksManifestsGetReply_Truck_Miles },
            { no: 27, name: "manifests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck>): TrucksManifestsGetReply_Truck {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.referenceId = "";
        message.type = "";
        message.notes = [];
        message.year = 0;
        message.model = "";
        message.make = "";
        message.truckTitle = "";
        message.online = false;
        message.tags = [];
        message.status = "";
        message.drivers = [];
        message.timeOffs = [];
        message.loads = [];
        message.covered = false;
        message.timeUncovered = "";
        message.users = [];
        message.vendorId = "";
        message.trailerId = "";
        message.plateId = "";
        message.inTransit = false;
        message.loadStatuses = [];
        message.trailerTypeId = "";
        message.avgRpm = "";
        message.totalGrossAmount = "";
        message.manifests = [];
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck): TrucksManifestsGetReply_Truck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* repeated NoteModel.EntityNote notes */ 4:
                    message.notes.push(NoteModel_EntityNote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 year */ 5:
                    message.year = reader.int64().toNumber();
                    break;
                case /* string model */ 6:
                    message.model = reader.string();
                    break;
                case /* string make */ 7:
                    message.make = reader.string();
                    break;
                case /* string truck_title */ 8:
                    message.truckTitle = reader.string();
                    break;
                case /* bool online */ 9:
                    message.online = reader.bool();
                    break;
                case /* repeated TrucksManifestsGetReply.Truck.Tag tags */ 10:
                    message.tags.push(TrucksManifestsGetReply_Truck_Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string status */ 11:
                    message.status = reader.string();
                    break;
                case /* repeated TrucksManifestsGetReply.Truck.Driver drivers */ 12:
                    message.drivers.push(TrucksManifestsGetReply_Truck_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated TrucksManifestsGetReply.Truck.TimeOff time_offs */ 13:
                    message.timeOffs.push(TrucksManifestsGetReply_Truck_TimeOff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated TrucksManifestsGetReply.Truck.Load loads */ 14:
                    message.loads.push(TrucksManifestsGetReply_Truck_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool covered */ 15:
                    message.covered = reader.bool();
                    break;
                case /* string time_uncovered */ 16:
                    message.timeUncovered = reader.string();
                    break;
                case /* repeated string users */ 17:
                    message.users.push(reader.string());
                    break;
                case /* string vendor_id */ 18:
                    message.vendorId = reader.string();
                    break;
                case /* string trailer_id */ 19:
                    message.trailerId = reader.string();
                    break;
                case /* string plate_id */ 20:
                    message.plateId = reader.string();
                    break;
                case /* bool in_transit */ 21:
                    message.inTransit = reader.bool();
                    break;
                case /* repeated string load_statuses */ 22:
                    message.loadStatuses.push(reader.string());
                    break;
                case /* string trailer_type_id */ 23:
                    message.trailerTypeId = reader.string();
                    break;
                case /* string avg_rpm */ 24:
                    message.avgRpm = reader.string();
                    break;
                case /* string total_gross_amount */ 25:
                    message.totalGrossAmount = reader.string();
                    break;
                case /* TrucksManifestsGetReply.Truck.Miles miles */ 26:
                    message.miles = TrucksManifestsGetReply_Truck_Miles.internalBinaryRead(reader, reader.uint32(), options, message.miles);
                    break;
                case /* repeated ManifestModel.Manifest manifests */ 27:
                    message.manifests.push(ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* repeated NoteModel.EntityNote notes = 4; */
        for (let i = 0; i < message.notes.length; i++)
            NoteModel_EntityNote.internalBinaryWrite(message.notes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 year = 5; */
        if (message.year !== 0)
            writer.tag(5, WireType.Varint).int64(message.year);
        /* string model = 6; */
        if (message.model !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.model);
        /* string make = 7; */
        if (message.make !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.make);
        /* string truck_title = 8; */
        if (message.truckTitle !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.truckTitle);
        /* bool online = 9; */
        if (message.online !== false)
            writer.tag(9, WireType.Varint).bool(message.online);
        /* repeated TrucksManifestsGetReply.Truck.Tag tags = 10; */
        for (let i = 0; i < message.tags.length; i++)
            TrucksManifestsGetReply_Truck_Tag.internalBinaryWrite(message.tags[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string status = 11; */
        if (message.status !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.status);
        /* repeated TrucksManifestsGetReply.Truck.Driver drivers = 12; */
        for (let i = 0; i < message.drivers.length; i++)
            TrucksManifestsGetReply_Truck_Driver.internalBinaryWrite(message.drivers[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated TrucksManifestsGetReply.Truck.TimeOff time_offs = 13; */
        for (let i = 0; i < message.timeOffs.length; i++)
            TrucksManifestsGetReply_Truck_TimeOff.internalBinaryWrite(message.timeOffs[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated TrucksManifestsGetReply.Truck.Load loads = 14; */
        for (let i = 0; i < message.loads.length; i++)
            TrucksManifestsGetReply_Truck_Load.internalBinaryWrite(message.loads[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool covered = 15; */
        if (message.covered !== false)
            writer.tag(15, WireType.Varint).bool(message.covered);
        /* string time_uncovered = 16; */
        if (message.timeUncovered !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.timeUncovered);
        /* repeated string users = 17; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(17, WireType.LengthDelimited).string(message.users[i]);
        /* string vendor_id = 18; */
        if (message.vendorId !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.vendorId);
        /* string trailer_id = 19; */
        if (message.trailerId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.trailerId);
        /* string plate_id = 20; */
        if (message.plateId !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.plateId);
        /* bool in_transit = 21; */
        if (message.inTransit !== false)
            writer.tag(21, WireType.Varint).bool(message.inTransit);
        /* repeated string load_statuses = 22; */
        for (let i = 0; i < message.loadStatuses.length; i++)
            writer.tag(22, WireType.LengthDelimited).string(message.loadStatuses[i]);
        /* string trailer_type_id = 23; */
        if (message.trailerTypeId !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.trailerTypeId);
        /* string avg_rpm = 24; */
        if (message.avgRpm !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.avgRpm);
        /* string total_gross_amount = 25; */
        if (message.totalGrossAmount !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.totalGrossAmount);
        /* TrucksManifestsGetReply.Truck.Miles miles = 26; */
        if (message.miles)
            TrucksManifestsGetReply_Truck_Miles.internalBinaryWrite(message.miles, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* repeated ManifestModel.Manifest manifests = 27; */
        for (let i = 0; i < message.manifests.length; i++)
            ManifestModel_Manifest.internalBinaryWrite(message.manifests[i], writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck
 */
export const TrucksManifestsGetReply_Truck = new TrucksManifestsGetReply_Truck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_Tag$Type extends MessageType<TrucksManifestsGetReply_Truck_Tag> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.Tag", [
            { no: 1, name: "tag_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_Tag>): TrucksManifestsGetReply_Truck_Tag {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tagId = "";
        message.value = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_Tag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_Tag): TrucksManifestsGetReply_Truck_Tag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag_id */ 1:
                    message.tagId = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_Tag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tag_id = 1; */
        if (message.tagId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tagId);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.Tag
 */
export const TrucksManifestsGetReply_Truck_Tag = new TrucksManifestsGetReply_Truck_Tag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_File$Type extends MessageType<TrucksManifestsGetReply_Truck_File> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.File", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_File>): TrucksManifestsGetReply_Truck_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_File): TrucksManifestsGetReply_Truck_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.File
 */
export const TrucksManifestsGetReply_Truck_File = new TrucksManifestsGetReply_Truck_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_Driver$Type extends MessageType<TrucksManifestsGetReply_Truck_Driver> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.Driver", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "drive_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "drive_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "drive_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "break_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "break_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "break_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "shift_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "shift_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "shift_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "cycle_time_available", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "cycle_time_accumulated", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "cycle_time_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 16, name: "duty_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_Driver>): TrucksManifestsGetReply_Truck_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.driverTypeId = "";
        message.primary = false;
        message.driveTimeAvailable = 0;
        message.driveTimeAccumulated = 0;
        message.driveTimeLimit = 0;
        message.breakTimeAvailable = 0;
        message.breakTimeAccumulated = 0;
        message.breakTimeLimit = 0;
        message.shiftTimeAvailable = 0;
        message.shiftTimeAccumulated = 0;
        message.shiftTimeLimit = 0;
        message.cycleTimeAvailable = 0;
        message.cycleTimeAccumulated = 0;
        message.cycleTimeLimit = 0;
        message.dutyStatus = "";
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_Driver): TrucksManifestsGetReply_Truck_Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string driver_type_id */ 2:
                    message.driverTypeId = reader.string();
                    break;
                case /* bool primary */ 3:
                    message.primary = reader.bool();
                    break;
                case /* int64 drive_time_available */ 4:
                    message.driveTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 drive_time_accumulated */ 5:
                    message.driveTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 drive_time_limit */ 6:
                    message.driveTimeLimit = reader.int64().toNumber();
                    break;
                case /* int64 break_time_available */ 7:
                    message.breakTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 break_time_accumulated */ 8:
                    message.breakTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 break_time_limit */ 9:
                    message.breakTimeLimit = reader.int64().toNumber();
                    break;
                case /* int64 shift_time_available */ 10:
                    message.shiftTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 shift_time_accumulated */ 11:
                    message.shiftTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 shift_time_limit */ 12:
                    message.shiftTimeLimit = reader.int64().toNumber();
                    break;
                case /* int64 cycle_time_available */ 13:
                    message.cycleTimeAvailable = reader.int64().toNumber();
                    break;
                case /* int64 cycle_time_accumulated */ 14:
                    message.cycleTimeAccumulated = reader.int64().toNumber();
                    break;
                case /* int64 cycle_time_limit */ 15:
                    message.cycleTimeLimit = reader.int64().toNumber();
                    break;
                case /* string duty_status */ 16:
                    message.dutyStatus = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string driver_type_id = 2; */
        if (message.driverTypeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverTypeId);
        /* bool primary = 3; */
        if (message.primary !== false)
            writer.tag(3, WireType.Varint).bool(message.primary);
        /* int64 drive_time_available = 4; */
        if (message.driveTimeAvailable !== 0)
            writer.tag(4, WireType.Varint).int64(message.driveTimeAvailable);
        /* int64 drive_time_accumulated = 5; */
        if (message.driveTimeAccumulated !== 0)
            writer.tag(5, WireType.Varint).int64(message.driveTimeAccumulated);
        /* int64 drive_time_limit = 6; */
        if (message.driveTimeLimit !== 0)
            writer.tag(6, WireType.Varint).int64(message.driveTimeLimit);
        /* int64 break_time_available = 7; */
        if (message.breakTimeAvailable !== 0)
            writer.tag(7, WireType.Varint).int64(message.breakTimeAvailable);
        /* int64 break_time_accumulated = 8; */
        if (message.breakTimeAccumulated !== 0)
            writer.tag(8, WireType.Varint).int64(message.breakTimeAccumulated);
        /* int64 break_time_limit = 9; */
        if (message.breakTimeLimit !== 0)
            writer.tag(9, WireType.Varint).int64(message.breakTimeLimit);
        /* int64 shift_time_available = 10; */
        if (message.shiftTimeAvailable !== 0)
            writer.tag(10, WireType.Varint).int64(message.shiftTimeAvailable);
        /* int64 shift_time_accumulated = 11; */
        if (message.shiftTimeAccumulated !== 0)
            writer.tag(11, WireType.Varint).int64(message.shiftTimeAccumulated);
        /* int64 shift_time_limit = 12; */
        if (message.shiftTimeLimit !== 0)
            writer.tag(12, WireType.Varint).int64(message.shiftTimeLimit);
        /* int64 cycle_time_available = 13; */
        if (message.cycleTimeAvailable !== 0)
            writer.tag(13, WireType.Varint).int64(message.cycleTimeAvailable);
        /* int64 cycle_time_accumulated = 14; */
        if (message.cycleTimeAccumulated !== 0)
            writer.tag(14, WireType.Varint).int64(message.cycleTimeAccumulated);
        /* int64 cycle_time_limit = 15; */
        if (message.cycleTimeLimit !== 0)
            writer.tag(15, WireType.Varint).int64(message.cycleTimeLimit);
        /* string duty_status = 16; */
        if (message.dutyStatus !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.dutyStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.Driver
 */
export const TrucksManifestsGetReply_Truck_Driver = new TrucksManifestsGetReply_Truck_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_TimeOff$Type extends MessageType<TrucksManifestsGetReply_Truck_TimeOff> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.TimeOff", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_TimeOff>): TrucksManifestsGetReply_Truck_TimeOff {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.startAt = "";
        message.endAt = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_TimeOff>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_TimeOff): TrucksManifestsGetReply_Truck_TimeOff {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string start_at */ 2:
                    message.startAt = reader.string();
                    break;
                case /* string end_at */ 3:
                    message.endAt = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_TimeOff, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string start_at = 2; */
        if (message.startAt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startAt);
        /* string end_at = 3; */
        if (message.endAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.endAt);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.TimeOff
 */
export const TrucksManifestsGetReply_Truck_TimeOff = new TrucksManifestsGetReply_Truck_TimeOff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_Load$Type extends MessageType<TrucksManifestsGetReply_Truck_Load> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.Load", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "shipper_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "driver_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "gross_amount", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "gross_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "total_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "empty_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "rate_per_mile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 15, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrucksManifestsGetReply_Truck_Load_Stop },
            { no: 16, name: "rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "rpm_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "dispatcher_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_Load>): TrucksManifestsGetReply_Truck_Load {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.friendlyId = "";
        message.referenceId = "";
        message.brokerId = "";
        message.customerId = "";
        message.shipperConfirmed = false;
        message.driverConfirmed = false;
        message.grossAmount = 0;
        message.grossAmountFormatted = "";
        message.totalMiles = 0;
        message.loadedMiles = 0;
        message.emptyMiles = 0;
        message.ratePerMile = "";
        message.status = 0;
        message.stops = [];
        message.rpm = "";
        message.rpmFormatted = "";
        message.dispatcherId = "";
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_Load>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_Load): TrucksManifestsGetReply_Truck_Load {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string friendly_id */ 2:
                    message.friendlyId = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string broker_id */ 4:
                    message.brokerId = reader.string();
                    break;
                case /* string customer_id */ 5:
                    message.customerId = reader.string();
                    break;
                case /* bool shipper_confirmed */ 6:
                    message.shipperConfirmed = reader.bool();
                    break;
                case /* bool driver_confirmed */ 7:
                    message.driverConfirmed = reader.bool();
                    break;
                case /* float gross_amount */ 8:
                    message.grossAmount = reader.float();
                    break;
                case /* string gross_amount_formatted */ 9:
                    message.grossAmountFormatted = reader.string();
                    break;
                case /* int64 total_miles */ 10:
                    message.totalMiles = reader.int64().toNumber();
                    break;
                case /* int64 loaded_miles */ 11:
                    message.loadedMiles = reader.int64().toNumber();
                    break;
                case /* int64 empty_miles */ 12:
                    message.emptyMiles = reader.int64().toNumber();
                    break;
                case /* string rate_per_mile */ 13:
                    message.ratePerMile = reader.string();
                    break;
                case /* LoadModel.Status status */ 14:
                    message.status = reader.int32();
                    break;
                case /* repeated TrucksManifestsGetReply.Truck.Load.Stop stops */ 15:
                    message.stops.push(TrucksManifestsGetReply_Truck_Load_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string rpm */ 16:
                    message.rpm = reader.string();
                    break;
                case /* string rpm_formatted */ 17:
                    message.rpmFormatted = reader.string();
                    break;
                case /* string dispatcher_id */ 18:
                    message.dispatcherId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_Load, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string friendly_id = 2; */
        if (message.friendlyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyId);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string broker_id = 4; */
        if (message.brokerId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.brokerId);
        /* string customer_id = 5; */
        if (message.customerId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.customerId);
        /* bool shipper_confirmed = 6; */
        if (message.shipperConfirmed !== false)
            writer.tag(6, WireType.Varint).bool(message.shipperConfirmed);
        /* bool driver_confirmed = 7; */
        if (message.driverConfirmed !== false)
            writer.tag(7, WireType.Varint).bool(message.driverConfirmed);
        /* float gross_amount = 8; */
        if (message.grossAmount !== 0)
            writer.tag(8, WireType.Bit32).float(message.grossAmount);
        /* string gross_amount_formatted = 9; */
        if (message.grossAmountFormatted !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.grossAmountFormatted);
        /* int64 total_miles = 10; */
        if (message.totalMiles !== 0)
            writer.tag(10, WireType.Varint).int64(message.totalMiles);
        /* int64 loaded_miles = 11; */
        if (message.loadedMiles !== 0)
            writer.tag(11, WireType.Varint).int64(message.loadedMiles);
        /* int64 empty_miles = 12; */
        if (message.emptyMiles !== 0)
            writer.tag(12, WireType.Varint).int64(message.emptyMiles);
        /* string rate_per_mile = 13; */
        if (message.ratePerMile !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.ratePerMile);
        /* LoadModel.Status status = 14; */
        if (message.status !== 0)
            writer.tag(14, WireType.Varint).int32(message.status);
        /* repeated TrucksManifestsGetReply.Truck.Load.Stop stops = 15; */
        for (let i = 0; i < message.stops.length; i++)
            TrucksManifestsGetReply_Truck_Load_Stop.internalBinaryWrite(message.stops[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string rpm = 16; */
        if (message.rpm !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.rpm);
        /* string rpm_formatted = 17; */
        if (message.rpmFormatted !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.rpmFormatted);
        /* string dispatcher_id = 18; */
        if (message.dispatcherId !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.dispatcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.Load
 */
export const TrucksManifestsGetReply_Truck_Load = new TrucksManifestsGetReply_Truck_Load$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_Load_Stop$Type extends MessageType<TrucksManifestsGetReply_Truck_Load_Stop> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.Load.Stop", [
            { no: 1, name: "stop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "eta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "appointment_start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "appointment_end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "appointment_start_at_utc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "appointment_end_at_utc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "appointment_start_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "appointment_end_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "checked_in_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "checked_in_at_utc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "checked_in_at_local", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "status", kind: "enum", T: () => ["LoadModel.Stop.Status", LoadModel_Stop_Status] },
            { no: 14, name: "location", kind: "message", T: () => TrucksManifestsGetReply_Truck_Load_Stop_Location }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_Load_Stop>): TrucksManifestsGetReply_Truck_Load_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stopId = "";
        message.loadId = "";
        message.sequence = 0;
        message.eta = 0;
        message.appointmentStartAt = "";
        message.appointmentEndAt = "";
        message.appointmentStartAtUtc = "";
        message.appointmentEndAtUtc = "";
        message.appointmentStartAtLocal = "";
        message.appointmentEndAtLocal = "";
        message.checkedInAt = "";
        message.checkedInAtUtc = "";
        message.checkedInAtLocal = "";
        message.type = "";
        message.note = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_Load_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_Load_Stop): TrucksManifestsGetReply_Truck_Load_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stop_id */ 1:
                    message.stopId = reader.string();
                    break;
                case /* string load_id */ 2:
                    message.loadId = reader.string();
                    break;
                case /* int64 sequence */ 3:
                    message.sequence = reader.int64().toNumber();
                    break;
                case /* int64 eta */ 4:
                    message.eta = reader.int64().toNumber();
                    break;
                case /* string appointment_start_at */ 5:
                    message.appointmentStartAt = reader.string();
                    break;
                case /* string appointment_end_at */ 6:
                    message.appointmentEndAt = reader.string();
                    break;
                case /* string appointment_start_at_utc */ 7:
                    message.appointmentStartAtUtc = reader.string();
                    break;
                case /* string appointment_end_at_utc */ 8:
                    message.appointmentEndAtUtc = reader.string();
                    break;
                case /* string appointment_start_at_local */ 9:
                    message.appointmentStartAtLocal = reader.string();
                    break;
                case /* string appointment_end_at_local */ 10:
                    message.appointmentEndAtLocal = reader.string();
                    break;
                case /* string checked_in_at */ 15:
                    message.checkedInAt = reader.string();
                    break;
                case /* string checked_in_at_utc */ 16:
                    message.checkedInAtUtc = reader.string();
                    break;
                case /* string checked_in_at_local */ 17:
                    message.checkedInAtLocal = reader.string();
                    break;
                case /* string type */ 11:
                    message.type = reader.string();
                    break;
                case /* string note */ 12:
                    message.note = reader.string();
                    break;
                case /* LoadModel.Stop.Status status */ 13:
                    message.status = reader.int32();
                    break;
                case /* TrucksManifestsGetReply.Truck.Load.Stop.Location location */ 14:
                    message.location = TrucksManifestsGetReply_Truck_Load_Stop_Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_Load_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stop_id = 1; */
        if (message.stopId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stopId);
        /* string load_id = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* int64 sequence = 3; */
        if (message.sequence !== 0)
            writer.tag(3, WireType.Varint).int64(message.sequence);
        /* int64 eta = 4; */
        if (message.eta !== 0)
            writer.tag(4, WireType.Varint).int64(message.eta);
        /* string appointment_start_at = 5; */
        if (message.appointmentStartAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appointmentStartAt);
        /* string appointment_end_at = 6; */
        if (message.appointmentEndAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.appointmentEndAt);
        /* string appointment_start_at_utc = 7; */
        if (message.appointmentStartAtUtc !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.appointmentStartAtUtc);
        /* string appointment_end_at_utc = 8; */
        if (message.appointmentEndAtUtc !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appointmentEndAtUtc);
        /* string appointment_start_at_local = 9; */
        if (message.appointmentStartAtLocal !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.appointmentStartAtLocal);
        /* string appointment_end_at_local = 10; */
        if (message.appointmentEndAtLocal !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.appointmentEndAtLocal);
        /* string checked_in_at = 15; */
        if (message.checkedInAt !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.checkedInAt);
        /* string checked_in_at_utc = 16; */
        if (message.checkedInAtUtc !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.checkedInAtUtc);
        /* string checked_in_at_local = 17; */
        if (message.checkedInAtLocal !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.checkedInAtLocal);
        /* string type = 11; */
        if (message.type !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.type);
        /* string note = 12; */
        if (message.note !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.note);
        /* LoadModel.Stop.Status status = 13; */
        if (message.status !== 0)
            writer.tag(13, WireType.Varint).int32(message.status);
        /* TrucksManifestsGetReply.Truck.Load.Stop.Location location = 14; */
        if (message.location)
            TrucksManifestsGetReply_Truck_Load_Stop_Location.internalBinaryWrite(message.location, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.Load.Stop
 */
export const TrucksManifestsGetReply_Truck_Load_Stop = new TrucksManifestsGetReply_Truck_Load_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_Load_Stop_Location$Type extends MessageType<TrucksManifestsGetReply_Truck_Load_Stop_Location> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.Load.Stop.Location", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_Load_Stop_Location>): TrucksManifestsGetReply_Truck_Load_Stop_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.city = "";
        message.state = "";
        message.address = "";
        message.lat = 0;
        message.lon = 0;
        message.timezone = "";
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_Load_Stop_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_Load_Stop_Location): TrucksManifestsGetReply_Truck_Load_Stop_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string city */ 3:
                    message.city = reader.string();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                case /* string address */ 5:
                    message.address = reader.string();
                    break;
                case /* double lat */ 6:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 7:
                    message.lon = reader.double();
                    break;
                case /* string timezone */ 8:
                    message.timezone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_Load_Stop_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string city = 3; */
        if (message.city !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.city);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        /* string address = 5; */
        if (message.address !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.address);
        /* double lat = 6; */
        if (message.lat !== 0)
            writer.tag(6, WireType.Bit64).double(message.lat);
        /* double lon = 7; */
        if (message.lon !== 0)
            writer.tag(7, WireType.Bit64).double(message.lon);
        /* string timezone = 8; */
        if (message.timezone !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.timezone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.Load.Stop.Location
 */
export const TrucksManifestsGetReply_Truck_Load_Stop_Location = new TrucksManifestsGetReply_Truck_Load_Stop_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrucksManifestsGetReply_Truck_Miles$Type extends MessageType<TrucksManifestsGetReply_Truck_Miles> {
    constructor() {
        super("TrucksManifestsGetReply.Truck.Miles", [
            { no: 1, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "loaded", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "empty", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TrucksManifestsGetReply_Truck_Miles>): TrucksManifestsGetReply_Truck_Miles {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.total = 0;
        message.loaded = 0;
        message.empty = 0;
        if (value !== undefined)
            reflectionMergePartial<TrucksManifestsGetReply_Truck_Miles>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrucksManifestsGetReply_Truck_Miles): TrucksManifestsGetReply_Truck_Miles {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total */ 1:
                    message.total = reader.int64().toNumber();
                    break;
                case /* int64 loaded */ 2:
                    message.loaded = reader.int64().toNumber();
                    break;
                case /* int64 empty */ 3:
                    message.empty = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrucksManifestsGetReply_Truck_Miles, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).int64(message.total);
        /* int64 loaded = 2; */
        if (message.loaded !== 0)
            writer.tag(2, WireType.Varint).int64(message.loaded);
        /* int64 empty = 3; */
        if (message.empty !== 0)
            writer.tag(3, WireType.Varint).int64(message.empty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrucksManifestsGetReply.Truck.Miles
 */
export const TrucksManifestsGetReply_Truck_Miles = new TrucksManifestsGetReply_Truck_Miles$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTruckRouteRequest$Type extends MessageType<GetTruckRouteRequest> {
    constructor() {
        super("GetTruckRouteRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTruckRouteRequest>): GetTruckRouteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTruckRouteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTruckRouteRequest): GetTruckRouteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTruckRouteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTruckRouteRequest
 */
export const GetTruckRouteRequest = new GetTruckRouteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTruckRouteReply$Type extends MessageType<GetTruckRouteReply> {
    constructor() {
        super("GetTruckRouteReply", [
            { no: 1, name: "polyline_to_next_stop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "polyline_to_destination", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stops", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => GetTruckRouteReply_Stop } }
        ]);
    }
    create(value?: PartialMessage<GetTruckRouteReply>): GetTruckRouteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.polylineToNextStop = "";
        message.polylineToDestination = "";
        message.stops = {};
        if (value !== undefined)
            reflectionMergePartial<GetTruckRouteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTruckRouteReply): GetTruckRouteReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string polyline_to_next_stop */ 1:
                    message.polylineToNextStop = reader.string();
                    break;
                case /* string polyline_to_destination */ 2:
                    message.polylineToDestination = reader.string();
                    break;
                case /* map<string, GetTruckRouteReply.Stop> stops */ 3:
                    this.binaryReadMap3(message.stops, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: GetTruckRouteReply["stops"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetTruckRouteReply["stops"] | undefined, val: GetTruckRouteReply["stops"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = GetTruckRouteReply_Stop.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GetTruckRouteReply.stops");
            }
        }
        map[key ?? ""] = val ?? GetTruckRouteReply_Stop.create();
    }
    internalBinaryWrite(message: GetTruckRouteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string polyline_to_next_stop = 1; */
        if (message.polylineToNextStop !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.polylineToNextStop);
        /* string polyline_to_destination = 2; */
        if (message.polylineToDestination !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.polylineToDestination);
        /* map<string, GetTruckRouteReply.Stop> stops = 3; */
        for (let k of globalThis.Object.keys(message.stops)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            GetTruckRouteReply_Stop.internalBinaryWrite(message.stops[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTruckRouteReply
 */
export const GetTruckRouteReply = new GetTruckRouteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTruckRouteReply_Stop$Type extends MessageType<GetTruckRouteReply_Stop> {
    constructor() {
        super("GetTruckRouteReply.Stop", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "load_friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "location", kind: "message", T: () => GetTruckRouteReply_Stop_Location },
            { no: 5, name: "appointment_start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "appointment_end_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "arrived_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "checked_in_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "checked_out_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "status", kind: "enum", T: () => ["LoadModel.Stop.Status", LoadModel_Stop_Status] }
        ]);
    }
    create(value?: PartialMessage<GetTruckRouteReply_Stop>): GetTruckRouteReply_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.stopId = "";
        message.loadFriendlyId = 0;
        message.appointmentStartAt = "";
        message.appointmentEndAt = "";
        message.arrivedAt = "";
        message.checkedInAt = "";
        message.checkedOutAt = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTruckRouteReply_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTruckRouteReply_Stop): GetTruckRouteReply_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string stop_id */ 2:
                    message.stopId = reader.string();
                    break;
                case /* int64 load_friendly_id */ 3:
                    message.loadFriendlyId = reader.int64().toNumber();
                    break;
                case /* GetTruckRouteReply.Stop.Location location */ 4:
                    message.location = GetTruckRouteReply_Stop_Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* string appointment_start_at */ 5:
                    message.appointmentStartAt = reader.string();
                    break;
                case /* string appointment_end_at */ 6:
                    message.appointmentEndAt = reader.string();
                    break;
                case /* string arrived_at */ 7:
                    message.arrivedAt = reader.string();
                    break;
                case /* string checked_in_at */ 8:
                    message.checkedInAt = reader.string();
                    break;
                case /* string checked_out_at */ 9:
                    message.checkedOutAt = reader.string();
                    break;
                case /* LoadModel.Stop.Status status */ 10:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTruckRouteReply_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string stop_id = 2; */
        if (message.stopId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stopId);
        /* int64 load_friendly_id = 3; */
        if (message.loadFriendlyId !== 0)
            writer.tag(3, WireType.Varint).int64(message.loadFriendlyId);
        /* GetTruckRouteReply.Stop.Location location = 4; */
        if (message.location)
            GetTruckRouteReply_Stop_Location.internalBinaryWrite(message.location, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string appointment_start_at = 5; */
        if (message.appointmentStartAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appointmentStartAt);
        /* string appointment_end_at = 6; */
        if (message.appointmentEndAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.appointmentEndAt);
        /* string arrived_at = 7; */
        if (message.arrivedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.arrivedAt);
        /* string checked_in_at = 8; */
        if (message.checkedInAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.checkedInAt);
        /* string checked_out_at = 9; */
        if (message.checkedOutAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.checkedOutAt);
        /* LoadModel.Stop.Status status = 10; */
        if (message.status !== 0)
            writer.tag(10, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTruckRouteReply.Stop
 */
export const GetTruckRouteReply_Stop = new GetTruckRouteReply_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTruckRouteReply_Stop_Location$Type extends MessageType<GetTruckRouteReply_Stop_Location> {
    constructor() {
        super("GetTruckRouteReply.Stop.Location", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTruckRouteReply_Stop_Location>): GetTruckRouteReply_Stop_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        if (value !== undefined)
            reflectionMergePartial<GetTruckRouteReply_Stop_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTruckRouteReply_Stop_Location): GetTruckRouteReply_Stop_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTruckRouteReply_Stop_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTruckRouteReply.Stop.Location
 */
export const GetTruckRouteReply_Stop_Location = new GetTruckRouteReply_Stop_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDeleteRequest$Type extends MessageType<TruckDeleteRequest> {
    constructor() {
        super("TruckDeleteRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckDeleteRequest>): TruckDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDeleteRequest): TruckDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDeleteRequest
 */
export const TruckDeleteRequest = new TruckDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckDeleteReply$Type extends MessageType<TruckDeleteReply> {
    constructor() {
        super("TruckDeleteReply", []);
    }
    create(value?: PartialMessage<TruckDeleteReply>): TruckDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckDeleteReply): TruckDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckDeleteReply
 */
export const TruckDeleteReply = new TruckDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckStatusUpdateRequest$Type extends MessageType<TruckStatusUpdateRequest> {
    constructor() {
        super("TruckStatusUpdateRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["TruckModel.Status", TruckModel_Status] }
        ]);
    }
    create(value?: PartialMessage<TruckStatusUpdateRequest>): TruckStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<TruckStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckStatusUpdateRequest): TruckStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* TruckModel.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* TruckModel.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckStatusUpdateRequest
 */
export const TruckStatusUpdateRequest = new TruckStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckStatusUpdateReply$Type extends MessageType<TruckStatusUpdateReply> {
    constructor() {
        super("TruckStatusUpdateReply", []);
    }
    create(value?: PartialMessage<TruckStatusUpdateReply>): TruckStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckStatusUpdateReply): TruckStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckStatusUpdateReply
 */
export const TruckStatusUpdateReply = new TruckStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckParkingLocationUpdateRequest$Type extends MessageType<TruckParkingLocationUpdateRequest> {
    constructor() {
        super("TruckParkingLocationUpdateRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parking_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckParkingLocationUpdateRequest>): TruckParkingLocationUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.parkingLocation = "";
        if (value !== undefined)
            reflectionMergePartial<TruckParkingLocationUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckParkingLocationUpdateRequest): TruckParkingLocationUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string parking_location */ 2:
                    message.parkingLocation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckParkingLocationUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string parking_location = 2; */
        if (message.parkingLocation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.parkingLocation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckParkingLocationUpdateRequest
 */
export const TruckParkingLocationUpdateRequest = new TruckParkingLocationUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckParkingLocationUpdateReply$Type extends MessageType<TruckParkingLocationUpdateReply> {
    constructor() {
        super("TruckParkingLocationUpdateReply", []);
    }
    create(value?: PartialMessage<TruckParkingLocationUpdateReply>): TruckParkingLocationUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckParkingLocationUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckParkingLocationUpdateReply): TruckParkingLocationUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckParkingLocationUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckParkingLocationUpdateReply
 */
export const TruckParkingLocationUpdateReply = new TruckParkingLocationUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckInsuranceEndorsedRequest$Type extends MessageType<TruckInsuranceEndorsedRequest> {
    constructor() {
        super("TruckInsuranceEndorsedRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "insurance_endorsed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TruckInsuranceEndorsedRequest>): TruckInsuranceEndorsedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.insuranceEndorsed = false;
        if (value !== undefined)
            reflectionMergePartial<TruckInsuranceEndorsedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckInsuranceEndorsedRequest): TruckInsuranceEndorsedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* bool insurance_endorsed */ 2:
                    message.insuranceEndorsed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckInsuranceEndorsedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* bool insurance_endorsed = 2; */
        if (message.insuranceEndorsed !== false)
            writer.tag(2, WireType.Varint).bool(message.insuranceEndorsed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckInsuranceEndorsedRequest
 */
export const TruckInsuranceEndorsedRequest = new TruckInsuranceEndorsedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckInsuranceEndorsedReply$Type extends MessageType<TruckInsuranceEndorsedReply> {
    constructor() {
        super("TruckInsuranceEndorsedReply", []);
    }
    create(value?: PartialMessage<TruckInsuranceEndorsedReply>): TruckInsuranceEndorsedReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckInsuranceEndorsedReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckInsuranceEndorsedReply): TruckInsuranceEndorsedReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckInsuranceEndorsedReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckInsuranceEndorsedReply
 */
export const TruckInsuranceEndorsedReply = new TruckInsuranceEndorsedReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckUpdateRequest$Type extends MessageType<TruckUpdateRequest> {
    constructor() {
        super("TruckUpdateRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["TruckModel.Type", TruckModel_Type, "TYPE_"] },
            { no: 4, name: "vin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "make", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "toll_transponder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "fuel_discounts_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TruckUpdateRequest>): TruckUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.referenceId = "";
        message.type = 0;
        message.vin = "";
        message.make = "";
        message.model = "";
        message.year = 0;
        message.color = "";
        message.plateId = "";
        message.vendorId = "";
        message.tollTransponder = "";
        message.fuelDiscountsEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<TruckUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckUpdateRequest): TruckUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* TruckModel.Type type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string vin */ 4:
                    message.vin = reader.string();
                    break;
                case /* string make */ 5:
                    message.make = reader.string();
                    break;
                case /* string model */ 6:
                    message.model = reader.string();
                    break;
                case /* int64 year */ 7:
                    message.year = reader.int64().toNumber();
                    break;
                case /* string color */ 8:
                    message.color = reader.string();
                    break;
                case /* string plate_id */ 9:
                    message.plateId = reader.string();
                    break;
                case /* string vendor_id */ 10:
                    message.vendorId = reader.string();
                    break;
                case /* string toll_transponder */ 11:
                    message.tollTransponder = reader.string();
                    break;
                case /* bool fuel_discounts_enabled */ 12:
                    message.fuelDiscountsEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* TruckModel.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string vin = 4; */
        if (message.vin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vin);
        /* string make = 5; */
        if (message.make !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.make);
        /* string model = 6; */
        if (message.model !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.model);
        /* int64 year = 7; */
        if (message.year !== 0)
            writer.tag(7, WireType.Varint).int64(message.year);
        /* string color = 8; */
        if (message.color !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.color);
        /* string plate_id = 9; */
        if (message.plateId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.plateId);
        /* string vendor_id = 10; */
        if (message.vendorId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.vendorId);
        /* string toll_transponder = 11; */
        if (message.tollTransponder !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.tollTransponder);
        /* bool fuel_discounts_enabled = 12; */
        if (message.fuelDiscountsEnabled !== false)
            writer.tag(12, WireType.Varint).bool(message.fuelDiscountsEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckUpdateRequest
 */
export const TruckUpdateRequest = new TruckUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckUpdateReply$Type extends MessageType<TruckUpdateReply> {
    constructor() {
        super("TruckUpdateReply", []);
    }
    create(value?: PartialMessage<TruckUpdateReply>): TruckUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckUpdateReply): TruckUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckUpdateReply
 */
export const TruckUpdateReply = new TruckUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckRetrieveRequest$Type extends MessageType<TruckRetrieveRequest> {
    constructor() {
        super("TruckRetrieveRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TruckRetrieveRequest>): TruckRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<TruckRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckRetrieveRequest): TruckRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckRetrieveRequest
 */
export const TruckRetrieveRequest = new TruckRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckRetrieveReply$Type extends MessageType<TruckRetrieveReply> {
    constructor() {
        super("TruckRetrieveReply", [
            { no: 1, name: "truck", kind: "message", T: () => TruckModel_Truck }
        ]);
    }
    create(value?: PartialMessage<TruckRetrieveReply>): TruckRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckRetrieveReply): TruckRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TruckModel.Truck truck */ 1:
                    message.truck = TruckModel_Truck.internalBinaryRead(reader, reader.uint32(), options, message.truck);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TruckModel.Truck truck = 1; */
        if (message.truck)
            TruckModel_Truck.internalBinaryWrite(message.truck, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckRetrieveReply
 */
export const TruckRetrieveReply = new TruckRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckGetRequest$Type extends MessageType<TruckGetRequest> {
    constructor() {
        super("TruckGetRequest", []);
    }
    create(value?: PartialMessage<TruckGetRequest>): TruckGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TruckGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckGetRequest): TruckGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TruckGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckGetRequest
 */
export const TruckGetRequest = new TruckGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TruckGetReply$Type extends MessageType<TruckGetReply> {
    constructor() {
        super("TruckGetReply", [
            { no: 1, name: "trucks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TruckModel_Truck }
        ]);
    }
    create(value?: PartialMessage<TruckGetReply>): TruckGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trucks = [];
        if (value !== undefined)
            reflectionMergePartial<TruckGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TruckGetReply): TruckGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TruckModel.Truck trucks */ 1:
                    message.trucks.push(TruckModel_Truck.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TruckGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TruckModel.Truck trucks = 1; */
        for (let i = 0; i < message.trucks.length; i++)
            TruckModel_Truck.internalBinaryWrite(message.trucks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TruckGetReply
 */
export const TruckGetReply = new TruckGetReply$Type();
/**
 * @generated ServiceType for protobuf service TrucksService
 */
export const TrucksService = new ServiceType("TrucksService", [
    { name: "GetTrucksLoads", serverStreaming: true, options: {}, I: GetTrucksLoadsRequest, O: GetTrucksLoadsReply },
    { name: "GetTrucksLoadsUnary", options: {}, I: GetTrucksLoadsRequest, O: GetTrucksLoadsReply },
    { name: "TrucksManifestsGet", serverStreaming: true, options: {}, I: TrucksManifestsGetRequest, O: TrucksManifestsGetReply },
    { name: "TrucksManifestsGetUnary", options: {}, I: TrucksManifestsGetRequest, O: TrucksManifestsGetReply },
    { name: "GetTruckRoute", options: {}, I: GetTruckRouteRequest, O: GetTruckRouteReply },
    { name: "Delete", options: {}, I: TruckDeleteRequest, O: TruckDeleteReply },
    { name: "StatusUpdate", options: {}, I: TruckStatusUpdateRequest, O: TruckStatusUpdateReply },
    { name: "TruckParkingLocationUpdate", options: {}, I: TruckParkingLocationUpdateRequest, O: TruckParkingLocationUpdateReply },
    { name: "TruckInsuranceEndorsedUpdate", options: {}, I: TruckInsuranceEndorsedRequest, O: TruckInsuranceEndorsedReply },
    { name: "TruckUpdate", options: {}, I: TruckUpdateRequest, O: TruckUpdateReply },
    { name: "TruckGet", options: {}, I: TruckGetRequest, O: TruckGetReply },
    { name: "TruckRetrieve", options: {}, I: TruckRetrieveRequest, O: TruckRetrieveReply },
    { name: "TruckCreate", options: {}, I: TruckCreateRequest, O: TruckCreateReply },
    { name: "TruckStatsRetrieve", options: {}, I: TruckStatsRetrieveRequest, O: TruckStatsRetrieveReply },
    { name: "TruckDriverAssign", options: {}, I: TruckDriverAssignRequest, O: TruckDriverAssignReply },
    { name: "TruckDriverRemove", options: {}, I: TruckDriverRemoveRequest, O: TruckDriverRemoveReply },
    { name: "TruckDriverPrimarySet", options: {}, I: TruckDriverPrimarySetRequest, O: TruckDriverPrimarySetReply },
    { name: "TruckUserAssign", options: {}, I: TruckUserAssignRequest, O: TruckUserAssignReply },
    { name: "TruckUserRemove", options: {}, I: TruckUserRemoveRequest, O: TruckUserRemoveReply },
    { name: "TruckTrailerAssign", options: {}, I: TruckTrailerAssignRequest, O: TruckTrailerAssignReply },
    { name: "TruckTrailerRemove", options: {}, I: TruckTrailerRemoveRequest, O: TruckTrailerRemoveReply }
]);
