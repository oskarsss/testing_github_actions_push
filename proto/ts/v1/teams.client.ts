// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/teams.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TeamsService } from "./teams";
import type { TeamDriverDeleteReply } from "./teams";
import type { TeamDriverDeleteRequest } from "./teams";
import type { TeamDriversCreateReply } from "./teams";
import type { TeamDriversCreateRequest } from "./teams";
import type { TeamTrailerDeleteReply } from "./teams";
import type { TeamTrailerDeleteRequest } from "./teams";
import type { TeamTrailersCreateReply } from "./teams";
import type { TeamTrailersCreateRequest } from "./teams";
import type { TeamTruckDeleteReply } from "./teams";
import type { TeamTruckDeleteRequest } from "./teams";
import type { TeamTrucksCreateReply } from "./teams";
import type { TeamTrucksCreateRequest } from "./teams";
import type { TeamUserDeleteReply } from "./teams";
import type { TeamUserDeleteRequest } from "./teams";
import type { TeamUsersCreateReply } from "./teams";
import type { TeamUsersCreateRequest } from "./teams";
import type { TeamLogoUpdateReply } from "./teams";
import type { TeamLogoUpdateRequest } from "./teams";
import type { TeamDeleteReply } from "./teams";
import type { TeamDeleteRequest } from "./teams";
import type { TeamUpdateReply } from "./teams";
import type { TeamUpdateRequest } from "./teams";
import type { TeamCreateReply } from "./teams";
import type { TeamCreateRequest } from "./teams";
import type { TeamRetrieveReply } from "./teams";
import type { TeamRetrieveRequest } from "./teams";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TeamsGetReply } from "./teams";
import type { TeamsGetRequest } from "./teams";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service TeamsService
 */
export interface ITeamsServiceClient {
    /**
     * @generated from protobuf rpc: TeamsGet(TeamsGetRequest) returns (TeamsGetReply);
     */
    teamsGet(input: TeamsGetRequest, options?: RpcOptions): UnaryCall<TeamsGetRequest, TeamsGetReply>;
    /**
     * @generated from protobuf rpc: TeamRetrieve(TeamRetrieveRequest) returns (TeamRetrieveReply);
     */
    teamRetrieve(input: TeamRetrieveRequest, options?: RpcOptions): UnaryCall<TeamRetrieveRequest, TeamRetrieveReply>;
    /**
     * @generated from protobuf rpc: TeamCreate(TeamCreateRequest) returns (TeamCreateReply);
     */
    teamCreate(input: TeamCreateRequest, options?: RpcOptions): UnaryCall<TeamCreateRequest, TeamCreateReply>;
    /**
     * @generated from protobuf rpc: TeamUpdate(TeamUpdateRequest) returns (TeamUpdateReply);
     */
    teamUpdate(input: TeamUpdateRequest, options?: RpcOptions): UnaryCall<TeamUpdateRequest, TeamUpdateReply>;
    /**
     * @generated from protobuf rpc: TeamDelete(TeamDeleteRequest) returns (TeamDeleteReply);
     */
    teamDelete(input: TeamDeleteRequest, options?: RpcOptions): UnaryCall<TeamDeleteRequest, TeamDeleteReply>;
    /**
     * @generated from protobuf rpc: TeamLogoUpdate(TeamLogoUpdateRequest) returns (TeamLogoUpdateReply);
     */
    teamLogoUpdate(input: TeamLogoUpdateRequest, options?: RpcOptions): UnaryCall<TeamLogoUpdateRequest, TeamLogoUpdateReply>;
    /**
     * @generated from protobuf rpc: TeamUsersCreate(TeamUsersCreateRequest) returns (TeamUsersCreateReply);
     */
    teamUsersCreate(input: TeamUsersCreateRequest, options?: RpcOptions): UnaryCall<TeamUsersCreateRequest, TeamUsersCreateReply>;
    /**
     * @generated from protobuf rpc: TeamUserDelete(TeamUserDeleteRequest) returns (TeamUserDeleteReply);
     */
    teamUserDelete(input: TeamUserDeleteRequest, options?: RpcOptions): UnaryCall<TeamUserDeleteRequest, TeamUserDeleteReply>;
    /**
     * @generated from protobuf rpc: TeamTrucksCreate(TeamTrucksCreateRequest) returns (TeamTrucksCreateReply);
     */
    teamTrucksCreate(input: TeamTrucksCreateRequest, options?: RpcOptions): UnaryCall<TeamTrucksCreateRequest, TeamTrucksCreateReply>;
    /**
     * @generated from protobuf rpc: TeamTruckDelete(TeamTruckDeleteRequest) returns (TeamTruckDeleteReply);
     */
    teamTruckDelete(input: TeamTruckDeleteRequest, options?: RpcOptions): UnaryCall<TeamTruckDeleteRequest, TeamTruckDeleteReply>;
    /**
     * @generated from protobuf rpc: TeamTrailersCreate(TeamTrailersCreateRequest) returns (TeamTrailersCreateReply);
     */
    teamTrailersCreate(input: TeamTrailersCreateRequest, options?: RpcOptions): UnaryCall<TeamTrailersCreateRequest, TeamTrailersCreateReply>;
    /**
     * @generated from protobuf rpc: TeamTrailerDelete(TeamTrailerDeleteRequest) returns (TeamTrailerDeleteReply);
     */
    teamTrailerDelete(input: TeamTrailerDeleteRequest, options?: RpcOptions): UnaryCall<TeamTrailerDeleteRequest, TeamTrailerDeleteReply>;
    /**
     * @generated from protobuf rpc: TeamDriversCreate(TeamDriversCreateRequest) returns (TeamDriversCreateReply);
     */
    teamDriversCreate(input: TeamDriversCreateRequest, options?: RpcOptions): UnaryCall<TeamDriversCreateRequest, TeamDriversCreateReply>;
    /**
     * @generated from protobuf rpc: TeamDriverDelete(TeamDriverDeleteRequest) returns (TeamDriverDeleteReply);
     */
    teamDriverDelete(input: TeamDriverDeleteRequest, options?: RpcOptions): UnaryCall<TeamDriverDeleteRequest, TeamDriverDeleteReply>;
}
/**
 * @generated from protobuf service TeamsService
 */
export class TeamsServiceClient implements ITeamsServiceClient, ServiceInfo {
    typeName = TeamsService.typeName;
    methods = TeamsService.methods;
    options = TeamsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: TeamsGet(TeamsGetRequest) returns (TeamsGetReply);
     */
    teamsGet(input: TeamsGetRequest, options?: RpcOptions): UnaryCall<TeamsGetRequest, TeamsGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamsGetRequest, TeamsGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamRetrieve(TeamRetrieveRequest) returns (TeamRetrieveReply);
     */
    teamRetrieve(input: TeamRetrieveRequest, options?: RpcOptions): UnaryCall<TeamRetrieveRequest, TeamRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamRetrieveRequest, TeamRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamCreate(TeamCreateRequest) returns (TeamCreateReply);
     */
    teamCreate(input: TeamCreateRequest, options?: RpcOptions): UnaryCall<TeamCreateRequest, TeamCreateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamCreateRequest, TeamCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamUpdate(TeamUpdateRequest) returns (TeamUpdateReply);
     */
    teamUpdate(input: TeamUpdateRequest, options?: RpcOptions): UnaryCall<TeamUpdateRequest, TeamUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamUpdateRequest, TeamUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamDelete(TeamDeleteRequest) returns (TeamDeleteReply);
     */
    teamDelete(input: TeamDeleteRequest, options?: RpcOptions): UnaryCall<TeamDeleteRequest, TeamDeleteReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamDeleteRequest, TeamDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamLogoUpdate(TeamLogoUpdateRequest) returns (TeamLogoUpdateReply);
     */
    teamLogoUpdate(input: TeamLogoUpdateRequest, options?: RpcOptions): UnaryCall<TeamLogoUpdateRequest, TeamLogoUpdateReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamLogoUpdateRequest, TeamLogoUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamUsersCreate(TeamUsersCreateRequest) returns (TeamUsersCreateReply);
     */
    teamUsersCreate(input: TeamUsersCreateRequest, options?: RpcOptions): UnaryCall<TeamUsersCreateRequest, TeamUsersCreateReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamUsersCreateRequest, TeamUsersCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamUserDelete(TeamUserDeleteRequest) returns (TeamUserDeleteReply);
     */
    teamUserDelete(input: TeamUserDeleteRequest, options?: RpcOptions): UnaryCall<TeamUserDeleteRequest, TeamUserDeleteReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamUserDeleteRequest, TeamUserDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamTrucksCreate(TeamTrucksCreateRequest) returns (TeamTrucksCreateReply);
     */
    teamTrucksCreate(input: TeamTrucksCreateRequest, options?: RpcOptions): UnaryCall<TeamTrucksCreateRequest, TeamTrucksCreateReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamTrucksCreateRequest, TeamTrucksCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamTruckDelete(TeamTruckDeleteRequest) returns (TeamTruckDeleteReply);
     */
    teamTruckDelete(input: TeamTruckDeleteRequest, options?: RpcOptions): UnaryCall<TeamTruckDeleteRequest, TeamTruckDeleteReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamTruckDeleteRequest, TeamTruckDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamTrailersCreate(TeamTrailersCreateRequest) returns (TeamTrailersCreateReply);
     */
    teamTrailersCreate(input: TeamTrailersCreateRequest, options?: RpcOptions): UnaryCall<TeamTrailersCreateRequest, TeamTrailersCreateReply> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamTrailersCreateRequest, TeamTrailersCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamTrailerDelete(TeamTrailerDeleteRequest) returns (TeamTrailerDeleteReply);
     */
    teamTrailerDelete(input: TeamTrailerDeleteRequest, options?: RpcOptions): UnaryCall<TeamTrailerDeleteRequest, TeamTrailerDeleteReply> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamTrailerDeleteRequest, TeamTrailerDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamDriversCreate(TeamDriversCreateRequest) returns (TeamDriversCreateReply);
     */
    teamDriversCreate(input: TeamDriversCreateRequest, options?: RpcOptions): UnaryCall<TeamDriversCreateRequest, TeamDriversCreateReply> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamDriversCreateRequest, TeamDriversCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TeamDriverDelete(TeamDriverDeleteRequest) returns (TeamDriverDeleteReply);
     */
    teamDriverDelete(input: TeamDriverDeleteRequest, options?: RpcOptions): UnaryCall<TeamDriverDeleteRequest, TeamDriverDeleteReply> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<TeamDriverDeleteRequest, TeamDriverDeleteReply>("unary", this._transport, method, opt, input);
    }
}
