// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settings_notification.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SettingsNotificationService } from "./settings_notification";
import type { SettingsNotificationBrokerUserUpdateReply } from "./settings_notification";
import type { SettingsNotificationBrokerUserUpdateRequest } from "./settings_notification";
import type { SettingsNotificationCustomerUserUpdateReply } from "./settings_notification";
import type { SettingsNotificationCustomerUserUpdateRequest } from "./settings_notification";
import type { SettingsNotificationUserUpdateReply } from "./settings_notification";
import type { SettingsNotificationUserUpdateRequest } from "./settings_notification";
import type { SettingsNotificationBrokerUserGetReply } from "./settings_notification";
import type { SettingsNotificationBrokerUserGetRequest } from "./settings_notification";
import type { SettingsNotificationCustomerUserGetReply } from "./settings_notification";
import type { SettingsNotificationCustomerUserGetRequest } from "./settings_notification";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SettingsNotificationGetReply } from "./settings_notification";
import type { SettingsNotificationGetRequest } from "./settings_notification";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SettingsNotificationService
 */
export interface ISettingsNotificationServiceClient {
    /**
     * @generated from protobuf rpc: SettingsNotificationGet(SettingsNotificationGetRequest) returns (SettingsNotificationGetReply);
     */
    settingsNotificationGet(input: SettingsNotificationGetRequest, options?: RpcOptions): UnaryCall<SettingsNotificationGetRequest, SettingsNotificationGetReply>;
    /**
     * @generated from protobuf rpc: SettingsNotificationCustomerUserGet(SettingsNotificationCustomerUserGetRequest) returns (SettingsNotificationCustomerUserGetReply);
     */
    settingsNotificationCustomerUserGet(input: SettingsNotificationCustomerUserGetRequest, options?: RpcOptions): UnaryCall<SettingsNotificationCustomerUserGetRequest, SettingsNotificationCustomerUserGetReply>;
    /**
     * @generated from protobuf rpc: SettingsNotificationBrokerUserGet(SettingsNotificationBrokerUserGetRequest) returns (SettingsNotificationBrokerUserGetReply);
     */
    settingsNotificationBrokerUserGet(input: SettingsNotificationBrokerUserGetRequest, options?: RpcOptions): UnaryCall<SettingsNotificationBrokerUserGetRequest, SettingsNotificationBrokerUserGetReply>;
    /**
     * @generated from protobuf rpc: SettingsNotificationUserUpdate(SettingsNotificationUserUpdateRequest) returns (SettingsNotificationUserUpdateReply);
     */
    settingsNotificationUserUpdate(input: SettingsNotificationUserUpdateRequest, options?: RpcOptions): UnaryCall<SettingsNotificationUserUpdateRequest, SettingsNotificationUserUpdateReply>;
    /**
     * @generated from protobuf rpc: SettingsNotificationCustomerUserUpdate(SettingsNotificationCustomerUserUpdateRequest) returns (SettingsNotificationCustomerUserUpdateReply);
     */
    settingsNotificationCustomerUserUpdate(input: SettingsNotificationCustomerUserUpdateRequest, options?: RpcOptions): UnaryCall<SettingsNotificationCustomerUserUpdateRequest, SettingsNotificationCustomerUserUpdateReply>;
    /**
     * @generated from protobuf rpc: SettingsNotificationBrokerUserUpdate(SettingsNotificationBrokerUserUpdateRequest) returns (SettingsNotificationBrokerUserUpdateReply);
     */
    settingsNotificationBrokerUserUpdate(input: SettingsNotificationBrokerUserUpdateRequest, options?: RpcOptions): UnaryCall<SettingsNotificationBrokerUserUpdateRequest, SettingsNotificationBrokerUserUpdateReply>;
}
/**
 * @generated from protobuf service SettingsNotificationService
 */
export class SettingsNotificationServiceClient implements ISettingsNotificationServiceClient, ServiceInfo {
    typeName = SettingsNotificationService.typeName;
    methods = SettingsNotificationService.methods;
    options = SettingsNotificationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SettingsNotificationGet(SettingsNotificationGetRequest) returns (SettingsNotificationGetReply);
     */
    settingsNotificationGet(input: SettingsNotificationGetRequest, options?: RpcOptions): UnaryCall<SettingsNotificationGetRequest, SettingsNotificationGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettingsNotificationGetRequest, SettingsNotificationGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettingsNotificationCustomerUserGet(SettingsNotificationCustomerUserGetRequest) returns (SettingsNotificationCustomerUserGetReply);
     */
    settingsNotificationCustomerUserGet(input: SettingsNotificationCustomerUserGetRequest, options?: RpcOptions): UnaryCall<SettingsNotificationCustomerUserGetRequest, SettingsNotificationCustomerUserGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettingsNotificationCustomerUserGetRequest, SettingsNotificationCustomerUserGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettingsNotificationBrokerUserGet(SettingsNotificationBrokerUserGetRequest) returns (SettingsNotificationBrokerUserGetReply);
     */
    settingsNotificationBrokerUserGet(input: SettingsNotificationBrokerUserGetRequest, options?: RpcOptions): UnaryCall<SettingsNotificationBrokerUserGetRequest, SettingsNotificationBrokerUserGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettingsNotificationBrokerUserGetRequest, SettingsNotificationBrokerUserGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettingsNotificationUserUpdate(SettingsNotificationUserUpdateRequest) returns (SettingsNotificationUserUpdateReply);
     */
    settingsNotificationUserUpdate(input: SettingsNotificationUserUpdateRequest, options?: RpcOptions): UnaryCall<SettingsNotificationUserUpdateRequest, SettingsNotificationUserUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettingsNotificationUserUpdateRequest, SettingsNotificationUserUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettingsNotificationCustomerUserUpdate(SettingsNotificationCustomerUserUpdateRequest) returns (SettingsNotificationCustomerUserUpdateReply);
     */
    settingsNotificationCustomerUserUpdate(input: SettingsNotificationCustomerUserUpdateRequest, options?: RpcOptions): UnaryCall<SettingsNotificationCustomerUserUpdateRequest, SettingsNotificationCustomerUserUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettingsNotificationCustomerUserUpdateRequest, SettingsNotificationCustomerUserUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettingsNotificationBrokerUserUpdate(SettingsNotificationBrokerUserUpdateRequest) returns (SettingsNotificationBrokerUserUpdateReply);
     */
    settingsNotificationBrokerUserUpdate(input: SettingsNotificationBrokerUserUpdateRequest, options?: RpcOptions): UnaryCall<SettingsNotificationBrokerUserUpdateRequest, SettingsNotificationBrokerUserUpdateReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettingsNotificationBrokerUserUpdateRequest, SettingsNotificationBrokerUserUpdateReply>("unary", this._transport, method, opt, input);
    }
}
