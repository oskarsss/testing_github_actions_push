// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/factoring_companies.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FactoringCompaniesService } from "./factoring_companies";
import type { FactoringCompanyRestoreReply } from "./factoring_companies";
import type { FactoringCompanyRestoreRequest } from "./factoring_companies";
import type { FactoringCompanyDeleteReply } from "./factoring_companies";
import type { FactoringCompanyDeleteRequest } from "./factoring_companies";
import type { FactoringCompanyUpdateReply } from "./factoring_companies";
import type { FactoringCompanyUpdateRequest } from "./factoring_companies";
import type { FactoringCompaniesGetReply } from "./factoring_companies";
import type { FactoringCompaniesGetRequest } from "./factoring_companies";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FactoringCompanyCreateReply } from "./factoring_companies";
import type { FactoringCompanyCreateRequest } from "./factoring_companies";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service FactoringCompaniesService
 */
export interface IFactoringCompaniesServiceClient {
    /**
     * @generated from protobuf rpc: FactoringCompanyCreate(FactoringCompanyCreateRequest) returns (FactoringCompanyCreateReply);
     */
    factoringCompanyCreate(input: FactoringCompanyCreateRequest, options?: RpcOptions): UnaryCall<FactoringCompanyCreateRequest, FactoringCompanyCreateReply>;
    /**
     * @generated from protobuf rpc: FactoringCompanyGet(FactoringCompaniesGetRequest) returns (FactoringCompaniesGetReply);
     */
    factoringCompanyGet(input: FactoringCompaniesGetRequest, options?: RpcOptions): UnaryCall<FactoringCompaniesGetRequest, FactoringCompaniesGetReply>;
    /**
     * @generated from protobuf rpc: FactoringCompanyUpdate(FactoringCompanyUpdateRequest) returns (FactoringCompanyUpdateReply);
     */
    factoringCompanyUpdate(input: FactoringCompanyUpdateRequest, options?: RpcOptions): UnaryCall<FactoringCompanyUpdateRequest, FactoringCompanyUpdateReply>;
    /**
     * @generated from protobuf rpc: FactoringCompanyDelete(FactoringCompanyDeleteRequest) returns (FactoringCompanyDeleteReply);
     */
    factoringCompanyDelete(input: FactoringCompanyDeleteRequest, options?: RpcOptions): UnaryCall<FactoringCompanyDeleteRequest, FactoringCompanyDeleteReply>;
    /**
     * @generated from protobuf rpc: FactoringCompanyRestore(FactoringCompanyRestoreRequest) returns (FactoringCompanyRestoreReply);
     */
    factoringCompanyRestore(input: FactoringCompanyRestoreRequest, options?: RpcOptions): UnaryCall<FactoringCompanyRestoreRequest, FactoringCompanyRestoreReply>;
}
/**
 * @generated from protobuf service FactoringCompaniesService
 */
export class FactoringCompaniesServiceClient implements IFactoringCompaniesServiceClient, ServiceInfo {
    typeName = FactoringCompaniesService.typeName;
    methods = FactoringCompaniesService.methods;
    options = FactoringCompaniesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FactoringCompanyCreate(FactoringCompanyCreateRequest) returns (FactoringCompanyCreateReply);
     */
    factoringCompanyCreate(input: FactoringCompanyCreateRequest, options?: RpcOptions): UnaryCall<FactoringCompanyCreateRequest, FactoringCompanyCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FactoringCompanyCreateRequest, FactoringCompanyCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FactoringCompanyGet(FactoringCompaniesGetRequest) returns (FactoringCompaniesGetReply);
     */
    factoringCompanyGet(input: FactoringCompaniesGetRequest, options?: RpcOptions): UnaryCall<FactoringCompaniesGetRequest, FactoringCompaniesGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<FactoringCompaniesGetRequest, FactoringCompaniesGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FactoringCompanyUpdate(FactoringCompanyUpdateRequest) returns (FactoringCompanyUpdateReply);
     */
    factoringCompanyUpdate(input: FactoringCompanyUpdateRequest, options?: RpcOptions): UnaryCall<FactoringCompanyUpdateRequest, FactoringCompanyUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<FactoringCompanyUpdateRequest, FactoringCompanyUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FactoringCompanyDelete(FactoringCompanyDeleteRequest) returns (FactoringCompanyDeleteReply);
     */
    factoringCompanyDelete(input: FactoringCompanyDeleteRequest, options?: RpcOptions): UnaryCall<FactoringCompanyDeleteRequest, FactoringCompanyDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<FactoringCompanyDeleteRequest, FactoringCompanyDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FactoringCompanyRestore(FactoringCompanyRestoreRequest) returns (FactoringCompanyRestoreReply);
     */
    factoringCompanyRestore(input: FactoringCompanyRestoreRequest, options?: RpcOptions): UnaryCall<FactoringCompanyRestoreRequest, FactoringCompanyRestoreReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<FactoringCompanyRestoreRequest, FactoringCompanyRestoreReply>("unary", this._transport, method, opt, input);
    }
}
