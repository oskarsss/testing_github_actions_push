// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/load_vehicles.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LoadVehiclesService } from "./load_vehicles";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoadVehicleGetForLoadReply } from "./load_vehicles";
import type { LoadVehicleGetForLoadRequest } from "./load_vehicles";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service LoadVehiclesService
 */
export interface ILoadVehiclesServiceClient {
    /**
     * @generated from protobuf rpc: LoadVehicleGetForLoad(LoadVehicleGetForLoadRequest) returns (LoadVehicleGetForLoadReply);
     */
    loadVehicleGetForLoad(input: LoadVehicleGetForLoadRequest, options?: RpcOptions): UnaryCall<LoadVehicleGetForLoadRequest, LoadVehicleGetForLoadReply>;
}
/**
 * @generated from protobuf service LoadVehiclesService
 */
export class LoadVehiclesServiceClient implements ILoadVehiclesServiceClient, ServiceInfo {
    typeName = LoadVehiclesService.typeName;
    methods = LoadVehiclesService.methods;
    options = LoadVehiclesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: LoadVehicleGetForLoad(LoadVehicleGetForLoadRequest) returns (LoadVehicleGetForLoadReply);
     */
    loadVehicleGetForLoad(input: LoadVehicleGetForLoadRequest, options?: RpcOptions): UnaryCall<LoadVehicleGetForLoadRequest, LoadVehicleGetForLoadReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadVehicleGetForLoadRequest, LoadVehicleGetForLoadReply>("unary", this._transport, method, opt, input);
    }
}
