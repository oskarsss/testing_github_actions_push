// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/invoicing_company.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { InvoicingCompanyService } from "./invoicing_company";
import type { InvoicingCompanyDefaultSetReply } from "./invoicing_company";
import type { InvoicingCompanyDefaultSetRequest } from "./invoicing_company";
import type { InvoicingCompanyRestoreReply } from "./invoicing_company";
import type { InvoicingCompanyRestoreRequest } from "./invoicing_company";
import type { InvoicingCompanyRetrieveReply } from "./invoicing_company";
import type { InvoicingCompanyRetrieveRequest } from "./invoicing_company";
import type { InvoicingCompanyDeleteReply } from "./invoicing_company";
import type { InvoicingCompanyDeleteRequest } from "./invoicing_company";
import type { InvoicingCompanyUpdateReply } from "./invoicing_company";
import type { InvoicingCompanyUpdateRequest } from "./invoicing_company";
import type { InvoicingCompanyGetReply } from "./invoicing_company";
import type { InvoicingCompanyGetRequest } from "./invoicing_company";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { InvoicingCompanyCreateReply } from "./invoicing_company";
import type { InvoicingCompanyCreateRequest } from "./invoicing_company";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service InvoicingCompanyService
 */
export interface IInvoicingCompanyServiceClient {
    /**
     * @generated from protobuf rpc: InvoicingCompanyCreate(InvoicingCompanyCreateRequest) returns (InvoicingCompanyCreateReply);
     */
    invoicingCompanyCreate(input: InvoicingCompanyCreateRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyCreateRequest, InvoicingCompanyCreateReply>;
    /**
     * @generated from protobuf rpc: InvoicingCompanyGet(InvoicingCompanyGetRequest) returns (InvoicingCompanyGetReply);
     */
    invoicingCompanyGet(input: InvoicingCompanyGetRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyGetRequest, InvoicingCompanyGetReply>;
    /**
     * @generated from protobuf rpc: InvoicingCompanyUpdate(InvoicingCompanyUpdateRequest) returns (InvoicingCompanyUpdateReply);
     */
    invoicingCompanyUpdate(input: InvoicingCompanyUpdateRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyUpdateRequest, InvoicingCompanyUpdateReply>;
    /**
     * @generated from protobuf rpc: InvoicingCompanyDelete(InvoicingCompanyDeleteRequest) returns (InvoicingCompanyDeleteReply);
     */
    invoicingCompanyDelete(input: InvoicingCompanyDeleteRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyDeleteRequest, InvoicingCompanyDeleteReply>;
    /**
     * @generated from protobuf rpc: InvoicingCompanyRetrieve(InvoicingCompanyRetrieveRequest) returns (InvoicingCompanyRetrieveReply);
     */
    invoicingCompanyRetrieve(input: InvoicingCompanyRetrieveRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyRetrieveRequest, InvoicingCompanyRetrieveReply>;
    /**
     * @generated from protobuf rpc: InvoicingCompanyRestore(InvoicingCompanyRestoreRequest) returns (InvoicingCompanyRestoreReply);
     */
    invoicingCompanyRestore(input: InvoicingCompanyRestoreRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyRestoreRequest, InvoicingCompanyRestoreReply>;
    /**
     * @generated from protobuf rpc: InvoicingCompanyDefaultSet(InvoicingCompanyDefaultSetRequest) returns (InvoicingCompanyDefaultSetReply);
     */
    invoicingCompanyDefaultSet(input: InvoicingCompanyDefaultSetRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyDefaultSetRequest, InvoicingCompanyDefaultSetReply>;
}
/**
 * @generated from protobuf service InvoicingCompanyService
 */
export class InvoicingCompanyServiceClient implements IInvoicingCompanyServiceClient, ServiceInfo {
    typeName = InvoicingCompanyService.typeName;
    methods = InvoicingCompanyService.methods;
    options = InvoicingCompanyService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyCreate(InvoicingCompanyCreateRequest) returns (InvoicingCompanyCreateReply);
     */
    invoicingCompanyCreate(input: InvoicingCompanyCreateRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyCreateRequest, InvoicingCompanyCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyCreateRequest, InvoicingCompanyCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyGet(InvoicingCompanyGetRequest) returns (InvoicingCompanyGetReply);
     */
    invoicingCompanyGet(input: InvoicingCompanyGetRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyGetRequest, InvoicingCompanyGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyGetRequest, InvoicingCompanyGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyUpdate(InvoicingCompanyUpdateRequest) returns (InvoicingCompanyUpdateReply);
     */
    invoicingCompanyUpdate(input: InvoicingCompanyUpdateRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyUpdateRequest, InvoicingCompanyUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyUpdateRequest, InvoicingCompanyUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyDelete(InvoicingCompanyDeleteRequest) returns (InvoicingCompanyDeleteReply);
     */
    invoicingCompanyDelete(input: InvoicingCompanyDeleteRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyDeleteRequest, InvoicingCompanyDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyDeleteRequest, InvoicingCompanyDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyRetrieve(InvoicingCompanyRetrieveRequest) returns (InvoicingCompanyRetrieveReply);
     */
    invoicingCompanyRetrieve(input: InvoicingCompanyRetrieveRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyRetrieveRequest, InvoicingCompanyRetrieveReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyRetrieveRequest, InvoicingCompanyRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyRestore(InvoicingCompanyRestoreRequest) returns (InvoicingCompanyRestoreReply);
     */
    invoicingCompanyRestore(input: InvoicingCompanyRestoreRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyRestoreRequest, InvoicingCompanyRestoreReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyRestoreRequest, InvoicingCompanyRestoreReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InvoicingCompanyDefaultSet(InvoicingCompanyDefaultSetRequest) returns (InvoicingCompanyDefaultSetReply);
     */
    invoicingCompanyDefaultSet(input: InvoicingCompanyDefaultSetRequest, options?: RpcOptions): UnaryCall<InvoicingCompanyDefaultSetRequest, InvoicingCompanyDefaultSetReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<InvoicingCompanyDefaultSetRequest, InvoicingCompanyDefaultSetReply>("unary", this._transport, method, opt, input);
    }
}
