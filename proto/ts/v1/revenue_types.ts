// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/revenue_types.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Settlements_RevenueType_Item_Type } from "./models/model_settlement";
/**
 * @generated from protobuf message RevenueTypesGetRequest
 */
export interface RevenueTypesGetRequest {
}
/**
 * @generated from protobuf message RevenueTypesGetReply
 */
export interface RevenueTypesGetReply {
    /**
     * @generated from protobuf field: int64 total_drivers = 1;
     */
    totalDrivers: number;
    /**
     * @generated from protobuf field: repeated RevenueTypesGetReply.RevenueType revenue_types = 2;
     */
    revenueTypes: RevenueTypesGetReply_RevenueType[];
}
/**
 * @generated from protobuf message RevenueTypesGetReply.RevenueType
 */
export interface RevenueTypesGetReply_RevenueType {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool deduct_fuel = 3;
     */
    deductFuel: boolean;
    /**
     * @generated from protobuf field: bool deduct_tolls = 4;
     */
    deductTolls: boolean;
    /**
     * @generated from protobuf field: string attach_document_type_ids = 5;
     */
    attachDocumentTypeIds: string;
    /**
     * @generated from protobuf field: bool default = 6;
     */
    default: boolean;
    /**
     * @generated from protobuf field: bool active = 7;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string updated_at = 8;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 9;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: repeated RevenueTypesGetReply.RevenueType.Item items = 10;
     */
    items: RevenueTypesGetReply_RevenueType_Item[];
    /**
     * @generated from protobuf field: int64 assigned_drivers_count = 11;
     */
    assignedDriversCount: number;
    /**
     * @generated from protobuf field: repeated RevenueTypesGetReply.RevenueType.Driver drivers = 12;
     */
    drivers: RevenueTypesGetReply_RevenueType_Driver[];
}
/**
 * @generated from protobuf message RevenueTypesGetReply.RevenueType.Item
 */
export interface RevenueTypesGetReply_RevenueType_Item {
    /**
     * @generated from protobuf field: string item_id = 1;
     */
    itemId: string;
    /**
     * @generated from protobuf field: Settlements.RevenueType.Item.Type type = 2;
     */
    type: Settlements_RevenueType_Item_Type;
    /**
     * @generated from protobuf field: double amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string updated_at = 4;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message RevenueTypesGetReply.RevenueType.Driver
 */
export interface RevenueTypesGetReply_RevenueType_Driver {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string first_name = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 3;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 4;
     */
    selfieThumbUrl: string;
}
/**
 * @generated from protobuf message RevenueTypeCreateRequest
 */
export interface RevenueTypeCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bool deduct_fuel = 2;
     */
    deductFuel: boolean;
    /**
     * @generated from protobuf field: bool deduct_tolls = 3;
     */
    deductTolls: boolean;
    /**
     * @generated from protobuf field: repeated string attach_document_type_ids = 4;
     */
    attachDocumentTypeIds: string[];
    /**
     * @generated from protobuf field: bool default = 5;
     */
    default: boolean;
}
/**
 * @generated from protobuf message RevenueTypeCreateReply
 */
export interface RevenueTypeCreateReply {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
}
/**
 * @generated from protobuf message RevenueTypeUpdateRequest
 */
export interface RevenueTypeUpdateRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool deduct_fuel = 3;
     */
    deductFuel: boolean;
    /**
     * @generated from protobuf field: bool deduct_tolls = 4;
     */
    deductTolls: boolean;
    /**
     * @generated from protobuf field: repeated string attach_document_type_ids = 5;
     */
    attachDocumentTypeIds: string[];
    /**
     * @generated from protobuf field: bool default = 6;
     */
    default: boolean;
}
/**
 * @generated from protobuf message RevenueTypeUpdateReply
 */
export interface RevenueTypeUpdateReply {
}
/**
 * @generated from protobuf message RevenueTypeActivateRequest
 */
export interface RevenueTypeActivateRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
}
/**
 * @generated from protobuf message RevenueTypeActivateReply
 */
export interface RevenueTypeActivateReply {
}
/**
 * @generated from protobuf message RevenueTypeDeactivateRequest
 */
export interface RevenueTypeDeactivateRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
}
/**
 * @generated from protobuf message RevenueTypeDeactivateReply
 */
export interface RevenueTypeDeactivateReply {
}
/**
 * @generated from protobuf message RevenueTypeItemCreateRequest
 */
export interface RevenueTypeItemCreateRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: Settlements.RevenueType.Item.Type type = 2;
     */
    type: Settlements_RevenueType_Item_Type;
    /**
     * @generated from protobuf field: double amount = 3;
     */
    amount: number;
}
/**
 * @generated from protobuf message RevenueTypeItemCreateReply
 */
export interface RevenueTypeItemCreateReply {
    /**
     * @generated from protobuf field: string item_id = 1;
     */
    itemId: string;
}
/**
 * @generated from protobuf message RevenueTypeItemUpdateRequest
 */
export interface RevenueTypeItemUpdateRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: string item_id = 2;
     */
    itemId: string;
    /**
     * @generated from protobuf field: Settlements.RevenueType.Item.Type type = 3;
     */
    type: Settlements_RevenueType_Item_Type;
    /**
     * @generated from protobuf field: double amount = 4;
     */
    amount: number;
}
/**
 * @generated from protobuf message RevenueTypeItemUpdateReply
 */
export interface RevenueTypeItemUpdateReply {
}
/**
 * @generated from protobuf message RevenueTypeItemDeleteRequest
 */
export interface RevenueTypeItemDeleteRequest {
    /**
     * @generated from protobuf field: string revenue_type_id = 1;
     */
    revenueTypeId: string;
    /**
     * @generated from protobuf field: string item_id = 2;
     */
    itemId: string;
}
/**
 * @generated from protobuf message RevenueTypeItemDeleteReply
 */
export interface RevenueTypeItemDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypesGetRequest$Type extends MessageType<RevenueTypesGetRequest> {
    constructor() {
        super("RevenueTypesGetRequest", []);
    }
    create(value?: PartialMessage<RevenueTypesGetRequest>): RevenueTypesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevenueTypesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypesGetRequest): RevenueTypesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevenueTypesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypesGetRequest
 */
export const RevenueTypesGetRequest = new RevenueTypesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypesGetReply$Type extends MessageType<RevenueTypesGetReply> {
    constructor() {
        super("RevenueTypesGetReply", [
            { no: 1, name: "total_drivers", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "revenue_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RevenueTypesGetReply_RevenueType }
        ]);
    }
    create(value?: PartialMessage<RevenueTypesGetReply>): RevenueTypesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalDrivers = 0;
        message.revenueTypes = [];
        if (value !== undefined)
            reflectionMergePartial<RevenueTypesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypesGetReply): RevenueTypesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_drivers */ 1:
                    message.totalDrivers = reader.int64().toNumber();
                    break;
                case /* repeated RevenueTypesGetReply.RevenueType revenue_types */ 2:
                    message.revenueTypes.push(RevenueTypesGetReply_RevenueType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_drivers = 1; */
        if (message.totalDrivers !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalDrivers);
        /* repeated RevenueTypesGetReply.RevenueType revenue_types = 2; */
        for (let i = 0; i < message.revenueTypes.length; i++)
            RevenueTypesGetReply_RevenueType.internalBinaryWrite(message.revenueTypes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypesGetReply
 */
export const RevenueTypesGetReply = new RevenueTypesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypesGetReply_RevenueType$Type extends MessageType<RevenueTypesGetReply_RevenueType> {
    constructor() {
        super("RevenueTypesGetReply.RevenueType", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deduct_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "deduct_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "attach_document_type_ids", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RevenueTypesGetReply_RevenueType_Item },
            { no: 11, name: "assigned_drivers_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RevenueTypesGetReply_RevenueType_Driver }
        ]);
    }
    create(value?: PartialMessage<RevenueTypesGetReply_RevenueType>): RevenueTypesGetReply_RevenueType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.name = "";
        message.deductFuel = false;
        message.deductTolls = false;
        message.attachDocumentTypeIds = "";
        message.default = false;
        message.active = false;
        message.updatedAt = "";
        message.createdAt = "";
        message.items = [];
        message.assignedDriversCount = 0;
        message.drivers = [];
        if (value !== undefined)
            reflectionMergePartial<RevenueTypesGetReply_RevenueType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypesGetReply_RevenueType): RevenueTypesGetReply_RevenueType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool deduct_fuel */ 3:
                    message.deductFuel = reader.bool();
                    break;
                case /* bool deduct_tolls */ 4:
                    message.deductTolls = reader.bool();
                    break;
                case /* string attach_document_type_ids */ 5:
                    message.attachDocumentTypeIds = reader.string();
                    break;
                case /* bool default */ 6:
                    message.default = reader.bool();
                    break;
                case /* bool active */ 7:
                    message.active = reader.bool();
                    break;
                case /* string updated_at */ 8:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 9:
                    message.createdAt = reader.string();
                    break;
                case /* repeated RevenueTypesGetReply.RevenueType.Item items */ 10:
                    message.items.push(RevenueTypesGetReply_RevenueType_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 assigned_drivers_count */ 11:
                    message.assignedDriversCount = reader.int64().toNumber();
                    break;
                case /* repeated RevenueTypesGetReply.RevenueType.Driver drivers */ 12:
                    message.drivers.push(RevenueTypesGetReply_RevenueType_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypesGetReply_RevenueType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool deduct_fuel = 3; */
        if (message.deductFuel !== false)
            writer.tag(3, WireType.Varint).bool(message.deductFuel);
        /* bool deduct_tolls = 4; */
        if (message.deductTolls !== false)
            writer.tag(4, WireType.Varint).bool(message.deductTolls);
        /* string attach_document_type_ids = 5; */
        if (message.attachDocumentTypeIds !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.attachDocumentTypeIds);
        /* bool default = 6; */
        if (message.default !== false)
            writer.tag(6, WireType.Varint).bool(message.default);
        /* bool active = 7; */
        if (message.active !== false)
            writer.tag(7, WireType.Varint).bool(message.active);
        /* string updated_at = 8; */
        if (message.updatedAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 9; */
        if (message.createdAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.createdAt);
        /* repeated RevenueTypesGetReply.RevenueType.Item items = 10; */
        for (let i = 0; i < message.items.length; i++)
            RevenueTypesGetReply_RevenueType_Item.internalBinaryWrite(message.items[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int64 assigned_drivers_count = 11; */
        if (message.assignedDriversCount !== 0)
            writer.tag(11, WireType.Varint).int64(message.assignedDriversCount);
        /* repeated RevenueTypesGetReply.RevenueType.Driver drivers = 12; */
        for (let i = 0; i < message.drivers.length; i++)
            RevenueTypesGetReply_RevenueType_Driver.internalBinaryWrite(message.drivers[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypesGetReply.RevenueType
 */
export const RevenueTypesGetReply_RevenueType = new RevenueTypesGetReply_RevenueType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypesGetReply_RevenueType_Item$Type extends MessageType<RevenueTypesGetReply_RevenueType_Item> {
    constructor() {
        super("RevenueTypesGetReply.RevenueType.Item", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["Settlements.RevenueType.Item.Type", Settlements_RevenueType_Item_Type, "TYPE_"] },
            { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypesGetReply_RevenueType_Item>): RevenueTypesGetReply_RevenueType_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.type = 0;
        message.amount = 0;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypesGetReply_RevenueType_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypesGetReply_RevenueType_Item): RevenueTypesGetReply_RevenueType_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* Settlements.RevenueType.Item.Type type */ 2:
                    message.type = reader.int32();
                    break;
                case /* double amount */ 3:
                    message.amount = reader.double();
                    break;
                case /* string updated_at */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypesGetReply_RevenueType_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* Settlements.RevenueType.Item.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* double amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Bit64).double(message.amount);
        /* string updated_at = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypesGetReply.RevenueType.Item
 */
export const RevenueTypesGetReply_RevenueType_Item = new RevenueTypesGetReply_RevenueType_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypesGetReply_RevenueType_Driver$Type extends MessageType<RevenueTypesGetReply_RevenueType_Driver> {
    constructor() {
        super("RevenueTypesGetReply.RevenueType.Driver", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypesGetReply_RevenueType_Driver>): RevenueTypesGetReply_RevenueType_Driver {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.firstName = "";
        message.lastName = "";
        message.selfieThumbUrl = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypesGetReply_RevenueType_Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypesGetReply_RevenueType_Driver): RevenueTypesGetReply_RevenueType_Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string first_name */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 3:
                    message.lastName = reader.string();
                    break;
                case /* string selfie_thumb_url */ 4:
                    message.selfieThumbUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypesGetReply_RevenueType_Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string first_name = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 3; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* string selfie_thumb_url = 4; */
        if (message.selfieThumbUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.selfieThumbUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypesGetReply.RevenueType.Driver
 */
export const RevenueTypesGetReply_RevenueType_Driver = new RevenueTypesGetReply_RevenueType_Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeCreateRequest$Type extends MessageType<RevenueTypeCreateRequest> {
    constructor() {
        super("RevenueTypeCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deduct_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "deduct_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "attach_document_type_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeCreateRequest>): RevenueTypeCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.deductFuel = false;
        message.deductTolls = false;
        message.attachDocumentTypeIds = [];
        message.default = false;
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeCreateRequest): RevenueTypeCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool deduct_fuel */ 2:
                    message.deductFuel = reader.bool();
                    break;
                case /* bool deduct_tolls */ 3:
                    message.deductTolls = reader.bool();
                    break;
                case /* repeated string attach_document_type_ids */ 4:
                    message.attachDocumentTypeIds.push(reader.string());
                    break;
                case /* bool default */ 5:
                    message.default = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool deduct_fuel = 2; */
        if (message.deductFuel !== false)
            writer.tag(2, WireType.Varint).bool(message.deductFuel);
        /* bool deduct_tolls = 3; */
        if (message.deductTolls !== false)
            writer.tag(3, WireType.Varint).bool(message.deductTolls);
        /* repeated string attach_document_type_ids = 4; */
        for (let i = 0; i < message.attachDocumentTypeIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.attachDocumentTypeIds[i]);
        /* bool default = 5; */
        if (message.default !== false)
            writer.tag(5, WireType.Varint).bool(message.default);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeCreateRequest
 */
export const RevenueTypeCreateRequest = new RevenueTypeCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeCreateReply$Type extends MessageType<RevenueTypeCreateReply> {
    constructor() {
        super("RevenueTypeCreateReply", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeCreateReply>): RevenueTypeCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeCreateReply): RevenueTypeCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeCreateReply
 */
export const RevenueTypeCreateReply = new RevenueTypeCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeUpdateRequest$Type extends MessageType<RevenueTypeUpdateRequest> {
    constructor() {
        super("RevenueTypeUpdateRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deduct_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "deduct_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "attach_document_type_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeUpdateRequest>): RevenueTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.name = "";
        message.deductFuel = false;
        message.deductTolls = false;
        message.attachDocumentTypeIds = [];
        message.default = false;
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeUpdateRequest): RevenueTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool deduct_fuel */ 3:
                    message.deductFuel = reader.bool();
                    break;
                case /* bool deduct_tolls */ 4:
                    message.deductTolls = reader.bool();
                    break;
                case /* repeated string attach_document_type_ids */ 5:
                    message.attachDocumentTypeIds.push(reader.string());
                    break;
                case /* bool default */ 6:
                    message.default = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool deduct_fuel = 3; */
        if (message.deductFuel !== false)
            writer.tag(3, WireType.Varint).bool(message.deductFuel);
        /* bool deduct_tolls = 4; */
        if (message.deductTolls !== false)
            writer.tag(4, WireType.Varint).bool(message.deductTolls);
        /* repeated string attach_document_type_ids = 5; */
        for (let i = 0; i < message.attachDocumentTypeIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.attachDocumentTypeIds[i]);
        /* bool default = 6; */
        if (message.default !== false)
            writer.tag(6, WireType.Varint).bool(message.default);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeUpdateRequest
 */
export const RevenueTypeUpdateRequest = new RevenueTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeUpdateReply$Type extends MessageType<RevenueTypeUpdateReply> {
    constructor() {
        super("RevenueTypeUpdateReply", []);
    }
    create(value?: PartialMessage<RevenueTypeUpdateReply>): RevenueTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeUpdateReply): RevenueTypeUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevenueTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeUpdateReply
 */
export const RevenueTypeUpdateReply = new RevenueTypeUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeActivateRequest$Type extends MessageType<RevenueTypeActivateRequest> {
    constructor() {
        super("RevenueTypeActivateRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeActivateRequest>): RevenueTypeActivateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeActivateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeActivateRequest): RevenueTypeActivateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeActivateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeActivateRequest
 */
export const RevenueTypeActivateRequest = new RevenueTypeActivateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeActivateReply$Type extends MessageType<RevenueTypeActivateReply> {
    constructor() {
        super("RevenueTypeActivateReply", []);
    }
    create(value?: PartialMessage<RevenueTypeActivateReply>): RevenueTypeActivateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeActivateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeActivateReply): RevenueTypeActivateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevenueTypeActivateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeActivateReply
 */
export const RevenueTypeActivateReply = new RevenueTypeActivateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeDeactivateRequest$Type extends MessageType<RevenueTypeDeactivateRequest> {
    constructor() {
        super("RevenueTypeDeactivateRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeDeactivateRequest>): RevenueTypeDeactivateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeDeactivateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeDeactivateRequest): RevenueTypeDeactivateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeDeactivateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeDeactivateRequest
 */
export const RevenueTypeDeactivateRequest = new RevenueTypeDeactivateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeDeactivateReply$Type extends MessageType<RevenueTypeDeactivateReply> {
    constructor() {
        super("RevenueTypeDeactivateReply", []);
    }
    create(value?: PartialMessage<RevenueTypeDeactivateReply>): RevenueTypeDeactivateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeDeactivateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeDeactivateReply): RevenueTypeDeactivateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevenueTypeDeactivateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeDeactivateReply
 */
export const RevenueTypeDeactivateReply = new RevenueTypeDeactivateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeItemCreateRequest$Type extends MessageType<RevenueTypeItemCreateRequest> {
    constructor() {
        super("RevenueTypeItemCreateRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["Settlements.RevenueType.Item.Type", Settlements_RevenueType_Item_Type, "TYPE_"] },
            { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeItemCreateRequest>): RevenueTypeItemCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.type = 0;
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeItemCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeItemCreateRequest): RevenueTypeItemCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* Settlements.RevenueType.Item.Type type */ 2:
                    message.type = reader.int32();
                    break;
                case /* double amount */ 3:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeItemCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* Settlements.RevenueType.Item.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* double amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeItemCreateRequest
 */
export const RevenueTypeItemCreateRequest = new RevenueTypeItemCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeItemCreateReply$Type extends MessageType<RevenueTypeItemCreateReply> {
    constructor() {
        super("RevenueTypeItemCreateReply", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeItemCreateReply>): RevenueTypeItemCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeItemCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeItemCreateReply): RevenueTypeItemCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeItemCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeItemCreateReply
 */
export const RevenueTypeItemCreateReply = new RevenueTypeItemCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeItemUpdateRequest$Type extends MessageType<RevenueTypeItemUpdateRequest> {
    constructor() {
        super("RevenueTypeItemUpdateRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["Settlements.RevenueType.Item.Type", Settlements_RevenueType_Item_Type, "TYPE_"] },
            { no: 4, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeItemUpdateRequest>): RevenueTypeItemUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.itemId = "";
        message.type = 0;
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeItemUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeItemUpdateRequest): RevenueTypeItemUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* string item_id */ 2:
                    message.itemId = reader.string();
                    break;
                case /* Settlements.RevenueType.Item.Type type */ 3:
                    message.type = reader.int32();
                    break;
                case /* double amount */ 4:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeItemUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* string item_id = 2; */
        if (message.itemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemId);
        /* Settlements.RevenueType.Item.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* double amount = 4; */
        if (message.amount !== 0)
            writer.tag(4, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeItemUpdateRequest
 */
export const RevenueTypeItemUpdateRequest = new RevenueTypeItemUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeItemUpdateReply$Type extends MessageType<RevenueTypeItemUpdateReply> {
    constructor() {
        super("RevenueTypeItemUpdateReply", []);
    }
    create(value?: PartialMessage<RevenueTypeItemUpdateReply>): RevenueTypeItemUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeItemUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeItemUpdateReply): RevenueTypeItemUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevenueTypeItemUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeItemUpdateReply
 */
export const RevenueTypeItemUpdateReply = new RevenueTypeItemUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeItemDeleteRequest$Type extends MessageType<RevenueTypeItemDeleteRequest> {
    constructor() {
        super("RevenueTypeItemDeleteRequest", [
            { no: 1, name: "revenue_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevenueTypeItemDeleteRequest>): RevenueTypeItemDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.revenueTypeId = "";
        message.itemId = "";
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeItemDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeItemDeleteRequest): RevenueTypeItemDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string revenue_type_id */ 1:
                    message.revenueTypeId = reader.string();
                    break;
                case /* string item_id */ 2:
                    message.itemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevenueTypeItemDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string revenue_type_id = 1; */
        if (message.revenueTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.revenueTypeId);
        /* string item_id = 2; */
        if (message.itemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeItemDeleteRequest
 */
export const RevenueTypeItemDeleteRequest = new RevenueTypeItemDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevenueTypeItemDeleteReply$Type extends MessageType<RevenueTypeItemDeleteReply> {
    constructor() {
        super("RevenueTypeItemDeleteReply", []);
    }
    create(value?: PartialMessage<RevenueTypeItemDeleteReply>): RevenueTypeItemDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevenueTypeItemDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevenueTypeItemDeleteReply): RevenueTypeItemDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevenueTypeItemDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevenueTypeItemDeleteReply
 */
export const RevenueTypeItemDeleteReply = new RevenueTypeItemDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service RevenueTypesService
 */
export const RevenueTypesService = new ServiceType("RevenueTypesService", [
    { name: "RevenueTypesGet", options: {}, I: RevenueTypesGetRequest, O: RevenueTypesGetReply },
    { name: "RevenueTypeCreate", options: {}, I: RevenueTypeCreateRequest, O: RevenueTypeCreateReply },
    { name: "RevenueTypeUpdate", options: {}, I: RevenueTypeUpdateRequest, O: RevenueTypeUpdateReply },
    { name: "RevenueTypeActivate", options: {}, I: RevenueTypeActivateRequest, O: RevenueTypeActivateReply },
    { name: "RevenueTypeDeactivate", options: {}, I: RevenueTypeDeactivateRequest, O: RevenueTypeDeactivateReply },
    { name: "RevenueTypeItemCreate", options: {}, I: RevenueTypeItemCreateRequest, O: RevenueTypeItemCreateReply },
    { name: "RevenueTypeItemUpdate", options: {}, I: RevenueTypeItemUpdateRequest, O: RevenueTypeItemUpdateReply },
    { name: "RevenueTypeItemDelete", options: {}, I: RevenueTypeItemDeleteRequest, O: RevenueTypeItemDeleteReply }
]);
