// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/page.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PageService } from "./page";
import type { PageViewColumnWidthUpdateReply } from "./page";
import type { PageViewColumnWidthUpdateRequest } from "./page";
import type { PageViewColumnBatchUpdateReply } from "./page";
import type { PageViewColumnBatchUpdateRequest } from "./page";
import type { PageViewSetRowHeightReply } from "./page";
import type { PageViewSetRowHeightRequest } from "./page";
import type { PageViewDuplicateReply } from "./page";
import type { PageViewDuplicateRequest } from "./page";
import type { PageViewDeleteReply } from "./page";
import type { PageViewDeleteRequest } from "./page";
import type { PageViewUpdateReply } from "./page";
import type { PageViewUpdateRequest } from "./page";
import type { PageViewCreateReply } from "./page";
import type { PageViewCreateRequest } from "./page";
import type { PageHeaderDeleteReply } from "./page";
import type { PageHeaderDeleteRequest } from "./page";
import type { PageHeaderUpdateReply } from "./page";
import type { PageHeaderUpdateRequest } from "./page";
import type { PageHeaderCreateReply } from "./page";
import type { PageHeaderCreateRequest } from "./page";
import type { RecurringTransactionPageRetrieveReply } from "./page";
import type { RecurringTransactionPageRetrieveRequest } from "./page";
import type { PageGetReply } from "./page";
import type { PageGetRequest } from "./page";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PageRetrieveReply } from "./page";
import type { PageRetrieveRequest } from "./page";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service PageService
 */
export interface IPageServiceClient {
    /**
     * @generated from protobuf rpc: PageRetrieve(PageRetrieveRequest) returns (PageRetrieveReply);
     */
    pageRetrieve(input: PageRetrieveRequest, options?: RpcOptions): UnaryCall<PageRetrieveRequest, PageRetrieveReply>;
    /**
     * @generated from protobuf rpc: PageGet(PageGetRequest) returns (PageGetReply);
     */
    pageGet(input: PageGetRequest, options?: RpcOptions): UnaryCall<PageGetRequest, PageGetReply>;
    /**
     * @generated from protobuf rpc: RecurringTransactionPageRetrieve(RecurringTransactionPageRetrieveRequest) returns (RecurringTransactionPageRetrieveReply);
     */
    recurringTransactionPageRetrieve(input: RecurringTransactionPageRetrieveRequest, options?: RpcOptions): UnaryCall<RecurringTransactionPageRetrieveRequest, RecurringTransactionPageRetrieveReply>;
    /**
     * @generated from protobuf rpc: PageHeaderCreate(PageHeaderCreateRequest) returns (PageHeaderCreateReply);
     */
    pageHeaderCreate(input: PageHeaderCreateRequest, options?: RpcOptions): UnaryCall<PageHeaderCreateRequest, PageHeaderCreateReply>;
    /**
     * @generated from protobuf rpc: PageHeaderUpdate(PageHeaderUpdateRequest) returns (PageHeaderUpdateReply);
     */
    pageHeaderUpdate(input: PageHeaderUpdateRequest, options?: RpcOptions): UnaryCall<PageHeaderUpdateRequest, PageHeaderUpdateReply>;
    /**
     * @generated from protobuf rpc: PageHeaderDelete(PageHeaderDeleteRequest) returns (PageHeaderDeleteReply);
     */
    pageHeaderDelete(input: PageHeaderDeleteRequest, options?: RpcOptions): UnaryCall<PageHeaderDeleteRequest, PageHeaderDeleteReply>;
    /**
     * @generated from protobuf rpc: PageViewCreate(PageViewCreateRequest) returns (PageViewCreateReply);
     */
    pageViewCreate(input: PageViewCreateRequest, options?: RpcOptions): UnaryCall<PageViewCreateRequest, PageViewCreateReply>;
    /**
     * @generated from protobuf rpc: PageViewUpdate(PageViewUpdateRequest) returns (PageViewUpdateReply);
     */
    pageViewUpdate(input: PageViewUpdateRequest, options?: RpcOptions): UnaryCall<PageViewUpdateRequest, PageViewUpdateReply>;
    /**
     * @generated from protobuf rpc: PageViewDelete(PageViewDeleteRequest) returns (PageViewDeleteReply);
     */
    pageViewDelete(input: PageViewDeleteRequest, options?: RpcOptions): UnaryCall<PageViewDeleteRequest, PageViewDeleteReply>;
    /**
     * @generated from protobuf rpc: PageViewDuplicate(PageViewDuplicateRequest) returns (PageViewDuplicateReply);
     */
    pageViewDuplicate(input: PageViewDuplicateRequest, options?: RpcOptions): UnaryCall<PageViewDuplicateRequest, PageViewDuplicateReply>;
    /**
     * @generated from protobuf rpc: PageViewSetRowHeight(PageViewSetRowHeightRequest) returns (PageViewSetRowHeightReply);
     */
    pageViewSetRowHeight(input: PageViewSetRowHeightRequest, options?: RpcOptions): UnaryCall<PageViewSetRowHeightRequest, PageViewSetRowHeightReply>;
    /**
     * @generated from protobuf rpc: PageViewColumnBatchUpdate(PageViewColumnBatchUpdateRequest) returns (PageViewColumnBatchUpdateReply);
     */
    pageViewColumnBatchUpdate(input: PageViewColumnBatchUpdateRequest, options?: RpcOptions): UnaryCall<PageViewColumnBatchUpdateRequest, PageViewColumnBatchUpdateReply>;
    /**
     * @generated from protobuf rpc: PageViewColumnWidthUpdate(PageViewColumnWidthUpdateRequest) returns (PageViewColumnWidthUpdateReply);
     */
    pageViewColumnWidthUpdate(input: PageViewColumnWidthUpdateRequest, options?: RpcOptions): UnaryCall<PageViewColumnWidthUpdateRequest, PageViewColumnWidthUpdateReply>;
}
/**
 * @generated from protobuf service PageService
 */
export class PageServiceClient implements IPageServiceClient, ServiceInfo {
    typeName = PageService.typeName;
    methods = PageService.methods;
    options = PageService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PageRetrieve(PageRetrieveRequest) returns (PageRetrieveReply);
     */
    pageRetrieve(input: PageRetrieveRequest, options?: RpcOptions): UnaryCall<PageRetrieveRequest, PageRetrieveReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageRetrieveRequest, PageRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageGet(PageGetRequest) returns (PageGetReply);
     */
    pageGet(input: PageGetRequest, options?: RpcOptions): UnaryCall<PageGetRequest, PageGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageGetRequest, PageGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RecurringTransactionPageRetrieve(RecurringTransactionPageRetrieveRequest) returns (RecurringTransactionPageRetrieveReply);
     */
    recurringTransactionPageRetrieve(input: RecurringTransactionPageRetrieveRequest, options?: RpcOptions): UnaryCall<RecurringTransactionPageRetrieveRequest, RecurringTransactionPageRetrieveReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecurringTransactionPageRetrieveRequest, RecurringTransactionPageRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageHeaderCreate(PageHeaderCreateRequest) returns (PageHeaderCreateReply);
     */
    pageHeaderCreate(input: PageHeaderCreateRequest, options?: RpcOptions): UnaryCall<PageHeaderCreateRequest, PageHeaderCreateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageHeaderCreateRequest, PageHeaderCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageHeaderUpdate(PageHeaderUpdateRequest) returns (PageHeaderUpdateReply);
     */
    pageHeaderUpdate(input: PageHeaderUpdateRequest, options?: RpcOptions): UnaryCall<PageHeaderUpdateRequest, PageHeaderUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageHeaderUpdateRequest, PageHeaderUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageHeaderDelete(PageHeaderDeleteRequest) returns (PageHeaderDeleteReply);
     */
    pageHeaderDelete(input: PageHeaderDeleteRequest, options?: RpcOptions): UnaryCall<PageHeaderDeleteRequest, PageHeaderDeleteReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageHeaderDeleteRequest, PageHeaderDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewCreate(PageViewCreateRequest) returns (PageViewCreateReply);
     */
    pageViewCreate(input: PageViewCreateRequest, options?: RpcOptions): UnaryCall<PageViewCreateRequest, PageViewCreateReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewCreateRequest, PageViewCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewUpdate(PageViewUpdateRequest) returns (PageViewUpdateReply);
     */
    pageViewUpdate(input: PageViewUpdateRequest, options?: RpcOptions): UnaryCall<PageViewUpdateRequest, PageViewUpdateReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewUpdateRequest, PageViewUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewDelete(PageViewDeleteRequest) returns (PageViewDeleteReply);
     */
    pageViewDelete(input: PageViewDeleteRequest, options?: RpcOptions): UnaryCall<PageViewDeleteRequest, PageViewDeleteReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewDeleteRequest, PageViewDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewDuplicate(PageViewDuplicateRequest) returns (PageViewDuplicateReply);
     */
    pageViewDuplicate(input: PageViewDuplicateRequest, options?: RpcOptions): UnaryCall<PageViewDuplicateRequest, PageViewDuplicateReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewDuplicateRequest, PageViewDuplicateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewSetRowHeight(PageViewSetRowHeightRequest) returns (PageViewSetRowHeightReply);
     */
    pageViewSetRowHeight(input: PageViewSetRowHeightRequest, options?: RpcOptions): UnaryCall<PageViewSetRowHeightRequest, PageViewSetRowHeightReply> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewSetRowHeightRequest, PageViewSetRowHeightReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewColumnBatchUpdate(PageViewColumnBatchUpdateRequest) returns (PageViewColumnBatchUpdateReply);
     */
    pageViewColumnBatchUpdate(input: PageViewColumnBatchUpdateRequest, options?: RpcOptions): UnaryCall<PageViewColumnBatchUpdateRequest, PageViewColumnBatchUpdateReply> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewColumnBatchUpdateRequest, PageViewColumnBatchUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PageViewColumnWidthUpdate(PageViewColumnWidthUpdateRequest) returns (PageViewColumnWidthUpdateReply);
     */
    pageViewColumnWidthUpdate(input: PageViewColumnWidthUpdateRequest, options?: RpcOptions): UnaryCall<PageViewColumnWidthUpdateRequest, PageViewColumnWidthUpdateReply> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageViewColumnWidthUpdateRequest, PageViewColumnWidthUpdateReply>("unary", this._transport, method, opt, input);
    }
}
