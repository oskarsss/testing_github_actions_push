// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/field.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FieldModel_Type } from "./models/model_field";
import { FieldModel_EntityType } from "./models/model_field";
import { PageModel_Page } from "./models/model_page";
/**
 * @generated from protobuf message FieldGetRequest
 */
export interface FieldGetRequest {
    /**
     * @generated from protobuf field: PageModel.Page page = 1;
     */
    page: PageModel_Page;
}
/**
 * @generated from protobuf message FieldGetReply
 */
export interface FieldGetReply {
    /**
     * @generated from protobuf field: repeated FieldGetReply.Field fields = 1;
     */
    fields: FieldGetReply_Field[];
}
/**
 * @generated from protobuf message FieldGetReply.Field
 */
export interface FieldGetReply_Field {
    /**
     * @generated from protobuf field: FieldModel.EntityType entity_type = 1;
     */
    entityType: FieldModel_EntityType;
    /**
     * @generated from protobuf field: string field_id = 2;
     */
    fieldId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: FieldModel.Type type = 4;
     */
    type: FieldModel_Type;
    /**
     * @generated from protobuf field: repeated string select_values = 5;
     */
    selectValues: string[];
    /**
     * @generated from protobuf field: repeated FieldGetReply.Field.FieldValue values = 6;
     */
    values: FieldGetReply_Field_FieldValue[];
}
/**
 * @generated from protobuf message FieldGetReply.Field.FieldValue
 */
export interface FieldGetReply_Field_FieldValue {
    /**
     * @generated from protobuf field: string entity_id = 1;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message FieldCreateRequest
 */
export interface FieldCreateRequest {
    /**
     * @generated from protobuf field: FieldModel.EntityType entity_type = 1;
     */
    entityType: FieldModel_EntityType;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: FieldModel.Type type = 3;
     */
    type: FieldModel_Type;
    /**
     * @generated from protobuf field: repeated string select_values = 4;
     */
    selectValues: string[];
}
/**
 * @generated from protobuf message FieldCreateReply
 */
export interface FieldCreateReply {
    /**
     * @generated from protobuf field: string field_id = 1;
     */
    fieldId: string;
}
/**
 * @generated from protobuf message FieldUpdateRequest
 */
export interface FieldUpdateRequest {
    /**
     * @generated from protobuf field: string field_id = 1;
     */
    fieldId: string;
    /**
     * @generated from protobuf field: FieldModel.EntityType entity_type = 2;
     */
    entityType: FieldModel_EntityType;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: FieldModel.Type type = 4;
     */
    type: FieldModel_Type;
    /**
     * @generated from protobuf field: repeated string select_values = 5;
     */
    selectValues: string[];
}
/**
 * @generated from protobuf message FieldUpdateReply
 */
export interface FieldUpdateReply {
}
/**
 * @generated from protobuf message FieldDeleteRequest
 */
export interface FieldDeleteRequest {
    /**
     * @generated from protobuf field: string field_id = 1;
     */
    fieldId: string;
}
/**
 * @generated from protobuf message FieldDeleteReply
 */
export interface FieldDeleteReply {
}
/**
 * @generated from protobuf message FieldValueSetRequest
 */
export interface FieldValueSetRequest {
    /**
     * @generated from protobuf field: string field_id = 1;
     */
    fieldId: string;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message FieldValueSetReply
 */
export interface FieldValueSetReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class FieldGetRequest$Type extends MessageType<FieldGetRequest> {
    constructor() {
        super("FieldGetRequest", [
            { no: 1, name: "page", kind: "enum", T: () => ["PageModel.Page", PageModel_Page, "PAGE_"] }
        ]);
    }
    create(value?: PartialMessage<FieldGetRequest>): FieldGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<FieldGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldGetRequest): FieldGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PageModel.Page page */ 1:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PageModel.Page page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldGetRequest
 */
export const FieldGetRequest = new FieldGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldGetReply$Type extends MessageType<FieldGetReply> {
    constructor() {
        super("FieldGetReply", [
            { no: 1, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldGetReply_Field }
        ]);
    }
    create(value?: PartialMessage<FieldGetReply>): FieldGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fields = [];
        if (value !== undefined)
            reflectionMergePartial<FieldGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldGetReply): FieldGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated FieldGetReply.Field fields */ 1:
                    message.fields.push(FieldGetReply_Field.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated FieldGetReply.Field fields = 1; */
        for (let i = 0; i < message.fields.length; i++)
            FieldGetReply_Field.internalBinaryWrite(message.fields[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldGetReply
 */
export const FieldGetReply = new FieldGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldGetReply_Field$Type extends MessageType<FieldGetReply_Field> {
    constructor() {
        super("FieldGetReply.Field", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["FieldModel.EntityType", FieldModel_EntityType] },
            { no: 2, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["FieldModel.Type", FieldModel_Type] },
            { no: 5, name: "select_values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldGetReply_Field_FieldValue }
        ]);
    }
    create(value?: PartialMessage<FieldGetReply_Field>): FieldGetReply_Field {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.fieldId = "";
        message.name = "";
        message.type = 0;
        message.selectValues = [];
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<FieldGetReply_Field>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldGetReply_Field): FieldGetReply_Field {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FieldModel.EntityType entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string field_id */ 2:
                    message.fieldId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* FieldModel.Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* repeated string select_values */ 5:
                    message.selectValues.push(reader.string());
                    break;
                case /* repeated FieldGetReply.Field.FieldValue values */ 6:
                    message.values.push(FieldGetReply_Field_FieldValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldGetReply_Field, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FieldModel.EntityType entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string field_id = 2; */
        if (message.fieldId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fieldId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* FieldModel.Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* repeated string select_values = 5; */
        for (let i = 0; i < message.selectValues.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.selectValues[i]);
        /* repeated FieldGetReply.Field.FieldValue values = 6; */
        for (let i = 0; i < message.values.length; i++)
            FieldGetReply_Field_FieldValue.internalBinaryWrite(message.values[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldGetReply.Field
 */
export const FieldGetReply_Field = new FieldGetReply_Field$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldGetReply_Field_FieldValue$Type extends MessageType<FieldGetReply_Field_FieldValue> {
    constructor() {
        super("FieldGetReply.Field.FieldValue", [
            { no: 1, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldGetReply_Field_FieldValue>): FieldGetReply_Field_FieldValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityId = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<FieldGetReply_Field_FieldValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldGetReply_Field_FieldValue): FieldGetReply_Field_FieldValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entity_id */ 1:
                    message.entityId = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldGetReply_Field_FieldValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entity_id = 1; */
        if (message.entityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entityId);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldGetReply.Field.FieldValue
 */
export const FieldGetReply_Field_FieldValue = new FieldGetReply_Field_FieldValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldCreateRequest$Type extends MessageType<FieldCreateRequest> {
    constructor() {
        super("FieldCreateRequest", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["FieldModel.EntityType", FieldModel_EntityType] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["FieldModel.Type", FieldModel_Type] },
            { no: 4, name: "select_values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldCreateRequest>): FieldCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.name = "";
        message.type = 0;
        message.selectValues = [];
        if (value !== undefined)
            reflectionMergePartial<FieldCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldCreateRequest): FieldCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FieldModel.EntityType entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* FieldModel.Type type */ 3:
                    message.type = reader.int32();
                    break;
                case /* repeated string select_values */ 4:
                    message.selectValues.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FieldModel.EntityType entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* FieldModel.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* repeated string select_values = 4; */
        for (let i = 0; i < message.selectValues.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.selectValues[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldCreateRequest
 */
export const FieldCreateRequest = new FieldCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldCreateReply$Type extends MessageType<FieldCreateReply> {
    constructor() {
        super("FieldCreateReply", [
            { no: 1, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldCreateReply>): FieldCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fieldId = "";
        if (value !== undefined)
            reflectionMergePartial<FieldCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldCreateReply): FieldCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_id */ 1:
                    message.fieldId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_id = 1; */
        if (message.fieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fieldId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldCreateReply
 */
export const FieldCreateReply = new FieldCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldUpdateRequest$Type extends MessageType<FieldUpdateRequest> {
    constructor() {
        super("FieldUpdateRequest", [
            { no: 1, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "enum", T: () => ["FieldModel.EntityType", FieldModel_EntityType] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["FieldModel.Type", FieldModel_Type] },
            { no: 5, name: "select_values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldUpdateRequest>): FieldUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fieldId = "";
        message.entityType = 0;
        message.name = "";
        message.type = 0;
        message.selectValues = [];
        if (value !== undefined)
            reflectionMergePartial<FieldUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldUpdateRequest): FieldUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_id */ 1:
                    message.fieldId = reader.string();
                    break;
                case /* FieldModel.EntityType entity_type */ 2:
                    message.entityType = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* FieldModel.Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* repeated string select_values */ 5:
                    message.selectValues.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_id = 1; */
        if (message.fieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fieldId);
        /* FieldModel.EntityType entity_type = 2; */
        if (message.entityType !== 0)
            writer.tag(2, WireType.Varint).int32(message.entityType);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* FieldModel.Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* repeated string select_values = 5; */
        for (let i = 0; i < message.selectValues.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.selectValues[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldUpdateRequest
 */
export const FieldUpdateRequest = new FieldUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldUpdateReply$Type extends MessageType<FieldUpdateReply> {
    constructor() {
        super("FieldUpdateReply", []);
    }
    create(value?: PartialMessage<FieldUpdateReply>): FieldUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldUpdateReply): FieldUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FieldUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldUpdateReply
 */
export const FieldUpdateReply = new FieldUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldDeleteRequest$Type extends MessageType<FieldDeleteRequest> {
    constructor() {
        super("FieldDeleteRequest", [
            { no: 1, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldDeleteRequest>): FieldDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fieldId = "";
        if (value !== undefined)
            reflectionMergePartial<FieldDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldDeleteRequest): FieldDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_id */ 1:
                    message.fieldId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_id = 1; */
        if (message.fieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fieldId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldDeleteRequest
 */
export const FieldDeleteRequest = new FieldDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldDeleteReply$Type extends MessageType<FieldDeleteReply> {
    constructor() {
        super("FieldDeleteReply", []);
    }
    create(value?: PartialMessage<FieldDeleteReply>): FieldDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldDeleteReply): FieldDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FieldDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldDeleteReply
 */
export const FieldDeleteReply = new FieldDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldValueSetRequest$Type extends MessageType<FieldValueSetRequest> {
    constructor() {
        super("FieldValueSetRequest", [
            { no: 1, name: "field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldValueSetRequest>): FieldValueSetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fieldId = "";
        message.entityId = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<FieldValueSetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldValueSetRequest): FieldValueSetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_id */ 1:
                    message.fieldId = reader.string();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldValueSetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_id = 1; */
        if (message.fieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fieldId);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldValueSetRequest
 */
export const FieldValueSetRequest = new FieldValueSetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldValueSetReply$Type extends MessageType<FieldValueSetReply> {
    constructor() {
        super("FieldValueSetReply", []);
    }
    create(value?: PartialMessage<FieldValueSetReply>): FieldValueSetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldValueSetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldValueSetReply): FieldValueSetReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FieldValueSetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FieldValueSetReply
 */
export const FieldValueSetReply = new FieldValueSetReply$Type();
/**
 * @generated ServiceType for protobuf service FieldService
 */
export const FieldService = new ServiceType("FieldService", [
    { name: "FieldGet", options: {}, I: FieldGetRequest, O: FieldGetReply },
    { name: "FieldCreate", options: {}, I: FieldCreateRequest, O: FieldCreateReply },
    { name: "FieldUpdate", options: {}, I: FieldUpdateRequest, O: FieldUpdateReply },
    { name: "FieldDelete", options: {}, I: FieldDeleteRequest, O: FieldDeleteReply },
    { name: "FieldValueSet", options: {}, I: FieldValueSetRequest, O: FieldValueSetReply }
]);
