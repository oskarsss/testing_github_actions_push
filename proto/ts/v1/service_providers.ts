// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_providers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceProviderModel_ServiceProvider } from "./models/model_service_provider";
/**
 * @generated from protobuf message ServiceProviderCreateRequest
 */
export interface ServiceProviderCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string contact_name = 2;
     */
    contactName: string; // optional
    /**
     * @generated from protobuf field: string phone = 3;
     */
    phone: string; // optional
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string; // optional
    /**
     * @generated from protobuf field: string fax = 5;
     */
    fax: string; // optional
    /**
     * @generated from protobuf field: string address_line_1 = 6;
     */
    addressLine1: string; // optional
    /**
     * @generated from protobuf field: string address_line_2 = 7;
     */
    addressLine2: string; // optional
    /**
     * @generated from protobuf field: string address_city = 8;
     */
    addressCity: string; // optional
    /**
     * @generated from protobuf field: string address_state = 9;
     */
    addressState: string; // optional
    /**
     * @generated from protobuf field: string address_postal_code = 10;
     */
    addressPostalCode: string; // optional
}
/**
 * @generated from protobuf message ServiceProviderCreateReply
 */
export interface ServiceProviderCreateReply {
    /**
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
}
/**
 * @generated from protobuf message ServiceProviderRetrieveRequest
 */
export interface ServiceProviderRetrieveRequest {
    /**
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
}
/**
 * @generated from protobuf message ServiceProviderRetrieveReply
 */
export interface ServiceProviderRetrieveReply {
    /**
     * @generated from protobuf field: ServiceProviderModel.ServiceProvider provider_item = 1;
     */
    providerItem?: ServiceProviderModel_ServiceProvider;
}
/**
 * @generated from protobuf message ServiceProviderGetRequest
 */
export interface ServiceProviderGetRequest {
}
/**
 * @generated from protobuf message ServiceProviderGetReply
 */
export interface ServiceProviderGetReply {
    /**
     * @generated from protobuf field: repeated ServiceProviderModel.ServiceProvider provider_items = 1;
     */
    providerItems: ServiceProviderModel_ServiceProvider[];
}
/**
 * @generated from protobuf message ServiceProviderUpdateRequest
 */
export interface ServiceProviderUpdateRequest {
    /**
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string contact_name = 3;
     */
    contactName: string; // optional
    /**
     * @generated from protobuf field: string phone = 4;
     */
    phone: string; // optional
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string; // optional
    /**
     * @generated from protobuf field: string fax = 6;
     */
    fax: string; // optional
    /**
     * @generated from protobuf field: string address_line_1 = 7;
     */
    addressLine1: string; // optional
    /**
     * @generated from protobuf field: string address_line_2 = 8;
     */
    addressLine2: string; // optional
    /**
     * @generated from protobuf field: string address_city = 9;
     */
    addressCity: string; // optional
    /**
     * @generated from protobuf field: string address_state = 10;
     */
    addressState: string; // optional
    /**
     * @generated from protobuf field: string address_postal_code = 11;
     */
    addressPostalCode: string; // optional
}
/**
 * @generated from protobuf message ServiceProviderUpdateReply
 */
export interface ServiceProviderUpdateReply {
}
/**
 * @generated from protobuf message ServiceProviderDeleteRequest
 */
export interface ServiceProviderDeleteRequest {
    /**
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
}
/**
 * @generated from protobuf message ServiceProviderDeleteReply
 */
export interface ServiceProviderDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderCreateRequest$Type extends MessageType<ServiceProviderCreateRequest> {
    constructor() {
        super("ServiceProviderCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contact_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "fax", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "address_line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "address_line_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "address_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "address_postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderCreateRequest>): ServiceProviderCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.contactName = "";
        message.phone = "";
        message.email = "";
        message.fax = "";
        message.addressLine1 = "";
        message.addressLine2 = "";
        message.addressCity = "";
        message.addressState = "";
        message.addressPostalCode = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderCreateRequest): ServiceProviderCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string contact_name */ 2:
                    message.contactName = reader.string();
                    break;
                case /* string phone */ 3:
                    message.phone = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string fax */ 5:
                    message.fax = reader.string();
                    break;
                case /* string address_line_1 */ 6:
                    message.addressLine1 = reader.string();
                    break;
                case /* string address_line_2 */ 7:
                    message.addressLine2 = reader.string();
                    break;
                case /* string address_city */ 8:
                    message.addressCity = reader.string();
                    break;
                case /* string address_state */ 9:
                    message.addressState = reader.string();
                    break;
                case /* string address_postal_code */ 10:
                    message.addressPostalCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string contact_name = 2; */
        if (message.contactName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contactName);
        /* string phone = 3; */
        if (message.phone !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phone);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string fax = 5; */
        if (message.fax !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fax);
        /* string address_line_1 = 6; */
        if (message.addressLine1 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.addressLine1);
        /* string address_line_2 = 7; */
        if (message.addressLine2 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.addressLine2);
        /* string address_city = 8; */
        if (message.addressCity !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.addressCity);
        /* string address_state = 9; */
        if (message.addressState !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.addressState);
        /* string address_postal_code = 10; */
        if (message.addressPostalCode !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.addressPostalCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderCreateRequest
 */
export const ServiceProviderCreateRequest = new ServiceProviderCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderCreateReply$Type extends MessageType<ServiceProviderCreateReply> {
    constructor() {
        super("ServiceProviderCreateReply", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderCreateReply>): ServiceProviderCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderCreateReply): ServiceProviderCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderCreateReply
 */
export const ServiceProviderCreateReply = new ServiceProviderCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderRetrieveRequest$Type extends MessageType<ServiceProviderRetrieveRequest> {
    constructor() {
        super("ServiceProviderRetrieveRequest", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderRetrieveRequest>): ServiceProviderRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderRetrieveRequest): ServiceProviderRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderRetrieveRequest
 */
export const ServiceProviderRetrieveRequest = new ServiceProviderRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderRetrieveReply$Type extends MessageType<ServiceProviderRetrieveReply> {
    constructor() {
        super("ServiceProviderRetrieveReply", [
            { no: 1, name: "provider_item", kind: "message", T: () => ServiceProviderModel_ServiceProvider }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderRetrieveReply>): ServiceProviderRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderRetrieveReply): ServiceProviderRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceProviderModel.ServiceProvider provider_item */ 1:
                    message.providerItem = ServiceProviderModel_ServiceProvider.internalBinaryRead(reader, reader.uint32(), options, message.providerItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceProviderModel.ServiceProvider provider_item = 1; */
        if (message.providerItem)
            ServiceProviderModel_ServiceProvider.internalBinaryWrite(message.providerItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderRetrieveReply
 */
export const ServiceProviderRetrieveReply = new ServiceProviderRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderGetRequest$Type extends MessageType<ServiceProviderGetRequest> {
    constructor() {
        super("ServiceProviderGetRequest", []);
    }
    create(value?: PartialMessage<ServiceProviderGetRequest>): ServiceProviderGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderGetRequest): ServiceProviderGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProviderGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderGetRequest
 */
export const ServiceProviderGetRequest = new ServiceProviderGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderGetReply$Type extends MessageType<ServiceProviderGetReply> {
    constructor() {
        super("ServiceProviderGetReply", [
            { no: 1, name: "provider_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceProviderModel_ServiceProvider }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderGetReply>): ServiceProviderGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.providerItems = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderGetReply): ServiceProviderGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceProviderModel.ServiceProvider provider_items */ 1:
                    message.providerItems.push(ServiceProviderModel_ServiceProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceProviderModel.ServiceProvider provider_items = 1; */
        for (let i = 0; i < message.providerItems.length; i++)
            ServiceProviderModel_ServiceProvider.internalBinaryWrite(message.providerItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderGetReply
 */
export const ServiceProviderGetReply = new ServiceProviderGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderUpdateRequest$Type extends MessageType<ServiceProviderUpdateRequest> {
    constructor() {
        super("ServiceProviderUpdateRequest", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contact_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fax", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "address_line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "address_line_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "address_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "address_postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderUpdateRequest>): ServiceProviderUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        message.name = "";
        message.contactName = "";
        message.phone = "";
        message.email = "";
        message.fax = "";
        message.addressLine1 = "";
        message.addressLine2 = "";
        message.addressCity = "";
        message.addressState = "";
        message.addressPostalCode = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderUpdateRequest): ServiceProviderUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string contact_name */ 3:
                    message.contactName = reader.string();
                    break;
                case /* string phone */ 4:
                    message.phone = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string fax */ 6:
                    message.fax = reader.string();
                    break;
                case /* string address_line_1 */ 7:
                    message.addressLine1 = reader.string();
                    break;
                case /* string address_line_2 */ 8:
                    message.addressLine2 = reader.string();
                    break;
                case /* string address_city */ 9:
                    message.addressCity = reader.string();
                    break;
                case /* string address_state */ 10:
                    message.addressState = reader.string();
                    break;
                case /* string address_postal_code */ 11:
                    message.addressPostalCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string contact_name = 3; */
        if (message.contactName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contactName);
        /* string phone = 4; */
        if (message.phone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phone);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string fax = 6; */
        if (message.fax !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fax);
        /* string address_line_1 = 7; */
        if (message.addressLine1 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.addressLine1);
        /* string address_line_2 = 8; */
        if (message.addressLine2 !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.addressLine2);
        /* string address_city = 9; */
        if (message.addressCity !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.addressCity);
        /* string address_state = 10; */
        if (message.addressState !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.addressState);
        /* string address_postal_code = 11; */
        if (message.addressPostalCode !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.addressPostalCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderUpdateRequest
 */
export const ServiceProviderUpdateRequest = new ServiceProviderUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderUpdateReply$Type extends MessageType<ServiceProviderUpdateReply> {
    constructor() {
        super("ServiceProviderUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceProviderUpdateReply>): ServiceProviderUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderUpdateReply): ServiceProviderUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProviderUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderUpdateReply
 */
export const ServiceProviderUpdateReply = new ServiceProviderUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderDeleteRequest$Type extends MessageType<ServiceProviderDeleteRequest> {
    constructor() {
        super("ServiceProviderDeleteRequest", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProviderDeleteRequest>): ServiceProviderDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderDeleteRequest): ServiceProviderDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProviderDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderDeleteRequest
 */
export const ServiceProviderDeleteRequest = new ServiceProviderDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProviderDeleteReply$Type extends MessageType<ServiceProviderDeleteReply> {
    constructor() {
        super("ServiceProviderDeleteReply", []);
    }
    create(value?: PartialMessage<ServiceProviderDeleteReply>): ServiceProviderDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProviderDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProviderDeleteReply): ServiceProviderDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProviderDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProviderDeleteReply
 */
export const ServiceProviderDeleteReply = new ServiceProviderDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service ServiceProvidersService
 */
export const ServiceProvidersService = new ServiceType("ServiceProvidersService", [
    { name: "ServiceProviderCreate", options: {}, I: ServiceProviderCreateRequest, O: ServiceProviderCreateReply },
    { name: "ServiceProviderRetrieve", options: {}, I: ServiceProviderRetrieveRequest, O: ServiceProviderRetrieveReply },
    { name: "ServiceProviderGet", options: {}, I: ServiceProviderGetRequest, O: ServiceProviderGetReply },
    { name: "ServiceProviderUpdate", options: {}, I: ServiceProviderUpdateRequest, O: ServiceProviderUpdateReply },
    { name: "ServiceProviderDelete", options: {}, I: ServiceProviderDeleteRequest, O: ServiceProviderDeleteReply }
]);
