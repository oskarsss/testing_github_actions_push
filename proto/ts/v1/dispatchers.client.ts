// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/dispatchers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DispatchersService } from "./dispatchers";
import type { GetDispatchersStatsReply } from "./dispatchers";
import type { GetDispatchersStatsRequest } from "./dispatchers";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetDispatchersReply } from "./dispatchers";
import type { GetDispatchersRequest } from "./dispatchers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service DispatchersService
 */
export interface IDispatchersServiceClient {
    /**
     * @generated from protobuf rpc: GetDispatchers(GetDispatchersRequest) returns (GetDispatchersReply);
     */
    getDispatchers(input: GetDispatchersRequest, options?: RpcOptions): UnaryCall<GetDispatchersRequest, GetDispatchersReply>;
    /**
     * @generated from protobuf rpc: GetDispatchersStats(GetDispatchersStatsRequest) returns (GetDispatchersStatsReply);
     */
    getDispatchersStats(input: GetDispatchersStatsRequest, options?: RpcOptions): UnaryCall<GetDispatchersStatsRequest, GetDispatchersStatsReply>;
}
/**
 * @generated from protobuf service DispatchersService
 */
export class DispatchersServiceClient implements IDispatchersServiceClient, ServiceInfo {
    typeName = DispatchersService.typeName;
    methods = DispatchersService.methods;
    options = DispatchersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetDispatchers(GetDispatchersRequest) returns (GetDispatchersReply);
     */
    getDispatchers(input: GetDispatchersRequest, options?: RpcOptions): UnaryCall<GetDispatchersRequest, GetDispatchersReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDispatchersRequest, GetDispatchersReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetDispatchersStats(GetDispatchersStatsRequest) returns (GetDispatchersStatsReply);
     */
    getDispatchersStats(input: GetDispatchersStatsRequest, options?: RpcOptions): UnaryCall<GetDispatchersStatsRequest, GetDispatchersStatsReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDispatchersStatsRequest, GetDispatchersStatsReply>("unary", this._transport, method, opt, input);
    }
}
