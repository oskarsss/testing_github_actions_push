// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/documents.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DocumentsService } from "./documents";
import type { DocumentVersionDeleteReply } from "./documents";
import type { DocumentVersionDeleteRequest } from "./documents";
import type { DocumentImageRotateReply } from "./documents";
import type { DocumentImageRotateRequest } from "./documents";
import type { DocumentDownloadReply } from "./documents";
import type { DocumentDownloadRequest } from "./documents";
import type { DocumentEntitiesGetReply } from "./documents";
import type { DocumentEntitiesGetRequest } from "./documents";
import type { DocumentGetVersionsReply } from "./documents";
import type { DocumentGetVersionsRequest } from "./documents";
import type { DocumentFileUpdateReply } from "./documents";
import type { DocumentFileUpdateRequest } from "./documents";
import type { DocumentFileClearReply } from "./documents";
import type { DocumentFileClearRequest } from "./documents";
import type { DocumentDeleteReply } from "./documents";
import type { DocumentDeleteRequest } from "./documents";
import type { DocumentGetReply } from "./documents";
import type { DocumentGetRequest } from "./documents";
import type { DocumentUpdateReply } from "./documents";
import type { DocumentUpdateRequest } from "./documents";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DocumentCreateReply } from "./documents";
import type { DocumentCreateRequest } from "./documents";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service DocumentsService
 */
export interface IDocumentsServiceClient {
    /**
     * @generated from protobuf rpc: DocumentCreate(DocumentCreateRequest) returns (DocumentCreateReply);
     */
    documentCreate(input: DocumentCreateRequest, options?: RpcOptions): UnaryCall<DocumentCreateRequest, DocumentCreateReply>;
    /**
     * @generated from protobuf rpc: DocumentUpdate(DocumentUpdateRequest) returns (DocumentUpdateReply);
     */
    documentUpdate(input: DocumentUpdateRequest, options?: RpcOptions): UnaryCall<DocumentUpdateRequest, DocumentUpdateReply>;
    /**
     * @generated from protobuf rpc: DocumentGet(DocumentGetRequest) returns (DocumentGetReply);
     */
    documentGet(input: DocumentGetRequest, options?: RpcOptions): UnaryCall<DocumentGetRequest, DocumentGetReply>;
    /**
     * @generated from protobuf rpc: DocumentDelete(DocumentDeleteRequest) returns (DocumentDeleteReply);
     */
    documentDelete(input: DocumentDeleteRequest, options?: RpcOptions): UnaryCall<DocumentDeleteRequest, DocumentDeleteReply>;
    /**
     * @generated from protobuf rpc: DocumentFileClear(DocumentFileClearRequest) returns (DocumentFileClearReply);
     */
    documentFileClear(input: DocumentFileClearRequest, options?: RpcOptions): UnaryCall<DocumentFileClearRequest, DocumentFileClearReply>;
    /**
     * @generated from protobuf rpc: DocumentFileUpdate(DocumentFileUpdateRequest) returns (DocumentFileUpdateReply);
     */
    documentFileUpdate(input: DocumentFileUpdateRequest, options?: RpcOptions): UnaryCall<DocumentFileUpdateRequest, DocumentFileUpdateReply>;
    /**
     * @generated from protobuf rpc: DocumentGetVersions(DocumentGetVersionsRequest) returns (DocumentGetVersionsReply);
     */
    documentGetVersions(input: DocumentGetVersionsRequest, options?: RpcOptions): UnaryCall<DocumentGetVersionsRequest, DocumentGetVersionsReply>;
    /**
     * @generated from protobuf rpc: DocumentEntitiesGet(DocumentEntitiesGetRequest) returns (DocumentEntitiesGetReply);
     */
    documentEntitiesGet(input: DocumentEntitiesGetRequest, options?: RpcOptions): UnaryCall<DocumentEntitiesGetRequest, DocumentEntitiesGetReply>;
    /**
     * @generated from protobuf rpc: DocumentDownload(DocumentDownloadRequest) returns (DocumentDownloadReply);
     */
    documentDownload(input: DocumentDownloadRequest, options?: RpcOptions): UnaryCall<DocumentDownloadRequest, DocumentDownloadReply>;
    /**
     * @generated from protobuf rpc: DocumentImageRotate(DocumentImageRotateRequest) returns (DocumentImageRotateReply);
     */
    documentImageRotate(input: DocumentImageRotateRequest, options?: RpcOptions): UnaryCall<DocumentImageRotateRequest, DocumentImageRotateReply>;
    /**
     * @generated from protobuf rpc: DocumentVersionDelete(DocumentVersionDeleteRequest) returns (DocumentVersionDeleteReply);
     */
    documentVersionDelete(input: DocumentVersionDeleteRequest, options?: RpcOptions): UnaryCall<DocumentVersionDeleteRequest, DocumentVersionDeleteReply>;
}
/**
 * @generated from protobuf service DocumentsService
 */
export class DocumentsServiceClient implements IDocumentsServiceClient, ServiceInfo {
    typeName = DocumentsService.typeName;
    methods = DocumentsService.methods;
    options = DocumentsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DocumentCreate(DocumentCreateRequest) returns (DocumentCreateReply);
     */
    documentCreate(input: DocumentCreateRequest, options?: RpcOptions): UnaryCall<DocumentCreateRequest, DocumentCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentCreateRequest, DocumentCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentUpdate(DocumentUpdateRequest) returns (DocumentUpdateReply);
     */
    documentUpdate(input: DocumentUpdateRequest, options?: RpcOptions): UnaryCall<DocumentUpdateRequest, DocumentUpdateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentUpdateRequest, DocumentUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentGet(DocumentGetRequest) returns (DocumentGetReply);
     */
    documentGet(input: DocumentGetRequest, options?: RpcOptions): UnaryCall<DocumentGetRequest, DocumentGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentGetRequest, DocumentGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentDelete(DocumentDeleteRequest) returns (DocumentDeleteReply);
     */
    documentDelete(input: DocumentDeleteRequest, options?: RpcOptions): UnaryCall<DocumentDeleteRequest, DocumentDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentDeleteRequest, DocumentDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentFileClear(DocumentFileClearRequest) returns (DocumentFileClearReply);
     */
    documentFileClear(input: DocumentFileClearRequest, options?: RpcOptions): UnaryCall<DocumentFileClearRequest, DocumentFileClearReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentFileClearRequest, DocumentFileClearReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentFileUpdate(DocumentFileUpdateRequest) returns (DocumentFileUpdateReply);
     */
    documentFileUpdate(input: DocumentFileUpdateRequest, options?: RpcOptions): UnaryCall<DocumentFileUpdateRequest, DocumentFileUpdateReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentFileUpdateRequest, DocumentFileUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentGetVersions(DocumentGetVersionsRequest) returns (DocumentGetVersionsReply);
     */
    documentGetVersions(input: DocumentGetVersionsRequest, options?: RpcOptions): UnaryCall<DocumentGetVersionsRequest, DocumentGetVersionsReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentGetVersionsRequest, DocumentGetVersionsReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentEntitiesGet(DocumentEntitiesGetRequest) returns (DocumentEntitiesGetReply);
     */
    documentEntitiesGet(input: DocumentEntitiesGetRequest, options?: RpcOptions): UnaryCall<DocumentEntitiesGetRequest, DocumentEntitiesGetReply> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentEntitiesGetRequest, DocumentEntitiesGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentDownload(DocumentDownloadRequest) returns (DocumentDownloadReply);
     */
    documentDownload(input: DocumentDownloadRequest, options?: RpcOptions): UnaryCall<DocumentDownloadRequest, DocumentDownloadReply> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentDownloadRequest, DocumentDownloadReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentImageRotate(DocumentImageRotateRequest) returns (DocumentImageRotateReply);
     */
    documentImageRotate(input: DocumentImageRotateRequest, options?: RpcOptions): UnaryCall<DocumentImageRotateRequest, DocumentImageRotateReply> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentImageRotateRequest, DocumentImageRotateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentVersionDelete(DocumentVersionDeleteRequest) returns (DocumentVersionDeleteReply);
     */
    documentVersionDelete(input: DocumentVersionDeleteRequest, options?: RpcOptions): UnaryCall<DocumentVersionDeleteRequest, DocumentVersionDeleteReply> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentVersionDeleteRequest, DocumentVersionDeleteReply>("unary", this._transport, method, opt, input);
    }
}
