// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/fuel.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FilterModel_Filter } from "./models/model_filter_type";
import { FuelModel_SettlementStatus } from "./models/model_fuel";
import { TruckModel_Status } from "./models/model_truck";
import { TruckModel_Type } from "./models/model_truck";
import { FuelModel } from "./models/model_fuel";
import { CountryCode } from "./models/country_code";
/**
 * @generated from protobuf message CreateFuelTransactionRequest
 */
export interface CreateFuelTransactionRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: double discount_amount = 3;
     */
    discountAmount: number;
    /**
     * @generated from protobuf field: string fuel_chain = 4;
     */
    fuelChain: string;
    /**
     * @generated from protobuf field: int64 date_time = 5;
     */
    dateTime: number;
    /**
     * @generated from protobuf field: string state = 6;
     */
    state: string;
    /**
     * @generated from protobuf field: string city = 7;
     */
    city: string;
    /**
     * @generated from protobuf field: optional CountryCode country = 8;
     */
    country?: CountryCode;
    /**
     * @generated from protobuf field: string reference_id = 9;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string product = 10;
     */
    product: string;
    /**
     * @generated from protobuf field: double quantity = 11;
     */
    quantity: number;
}
/**
 * @generated from protobuf message CreateFuelTransactionResponse
 */
export interface CreateFuelTransactionResponse {
}
/**
 * @generated from protobuf message FuelRetrieveRequest
 */
export interface FuelRetrieveRequest {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
}
/**
 * @generated from protobuf message FuelRetrieveReply
 */
export interface FuelRetrieveReply {
    /**
     * @generated from protobuf field: FuelModel fuel = 1;
     */
    fuel?: FuelModel;
}
/**
 * @generated from protobuf message FuelGetRequest
 */
export interface FuelGetRequest {
    /**
     * @generated from protobuf field: int64 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int64 per_page = 2;
     */
    perPage: number;
    /**
     * @generated from protobuf field: FuelGetRequest.SortBy sort_by = 3;
     */
    sortBy: FuelGetRequest_SortBy;
    /**
     * @generated from protobuf field: optional string search = 4;
     */
    search?: string;
    /**
     * @generated from protobuf field: repeated TruckModel.Type truck_types = 5;
     */
    truckTypes: TruckModel_Type[];
    /**
     * @generated from protobuf field: repeated TruckModel.Status truck_statuses = 6;
     */
    truckStatuses: TruckModel_Status[];
    /**
     * @generated from protobuf field: repeated string truck_ids = 7;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: optional string start_date = 8;
     */
    startDate?: string;
    /**
     * @generated from protobuf field: optional string end_date = 9;
     */
    endDate?: string;
    /**
     * @generated from protobuf field: optional FuelModel.SettlementStatus settlement_status = 10;
     */
    settlementStatus?: FuelModel_SettlementStatus;
    /**
     * @generated from protobuf field: optional bool verified = 11;
     */
    verified?: boolean;
    /**
     * @generated from protobuf field: bool assigned = 12;
     */
    assigned: boolean;
}
/**
 * @generated from protobuf enum FuelGetRequest.SortBy
 */
export enum FuelGetRequest_SortBy {
    /**
     * @generated from protobuf enum value: SORT_BY_UKNOWN = 0;
     */
    UKNOWN = 0,
    /**
     * @generated from protobuf enum value: SORT_BY_LATEST = 1;
     */
    LATEST = 1,
    /**
     * @generated from protobuf enum value: SORT_BY_OLDEST = 2;
     */
    OLDEST = 2,
    /**
     * @generated from protobuf enum value: SORT_BY_TOTAL_AMOUNT_ASC = 3;
     */
    TOTAL_AMOUNT_ASC = 3,
    /**
     * @generated from protobuf enum value: SORT_BY_TOTAL_AMOUNT_DESC = 4;
     */
    TOTAL_AMOUNT_DESC = 4,
    /**
     * @generated from protobuf enum value: SORT_BY_REFERENCE_ID_ASC = 5;
     */
    REFERENCE_ID_ASC = 5,
    /**
     * @generated from protobuf enum value: SORT_BY_REFERENCE_ID_DESC = 6;
     */
    REFERENCE_ID_DESC = 6,
    /**
     * @generated from protobuf enum value: SORT_BY_TRUCK_STOP_ASC = 7;
     */
    TRUCK_STOP_ASC = 7,
    /**
     * @generated from protobuf enum value: SORT_BY_TRUCK_STOP_DESC = 8;
     */
    TRUCK_STOP_DESC = 8,
    /**
     * @generated from protobuf enum value: SORT_BY_QUANTITY_ASC = 9;
     */
    QUANTITY_ASC = 9,
    /**
     * @generated from protobuf enum value: SORT_BY_QUANTITY_DESC = 10;
     */
    QUANTITY_DESC = 10,
    /**
     * @generated from protobuf enum value: SORT_BY_LOCATION_ASC = 11;
     */
    LOCATION_ASC = 11,
    /**
     * @generated from protobuf enum value: SORT_BY_LOCATION_DESC = 12;
     */
    LOCATION_DESC = 12,
    /**
     * @generated from protobuf enum value: SORT_BY_DATETIME_ASC = 13;
     */
    DATETIME_ASC = 13,
    /**
     * @generated from protobuf enum value: SORT_BY_DATETIME_DESC = 14;
     */
    DATETIME_DESC = 14
}
/**
 * @generated from protobuf message FuelGetReply
 */
export interface FuelGetReply {
    /**
     * @generated from protobuf field: repeated FuelGetReply.Fuel fuels = 1;
     */
    fuels: FuelGetReply_Fuel[];
}
/**
 * @generated from protobuf message FuelGetReply.Fuel
 */
export interface FuelGetReply_Fuel {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string truck_id = 3;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string unit_number = 4;
     */
    unitNumber: string;
    /**
     * @generated from protobuf field: string datetime = 5;
     */
    datetime: string;
    /**
     * @generated from protobuf field: string driver_id = 6;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string driver_name = 7;
     */
    driverName: string;
    /**
     * @generated from protobuf field: string truck_stop = 8;
     */
    truckStop: string;
    /**
     * @generated from protobuf field: string city = 9;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 10;
     */
    state: string;
    /**
     * @generated from protobuf field: string address = 11;
     */
    address: string;
    /**
     * @generated from protobuf field: optional CountryCode country = 12;
     */
    country?: CountryCode;
    /**
     * @generated from protobuf field: string chain = 13;
     */
    chain: string;
    /**
     * @generated from protobuf field: string product = 14;
     */
    product: string;
    /**
     * @generated from protobuf field: bool in_network = 15;
     */
    inNetwork: boolean;
    /**
     * @generated from protobuf field: double quantity = 16;
     */
    quantity: number;
    /**
     * @generated from protobuf field: bool verified = 17;
     */
    verified: boolean;
    /**
     * @generated from protobuf field: string created_at = 18;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string settlement_id = 19;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: FuelModel.SettlementStatus settlement_status = 20;
     */
    settlementStatus: FuelModel_SettlementStatus;
    /**
     * @generated from protobuf field: string total_amount_formatted = 21;
     */
    totalAmountFormatted: string;
    /**
     * @generated from protobuf field: string total_discounted_amount_formatted = 22;
     */
    totalDiscountedAmountFormatted: string;
    /**
     * @generated from protobuf field: string discounted_amount_formatted = 23;
     */
    discountedAmountFormatted: string;
}
/**
 * @generated from protobuf message FuelStatsGetRequest
 */
export interface FuelStatsGetRequest {
    /**
     * @generated from protobuf field: optional string start_date = 1;
     */
    startDate?: string;
    /**
     * @generated from protobuf field: optional string end_date = 2;
     */
    endDate?: string;
    /**
     * @generated from protobuf field: repeated string truck_ids = 3;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: optional FuelModel.SettlementStatus settlement_status = 4;
     */
    settlementStatus?: FuelModel_SettlementStatus;
    /**
     * @generated from protobuf field: optional bool verified = 5;
     */
    verified?: boolean;
    /**
     * @generated from protobuf field: repeated TruckModel.Type truck_types = 6;
     */
    truckTypes: TruckModel_Type[];
    /**
     * @generated from protobuf field: repeated TruckModel.Status truck_statuses = 7;
     */
    truckStatuses: TruckModel_Status[];
    /**
     * @generated from protobuf field: bool assigned = 8;
     */
    assigned: boolean;
}
/**
 * @generated from protobuf message FuelStatsGetReply
 */
export interface FuelStatsGetReply {
    /**
     * @generated from protobuf field: int64 total_fuel_count = 1;
     */
    totalFuelCount: number;
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
/**
 * @generated from protobuf message UpdateFuelTransactionRequest
 */
export interface UpdateFuelTransactionRequest {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
    /**
     * @generated from protobuf field: int64 date_time = 2;
     */
    dateTime: number;
    /**
     * @generated from protobuf field: string chain = 3;
     */
    chain: string;
    /**
     * @generated from protobuf field: string driver_name = 4;
     */
    driverName: string;
    /**
     * @generated from protobuf field: double discount_amount = 5;
     */
    discountAmount: number;
    /**
     * @generated from protobuf field: string address = 6;
     */
    address: string;
    /**
     * @generated from protobuf field: optional CountryCode country = 7;
     */
    country?: CountryCode;
    /**
     * @generated from protobuf field: string reference_id = 8;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: double total_amount = 9;
     */
    totalAmount: number;
    /**
     * @generated from protobuf field: double total_discounted_amount = 10;
     */
    totalDiscountedAmount: number;
    /**
     * @generated from protobuf field: string truck_stop = 11;
     */
    truckStop: string;
    /**
     * @generated from protobuf field: string truck_id = 12;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string product = 13;
     */
    product: string;
    /**
     * @generated from protobuf field: string city = 14;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 15;
     */
    state: string;
    /**
     * @generated from protobuf field: double quantity = 16;
     */
    quantity: number;
}
/**
 * @generated from protobuf message UpdateFuelTransactionReply
 */
export interface UpdateFuelTransactionReply {
}
/**
 * @generated from protobuf message DeleteFuelTransactionRequest
 */
export interface DeleteFuelTransactionRequest {
    /**
     * @generated from protobuf field: repeated string fuel_transaction_ids = 1;
     */
    fuelTransactionIds: string[];
}
/**
 * @generated from protobuf message DeleteFuelTransactionReply
 */
export interface DeleteFuelTransactionReply {
}
/**
 * @generated from protobuf message FindByReferenceIDRequest
 */
export interface FindByReferenceIDRequest {
    /**
     * @generated from protobuf field: string reference_id = 1;
     */
    referenceId: string;
}
/**
 * @generated from protobuf message FindByReferenceIDReply
 */
export interface FindByReferenceIDReply {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
}
/**
 * @generated from protobuf message AssignTruckRequest
 */
export interface AssignTruckRequest {
    /**
     * @generated from protobuf field: string truck_id = 1;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string fuel_transaction_id = 2;
     */
    fuelTransactionId: string;
}
/**
 * @generated from protobuf message AssignTruckReply
 */
export interface AssignTruckReply {
}
/**
 * @generated from protobuf message UnassignTruckRequest
 */
export interface UnassignTruckRequest {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
}
/**
 * @generated from protobuf message UnassignTruckReply
 */
export interface UnassignTruckReply {
}
/**
 * @generated from protobuf message FuelUpdateVerifiedRequest
 */
export interface FuelUpdateVerifiedRequest {
    /**
     * @generated from protobuf field: string fuel_transaction_id = 1;
     */
    fuelTransactionId: string;
    /**
     * @generated from protobuf field: bool verified = 2;
     */
    verified: boolean;
}
/**
 * @generated from protobuf message FuelUpdateVerifiedReply
 */
export interface FuelUpdateVerifiedReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateFuelTransactionRequest$Type extends MessageType<CreateFuelTransactionRequest> {
    constructor() {
        super("CreateFuelTransactionRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "discount_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "fuel_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "date_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "country", kind: "enum", opt: true, T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 9, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFuelTransactionRequest>): CreateFuelTransactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.amount = 0;
        message.discountAmount = 0;
        message.fuelChain = "";
        message.dateTime = 0;
        message.state = "";
        message.city = "";
        message.referenceId = "";
        message.product = "";
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateFuelTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFuelTransactionRequest): CreateFuelTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                case /* double discount_amount */ 3:
                    message.discountAmount = reader.double();
                    break;
                case /* string fuel_chain */ 4:
                    message.fuelChain = reader.string();
                    break;
                case /* int64 date_time */ 5:
                    message.dateTime = reader.int64().toNumber();
                    break;
                case /* string state */ 6:
                    message.state = reader.string();
                    break;
                case /* string city */ 7:
                    message.city = reader.string();
                    break;
                case /* optional CountryCode country */ 8:
                    message.country = reader.int32();
                    break;
                case /* string reference_id */ 9:
                    message.referenceId = reader.string();
                    break;
                case /* string product */ 10:
                    message.product = reader.string();
                    break;
                case /* double quantity */ 11:
                    message.quantity = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFuelTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        /* double discount_amount = 3; */
        if (message.discountAmount !== 0)
            writer.tag(3, WireType.Bit64).double(message.discountAmount);
        /* string fuel_chain = 4; */
        if (message.fuelChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fuelChain);
        /* int64 date_time = 5; */
        if (message.dateTime !== 0)
            writer.tag(5, WireType.Varint).int64(message.dateTime);
        /* string state = 6; */
        if (message.state !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.state);
        /* string city = 7; */
        if (message.city !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.city);
        /* optional CountryCode country = 8; */
        if (message.country !== undefined)
            writer.tag(8, WireType.Varint).int32(message.country);
        /* string reference_id = 9; */
        if (message.referenceId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.referenceId);
        /* string product = 10; */
        if (message.product !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.product);
        /* double quantity = 11; */
        if (message.quantity !== 0)
            writer.tag(11, WireType.Bit64).double(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateFuelTransactionRequest
 */
export const CreateFuelTransactionRequest = new CreateFuelTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFuelTransactionResponse$Type extends MessageType<CreateFuelTransactionResponse> {
    constructor() {
        super("CreateFuelTransactionResponse", []);
    }
    create(value?: PartialMessage<CreateFuelTransactionResponse>): CreateFuelTransactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateFuelTransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFuelTransactionResponse): CreateFuelTransactionResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateFuelTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateFuelTransactionResponse
 */
export const CreateFuelTransactionResponse = new CreateFuelTransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelRetrieveRequest$Type extends MessageType<FuelRetrieveRequest> {
    constructor() {
        super("FuelRetrieveRequest", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FuelRetrieveRequest>): FuelRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<FuelRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelRetrieveRequest): FuelRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelRetrieveRequest
 */
export const FuelRetrieveRequest = new FuelRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelRetrieveReply$Type extends MessageType<FuelRetrieveReply> {
    constructor() {
        super("FuelRetrieveReply", [
            { no: 1, name: "fuel", kind: "message", T: () => FuelModel }
        ]);
    }
    create(value?: PartialMessage<FuelRetrieveReply>): FuelRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FuelRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelRetrieveReply): FuelRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FuelModel fuel */ 1:
                    message.fuel = FuelModel.internalBinaryRead(reader, reader.uint32(), options, message.fuel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FuelModel fuel = 1; */
        if (message.fuel)
            FuelModel.internalBinaryWrite(message.fuel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelRetrieveReply
 */
export const FuelRetrieveReply = new FuelRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelGetRequest$Type extends MessageType<FuelGetRequest> {
    constructor() {
        super("FuelGetRequest", [
            { no: 1, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "per_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "sort_by", kind: "enum", T: () => ["FuelGetRequest.SortBy", FuelGetRequest_SortBy, "SORT_BY_"] },
            { no: 4, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "truck_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Type", TruckModel_Type, "TYPE_"] },
            { no: 6, name: "truck_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Status", TruckModel_Status] },
            { no: 7, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "settlement_status", kind: "enum", opt: true, T: () => ["FuelModel.SettlementStatus", FuelModel_SettlementStatus, "SETTLEMENT_STATUS_"] },
            { no: 11, name: "verified", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "assigned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FuelGetRequest>): FuelGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.perPage = 0;
        message.sortBy = 0;
        message.truckTypes = [];
        message.truckStatuses = [];
        message.truckIds = [];
        message.assigned = false;
        if (value !== undefined)
            reflectionMergePartial<FuelGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelGetRequest): FuelGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page */ 1:
                    message.page = reader.int64().toNumber();
                    break;
                case /* int64 per_page */ 2:
                    message.perPage = reader.int64().toNumber();
                    break;
                case /* FuelGetRequest.SortBy sort_by */ 3:
                    message.sortBy = reader.int32();
                    break;
                case /* optional string search */ 4:
                    message.search = reader.string();
                    break;
                case /* repeated TruckModel.Type truck_types */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckTypes.push(reader.int32());
                    else
                        message.truckTypes.push(reader.int32());
                    break;
                case /* repeated TruckModel.Status truck_statuses */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckStatuses.push(reader.int32());
                    else
                        message.truckStatuses.push(reader.int32());
                    break;
                case /* repeated string truck_ids */ 7:
                    message.truckIds.push(reader.string());
                    break;
                case /* optional string start_date */ 8:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 9:
                    message.endDate = reader.string();
                    break;
                case /* optional FuelModel.SettlementStatus settlement_status */ 10:
                    message.settlementStatus = reader.int32();
                    break;
                case /* optional bool verified */ 11:
                    message.verified = reader.bool();
                    break;
                case /* bool assigned */ 12:
                    message.assigned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int64(message.page);
        /* int64 per_page = 2; */
        if (message.perPage !== 0)
            writer.tag(2, WireType.Varint).int64(message.perPage);
        /* FuelGetRequest.SortBy sort_by = 3; */
        if (message.sortBy !== 0)
            writer.tag(3, WireType.Varint).int32(message.sortBy);
        /* optional string search = 4; */
        if (message.search !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.search);
        /* repeated TruckModel.Type truck_types = 5; */
        if (message.truckTypes.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckTypes.length; i++)
                writer.int32(message.truckTypes[i]);
            writer.join();
        }
        /* repeated TruckModel.Status truck_statuses = 6; */
        if (message.truckStatuses.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckStatuses.length; i++)
                writer.int32(message.truckStatuses[i]);
            writer.join();
        }
        /* repeated string truck_ids = 7; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.truckIds[i]);
        /* optional string start_date = 8; */
        if (message.startDate !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 9; */
        if (message.endDate !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.endDate);
        /* optional FuelModel.SettlementStatus settlement_status = 10; */
        if (message.settlementStatus !== undefined)
            writer.tag(10, WireType.Varint).int32(message.settlementStatus);
        /* optional bool verified = 11; */
        if (message.verified !== undefined)
            writer.tag(11, WireType.Varint).bool(message.verified);
        /* bool assigned = 12; */
        if (message.assigned !== false)
            writer.tag(12, WireType.Varint).bool(message.assigned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelGetRequest
 */
export const FuelGetRequest = new FuelGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelGetReply$Type extends MessageType<FuelGetReply> {
    constructor() {
        super("FuelGetReply", [
            { no: 1, name: "fuels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FuelGetReply_Fuel }
        ]);
    }
    create(value?: PartialMessage<FuelGetReply>): FuelGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuels = [];
        if (value !== undefined)
            reflectionMergePartial<FuelGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelGetReply): FuelGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated FuelGetReply.Fuel fuels */ 1:
                    message.fuels.push(FuelGetReply_Fuel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated FuelGetReply.Fuel fuels = 1; */
        for (let i = 0; i < message.fuels.length; i++)
            FuelGetReply_Fuel.internalBinaryWrite(message.fuels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelGetReply
 */
export const FuelGetReply = new FuelGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelGetReply_Fuel$Type extends MessageType<FuelGetReply_Fuel> {
    constructor() {
        super("FuelGetReply.Fuel", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unit_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "driver_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "truck_stop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "country", kind: "enum", opt: true, T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 13, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "in_network", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "settlement_status", kind: "enum", T: () => ["FuelModel.SettlementStatus", FuelModel_SettlementStatus, "SETTLEMENT_STATUS_"] },
            { no: 21, name: "total_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "total_discounted_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "discounted_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FuelGetReply_Fuel>): FuelGetReply_Fuel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        message.referenceId = "";
        message.truckId = "";
        message.unitNumber = "";
        message.datetime = "";
        message.driverId = "";
        message.driverName = "";
        message.truckStop = "";
        message.city = "";
        message.state = "";
        message.address = "";
        message.chain = "";
        message.product = "";
        message.inNetwork = false;
        message.quantity = 0;
        message.verified = false;
        message.createdAt = "";
        message.settlementId = "";
        message.settlementStatus = 0;
        message.totalAmountFormatted = "";
        message.totalDiscountedAmountFormatted = "";
        message.discountedAmountFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<FuelGetReply_Fuel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelGetReply_Fuel): FuelGetReply_Fuel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string truck_id */ 3:
                    message.truckId = reader.string();
                    break;
                case /* string unit_number */ 4:
                    message.unitNumber = reader.string();
                    break;
                case /* string datetime */ 5:
                    message.datetime = reader.string();
                    break;
                case /* string driver_id */ 6:
                    message.driverId = reader.string();
                    break;
                case /* string driver_name */ 7:
                    message.driverName = reader.string();
                    break;
                case /* string truck_stop */ 8:
                    message.truckStop = reader.string();
                    break;
                case /* string city */ 9:
                    message.city = reader.string();
                    break;
                case /* string state */ 10:
                    message.state = reader.string();
                    break;
                case /* string address */ 11:
                    message.address = reader.string();
                    break;
                case /* optional CountryCode country */ 12:
                    message.country = reader.int32();
                    break;
                case /* string chain */ 13:
                    message.chain = reader.string();
                    break;
                case /* string product */ 14:
                    message.product = reader.string();
                    break;
                case /* bool in_network */ 15:
                    message.inNetwork = reader.bool();
                    break;
                case /* double quantity */ 16:
                    message.quantity = reader.double();
                    break;
                case /* bool verified */ 17:
                    message.verified = reader.bool();
                    break;
                case /* string created_at */ 18:
                    message.createdAt = reader.string();
                    break;
                case /* string settlement_id */ 19:
                    message.settlementId = reader.string();
                    break;
                case /* FuelModel.SettlementStatus settlement_status */ 20:
                    message.settlementStatus = reader.int32();
                    break;
                case /* string total_amount_formatted */ 21:
                    message.totalAmountFormatted = reader.string();
                    break;
                case /* string total_discounted_amount_formatted */ 22:
                    message.totalDiscountedAmountFormatted = reader.string();
                    break;
                case /* string discounted_amount_formatted */ 23:
                    message.discountedAmountFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelGetReply_Fuel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string truck_id = 3; */
        if (message.truckId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.truckId);
        /* string unit_number = 4; */
        if (message.unitNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.unitNumber);
        /* string datetime = 5; */
        if (message.datetime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.datetime);
        /* string driver_id = 6; */
        if (message.driverId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.driverId);
        /* string driver_name = 7; */
        if (message.driverName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.driverName);
        /* string truck_stop = 8; */
        if (message.truckStop !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.truckStop);
        /* string city = 9; */
        if (message.city !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.city);
        /* string state = 10; */
        if (message.state !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.state);
        /* string address = 11; */
        if (message.address !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.address);
        /* optional CountryCode country = 12; */
        if (message.country !== undefined)
            writer.tag(12, WireType.Varint).int32(message.country);
        /* string chain = 13; */
        if (message.chain !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.chain);
        /* string product = 14; */
        if (message.product !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.product);
        /* bool in_network = 15; */
        if (message.inNetwork !== false)
            writer.tag(15, WireType.Varint).bool(message.inNetwork);
        /* double quantity = 16; */
        if (message.quantity !== 0)
            writer.tag(16, WireType.Bit64).double(message.quantity);
        /* bool verified = 17; */
        if (message.verified !== false)
            writer.tag(17, WireType.Varint).bool(message.verified);
        /* string created_at = 18; */
        if (message.createdAt !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.createdAt);
        /* string settlement_id = 19; */
        if (message.settlementId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.settlementId);
        /* FuelModel.SettlementStatus settlement_status = 20; */
        if (message.settlementStatus !== 0)
            writer.tag(20, WireType.Varint).int32(message.settlementStatus);
        /* string total_amount_formatted = 21; */
        if (message.totalAmountFormatted !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.totalAmountFormatted);
        /* string total_discounted_amount_formatted = 22; */
        if (message.totalDiscountedAmountFormatted !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.totalDiscountedAmountFormatted);
        /* string discounted_amount_formatted = 23; */
        if (message.discountedAmountFormatted !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.discountedAmountFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelGetReply.Fuel
 */
export const FuelGetReply_Fuel = new FuelGetReply_Fuel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelStatsGetRequest$Type extends MessageType<FuelStatsGetRequest> {
    constructor() {
        super("FuelStatsGetRequest", [
            { no: 1, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "settlement_status", kind: "enum", opt: true, T: () => ["FuelModel.SettlementStatus", FuelModel_SettlementStatus, "SETTLEMENT_STATUS_"] },
            { no: 5, name: "verified", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "truck_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Type", TruckModel_Type, "TYPE_"] },
            { no: 7, name: "truck_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Status", TruckModel_Status] },
            { no: 8, name: "assigned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FuelStatsGetRequest>): FuelStatsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckIds = [];
        message.truckTypes = [];
        message.truckStatuses = [];
        message.assigned = false;
        if (value !== undefined)
            reflectionMergePartial<FuelStatsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelStatsGetRequest): FuelStatsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string start_date */ 1:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 2:
                    message.endDate = reader.string();
                    break;
                case /* repeated string truck_ids */ 3:
                    message.truckIds.push(reader.string());
                    break;
                case /* optional FuelModel.SettlementStatus settlement_status */ 4:
                    message.settlementStatus = reader.int32();
                    break;
                case /* optional bool verified */ 5:
                    message.verified = reader.bool();
                    break;
                case /* repeated TruckModel.Type truck_types */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckTypes.push(reader.int32());
                    else
                        message.truckTypes.push(reader.int32());
                    break;
                case /* repeated TruckModel.Status truck_statuses */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckStatuses.push(reader.int32());
                    else
                        message.truckStatuses.push(reader.int32());
                    break;
                case /* bool assigned */ 8:
                    message.assigned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelStatsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string start_date = 1; */
        if (message.startDate !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 2; */
        if (message.endDate !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.endDate);
        /* repeated string truck_ids = 3; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.truckIds[i]);
        /* optional FuelModel.SettlementStatus settlement_status = 4; */
        if (message.settlementStatus !== undefined)
            writer.tag(4, WireType.Varint).int32(message.settlementStatus);
        /* optional bool verified = 5; */
        if (message.verified !== undefined)
            writer.tag(5, WireType.Varint).bool(message.verified);
        /* repeated TruckModel.Type truck_types = 6; */
        if (message.truckTypes.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckTypes.length; i++)
                writer.int32(message.truckTypes[i]);
            writer.join();
        }
        /* repeated TruckModel.Status truck_statuses = 7; */
        if (message.truckStatuses.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckStatuses.length; i++)
                writer.int32(message.truckStatuses[i]);
            writer.join();
        }
        /* bool assigned = 8; */
        if (message.assigned !== false)
            writer.tag(8, WireType.Varint).bool(message.assigned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelStatsGetRequest
 */
export const FuelStatsGetRequest = new FuelStatsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelStatsGetReply$Type extends MessageType<FuelStatsGetReply> {
    constructor() {
        super("FuelStatsGetReply", [
            { no: 1, name: "total_fuel_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<FuelStatsGetReply>): FuelStatsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalFuelCount = 0;
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<FuelStatsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelStatsGetReply): FuelStatsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_fuel_count */ 1:
                    message.totalFuelCount = reader.int64().toNumber();
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelStatsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_fuel_count = 1; */
        if (message.totalFuelCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalFuelCount);
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelStatsGetReply
 */
export const FuelStatsGetReply = new FuelStatsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFuelTransactionRequest$Type extends MessageType<UpdateFuelTransactionRequest> {
    constructor() {
        super("UpdateFuelTransactionRequest", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "date_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "discount_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "country", kind: "enum", opt: true, T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 8, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "total_discounted_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "truck_stop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateFuelTransactionRequest>): UpdateFuelTransactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        message.dateTime = 0;
        message.chain = "";
        message.driverName = "";
        message.discountAmount = 0;
        message.address = "";
        message.referenceId = "";
        message.totalAmount = 0;
        message.totalDiscountedAmount = 0;
        message.truckStop = "";
        message.truckId = "";
        message.product = "";
        message.city = "";
        message.state = "";
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateFuelTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFuelTransactionRequest): UpdateFuelTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                case /* int64 date_time */ 2:
                    message.dateTime = reader.int64().toNumber();
                    break;
                case /* string chain */ 3:
                    message.chain = reader.string();
                    break;
                case /* string driver_name */ 4:
                    message.driverName = reader.string();
                    break;
                case /* double discount_amount */ 5:
                    message.discountAmount = reader.double();
                    break;
                case /* string address */ 6:
                    message.address = reader.string();
                    break;
                case /* optional CountryCode country */ 7:
                    message.country = reader.int32();
                    break;
                case /* string reference_id */ 8:
                    message.referenceId = reader.string();
                    break;
                case /* double total_amount */ 9:
                    message.totalAmount = reader.double();
                    break;
                case /* double total_discounted_amount */ 10:
                    message.totalDiscountedAmount = reader.double();
                    break;
                case /* string truck_stop */ 11:
                    message.truckStop = reader.string();
                    break;
                case /* string truck_id */ 12:
                    message.truckId = reader.string();
                    break;
                case /* string product */ 13:
                    message.product = reader.string();
                    break;
                case /* string city */ 14:
                    message.city = reader.string();
                    break;
                case /* string state */ 15:
                    message.state = reader.string();
                    break;
                case /* double quantity */ 16:
                    message.quantity = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFuelTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        /* int64 date_time = 2; */
        if (message.dateTime !== 0)
            writer.tag(2, WireType.Varint).int64(message.dateTime);
        /* string chain = 3; */
        if (message.chain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.chain);
        /* string driver_name = 4; */
        if (message.driverName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.driverName);
        /* double discount_amount = 5; */
        if (message.discountAmount !== 0)
            writer.tag(5, WireType.Bit64).double(message.discountAmount);
        /* string address = 6; */
        if (message.address !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.address);
        /* optional CountryCode country = 7; */
        if (message.country !== undefined)
            writer.tag(7, WireType.Varint).int32(message.country);
        /* string reference_id = 8; */
        if (message.referenceId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.referenceId);
        /* double total_amount = 9; */
        if (message.totalAmount !== 0)
            writer.tag(9, WireType.Bit64).double(message.totalAmount);
        /* double total_discounted_amount = 10; */
        if (message.totalDiscountedAmount !== 0)
            writer.tag(10, WireType.Bit64).double(message.totalDiscountedAmount);
        /* string truck_stop = 11; */
        if (message.truckStop !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.truckStop);
        /* string truck_id = 12; */
        if (message.truckId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.truckId);
        /* string product = 13; */
        if (message.product !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.product);
        /* string city = 14; */
        if (message.city !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.city);
        /* string state = 15; */
        if (message.state !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.state);
        /* double quantity = 16; */
        if (message.quantity !== 0)
            writer.tag(16, WireType.Bit64).double(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateFuelTransactionRequest
 */
export const UpdateFuelTransactionRequest = new UpdateFuelTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFuelTransactionReply$Type extends MessageType<UpdateFuelTransactionReply> {
    constructor() {
        super("UpdateFuelTransactionReply", []);
    }
    create(value?: PartialMessage<UpdateFuelTransactionReply>): UpdateFuelTransactionReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateFuelTransactionReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFuelTransactionReply): UpdateFuelTransactionReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateFuelTransactionReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateFuelTransactionReply
 */
export const UpdateFuelTransactionReply = new UpdateFuelTransactionReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFuelTransactionRequest$Type extends MessageType<DeleteFuelTransactionRequest> {
    constructor() {
        super("DeleteFuelTransactionRequest", [
            { no: 1, name: "fuel_transaction_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteFuelTransactionRequest>): DeleteFuelTransactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionIds = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteFuelTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFuelTransactionRequest): DeleteFuelTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string fuel_transaction_ids */ 1:
                    message.fuelTransactionIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFuelTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string fuel_transaction_ids = 1; */
        for (let i = 0; i < message.fuelTransactionIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteFuelTransactionRequest
 */
export const DeleteFuelTransactionRequest = new DeleteFuelTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFuelTransactionReply$Type extends MessageType<DeleteFuelTransactionReply> {
    constructor() {
        super("DeleteFuelTransactionReply", []);
    }
    create(value?: PartialMessage<DeleteFuelTransactionReply>): DeleteFuelTransactionReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteFuelTransactionReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFuelTransactionReply): DeleteFuelTransactionReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteFuelTransactionReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteFuelTransactionReply
 */
export const DeleteFuelTransactionReply = new DeleteFuelTransactionReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindByReferenceIDRequest$Type extends MessageType<FindByReferenceIDRequest> {
    constructor() {
        super("FindByReferenceIDRequest", [
            { no: 1, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FindByReferenceIDRequest>): FindByReferenceIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<FindByReferenceIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindByReferenceIDRequest): FindByReferenceIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reference_id */ 1:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindByReferenceIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reference_id = 1; */
        if (message.referenceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FindByReferenceIDRequest
 */
export const FindByReferenceIDRequest = new FindByReferenceIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindByReferenceIDReply$Type extends MessageType<FindByReferenceIDReply> {
    constructor() {
        super("FindByReferenceIDReply", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FindByReferenceIDReply>): FindByReferenceIDReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<FindByReferenceIDReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindByReferenceIDReply): FindByReferenceIDReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindByReferenceIDReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FindByReferenceIDReply
 */
export const FindByReferenceIDReply = new FindByReferenceIDReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignTruckRequest$Type extends MessageType<AssignTruckRequest> {
    constructor() {
        super("AssignTruckRequest", [
            { no: 1, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssignTruckRequest>): AssignTruckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckId = "";
        message.fuelTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<AssignTruckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignTruckRequest): AssignTruckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truck_id */ 1:
                    message.truckId = reader.string();
                    break;
                case /* string fuel_transaction_id */ 2:
                    message.fuelTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignTruckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truck_id = 1; */
        if (message.truckId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.truckId);
        /* string fuel_transaction_id = 2; */
        if (message.fuelTransactionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fuelTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AssignTruckRequest
 */
export const AssignTruckRequest = new AssignTruckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignTruckReply$Type extends MessageType<AssignTruckReply> {
    constructor() {
        super("AssignTruckReply", []);
    }
    create(value?: PartialMessage<AssignTruckReply>): AssignTruckReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AssignTruckReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignTruckReply): AssignTruckReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AssignTruckReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AssignTruckReply
 */
export const AssignTruckReply = new AssignTruckReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnassignTruckRequest$Type extends MessageType<UnassignTruckRequest> {
    constructor() {
        super("UnassignTruckRequest", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnassignTruckRequest>): UnassignTruckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        if (value !== undefined)
            reflectionMergePartial<UnassignTruckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnassignTruckRequest): UnassignTruckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnassignTruckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UnassignTruckRequest
 */
export const UnassignTruckRequest = new UnassignTruckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnassignTruckReply$Type extends MessageType<UnassignTruckReply> {
    constructor() {
        super("UnassignTruckReply", []);
    }
    create(value?: PartialMessage<UnassignTruckReply>): UnassignTruckReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UnassignTruckReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnassignTruckReply): UnassignTruckReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UnassignTruckReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UnassignTruckReply
 */
export const UnassignTruckReply = new UnassignTruckReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelUpdateVerifiedRequest$Type extends MessageType<FuelUpdateVerifiedRequest> {
    constructor() {
        super("FuelUpdateVerifiedRequest", [
            { no: 1, name: "fuel_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FuelUpdateVerifiedRequest>): FuelUpdateVerifiedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuelTransactionId = "";
        message.verified = false;
        if (value !== undefined)
            reflectionMergePartial<FuelUpdateVerifiedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelUpdateVerifiedRequest): FuelUpdateVerifiedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fuel_transaction_id */ 1:
                    message.fuelTransactionId = reader.string();
                    break;
                case /* bool verified */ 2:
                    message.verified = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FuelUpdateVerifiedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fuel_transaction_id = 1; */
        if (message.fuelTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fuelTransactionId);
        /* bool verified = 2; */
        if (message.verified !== false)
            writer.tag(2, WireType.Varint).bool(message.verified);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelUpdateVerifiedRequest
 */
export const FuelUpdateVerifiedRequest = new FuelUpdateVerifiedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FuelUpdateVerifiedReply$Type extends MessageType<FuelUpdateVerifiedReply> {
    constructor() {
        super("FuelUpdateVerifiedReply", []);
    }
    create(value?: PartialMessage<FuelUpdateVerifiedReply>): FuelUpdateVerifiedReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FuelUpdateVerifiedReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuelUpdateVerifiedReply): FuelUpdateVerifiedReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FuelUpdateVerifiedReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FuelUpdateVerifiedReply
 */
export const FuelUpdateVerifiedReply = new FuelUpdateVerifiedReply$Type();
/**
 * @generated ServiceType for protobuf service FuelService
 */
export const FuelService = new ServiceType("FuelService", [
    { name: "CreateFuelTransaction", options: {}, I: CreateFuelTransactionRequest, O: CreateFuelTransactionResponse },
    { name: "RetrieveFuelTransaction", options: {}, I: FuelRetrieveRequest, O: FuelRetrieveReply },
    { name: "FuelGet", options: {}, I: FuelGetRequest, O: FuelGetReply },
    { name: "FuelStatsGet", options: {}, I: FuelStatsGetRequest, O: FuelStatsGetReply },
    { name: "UpdateFuelTransaction", options: {}, I: UpdateFuelTransactionRequest, O: UpdateFuelTransactionReply },
    { name: "UpdateVerified", options: {}, I: FuelUpdateVerifiedRequest, O: FuelUpdateVerifiedReply },
    { name: "DeleteFuelTransaction", options: {}, I: DeleteFuelTransactionRequest, O: DeleteFuelTransactionReply },
    { name: "FindByReferenceID", options: {}, I: FindByReferenceIDRequest, O: FindByReferenceIDReply },
    { name: "AssignTruck", options: {}, I: AssignTruckRequest, O: AssignTruckReply },
    { name: "UnassignTruck", options: {}, I: UnassignTruckRequest, O: UnassignTruckReply }
]);
