// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/driver_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DriverTypeService } from "./driver_type";
import type { DriverTypeDeleteReply } from "./driver_type";
import type { DriverTypeDeleteRequest } from "./driver_type";
import type { DriverTypeUpdateReply } from "./driver_type";
import type { DriverTypeUpdateRequest } from "./driver_type";
import type { DriverTypeCreateReply } from "./driver_type";
import type { DriverTypeCreateRequest } from "./driver_type";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DriverTypeGetReply } from "./driver_type";
import type { DriverTypeGetRequest } from "./driver_type";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service DriverTypeService
 */
export interface IDriverTypeServiceClient {
    /**
     * @generated from protobuf rpc: DriverTypeGet(DriverTypeGetRequest) returns (DriverTypeGetReply);
     */
    driverTypeGet(input: DriverTypeGetRequest, options?: RpcOptions): UnaryCall<DriverTypeGetRequest, DriverTypeGetReply>;
    /**
     * @generated from protobuf rpc: DriverTypeCreate(DriverTypeCreateRequest) returns (DriverTypeCreateReply);
     */
    driverTypeCreate(input: DriverTypeCreateRequest, options?: RpcOptions): UnaryCall<DriverTypeCreateRequest, DriverTypeCreateReply>;
    /**
     * @generated from protobuf rpc: DriverTypeUpdate(DriverTypeUpdateRequest) returns (DriverTypeUpdateReply);
     */
    driverTypeUpdate(input: DriverTypeUpdateRequest, options?: RpcOptions): UnaryCall<DriverTypeUpdateRequest, DriverTypeUpdateReply>;
    /**
     * @generated from protobuf rpc: DriverTypeDelete(DriverTypeDeleteRequest) returns (DriverTypeDeleteReply);
     */
    driverTypeDelete(input: DriverTypeDeleteRequest, options?: RpcOptions): UnaryCall<DriverTypeDeleteRequest, DriverTypeDeleteReply>;
}
/**
 * @generated from protobuf service DriverTypeService
 */
export class DriverTypeServiceClient implements IDriverTypeServiceClient, ServiceInfo {
    typeName = DriverTypeService.typeName;
    methods = DriverTypeService.methods;
    options = DriverTypeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DriverTypeGet(DriverTypeGetRequest) returns (DriverTypeGetReply);
     */
    driverTypeGet(input: DriverTypeGetRequest, options?: RpcOptions): UnaryCall<DriverTypeGetRequest, DriverTypeGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DriverTypeGetRequest, DriverTypeGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DriverTypeCreate(DriverTypeCreateRequest) returns (DriverTypeCreateReply);
     */
    driverTypeCreate(input: DriverTypeCreateRequest, options?: RpcOptions): UnaryCall<DriverTypeCreateRequest, DriverTypeCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DriverTypeCreateRequest, DriverTypeCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DriverTypeUpdate(DriverTypeUpdateRequest) returns (DriverTypeUpdateReply);
     */
    driverTypeUpdate(input: DriverTypeUpdateRequest, options?: RpcOptions): UnaryCall<DriverTypeUpdateRequest, DriverTypeUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DriverTypeUpdateRequest, DriverTypeUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DriverTypeDelete(DriverTypeDeleteRequest) returns (DriverTypeDeleteReply);
     */
    driverTypeDelete(input: DriverTypeDeleteRequest, options?: RpcOptions): UnaryCall<DriverTypeDeleteRequest, DriverTypeDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DriverTypeDeleteRequest, DriverTypeDeleteReply>("unary", this._transport, method, opt, input);
    }
}
