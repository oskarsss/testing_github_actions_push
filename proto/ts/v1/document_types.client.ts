// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/document_types.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DocumentTypesService } from "./document_types";
import type { DocumentTypeSequenceUpdateReply } from "./document_types";
import type { DocumentTypeSequenceUpdateRequest } from "./document_types";
import type { DocumentTypeDeleteReply } from "./document_types";
import type { DocumentTypeDeleteRequest } from "./document_types";
import type { DocumentTypeUpdateReply } from "./document_types";
import type { DocumentTypeUpdateRequest } from "./document_types";
import type { DocumentTypeCreateReply } from "./document_types";
import type { DocumentTypeCreateRequest } from "./document_types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DocumentTypeGetReply } from "./document_types";
import type { DocumentTypeGetRequest } from "./document_types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service DocumentTypesService
 */
export interface IDocumentTypesServiceClient {
    /**
     * @generated from protobuf rpc: DocumentTypeGet(DocumentTypeGetRequest) returns (DocumentTypeGetReply);
     */
    documentTypeGet(input: DocumentTypeGetRequest, options?: RpcOptions): UnaryCall<DocumentTypeGetRequest, DocumentTypeGetReply>;
    /**
     * @generated from protobuf rpc: DocumentTypeCreate(DocumentTypeCreateRequest) returns (DocumentTypeCreateReply);
     */
    documentTypeCreate(input: DocumentTypeCreateRequest, options?: RpcOptions): UnaryCall<DocumentTypeCreateRequest, DocumentTypeCreateReply>;
    /**
     * @generated from protobuf rpc: DocumentTypeUpdate(DocumentTypeUpdateRequest) returns (DocumentTypeUpdateReply);
     */
    documentTypeUpdate(input: DocumentTypeUpdateRequest, options?: RpcOptions): UnaryCall<DocumentTypeUpdateRequest, DocumentTypeUpdateReply>;
    /**
     * @generated from protobuf rpc: DocumentTypeDelete(DocumentTypeDeleteRequest) returns (DocumentTypeDeleteReply);
     */
    documentTypeDelete(input: DocumentTypeDeleteRequest, options?: RpcOptions): UnaryCall<DocumentTypeDeleteRequest, DocumentTypeDeleteReply>;
    /**
     * @generated from protobuf rpc: DocumentTypeSequenceUpdate(DocumentTypeSequenceUpdateRequest) returns (DocumentTypeSequenceUpdateReply);
     */
    documentTypeSequenceUpdate(input: DocumentTypeSequenceUpdateRequest, options?: RpcOptions): UnaryCall<DocumentTypeSequenceUpdateRequest, DocumentTypeSequenceUpdateReply>;
}
/**
 * @generated from protobuf service DocumentTypesService
 */
export class DocumentTypesServiceClient implements IDocumentTypesServiceClient, ServiceInfo {
    typeName = DocumentTypesService.typeName;
    methods = DocumentTypesService.methods;
    options = DocumentTypesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DocumentTypeGet(DocumentTypeGetRequest) returns (DocumentTypeGetReply);
     */
    documentTypeGet(input: DocumentTypeGetRequest, options?: RpcOptions): UnaryCall<DocumentTypeGetRequest, DocumentTypeGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentTypeGetRequest, DocumentTypeGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentTypeCreate(DocumentTypeCreateRequest) returns (DocumentTypeCreateReply);
     */
    documentTypeCreate(input: DocumentTypeCreateRequest, options?: RpcOptions): UnaryCall<DocumentTypeCreateRequest, DocumentTypeCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentTypeCreateRequest, DocumentTypeCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentTypeUpdate(DocumentTypeUpdateRequest) returns (DocumentTypeUpdateReply);
     */
    documentTypeUpdate(input: DocumentTypeUpdateRequest, options?: RpcOptions): UnaryCall<DocumentTypeUpdateRequest, DocumentTypeUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentTypeUpdateRequest, DocumentTypeUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentTypeDelete(DocumentTypeDeleteRequest) returns (DocumentTypeDeleteReply);
     */
    documentTypeDelete(input: DocumentTypeDeleteRequest, options?: RpcOptions): UnaryCall<DocumentTypeDeleteRequest, DocumentTypeDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentTypeDeleteRequest, DocumentTypeDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DocumentTypeSequenceUpdate(DocumentTypeSequenceUpdateRequest) returns (DocumentTypeSequenceUpdateReply);
     */
    documentTypeSequenceUpdate(input: DocumentTypeSequenceUpdateRequest, options?: RpcOptions): UnaryCall<DocumentTypeSequenceUpdateRequest, DocumentTypeSequenceUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DocumentTypeSequenceUpdateRequest, DocumentTypeSequenceUpdateReply>("unary", this._transport, method, opt, input);
    }
}
