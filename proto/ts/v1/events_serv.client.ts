// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/events_serv.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EventsService } from "./events_serv";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListenReply } from "./events_serv";
import type { ListenRequest } from "./events_serv";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service EventsService
 */
export interface IEventsServiceClient {
    /**
     * @generated from protobuf rpc: Listen(ListenRequest) returns (stream ListenReply);
     */
    listen(input: ListenRequest, options?: RpcOptions): ServerStreamingCall<ListenRequest, ListenReply>;
}
/**
 * @generated from protobuf service EventsService
 */
export class EventsServiceClient implements IEventsServiceClient, ServiceInfo {
    typeName = EventsService.typeName;
    methods = EventsService.methods;
    options = EventsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Listen(ListenRequest) returns (stream ListenReply);
     */
    listen(input: ListenRequest, options?: RpcOptions): ServerStreamingCall<ListenRequest, ListenReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListenRequest, ListenReply>("serverStreaming", this._transport, method, opt, input);
    }
}
