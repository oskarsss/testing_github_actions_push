// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/payouts.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PayoutsService } from "./payouts";
import type { PayoutUpdateReply } from "./payouts";
import type { PayoutUpdateRequest } from "./payouts";
import type { PayoutTypeUpdateReply } from "./payouts";
import type { PayoutTypeUpdateRequest } from "./payouts";
import type { PayoutStatusUpdateReply } from "./payouts";
import type { PayoutStatusUpdateRequest } from "./payouts";
import type { PayoutDeleteReply } from "./payouts";
import type { PayoutDeleteRequest } from "./payouts";
import type { PayoutCreateReply } from "./payouts";
import type { PayoutCreateRequest } from "./payouts";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PayoutGetReply } from "./payouts";
import type { PayoutGetRequest } from "./payouts";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service PayoutsService
 */
export interface IPayoutsServiceClient {
    /**
     * @generated from protobuf rpc: PayoutGet(PayoutGetRequest) returns (PayoutGetReply);
     */
    payoutGet(input: PayoutGetRequest, options?: RpcOptions): UnaryCall<PayoutGetRequest, PayoutGetReply>;
    /**
     * @generated from protobuf rpc: PayoutCreate(PayoutCreateRequest) returns (PayoutCreateReply);
     */
    payoutCreate(input: PayoutCreateRequest, options?: RpcOptions): UnaryCall<PayoutCreateRequest, PayoutCreateReply>;
    /**
     * @generated from protobuf rpc: PayoutDelete(PayoutDeleteRequest) returns (PayoutDeleteReply);
     */
    payoutDelete(input: PayoutDeleteRequest, options?: RpcOptions): UnaryCall<PayoutDeleteRequest, PayoutDeleteReply>;
    /**
     * @generated from protobuf rpc: PayoutStatusUpdate(PayoutStatusUpdateRequest) returns (PayoutStatusUpdateReply);
     */
    payoutStatusUpdate(input: PayoutStatusUpdateRequest, options?: RpcOptions): UnaryCall<PayoutStatusUpdateRequest, PayoutStatusUpdateReply>;
    /**
     * @generated from protobuf rpc: PayoutTypeUpdate(PayoutTypeUpdateRequest) returns (PayoutTypeUpdateReply);
     */
    payoutTypeUpdate(input: PayoutTypeUpdateRequest, options?: RpcOptions): UnaryCall<PayoutTypeUpdateRequest, PayoutTypeUpdateReply>;
    /**
     * @generated from protobuf rpc: PayoutUpdate(PayoutUpdateRequest) returns (PayoutUpdateReply);
     */
    payoutUpdate(input: PayoutUpdateRequest, options?: RpcOptions): UnaryCall<PayoutUpdateRequest, PayoutUpdateReply>;
}
/**
 * @generated from protobuf service PayoutsService
 */
export class PayoutsServiceClient implements IPayoutsServiceClient, ServiceInfo {
    typeName = PayoutsService.typeName;
    methods = PayoutsService.methods;
    options = PayoutsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PayoutGet(PayoutGetRequest) returns (PayoutGetReply);
     */
    payoutGet(input: PayoutGetRequest, options?: RpcOptions): UnaryCall<PayoutGetRequest, PayoutGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PayoutGetRequest, PayoutGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PayoutCreate(PayoutCreateRequest) returns (PayoutCreateReply);
     */
    payoutCreate(input: PayoutCreateRequest, options?: RpcOptions): UnaryCall<PayoutCreateRequest, PayoutCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PayoutCreateRequest, PayoutCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PayoutDelete(PayoutDeleteRequest) returns (PayoutDeleteReply);
     */
    payoutDelete(input: PayoutDeleteRequest, options?: RpcOptions): UnaryCall<PayoutDeleteRequest, PayoutDeleteReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PayoutDeleteRequest, PayoutDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PayoutStatusUpdate(PayoutStatusUpdateRequest) returns (PayoutStatusUpdateReply);
     */
    payoutStatusUpdate(input: PayoutStatusUpdateRequest, options?: RpcOptions): UnaryCall<PayoutStatusUpdateRequest, PayoutStatusUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PayoutStatusUpdateRequest, PayoutStatusUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PayoutTypeUpdate(PayoutTypeUpdateRequest) returns (PayoutTypeUpdateReply);
     */
    payoutTypeUpdate(input: PayoutTypeUpdateRequest, options?: RpcOptions): UnaryCall<PayoutTypeUpdateRequest, PayoutTypeUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PayoutTypeUpdateRequest, PayoutTypeUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PayoutUpdate(PayoutUpdateRequest) returns (PayoutUpdateReply);
     */
    payoutUpdate(input: PayoutUpdateRequest, options?: RpcOptions): UnaryCall<PayoutUpdateRequest, PayoutUpdateReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PayoutUpdateRequest, PayoutUpdateReply>("unary", this._transport, method, opt, input);
    }
}
