// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/manifests.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ManifestModel_Driver } from "./models/model_manifest";
import { ManifestModel_Load } from "./models/model_manifest";
import { ManifestModel_StopID } from "./models/model_manifest";
import { ManifestRouteModel_EtaState } from "./models/model_manifest";
import { ManifestRouteModel_Stop } from "./models/model_manifest";
import { LocationModel } from "./models/model_location";
import { FilterModel_Filter } from "./models/model_filter_type";
import { Distance } from "./models/distance";
import { Amount } from "./models/amount";
import { ManifestModel_Status } from "./models/model_manifest";
import { ManifestModel_Manifest } from "./models/model_manifest";
import { ManifestModel_ManifestStop_Type } from "./models/model_manifest";
import { CurrencyCode } from "./models/currency_code";
/**
 * /////////////////////////////
 * ManifestCreate
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestCreateRequest
 */
export interface ManifestCreateRequest {
    /**
     * @generated from protobuf field: repeated ManifestCreateRequest.Stop stops = 1;
     */
    stops: ManifestCreateRequest_Stop[];
    /**
     * @generated from protobuf field: string gross_amount = 5;
     */
    grossAmount: string;
    /**
     * @generated from protobuf field: CurrencyCode gross_currency = 6;
     */
    grossCurrency: CurrencyCode;
    /**
     * @generated from protobuf field: optional string title = 7;
     */
    title?: string;
}
/**
 * @generated from protobuf message ManifestCreateRequest.Stop
 */
export interface ManifestCreateRequest_Stop {
    /**
     * @generated from protobuf field: ManifestCreateRequest.Stop.Location location = 1;
     */
    location?: ManifestCreateRequest_Stop_Location;
    /**
     * @generated from protobuf field: string appointment_start_at = 2;
     */
    appointmentStartAt: string;
    /**
     * @generated from protobuf field: optional string appointment_end_at = 3;
     */
    appointmentEndAt?: string;
    /**
     * @generated from protobuf field: optional string note = 4;
     */
    note?: string;
    /**
     * @generated from protobuf field: ManifestModel.ManifestStop.Type type = 5;
     */
    type: ManifestModel_ManifestStop_Type;
    /**
     * @generated from protobuf field: string reference_id = 6;
     */
    referenceId: string;
}
/**
 * @generated from protobuf message ManifestCreateRequest.Stop.Location
 */
export interface ManifestCreateRequest_Stop_Location {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 3;
     */
    lon: number;
    /**
     * @generated from protobuf field: string line_1 = 4;
     */
    line1: string;
    /**
     * @generated from protobuf field: optional string line_2 = 5;
     */
    line2?: string;
    /**
     * @generated from protobuf field: string city = 6;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 7;
     */
    state: string;
    /**
     * @generated from protobuf field: string postal_code = 8;
     */
    postalCode: string;
    /**
     * @generated from protobuf field: string address = 9;
     */
    address: string;
}
/**
 * @generated from protobuf message ManifestCreateReply
 */
export interface ManifestCreateReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestDelete
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestDeleteRequest
 */
export interface ManifestDeleteRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestDeleteReply
 */
export interface ManifestDeleteReply {
}
/**
 * /////////////////////////////
 * ManifestRetrieve
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestRetrieveRequest
 */
export interface ManifestRetrieveRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestRetrieveReply
 */
export interface ManifestRetrieveReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestGet
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestGetRequest
 */
export interface ManifestGetRequest {
    /**
     * @generated from protobuf field: int64 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int64 per_page = 2;
     */
    perPage: number;
    /**
     * @generated from protobuf field: ManifestGetRequest.SortType sort_type = 3;
     */
    sortType: ManifestGetRequest_SortType;
    /**
     * @generated from protobuf field: repeated string truck_ids = 4;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string driver_ids = 5;
     */
    driverIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 6;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: repeated ManifestModel.Status statuses = 7;
     */
    statuses: ManifestModel_Status[];
    /**
     * @generated from protobuf field: string start_date = 8;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 9;
     */
    endDate: string;
    /**
     * @generated from protobuf field: repeated string load_ids = 10;
     */
    loadIds: string[];
    /**
     * @generated from protobuf field: optional string search = 11;
     */
    search?: string;
}
/**
 * @generated from protobuf enum ManifestGetRequest.SortType
 */
export enum ManifestGetRequest_SortType {
    /**
     * @generated from protobuf enum value: SORT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SORT_TYPE_FIRST_STOP_APPOINTMENT_START_AT_DESC = 1;
     */
    FIRST_STOP_APPOINTMENT_START_AT_DESC = 1,
    /**
     * @generated from protobuf enum value: SORT_TYPE_FIRST_STOP_APPOINTMENT_START_AT_ASC = 2;
     */
    FIRST_STOP_APPOINTMENT_START_AT_ASC = 2,
    /**
     * @generated from protobuf enum value: SORT_TYPE_GROSS_AMOUNT_DESC = 3;
     */
    GROSS_AMOUNT_DESC = 3,
    /**
     * @generated from protobuf enum value: SORT_TYPE_GROSS_AMOUNT_ASC = 4;
     */
    GROSS_AMOUNT_ASC = 4,
    /**
     * @generated from protobuf enum value: SORT_TYPE_DISTANCE_DESC = 5;
     */
    DISTANCE_DESC = 5,
    /**
     * @generated from protobuf enum value: SORT_TYPE_DISTANCE_ASC = 6;
     */
    DISTANCE_ASC = 6,
    /**
     * @generated from protobuf enum value: SORT_TYPE_LOADED_MILES_DESC = 7;
     */
    LOADED_MILES_DESC = 7,
    /**
     * @generated from protobuf enum value: SORT_TYPE_LOADED_MILES_ASC = 8;
     */
    LOADED_MILES_ASC = 8,
    /**
     * @generated from protobuf enum value: SORT_TYPE_TRUCK_NUMBER_DESC = 9;
     */
    TRUCK_NUMBER_DESC = 9,
    /**
     * @generated from protobuf enum value: SORT_TYPE_TRUCK_NUMBER_ASC = 10;
     */
    TRUCK_NUMBER_ASC = 10,
    /**
     * @generated from protobuf enum value: SORT_TYPE_SMART_DISPATCH = 11;
     */
    SMART_DISPATCH = 11
}
/**
 * @generated from protobuf message ManifestGetReply
 */
export interface ManifestGetReply {
    /**
     * @generated from protobuf field: repeated ManifestModel.Manifest manifests = 1;
     */
    manifests: ManifestModel_Manifest[];
    /**
     * @generated from protobuf field: ManifestGetReply.Totals totals = 2;
     */
    totals?: ManifestGetReply_Totals;
}
/**
 * @generated from protobuf message ManifestGetReply.Totals
 */
export interface ManifestGetReply_Totals {
    /**
     * @generated from protobuf field: Amount total_gross_amount = 1;
     */
    totalGrossAmount?: Amount;
    /**
     * @generated from protobuf field: Distance total_distance = 2;
     */
    totalDistance?: Distance;
    /**
     * @generated from protobuf field: Distance total_loaded_distance = 3;
     */
    totalLoadedDistance?: Distance;
    /**
     * @generated from protobuf field: Distance total_empty_distance = 4;
     */
    totalEmptyDistance?: Distance;
}
/**
 * /////////////////////////////
 * ManifestGet
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestUnarchivedGetRequest
 */
export interface ManifestUnarchivedGetRequest {
}
/**
 * @generated from protobuf message ManifestUnarchivedGetReply
 */
export interface ManifestUnarchivedGetReply {
    /**
     * @generated from protobuf field: repeated ManifestModel.Manifest manifests = 1;
     */
    manifests: ManifestModel_Manifest[];
}
/**
 * /////////////////////////////
 * ManifestStatsGet
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestStatsGetRequest
 */
export interface ManifestStatsGetRequest {
    /**
     * @generated from protobuf field: repeated string truck_ids = 4;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string driver_ids = 5;
     */
    driverIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 6;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: repeated ManifestModel.Status statuses = 7;
     */
    statuses: ManifestModel_Status[];
    /**
     * @generated from protobuf field: string start_date = 8;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 9;
     */
    endDate: string;
    /**
     * @generated from protobuf field: repeated string load_ids = 10;
     */
    loadIds: string[];
    /**
     * @generated from protobuf field: optional string search = 11;
     */
    search?: string;
}
/**
 * @generated from protobuf message ManifestStatsGetReply
 */
export interface ManifestStatsGetReply {
    /**
     * @generated from protobuf field: int64 total_manifests_count = 1;
     */
    totalManifestsCount: number;
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
/**
 * /////////////////////////////
 * ManifestCreateFromLoads
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestCreateFromLoadsRequest
 */
export interface ManifestCreateFromLoadsRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
    /**
     * @generated from protobuf field: string gross_amount = 2;
     */
    grossAmount: string;
    /**
     * @generated from protobuf field: CurrencyCode gross_currency = 3;
     */
    grossCurrency: CurrencyCode;
}
/**
 * @generated from protobuf message ManifestCreateFromLoadsReply
 */
export interface ManifestCreateFromLoadsReply {
    /**
     * @generated from protobuf field: string manifestId = 1;
     */
    manifestId: string;
}
/**
 * /////////////////////////////
 * ManifestTruckAssign
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestTruckAssignRequest
 */
export interface ManifestTruckAssignRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
}
/**
 * @generated from protobuf message ManifestTruckAssignReply
 */
export interface ManifestTruckAssignReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestTruckUnassign
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestTruckUnassignRequest
 */
export interface ManifestTruckUnassignRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestTruckUnassignReply
 */
export interface ManifestTruckUnassignReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestTrailerAssign
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestTrailerAssignRequest
 */
export interface ManifestTrailerAssignRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string trailer_id = 2;
     */
    trailerId: string;
}
/**
 * @generated from protobuf message ManifestTrailerAssignReply
 */
export interface ManifestTrailerAssignReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestTrailerUnassign
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestGrossUpdateRequest
 */
export interface ManifestGrossUpdateRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string gross_amount = 2;
     */
    grossAmount: string;
    /**
     * @generated from protobuf field: CurrencyCode gross_currency = 3;
     */
    grossCurrency: CurrencyCode;
}
/**
 * @generated from protobuf message ManifestGrossUpdateReply
 */
export interface ManifestGrossUpdateReply {
}
/**
 * /////////////////////////////
 * ManifestStatusUpdate
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestStatusUpdateRequest
 */
export interface ManifestStatusUpdateRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: ManifestModel.Status status = 2;
     */
    status: ManifestModel_Status;
}
/**
 * @generated from protobuf message ManifestStatusUpdateReply
 */
export interface ManifestStatusUpdateReply {
}
/**
 * /////////////////////////////
 * ManifestTrailerAssign
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestDriverAssignRequest
 */
export interface ManifestDriverAssignRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message ManifestDriverAssignReply
 */
export interface ManifestDriverAssignReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestTrailerUnassign
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestDriverUnassignRequest
 */
export interface ManifestDriverUnassignRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message ManifestDriverUnassignReply
 */
export interface ManifestDriverUnassignReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestMerge
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestMergeRequest
 */
export interface ManifestMergeRequest {
    /**
     * @generated from protobuf field: repeated string manifest_ids = 1;
     */
    manifestIds: string[];
    /**
     * @generated from protobuf field: string to_manifest_id = 2;
     */
    toManifestId: string;
}
/**
 * @generated from protobuf message ManifestMergeReply
 */
export interface ManifestMergeReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestLoadedDistanceUpdate
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestLoadedDistanceUpdateRequest
 */
export interface ManifestLoadedDistanceUpdateRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: optional string miles = 2;
     */
    miles?: string;
    /**
     * @generated from protobuf field: optional string kilometers = 3;
     */
    kilometers?: string;
}
/**
 * @generated from protobuf message ManifestLoadedDistanceUpdateReply
 */
export interface ManifestLoadedDistanceUpdateReply {
}
/**
 * /////////////////////////////
 * ManifestEmptyDistanceUpdate
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestEmptyDistanceUpdateRequest
 */
export interface ManifestEmptyDistanceUpdateRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: optional string miles = 2;
     */
    miles?: string;
    /**
     * @generated from protobuf field: optional string kilometers = 3;
     */
    kilometers?: string;
}
/**
 * @generated from protobuf message ManifestEmptyDistanceUpdateReply
 */
export interface ManifestEmptyDistanceUpdateReply {
}
/**
 * /////////////////////////////
 * ManifestTruckRouteRetrieve
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestTruckRouteRetrieveRequest
 */
export interface ManifestTruckRouteRetrieveRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestTruckRouteRetrieveReply
 */
export interface ManifestTruckRouteRetrieveReply {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 3;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: LocationModel truck_location = 4;
     */
    truckLocation?: LocationModel;
    /**
     * @generated from protobuf field: string polyline_from_truck_location_to_next_stop = 5;
     */
    polylineFromTruckLocationToNextStop: string;
    /**
     * @generated from protobuf field: repeated ManifestRouteModel.Stop stops = 6;
     */
    stops: ManifestRouteModel_Stop[];
}
/**
 * /////////////////////////////
 * ManifestTruckEtaStatesGet
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestTruckEtaStatesGetRequest
 */
export interface ManifestTruckEtaStatesGetRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestTruckEtaStatesGetReply
 */
export interface ManifestTruckEtaStatesGetReply {
    /**
     * @generated from protobuf field: repeated ManifestRouteModel.EtaState eta_states = 1;
     */
    etaStates: ManifestRouteModel_EtaState[];
}
/**
 * /////////////////////////////
 * ManifestSplit
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestSplitRequest
 */
export interface ManifestSplitRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: ManifestModel.StopID last_stop_id = 2;
     */
    lastStopId?: ManifestModel_StopID;
    /**
     * @generated from protobuf field: ManifestSplitRequest.Location dropoff_location = 3;
     */
    dropoffLocation?: ManifestSplitRequest_Location;
    /**
     * @generated from protobuf field: string dropoff_appointment_start_at = 4;
     */
    dropoffAppointmentStartAt: string;
    /**
     * @generated from protobuf field: optional string dropoff_appointment_end_at = 5;
     */
    dropoffAppointmentEndAt?: string;
    /**
     * @generated from protobuf field: string pickup_appointment_start_at = 6;
     */
    pickupAppointmentStartAt: string;
    /**
     * @generated from protobuf field: optional string pickup_appointment_end_at = 7;
     */
    pickupAppointmentEndAt?: string;
    /**
     * @generated from protobuf field: optional string note = 8;
     */
    note?: string;
}
/**
 * @generated from protobuf message ManifestSplitRequest.Location
 */
export interface ManifestSplitRequest_Location {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 3;
     */
    lon: number;
    /**
     * @generated from protobuf field: string line_1 = 4;
     */
    line1: string;
    /**
     * @generated from protobuf field: optional string line_2 = 5;
     */
    line2?: string;
    /**
     * @generated from protobuf field: string city = 6;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 7;
     */
    state: string;
    /**
     * @generated from protobuf field: string postal_code = 8;
     */
    postalCode: string;
    /**
     * @generated from protobuf field: string address = 9;
     */
    address: string;
}
/**
 * @generated from protobuf message ManifestSplitReply
 */
export interface ManifestSplitReply {
    /**
     * @generated from protobuf field: ManifestModel.Manifest manifest = 1;
     */
    manifest?: ManifestModel_Manifest;
    /**
     * @generated from protobuf field: ManifestModel.Manifest new_manifest = 2;
     */
    newManifest?: ManifestModel_Manifest;
}
/**
 * /////////////////////////////
 * ManifestTitleUpdate
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestTitleUpdateRequest
 */
export interface ManifestTitleUpdateRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
}
/**
 * @generated from protobuf message ManifestTitleUpdateReply
 */
export interface ManifestTitleUpdateReply {
}
/**
 * /////////////////////////////
 * ManifestLoadDetailsGet
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestLoadDetailsGetRequest
 */
export interface ManifestLoadDetailsGetRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestLoadDetailsGetReply
 */
export interface ManifestLoadDetailsGetReply {
    /**
     * @generated from protobuf field: repeated ManifestModel.Load loads = 1;
     */
    loads: ManifestModel_Load[];
}
/**
 * /////////////////////////////
 * ManifestDriverGet
 * /////////////////////////////
 *
 * @generated from protobuf message ManifestDriverGetRequest
 */
export interface ManifestDriverGetRequest {
    /**
     * @generated from protobuf field: string manifest_id = 1;
     */
    manifestId: string;
}
/**
 * @generated from protobuf message ManifestDriverGetReply
 */
export interface ManifestDriverGetReply {
    /**
     * @generated from protobuf field: repeated ManifestModel.Driver drivers = 1;
     */
    drivers: ManifestModel_Driver[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ManifestCreateRequest$Type extends MessageType<ManifestCreateRequest> {
    constructor() {
        super("ManifestCreateRequest", [
            { no: 1, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestCreateRequest_Stop },
            { no: 5, name: "gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "gross_currency", kind: "enum", T: () => ["CurrencyCode", CurrencyCode, "CURRENCY_CODE_"] },
            { no: 7, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestCreateRequest>): ManifestCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stops = [];
        message.grossAmount = "";
        message.grossCurrency = 0;
        if (value !== undefined)
            reflectionMergePartial<ManifestCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestCreateRequest): ManifestCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestCreateRequest.Stop stops */ 1:
                    message.stops.push(ManifestCreateRequest_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string gross_amount */ 5:
                    message.grossAmount = reader.string();
                    break;
                case /* CurrencyCode gross_currency */ 6:
                    message.grossCurrency = reader.int32();
                    break;
                case /* optional string title */ 7:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestCreateRequest.Stop stops = 1; */
        for (let i = 0; i < message.stops.length; i++)
            ManifestCreateRequest_Stop.internalBinaryWrite(message.stops[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string gross_amount = 5; */
        if (message.grossAmount !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.grossAmount);
        /* CurrencyCode gross_currency = 6; */
        if (message.grossCurrency !== 0)
            writer.tag(6, WireType.Varint).int32(message.grossCurrency);
        /* optional string title = 7; */
        if (message.title !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestCreateRequest
 */
export const ManifestCreateRequest = new ManifestCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestCreateRequest_Stop$Type extends MessageType<ManifestCreateRequest_Stop> {
    constructor() {
        super("ManifestCreateRequest.Stop", [
            { no: 1, name: "location", kind: "message", T: () => ManifestCreateRequest_Stop_Location },
            { no: 2, name: "appointment_start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "appointment_end_at", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "note", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["ManifestModel.ManifestStop.Type", ManifestModel_ManifestStop_Type, "TYPE_"] },
            { no: 6, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestCreateRequest_Stop>): ManifestCreateRequest_Stop {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appointmentStartAt = "";
        message.type = 0;
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestCreateRequest_Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestCreateRequest_Stop): ManifestCreateRequest_Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestCreateRequest.Stop.Location location */ 1:
                    message.location = ManifestCreateRequest_Stop_Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* string appointment_start_at */ 2:
                    message.appointmentStartAt = reader.string();
                    break;
                case /* optional string appointment_end_at */ 3:
                    message.appointmentEndAt = reader.string();
                    break;
                case /* optional string note */ 4:
                    message.note = reader.string();
                    break;
                case /* ManifestModel.ManifestStop.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string reference_id */ 6:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestCreateRequest_Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestCreateRequest.Stop.Location location = 1; */
        if (message.location)
            ManifestCreateRequest_Stop_Location.internalBinaryWrite(message.location, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string appointment_start_at = 2; */
        if (message.appointmentStartAt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appointmentStartAt);
        /* optional string appointment_end_at = 3; */
        if (message.appointmentEndAt !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.appointmentEndAt);
        /* optional string note = 4; */
        if (message.note !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.note);
        /* ManifestModel.ManifestStop.Type type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string reference_id = 6; */
        if (message.referenceId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestCreateRequest.Stop
 */
export const ManifestCreateRequest_Stop = new ManifestCreateRequest_Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestCreateRequest_Stop_Location$Type extends MessageType<ManifestCreateRequest_Stop_Location> {
    constructor() {
        super("ManifestCreateRequest.Stop.Location", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "line_2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestCreateRequest_Stop_Location>): ManifestCreateRequest_Stop_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.lat = 0;
        message.lon = 0;
        message.line1 = "";
        message.city = "";
        message.state = "";
        message.postalCode = "";
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestCreateRequest_Stop_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestCreateRequest_Stop_Location): ManifestCreateRequest_Stop_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 3:
                    message.lon = reader.double();
                    break;
                case /* string line_1 */ 4:
                    message.line1 = reader.string();
                    break;
                case /* optional string line_2 */ 5:
                    message.line2 = reader.string();
                    break;
                case /* string city */ 6:
                    message.city = reader.string();
                    break;
                case /* string state */ 7:
                    message.state = reader.string();
                    break;
                case /* string postal_code */ 8:
                    message.postalCode = reader.string();
                    break;
                case /* string address */ 9:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestCreateRequest_Stop_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lon = 3; */
        if (message.lon !== 0)
            writer.tag(3, WireType.Bit64).double(message.lon);
        /* string line_1 = 4; */
        if (message.line1 !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.line1);
        /* optional string line_2 = 5; */
        if (message.line2 !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.line2);
        /* string city = 6; */
        if (message.city !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.city);
        /* string state = 7; */
        if (message.state !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.state);
        /* string postal_code = 8; */
        if (message.postalCode !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.postalCode);
        /* string address = 9; */
        if (message.address !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestCreateRequest.Stop.Location
 */
export const ManifestCreateRequest_Stop_Location = new ManifestCreateRequest_Stop_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestCreateReply$Type extends MessageType<ManifestCreateReply> {
    constructor() {
        super("ManifestCreateReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestCreateReply>): ManifestCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestCreateReply): ManifestCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestCreateReply
 */
export const ManifestCreateReply = new ManifestCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDeleteRequest$Type extends MessageType<ManifestDeleteRequest> {
    constructor() {
        super("ManifestDeleteRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDeleteRequest>): ManifestDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDeleteRequest): ManifestDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDeleteRequest
 */
export const ManifestDeleteRequest = new ManifestDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDeleteReply$Type extends MessageType<ManifestDeleteReply> {
    constructor() {
        super("ManifestDeleteReply", []);
    }
    create(value?: PartialMessage<ManifestDeleteReply>): ManifestDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDeleteReply): ManifestDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDeleteReply
 */
export const ManifestDeleteReply = new ManifestDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestRetrieveRequest$Type extends MessageType<ManifestRetrieveRequest> {
    constructor() {
        super("ManifestRetrieveRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestRetrieveRequest>): ManifestRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestRetrieveRequest): ManifestRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestRetrieveRequest
 */
export const ManifestRetrieveRequest = new ManifestRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestRetrieveReply$Type extends MessageType<ManifestRetrieveReply> {
    constructor() {
        super("ManifestRetrieveReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestRetrieveReply>): ManifestRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestRetrieveReply): ManifestRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestRetrieveReply
 */
export const ManifestRetrieveReply = new ManifestRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestGetRequest$Type extends MessageType<ManifestGetRequest> {
    constructor() {
        super("ManifestGetRequest", [
            { no: 1, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "per_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "sort_type", kind: "enum", T: () => ["ManifestGetRequest.SortType", ManifestGetRequest_SortType, "SORT_TYPE_"] },
            { no: 4, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["ManifestModel.Status", ManifestModel_Status, "STATUS_"] },
            { no: 8, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestGetRequest>): ManifestGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.perPage = 0;
        message.sortType = 0;
        message.truckIds = [];
        message.driverIds = [];
        message.trailerIds = [];
        message.statuses = [];
        message.startDate = "";
        message.endDate = "";
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestGetRequest): ManifestGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page */ 1:
                    message.page = reader.int64().toNumber();
                    break;
                case /* int64 per_page */ 2:
                    message.perPage = reader.int64().toNumber();
                    break;
                case /* ManifestGetRequest.SortType sort_type */ 3:
                    message.sortType = reader.int32();
                    break;
                case /* repeated string truck_ids */ 4:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string driver_ids */ 5:
                    message.driverIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 6:
                    message.trailerIds.push(reader.string());
                    break;
                case /* repeated ManifestModel.Status statuses */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statuses.push(reader.int32());
                    else
                        message.statuses.push(reader.int32());
                    break;
                case /* string start_date */ 8:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 9:
                    message.endDate = reader.string();
                    break;
                case /* repeated string load_ids */ 10:
                    message.loadIds.push(reader.string());
                    break;
                case /* optional string search */ 11:
                    message.search = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int64(message.page);
        /* int64 per_page = 2; */
        if (message.perPage !== 0)
            writer.tag(2, WireType.Varint).int64(message.perPage);
        /* ManifestGetRequest.SortType sort_type = 3; */
        if (message.sortType !== 0)
            writer.tag(3, WireType.Varint).int32(message.sortType);
        /* repeated string truck_ids = 4; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string driver_ids = 5; */
        for (let i = 0; i < message.driverIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.driverIds[i]);
        /* repeated string trailer_ids = 6; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* repeated ManifestModel.Status statuses = 7; */
        if (message.statuses.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statuses.length; i++)
                writer.int32(message.statuses[i]);
            writer.join();
        }
        /* string start_date = 8; */
        if (message.startDate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 9; */
        if (message.endDate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.endDate);
        /* repeated string load_ids = 10; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.loadIds[i]);
        /* optional string search = 11; */
        if (message.search !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.search);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestGetRequest
 */
export const ManifestGetRequest = new ManifestGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestGetReply$Type extends MessageType<ManifestGetReply> {
    constructor() {
        super("ManifestGetReply", [
            { no: 1, name: "manifests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Manifest },
            { no: 2, name: "totals", kind: "message", T: () => ManifestGetReply_Totals }
        ]);
    }
    create(value?: PartialMessage<ManifestGetReply>): ManifestGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifests = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestGetReply): ManifestGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestModel.Manifest manifests */ 1:
                    message.manifests.push(ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ManifestGetReply.Totals totals */ 2:
                    message.totals = ManifestGetReply_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestModel.Manifest manifests = 1; */
        for (let i = 0; i < message.manifests.length; i++)
            ManifestModel_Manifest.internalBinaryWrite(message.manifests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ManifestGetReply.Totals totals = 2; */
        if (message.totals)
            ManifestGetReply_Totals.internalBinaryWrite(message.totals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestGetReply
 */
export const ManifestGetReply = new ManifestGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestGetReply_Totals$Type extends MessageType<ManifestGetReply_Totals> {
    constructor() {
        super("ManifestGetReply.Totals", [
            { no: 1, name: "total_gross_amount", kind: "message", T: () => Amount },
            { no: 2, name: "total_distance", kind: "message", T: () => Distance },
            { no: 3, name: "total_loaded_distance", kind: "message", T: () => Distance },
            { no: 4, name: "total_empty_distance", kind: "message", T: () => Distance }
        ]);
    }
    create(value?: PartialMessage<ManifestGetReply_Totals>): ManifestGetReply_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestGetReply_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestGetReply_Totals): ManifestGetReply_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Amount total_gross_amount */ 1:
                    message.totalGrossAmount = Amount.internalBinaryRead(reader, reader.uint32(), options, message.totalGrossAmount);
                    break;
                case /* Distance total_distance */ 2:
                    message.totalDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.totalDistance);
                    break;
                case /* Distance total_loaded_distance */ 3:
                    message.totalLoadedDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.totalLoadedDistance);
                    break;
                case /* Distance total_empty_distance */ 4:
                    message.totalEmptyDistance = Distance.internalBinaryRead(reader, reader.uint32(), options, message.totalEmptyDistance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestGetReply_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Amount total_gross_amount = 1; */
        if (message.totalGrossAmount)
            Amount.internalBinaryWrite(message.totalGrossAmount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Distance total_distance = 2; */
        if (message.totalDistance)
            Distance.internalBinaryWrite(message.totalDistance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Distance total_loaded_distance = 3; */
        if (message.totalLoadedDistance)
            Distance.internalBinaryWrite(message.totalLoadedDistance, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Distance total_empty_distance = 4; */
        if (message.totalEmptyDistance)
            Distance.internalBinaryWrite(message.totalEmptyDistance, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestGetReply.Totals
 */
export const ManifestGetReply_Totals = new ManifestGetReply_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestUnarchivedGetRequest$Type extends MessageType<ManifestUnarchivedGetRequest> {
    constructor() {
        super("ManifestUnarchivedGetRequest", []);
    }
    create(value?: PartialMessage<ManifestUnarchivedGetRequest>): ManifestUnarchivedGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestUnarchivedGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestUnarchivedGetRequest): ManifestUnarchivedGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestUnarchivedGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestUnarchivedGetRequest
 */
export const ManifestUnarchivedGetRequest = new ManifestUnarchivedGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestUnarchivedGetReply$Type extends MessageType<ManifestUnarchivedGetReply> {
    constructor() {
        super("ManifestUnarchivedGetReply", [
            { no: 1, name: "manifests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestUnarchivedGetReply>): ManifestUnarchivedGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifests = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestUnarchivedGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestUnarchivedGetReply): ManifestUnarchivedGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestModel.Manifest manifests */ 1:
                    message.manifests.push(ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestUnarchivedGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestModel.Manifest manifests = 1; */
        for (let i = 0; i < message.manifests.length; i++)
            ManifestModel_Manifest.internalBinaryWrite(message.manifests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestUnarchivedGetReply
 */
export const ManifestUnarchivedGetReply = new ManifestUnarchivedGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestStatsGetRequest$Type extends MessageType<ManifestStatsGetRequest> {
    constructor() {
        super("ManifestStatsGetRequest", [
            { no: 4, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["ManifestModel.Status", ManifestModel_Status, "STATUS_"] },
            { no: 8, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestStatsGetRequest>): ManifestStatsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckIds = [];
        message.driverIds = [];
        message.trailerIds = [];
        message.statuses = [];
        message.startDate = "";
        message.endDate = "";
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestStatsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestStatsGetRequest): ManifestStatsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string truck_ids */ 4:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string driver_ids */ 5:
                    message.driverIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 6:
                    message.trailerIds.push(reader.string());
                    break;
                case /* repeated ManifestModel.Status statuses */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statuses.push(reader.int32());
                    else
                        message.statuses.push(reader.int32());
                    break;
                case /* string start_date */ 8:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 9:
                    message.endDate = reader.string();
                    break;
                case /* repeated string load_ids */ 10:
                    message.loadIds.push(reader.string());
                    break;
                case /* optional string search */ 11:
                    message.search = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestStatsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string truck_ids = 4; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string driver_ids = 5; */
        for (let i = 0; i < message.driverIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.driverIds[i]);
        /* repeated string trailer_ids = 6; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* repeated ManifestModel.Status statuses = 7; */
        if (message.statuses.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statuses.length; i++)
                writer.int32(message.statuses[i]);
            writer.join();
        }
        /* string start_date = 8; */
        if (message.startDate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 9; */
        if (message.endDate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.endDate);
        /* repeated string load_ids = 10; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.loadIds[i]);
        /* optional string search = 11; */
        if (message.search !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.search);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestStatsGetRequest
 */
export const ManifestStatsGetRequest = new ManifestStatsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestStatsGetReply$Type extends MessageType<ManifestStatsGetReply> {
    constructor() {
        super("ManifestStatsGetReply", [
            { no: 1, name: "total_manifests_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<ManifestStatsGetReply>): ManifestStatsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalManifestsCount = 0;
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestStatsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestStatsGetReply): ManifestStatsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_manifests_count */ 1:
                    message.totalManifestsCount = reader.int64().toNumber();
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestStatsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_manifests_count = 1; */
        if (message.totalManifestsCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalManifestsCount);
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestStatsGetReply
 */
export const ManifestStatsGetReply = new ManifestStatsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestCreateFromLoadsRequest$Type extends MessageType<ManifestCreateFromLoadsRequest> {
    constructor() {
        super("ManifestCreateFromLoadsRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gross_currency", kind: "enum", T: () => ["CurrencyCode", CurrencyCode, "CURRENCY_CODE_"] }
        ]);
    }
    create(value?: PartialMessage<ManifestCreateFromLoadsRequest>): ManifestCreateFromLoadsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        message.grossAmount = "";
        message.grossCurrency = 0;
        if (value !== undefined)
            reflectionMergePartial<ManifestCreateFromLoadsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestCreateFromLoadsRequest): ManifestCreateFromLoadsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                case /* string gross_amount */ 2:
                    message.grossAmount = reader.string();
                    break;
                case /* CurrencyCode gross_currency */ 3:
                    message.grossCurrency = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestCreateFromLoadsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        /* string gross_amount = 2; */
        if (message.grossAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.grossAmount);
        /* CurrencyCode gross_currency = 3; */
        if (message.grossCurrency !== 0)
            writer.tag(3, WireType.Varint).int32(message.grossCurrency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestCreateFromLoadsRequest
 */
export const ManifestCreateFromLoadsRequest = new ManifestCreateFromLoadsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestCreateFromLoadsReply$Type extends MessageType<ManifestCreateFromLoadsReply> {
    constructor() {
        super("ManifestCreateFromLoadsReply", [
            { no: 1, name: "manifestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestCreateFromLoadsReply>): ManifestCreateFromLoadsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestCreateFromLoadsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestCreateFromLoadsReply): ManifestCreateFromLoadsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifestId */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestCreateFromLoadsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifestId = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestCreateFromLoadsReply
 */
export const ManifestCreateFromLoadsReply = new ManifestCreateFromLoadsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckAssignRequest$Type extends MessageType<ManifestTruckAssignRequest> {
    constructor() {
        super("ManifestTruckAssignRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckAssignRequest>): ManifestTruckAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckAssignRequest): ManifestTruckAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckAssignRequest
 */
export const ManifestTruckAssignRequest = new ManifestTruckAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckAssignReply$Type extends MessageType<ManifestTruckAssignReply> {
    constructor() {
        super("ManifestTruckAssignReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckAssignReply>): ManifestTruckAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckAssignReply): ManifestTruckAssignReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckAssignReply
 */
export const ManifestTruckAssignReply = new ManifestTruckAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckUnassignRequest$Type extends MessageType<ManifestTruckUnassignRequest> {
    constructor() {
        super("ManifestTruckUnassignRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckUnassignRequest>): ManifestTruckUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckUnassignRequest): ManifestTruckUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckUnassignRequest
 */
export const ManifestTruckUnassignRequest = new ManifestTruckUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckUnassignReply$Type extends MessageType<ManifestTruckUnassignReply> {
    constructor() {
        super("ManifestTruckUnassignReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckUnassignReply>): ManifestTruckUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckUnassignReply): ManifestTruckUnassignReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckUnassignReply
 */
export const ManifestTruckUnassignReply = new ManifestTruckUnassignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTrailerAssignRequest$Type extends MessageType<ManifestTrailerAssignRequest> {
    constructor() {
        super("ManifestTrailerAssignRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestTrailerAssignRequest>): ManifestTrailerAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.trailerId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestTrailerAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTrailerAssignRequest): ManifestTrailerAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string trailer_id */ 2:
                    message.trailerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTrailerAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string trailer_id = 2; */
        if (message.trailerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trailerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTrailerAssignRequest
 */
export const ManifestTrailerAssignRequest = new ManifestTrailerAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTrailerAssignReply$Type extends MessageType<ManifestTrailerAssignReply> {
    constructor() {
        super("ManifestTrailerAssignReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestTrailerAssignReply>): ManifestTrailerAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestTrailerAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTrailerAssignReply): ManifestTrailerAssignReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTrailerAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTrailerAssignReply
 */
export const ManifestTrailerAssignReply = new ManifestTrailerAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestGrossUpdateRequest$Type extends MessageType<ManifestGrossUpdateRequest> {
    constructor() {
        super("ManifestGrossUpdateRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gross_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gross_currency", kind: "enum", T: () => ["CurrencyCode", CurrencyCode, "CURRENCY_CODE_"] }
        ]);
    }
    create(value?: PartialMessage<ManifestGrossUpdateRequest>): ManifestGrossUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.grossAmount = "";
        message.grossCurrency = 0;
        if (value !== undefined)
            reflectionMergePartial<ManifestGrossUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestGrossUpdateRequest): ManifestGrossUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string gross_amount */ 2:
                    message.grossAmount = reader.string();
                    break;
                case /* CurrencyCode gross_currency */ 3:
                    message.grossCurrency = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestGrossUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string gross_amount = 2; */
        if (message.grossAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.grossAmount);
        /* CurrencyCode gross_currency = 3; */
        if (message.grossCurrency !== 0)
            writer.tag(3, WireType.Varint).int32(message.grossCurrency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestGrossUpdateRequest
 */
export const ManifestGrossUpdateRequest = new ManifestGrossUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestGrossUpdateReply$Type extends MessageType<ManifestGrossUpdateReply> {
    constructor() {
        super("ManifestGrossUpdateReply", []);
    }
    create(value?: PartialMessage<ManifestGrossUpdateReply>): ManifestGrossUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestGrossUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestGrossUpdateReply): ManifestGrossUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestGrossUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestGrossUpdateReply
 */
export const ManifestGrossUpdateReply = new ManifestGrossUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestStatusUpdateRequest$Type extends MessageType<ManifestStatusUpdateRequest> {
    constructor() {
        super("ManifestStatusUpdateRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["ManifestModel.Status", ManifestModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<ManifestStatusUpdateRequest>): ManifestStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ManifestStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestStatusUpdateRequest): ManifestStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* ManifestModel.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* ManifestModel.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestStatusUpdateRequest
 */
export const ManifestStatusUpdateRequest = new ManifestStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestStatusUpdateReply$Type extends MessageType<ManifestStatusUpdateReply> {
    constructor() {
        super("ManifestStatusUpdateReply", []);
    }
    create(value?: PartialMessage<ManifestStatusUpdateReply>): ManifestStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestStatusUpdateReply): ManifestStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestStatusUpdateReply
 */
export const ManifestStatusUpdateReply = new ManifestStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverAssignRequest$Type extends MessageType<ManifestDriverAssignRequest> {
    constructor() {
        super("ManifestDriverAssignRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverAssignRequest>): ManifestDriverAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverAssignRequest): ManifestDriverAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverAssignRequest
 */
export const ManifestDriverAssignRequest = new ManifestDriverAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverAssignReply$Type extends MessageType<ManifestDriverAssignReply> {
    constructor() {
        super("ManifestDriverAssignReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverAssignReply>): ManifestDriverAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverAssignReply): ManifestDriverAssignReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverAssignReply
 */
export const ManifestDriverAssignReply = new ManifestDriverAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverUnassignRequest$Type extends MessageType<ManifestDriverUnassignRequest> {
    constructor() {
        super("ManifestDriverUnassignRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverUnassignRequest>): ManifestDriverUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverUnassignRequest): ManifestDriverUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverUnassignRequest
 */
export const ManifestDriverUnassignRequest = new ManifestDriverUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverUnassignReply$Type extends MessageType<ManifestDriverUnassignReply> {
    constructor() {
        super("ManifestDriverUnassignReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverUnassignReply>): ManifestDriverUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverUnassignReply): ManifestDriverUnassignReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverUnassignReply
 */
export const ManifestDriverUnassignReply = new ManifestDriverUnassignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestMergeRequest$Type extends MessageType<ManifestMergeRequest> {
    constructor() {
        super("ManifestMergeRequest", [
            { no: 1, name: "manifest_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "to_manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestMergeRequest>): ManifestMergeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestIds = [];
        message.toManifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestMergeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestMergeRequest): ManifestMergeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string manifest_ids */ 1:
                    message.manifestIds.push(reader.string());
                    break;
                case /* string to_manifest_id */ 2:
                    message.toManifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestMergeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string manifest_ids = 1; */
        for (let i = 0; i < message.manifestIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.manifestIds[i]);
        /* string to_manifest_id = 2; */
        if (message.toManifestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toManifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestMergeRequest
 */
export const ManifestMergeRequest = new ManifestMergeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestMergeReply$Type extends MessageType<ManifestMergeReply> {
    constructor() {
        super("ManifestMergeReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestMergeReply>): ManifestMergeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestMergeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestMergeReply): ManifestMergeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestMergeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestMergeReply
 */
export const ManifestMergeReply = new ManifestMergeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestLoadedDistanceUpdateRequest$Type extends MessageType<ManifestLoadedDistanceUpdateRequest> {
    constructor() {
        super("ManifestLoadedDistanceUpdateRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "miles", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kilometers", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestLoadedDistanceUpdateRequest>): ManifestLoadedDistanceUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestLoadedDistanceUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestLoadedDistanceUpdateRequest): ManifestLoadedDistanceUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* optional string miles */ 2:
                    message.miles = reader.string();
                    break;
                case /* optional string kilometers */ 3:
                    message.kilometers = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestLoadedDistanceUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* optional string miles = 2; */
        if (message.miles !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.miles);
        /* optional string kilometers = 3; */
        if (message.kilometers !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.kilometers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestLoadedDistanceUpdateRequest
 */
export const ManifestLoadedDistanceUpdateRequest = new ManifestLoadedDistanceUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestLoadedDistanceUpdateReply$Type extends MessageType<ManifestLoadedDistanceUpdateReply> {
    constructor() {
        super("ManifestLoadedDistanceUpdateReply", []);
    }
    create(value?: PartialMessage<ManifestLoadedDistanceUpdateReply>): ManifestLoadedDistanceUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestLoadedDistanceUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestLoadedDistanceUpdateReply): ManifestLoadedDistanceUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestLoadedDistanceUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestLoadedDistanceUpdateReply
 */
export const ManifestLoadedDistanceUpdateReply = new ManifestLoadedDistanceUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestEmptyDistanceUpdateRequest$Type extends MessageType<ManifestEmptyDistanceUpdateRequest> {
    constructor() {
        super("ManifestEmptyDistanceUpdateRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "miles", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kilometers", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestEmptyDistanceUpdateRequest>): ManifestEmptyDistanceUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestEmptyDistanceUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestEmptyDistanceUpdateRequest): ManifestEmptyDistanceUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* optional string miles */ 2:
                    message.miles = reader.string();
                    break;
                case /* optional string kilometers */ 3:
                    message.kilometers = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestEmptyDistanceUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* optional string miles = 2; */
        if (message.miles !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.miles);
        /* optional string kilometers = 3; */
        if (message.kilometers !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.kilometers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestEmptyDistanceUpdateRequest
 */
export const ManifestEmptyDistanceUpdateRequest = new ManifestEmptyDistanceUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestEmptyDistanceUpdateReply$Type extends MessageType<ManifestEmptyDistanceUpdateReply> {
    constructor() {
        super("ManifestEmptyDistanceUpdateReply", []);
    }
    create(value?: PartialMessage<ManifestEmptyDistanceUpdateReply>): ManifestEmptyDistanceUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestEmptyDistanceUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestEmptyDistanceUpdateReply): ManifestEmptyDistanceUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestEmptyDistanceUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestEmptyDistanceUpdateReply
 */
export const ManifestEmptyDistanceUpdateReply = new ManifestEmptyDistanceUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckRouteRetrieveRequest$Type extends MessageType<ManifestTruckRouteRetrieveRequest> {
    constructor() {
        super("ManifestTruckRouteRetrieveRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckRouteRetrieveRequest>): ManifestTruckRouteRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckRouteRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckRouteRetrieveRequest): ManifestTruckRouteRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckRouteRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckRouteRetrieveRequest
 */
export const ManifestTruckRouteRetrieveRequest = new ManifestTruckRouteRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckRouteRetrieveReply$Type extends MessageType<ManifestTruckRouteRetrieveReply> {
    constructor() {
        super("ManifestTruckRouteRetrieveReply", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "truck_location", kind: "message", T: () => LocationModel },
            { no: 5, name: "polyline_from_truck_location_to_next_stop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestRouteModel_Stop }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckRouteRetrieveReply>): ManifestTruckRouteRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.truckId = "";
        message.trailerId = "";
        message.polylineFromTruckLocationToNextStop = "";
        message.stops = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckRouteRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckRouteRetrieveReply): ManifestTruckRouteRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 3:
                    message.trailerId = reader.string();
                    break;
                case /* LocationModel truck_location */ 4:
                    message.truckLocation = LocationModel.internalBinaryRead(reader, reader.uint32(), options, message.truckLocation);
                    break;
                case /* string polyline_from_truck_location_to_next_stop */ 5:
                    message.polylineFromTruckLocationToNextStop = reader.string();
                    break;
                case /* repeated ManifestRouteModel.Stop stops */ 6:
                    message.stops.push(ManifestRouteModel_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckRouteRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 3; */
        if (message.trailerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.trailerId);
        /* LocationModel truck_location = 4; */
        if (message.truckLocation)
            LocationModel.internalBinaryWrite(message.truckLocation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string polyline_from_truck_location_to_next_stop = 5; */
        if (message.polylineFromTruckLocationToNextStop !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.polylineFromTruckLocationToNextStop);
        /* repeated ManifestRouteModel.Stop stops = 6; */
        for (let i = 0; i < message.stops.length; i++)
            ManifestRouteModel_Stop.internalBinaryWrite(message.stops[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckRouteRetrieveReply
 */
export const ManifestTruckRouteRetrieveReply = new ManifestTruckRouteRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckEtaStatesGetRequest$Type extends MessageType<ManifestTruckEtaStatesGetRequest> {
    constructor() {
        super("ManifestTruckEtaStatesGetRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckEtaStatesGetRequest>): ManifestTruckEtaStatesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckEtaStatesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckEtaStatesGetRequest): ManifestTruckEtaStatesGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckEtaStatesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckEtaStatesGetRequest
 */
export const ManifestTruckEtaStatesGetRequest = new ManifestTruckEtaStatesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTruckEtaStatesGetReply$Type extends MessageType<ManifestTruckEtaStatesGetReply> {
    constructor() {
        super("ManifestTruckEtaStatesGetReply", [
            { no: 1, name: "eta_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestRouteModel_EtaState }
        ]);
    }
    create(value?: PartialMessage<ManifestTruckEtaStatesGetReply>): ManifestTruckEtaStatesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.etaStates = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestTruckEtaStatesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTruckEtaStatesGetReply): ManifestTruckEtaStatesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestRouteModel.EtaState eta_states */ 1:
                    message.etaStates.push(ManifestRouteModel_EtaState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTruckEtaStatesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestRouteModel.EtaState eta_states = 1; */
        for (let i = 0; i < message.etaStates.length; i++)
            ManifestRouteModel_EtaState.internalBinaryWrite(message.etaStates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTruckEtaStatesGetReply
 */
export const ManifestTruckEtaStatesGetReply = new ManifestTruckEtaStatesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestSplitRequest$Type extends MessageType<ManifestSplitRequest> {
    constructor() {
        super("ManifestSplitRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "last_stop_id", kind: "message", T: () => ManifestModel_StopID },
            { no: 3, name: "dropoff_location", kind: "message", T: () => ManifestSplitRequest_Location },
            { no: 4, name: "dropoff_appointment_start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "dropoff_appointment_end_at", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "pickup_appointment_start_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "pickup_appointment_end_at", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "note", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestSplitRequest>): ManifestSplitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.dropoffAppointmentStartAt = "";
        message.pickupAppointmentStartAt = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestSplitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestSplitRequest): ManifestSplitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* ManifestModel.StopID last_stop_id */ 2:
                    message.lastStopId = ManifestModel_StopID.internalBinaryRead(reader, reader.uint32(), options, message.lastStopId);
                    break;
                case /* ManifestSplitRequest.Location dropoff_location */ 3:
                    message.dropoffLocation = ManifestSplitRequest_Location.internalBinaryRead(reader, reader.uint32(), options, message.dropoffLocation);
                    break;
                case /* string dropoff_appointment_start_at */ 4:
                    message.dropoffAppointmentStartAt = reader.string();
                    break;
                case /* optional string dropoff_appointment_end_at */ 5:
                    message.dropoffAppointmentEndAt = reader.string();
                    break;
                case /* string pickup_appointment_start_at */ 6:
                    message.pickupAppointmentStartAt = reader.string();
                    break;
                case /* optional string pickup_appointment_end_at */ 7:
                    message.pickupAppointmentEndAt = reader.string();
                    break;
                case /* optional string note */ 8:
                    message.note = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestSplitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* ManifestModel.StopID last_stop_id = 2; */
        if (message.lastStopId)
            ManifestModel_StopID.internalBinaryWrite(message.lastStopId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ManifestSplitRequest.Location dropoff_location = 3; */
        if (message.dropoffLocation)
            ManifestSplitRequest_Location.internalBinaryWrite(message.dropoffLocation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string dropoff_appointment_start_at = 4; */
        if (message.dropoffAppointmentStartAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.dropoffAppointmentStartAt);
        /* optional string dropoff_appointment_end_at = 5; */
        if (message.dropoffAppointmentEndAt !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.dropoffAppointmentEndAt);
        /* string pickup_appointment_start_at = 6; */
        if (message.pickupAppointmentStartAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.pickupAppointmentStartAt);
        /* optional string pickup_appointment_end_at = 7; */
        if (message.pickupAppointmentEndAt !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.pickupAppointmentEndAt);
        /* optional string note = 8; */
        if (message.note !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.note);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestSplitRequest
 */
export const ManifestSplitRequest = new ManifestSplitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestSplitRequest_Location$Type extends MessageType<ManifestSplitRequest_Location> {
    constructor() {
        super("ManifestSplitRequest.Location", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "line_2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestSplitRequest_Location>): ManifestSplitRequest_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.lat = 0;
        message.lon = 0;
        message.line1 = "";
        message.city = "";
        message.state = "";
        message.postalCode = "";
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestSplitRequest_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestSplitRequest_Location): ManifestSplitRequest_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 3:
                    message.lon = reader.double();
                    break;
                case /* string line_1 */ 4:
                    message.line1 = reader.string();
                    break;
                case /* optional string line_2 */ 5:
                    message.line2 = reader.string();
                    break;
                case /* string city */ 6:
                    message.city = reader.string();
                    break;
                case /* string state */ 7:
                    message.state = reader.string();
                    break;
                case /* string postal_code */ 8:
                    message.postalCode = reader.string();
                    break;
                case /* string address */ 9:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestSplitRequest_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lon = 3; */
        if (message.lon !== 0)
            writer.tag(3, WireType.Bit64).double(message.lon);
        /* string line_1 = 4; */
        if (message.line1 !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.line1);
        /* optional string line_2 = 5; */
        if (message.line2 !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.line2);
        /* string city = 6; */
        if (message.city !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.city);
        /* string state = 7; */
        if (message.state !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.state);
        /* string postal_code = 8; */
        if (message.postalCode !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.postalCode);
        /* string address = 9; */
        if (message.address !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestSplitRequest.Location
 */
export const ManifestSplitRequest_Location = new ManifestSplitRequest_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestSplitReply$Type extends MessageType<ManifestSplitReply> {
    constructor() {
        super("ManifestSplitReply", [
            { no: 1, name: "manifest", kind: "message", T: () => ManifestModel_Manifest },
            { no: 2, name: "new_manifest", kind: "message", T: () => ManifestModel_Manifest }
        ]);
    }
    create(value?: PartialMessage<ManifestSplitReply>): ManifestSplitReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestSplitReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestSplitReply): ManifestSplitReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ManifestModel.Manifest manifest */ 1:
                    message.manifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                case /* ManifestModel.Manifest new_manifest */ 2:
                    message.newManifest = ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options, message.newManifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestSplitReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ManifestModel.Manifest manifest = 1; */
        if (message.manifest)
            ManifestModel_Manifest.internalBinaryWrite(message.manifest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ManifestModel.Manifest new_manifest = 2; */
        if (message.newManifest)
            ManifestModel_Manifest.internalBinaryWrite(message.newManifest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestSplitReply
 */
export const ManifestSplitReply = new ManifestSplitReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTitleUpdateRequest$Type extends MessageType<ManifestTitleUpdateRequest> {
    constructor() {
        super("ManifestTitleUpdateRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestTitleUpdateRequest>): ManifestTitleUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestTitleUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTitleUpdateRequest): ManifestTitleUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestTitleUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTitleUpdateRequest
 */
export const ManifestTitleUpdateRequest = new ManifestTitleUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestTitleUpdateReply$Type extends MessageType<ManifestTitleUpdateReply> {
    constructor() {
        super("ManifestTitleUpdateReply", []);
    }
    create(value?: PartialMessage<ManifestTitleUpdateReply>): ManifestTitleUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ManifestTitleUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestTitleUpdateReply): ManifestTitleUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManifestTitleUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestTitleUpdateReply
 */
export const ManifestTitleUpdateReply = new ManifestTitleUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestLoadDetailsGetRequest$Type extends MessageType<ManifestLoadDetailsGetRequest> {
    constructor() {
        super("ManifestLoadDetailsGetRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestLoadDetailsGetRequest>): ManifestLoadDetailsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestLoadDetailsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestLoadDetailsGetRequest): ManifestLoadDetailsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestLoadDetailsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestLoadDetailsGetRequest
 */
export const ManifestLoadDetailsGetRequest = new ManifestLoadDetailsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestLoadDetailsGetReply$Type extends MessageType<ManifestLoadDetailsGetReply> {
    constructor() {
        super("ManifestLoadDetailsGetReply", [
            { no: 1, name: "loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Load }
        ]);
    }
    create(value?: PartialMessage<ManifestLoadDetailsGetReply>): ManifestLoadDetailsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loads = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestLoadDetailsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestLoadDetailsGetReply): ManifestLoadDetailsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestModel.Load loads */ 1:
                    message.loads.push(ManifestModel_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestLoadDetailsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestModel.Load loads = 1; */
        for (let i = 0; i < message.loads.length; i++)
            ManifestModel_Load.internalBinaryWrite(message.loads[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestLoadDetailsGetReply
 */
export const ManifestLoadDetailsGetReply = new ManifestLoadDetailsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverGetRequest$Type extends MessageType<ManifestDriverGetRequest> {
    constructor() {
        super("ManifestDriverGetRequest", [
            { no: 1, name: "manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverGetRequest>): ManifestDriverGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.manifestId = "";
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverGetRequest): ManifestDriverGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string manifest_id */ 1:
                    message.manifestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string manifest_id = 1; */
        if (message.manifestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.manifestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverGetRequest
 */
export const ManifestDriverGetRequest = new ManifestDriverGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManifestDriverGetReply$Type extends MessageType<ManifestDriverGetReply> {
    constructor() {
        super("ManifestDriverGetReply", [
            { no: 1, name: "drivers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Driver }
        ]);
    }
    create(value?: PartialMessage<ManifestDriverGetReply>): ManifestDriverGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.drivers = [];
        if (value !== undefined)
            reflectionMergePartial<ManifestDriverGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManifestDriverGetReply): ManifestDriverGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ManifestModel.Driver drivers */ 1:
                    message.drivers.push(ManifestModel_Driver.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManifestDriverGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ManifestModel.Driver drivers = 1; */
        for (let i = 0; i < message.drivers.length; i++)
            ManifestModel_Driver.internalBinaryWrite(message.drivers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ManifestDriverGetReply
 */
export const ManifestDriverGetReply = new ManifestDriverGetReply$Type();
/**
 * @generated ServiceType for protobuf service ManifestsService
 */
export const ManifestsService = new ServiceType("ManifestsService", [
    { name: "ManifestCreate", options: {}, I: ManifestCreateRequest, O: ManifestCreateReply },
    { name: "ManifestDelete", options: {}, I: ManifestDeleteRequest, O: ManifestDeleteReply },
    { name: "ManifestRetrieve", options: {}, I: ManifestRetrieveRequest, O: ManifestRetrieveReply },
    { name: "ManifestGet", options: {}, I: ManifestGetRequest, O: ManifestGetReply },
    { name: "ManifestUnarchivedGet", options: {}, I: ManifestUnarchivedGetRequest, O: ManifestUnarchivedGetReply },
    { name: "ManifestStatsGet", options: {}, I: ManifestStatsGetRequest, O: ManifestStatsGetReply },
    { name: "ManifestCreateFromLoads", options: {}, I: ManifestCreateFromLoadsRequest, O: ManifestCreateFromLoadsReply },
    { name: "ManifestGrossUpdate", options: {}, I: ManifestGrossUpdateRequest, O: ManifestGrossUpdateReply },
    { name: "ManifestStatusUpdate", options: {}, I: ManifestStatusUpdateRequest, O: ManifestStatusUpdateReply },
    { name: "ManifestTruckAssign", options: {}, I: ManifestTruckAssignRequest, O: ManifestTruckAssignReply },
    { name: "ManifestTruckUnassign", options: {}, I: ManifestTruckUnassignRequest, O: ManifestTruckUnassignReply },
    { name: "ManifestTrailerAssign", options: {}, I: ManifestTrailerAssignRequest, O: ManifestTrailerAssignReply },
    { name: "ManifestDriverGet", options: {}, I: ManifestDriverGetRequest, O: ManifestDriverGetReply },
    { name: "ManifestDriverAssign", options: {}, I: ManifestDriverAssignRequest, O: ManifestDriverAssignReply },
    { name: "ManifestDriverUnassign", options: {}, I: ManifestDriverUnassignRequest, O: ManifestDriverUnassignReply },
    { name: "ManifestLoadedDistanceUpdate", options: {}, I: ManifestLoadedDistanceUpdateRequest, O: ManifestLoadedDistanceUpdateReply },
    { name: "ManifestEmptyDistanceUpdate", options: {}, I: ManifestEmptyDistanceUpdateRequest, O: ManifestEmptyDistanceUpdateReply },
    { name: "ManifestTitleUpdate", options: {}, I: ManifestTitleUpdateRequest, O: ManifestTitleUpdateReply },
    { name: "ManifestLoadDetailsGet", options: {}, I: ManifestLoadDetailsGetRequest, O: ManifestLoadDetailsGetReply },
    { name: "ManifestMerge", options: {}, I: ManifestMergeRequest, O: ManifestMergeReply },
    { name: "ManifestSplit", options: {}, I: ManifestSplitRequest, O: ManifestSplitReply },
    { name: "ManifestTruckRouteRetrieve", options: {}, I: ManifestTruckRouteRetrieveRequest, O: ManifestTruckRouteRetrieveReply },
    { name: "ManifestTruckEtaStatesGet", options: {}, I: ManifestTruckEtaStatesGetRequest, O: ManifestTruckEtaStatesGetReply }
]);
