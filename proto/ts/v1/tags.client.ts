// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/tags.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TagsService } from "./tags";
import type { TagEntityGetReply } from "./tags";
import type { TagEntityGetRequest } from "./tags";
import type { TagUnassignReply } from "./tags";
import type { TagUnassignRequest } from "./tags";
import type { TagAssignReply } from "./tags";
import type { TagAssignRequest } from "./tags";
import type { TagGetReply } from "./tags";
import type { TagGetRequest } from "./tags";
import type { TagDeleteReply } from "./tags";
import type { TagDeleteRequest } from "./tags";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TagCreateReply } from "./tags";
import type { TagCreateRequest } from "./tags";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service TagsService
 */
export interface ITagsServiceClient {
    /**
     * @generated from protobuf rpc: TagCreate(TagCreateRequest) returns (TagCreateReply);
     */
    tagCreate(input: TagCreateRequest, options?: RpcOptions): UnaryCall<TagCreateRequest, TagCreateReply>;
    /**
     * @generated from protobuf rpc: TagDelete(TagDeleteRequest) returns (TagDeleteReply);
     */
    tagDelete(input: TagDeleteRequest, options?: RpcOptions): UnaryCall<TagDeleteRequest, TagDeleteReply>;
    /**
     * @generated from protobuf rpc: TagGet(TagGetRequest) returns (TagGetReply);
     */
    tagGet(input: TagGetRequest, options?: RpcOptions): UnaryCall<TagGetRequest, TagGetReply>;
    /**
     * @generated from protobuf rpc: TagAssign(TagAssignRequest) returns (TagAssignReply);
     */
    tagAssign(input: TagAssignRequest, options?: RpcOptions): UnaryCall<TagAssignRequest, TagAssignReply>;
    /**
     * @generated from protobuf rpc: TagUnassign(TagUnassignRequest) returns (TagUnassignReply);
     */
    tagUnassign(input: TagUnassignRequest, options?: RpcOptions): UnaryCall<TagUnassignRequest, TagUnassignReply>;
    /**
     * @generated from protobuf rpc: TagEntityGet(TagEntityGetRequest) returns (TagEntityGetReply);
     */
    tagEntityGet(input: TagEntityGetRequest, options?: RpcOptions): UnaryCall<TagEntityGetRequest, TagEntityGetReply>;
}
/**
 * @generated from protobuf service TagsService
 */
export class TagsServiceClient implements ITagsServiceClient, ServiceInfo {
    typeName = TagsService.typeName;
    methods = TagsService.methods;
    options = TagsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: TagCreate(TagCreateRequest) returns (TagCreateReply);
     */
    tagCreate(input: TagCreateRequest, options?: RpcOptions): UnaryCall<TagCreateRequest, TagCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagCreateRequest, TagCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TagDelete(TagDeleteRequest) returns (TagDeleteReply);
     */
    tagDelete(input: TagDeleteRequest, options?: RpcOptions): UnaryCall<TagDeleteRequest, TagDeleteReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagDeleteRequest, TagDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TagGet(TagGetRequest) returns (TagGetReply);
     */
    tagGet(input: TagGetRequest, options?: RpcOptions): UnaryCall<TagGetRequest, TagGetReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagGetRequest, TagGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TagAssign(TagAssignRequest) returns (TagAssignReply);
     */
    tagAssign(input: TagAssignRequest, options?: RpcOptions): UnaryCall<TagAssignRequest, TagAssignReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagAssignRequest, TagAssignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TagUnassign(TagUnassignRequest) returns (TagUnassignReply);
     */
    tagUnassign(input: TagUnassignRequest, options?: RpcOptions): UnaryCall<TagUnassignRequest, TagUnassignReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagUnassignRequest, TagUnassignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TagEntityGet(TagEntityGetRequest) returns (TagEntityGetReply);
     */
    tagEntityGet(input: TagEntityGetRequest, options?: RpcOptions): UnaryCall<TagEntityGetRequest, TagEntityGetReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagEntityGetRequest, TagEntityGetReply>("unary", this._transport, method, opt, input);
    }
}
