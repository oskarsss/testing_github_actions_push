// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/commodities.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommoditiesService } from "./commodities";
import type { CommodityGetForLoadReply } from "./commodities";
import type { CommodityGetForLoadRequest } from "./commodities";
import type { CommodityDeleteReply } from "./commodities";
import type { CommodityDeleteRequest } from "./commodities";
import type { CommodityUpdateReply } from "./commodities";
import type { CommodityUpdateRequest } from "./commodities";
import type { CommodityRetrieveReply } from "./commodities";
import type { CommodityRetrieveRequest } from "./commodities";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CommodityCreateReply } from "./commodities";
import type { CommodityCreateRequest } from "./commodities";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service CommoditiesService
 */
export interface ICommoditiesServiceClient {
    /**
     * @generated from protobuf rpc: CommodityCreate(CommodityCreateRequest) returns (CommodityCreateReply);
     */
    commodityCreate(input: CommodityCreateRequest, options?: RpcOptions): UnaryCall<CommodityCreateRequest, CommodityCreateReply>;
    /**
     * @generated from protobuf rpc: CommodityRetrieve(CommodityRetrieveRequest) returns (CommodityRetrieveReply);
     */
    commodityRetrieve(input: CommodityRetrieveRequest, options?: RpcOptions): UnaryCall<CommodityRetrieveRequest, CommodityRetrieveReply>;
    /**
     * @generated from protobuf rpc: CommodityUpdate(CommodityUpdateRequest) returns (CommodityUpdateReply);
     */
    commodityUpdate(input: CommodityUpdateRequest, options?: RpcOptions): UnaryCall<CommodityUpdateRequest, CommodityUpdateReply>;
    /**
     * @generated from protobuf rpc: CommodityDelete(CommodityDeleteRequest) returns (CommodityDeleteReply);
     */
    commodityDelete(input: CommodityDeleteRequest, options?: RpcOptions): UnaryCall<CommodityDeleteRequest, CommodityDeleteReply>;
    /**
     * @generated from protobuf rpc: CommodityGetForLoad(CommodityGetForLoadRequest) returns (CommodityGetForLoadReply);
     */
    commodityGetForLoad(input: CommodityGetForLoadRequest, options?: RpcOptions): UnaryCall<CommodityGetForLoadRequest, CommodityGetForLoadReply>;
}
/**
 * @generated from protobuf service CommoditiesService
 */
export class CommoditiesServiceClient implements ICommoditiesServiceClient, ServiceInfo {
    typeName = CommoditiesService.typeName;
    methods = CommoditiesService.methods;
    options = CommoditiesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CommodityCreate(CommodityCreateRequest) returns (CommodityCreateReply);
     */
    commodityCreate(input: CommodityCreateRequest, options?: RpcOptions): UnaryCall<CommodityCreateRequest, CommodityCreateReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommodityCreateRequest, CommodityCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CommodityRetrieve(CommodityRetrieveRequest) returns (CommodityRetrieveReply);
     */
    commodityRetrieve(input: CommodityRetrieveRequest, options?: RpcOptions): UnaryCall<CommodityRetrieveRequest, CommodityRetrieveReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommodityRetrieveRequest, CommodityRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CommodityUpdate(CommodityUpdateRequest) returns (CommodityUpdateReply);
     */
    commodityUpdate(input: CommodityUpdateRequest, options?: RpcOptions): UnaryCall<CommodityUpdateRequest, CommodityUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommodityUpdateRequest, CommodityUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CommodityDelete(CommodityDeleteRequest) returns (CommodityDeleteReply);
     */
    commodityDelete(input: CommodityDeleteRequest, options?: RpcOptions): UnaryCall<CommodityDeleteRequest, CommodityDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommodityDeleteRequest, CommodityDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CommodityGetForLoad(CommodityGetForLoadRequest) returns (CommodityGetForLoadReply);
     */
    commodityGetForLoad(input: CommodityGetForLoadRequest, options?: RpcOptions): UnaryCall<CommodityGetForLoadRequest, CommodityGetForLoadReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommodityGetForLoadRequest, CommodityGetForLoadReply>("unary", this._transport, method, opt, input);
    }
}
