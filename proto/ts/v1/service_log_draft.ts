// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_log_draft.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceLogDraftModel_ServiceLogHeader } from "./models/model_service_log_draft";
import { UserDraftModel_UserDraftRead } from "./models/model_user_draft";
import { ServiceLogDraftModel_ServiceLog } from "./models/model_service_log_draft";
import { UserDraftModel_UserDraftWrite } from "./models/model_user_draft";
import { ServiceLogItemModel_Error } from "./models/model_service_log_item";
import { ServiceLogModel_ServiceLogRead } from "./models/model_service_log";
/**
 * Create
 *
 * @generated from protobuf message ServiceLogDraftCreateRequest
 */
export interface ServiceLogDraftCreateRequest {
}
/**
 * @generated from protobuf message ServiceLogDraftCreateReply
 */
export interface ServiceLogDraftCreateReply {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
}
/**
 * @generated from protobuf message ServiceLogDraftFromSLCreateRequest
 */
export interface ServiceLogDraftFromSLCreateRequest {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
}
/**
 * @generated from protobuf message ServiceLogDraftFromSLCreateReply
 */
export interface ServiceLogDraftFromSLCreateReply {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
}
/**
 * Create Service Log
 *
 * @generated from protobuf message ServiceLogDraftServiceLogCreateRequest
 */
export interface ServiceLogDraftServiceLogCreateRequest {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
}
/**
 * @generated from protobuf message ServiceLogDraftServiceLogCreateReply
 */
export interface ServiceLogDraftServiceLogCreateReply {
    /**
     * @generated from protobuf field: ServiceLogModel.ServiceLogRead log = 1;
     */
    log?: ServiceLogModel_ServiceLogRead;
    /**
     * @generated from protobuf field: repeated string item_ids = 2;
     */
    itemIds: string[];
    /**
     * @generated from protobuf field: repeated ServiceLogItemModel.Error item_errors = 3;
     */
    itemErrors: ServiceLogItemModel_Error[];
}
/**
 * Update
 *
 * @generated from protobuf message ServiceLogDraftUpdateRequest
 */
export interface ServiceLogDraftUpdateRequest {
    /**
     * @generated from protobuf field: UserDraftModel.UserDraftWrite draft = 1;
     */
    draft?: UserDraftModel_UserDraftWrite;
    /**
     * @generated from protobuf field: ServiceLogDraftModel.ServiceLog log = 2;
     */
    log?: ServiceLogDraftModel_ServiceLog;
}
/**
 * @generated from protobuf message ServiceLogDraftUpdateReply
 */
export interface ServiceLogDraftUpdateReply {
}
/**
 * Retrieve
 *
 * @generated from protobuf message ServiceLogDraftRetrieveRequest
 */
export interface ServiceLogDraftRetrieveRequest {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
}
/**
 * @generated from protobuf message ServiceLogDraftRetrieveReply
 */
export interface ServiceLogDraftRetrieveReply {
    /**
     * @generated from protobuf field: UserDraftModel.UserDraftRead draft = 1;
     */
    draft?: UserDraftModel_UserDraftRead;
    /**
     * @generated from protobuf field: ServiceLogDraftModel.ServiceLog log = 2;
     */
    log?: ServiceLogDraftModel_ServiceLog;
}
/**
 * Get
 *
 * @generated from protobuf message ServiceLogDraftGetRequest
 */
export interface ServiceLogDraftGetRequest {
}
/**
 * @generated from protobuf message ServiceLogDraftGetReply
 */
export interface ServiceLogDraftGetReply {
    /**
     * @generated from protobuf field: repeated ServiceLogDraftGetReply.Draft drafts = 1;
     */
    drafts: ServiceLogDraftGetReply_Draft[];
}
/**
 * @generated from protobuf message ServiceLogDraftGetReply.Draft
 */
export interface ServiceLogDraftGetReply_Draft {
    /**
     * @generated from protobuf field: UserDraftModel.UserDraftRead draft = 1;
     */
    draft?: UserDraftModel_UserDraftRead;
    /**
     * @generated from protobuf field: ServiceLogDraftModel.ServiceLogHeader log = 2;
     */
    log?: ServiceLogDraftModel_ServiceLogHeader;
}
/**
 * Delete
 *
 * @generated from protobuf message ServiceLogDraftDeleteRequest
 */
export interface ServiceLogDraftDeleteRequest {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
}
/**
 * @generated from protobuf message ServiceLogDraftDeleteReply
 */
export interface ServiceLogDraftDeleteReply {
}
/**
 * Delete All
 *
 * @generated from protobuf message ServiceLogDraftDeleteAllRequest
 */
export interface ServiceLogDraftDeleteAllRequest {
}
/**
 * @generated from protobuf message ServiceLogDraftDeleteAllReply
 */
export interface ServiceLogDraftDeleteAllReply {
}
/**
 * Start Extract
 *
 * @generated from protobuf message ServiceLogStartExtractRequest
 */
export interface ServiceLogStartExtractRequest {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
    /**
     * @generated from protobuf field: string file_id = 2;
     */
    fileId: string;
    /**
     * @generated from protobuf field: string file_name = 3;
     */
    fileName: string;
}
/**
 * @generated from protobuf message ServiceLogStartExtractReply
 */
export interface ServiceLogStartExtractReply {
}
/**
 * Cancel Extract
 *
 * @generated from protobuf message ServiceLogCancelExtractRequest
 */
export interface ServiceLogCancelExtractRequest {
    /**
     * @generated from protobuf field: string draft_id = 1;
     */
    draftId: string;
}
/**
 * @generated from protobuf message ServiceLogCancelExtractReply
 */
export interface ServiceLogCancelExtractReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftCreateRequest$Type extends MessageType<ServiceLogDraftCreateRequest> {
    constructor() {
        super("ServiceLogDraftCreateRequest", []);
    }
    create(value?: PartialMessage<ServiceLogDraftCreateRequest>): ServiceLogDraftCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftCreateRequest): ServiceLogDraftCreateRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftCreateRequest
 */
export const ServiceLogDraftCreateRequest = new ServiceLogDraftCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftCreateReply$Type extends MessageType<ServiceLogDraftCreateReply> {
    constructor() {
        super("ServiceLogDraftCreateReply", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftCreateReply>): ServiceLogDraftCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftCreateReply): ServiceLogDraftCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftCreateReply
 */
export const ServiceLogDraftCreateReply = new ServiceLogDraftCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftFromSLCreateRequest$Type extends MessageType<ServiceLogDraftFromSLCreateRequest> {
    constructor() {
        super("ServiceLogDraftFromSLCreateRequest", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftFromSLCreateRequest>): ServiceLogDraftFromSLCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftFromSLCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftFromSLCreateRequest): ServiceLogDraftFromSLCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftFromSLCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftFromSLCreateRequest
 */
export const ServiceLogDraftFromSLCreateRequest = new ServiceLogDraftFromSLCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftFromSLCreateReply$Type extends MessageType<ServiceLogDraftFromSLCreateReply> {
    constructor() {
        super("ServiceLogDraftFromSLCreateReply", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftFromSLCreateReply>): ServiceLogDraftFromSLCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftFromSLCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftFromSLCreateReply): ServiceLogDraftFromSLCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftFromSLCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftFromSLCreateReply
 */
export const ServiceLogDraftFromSLCreateReply = new ServiceLogDraftFromSLCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftServiceLogCreateRequest$Type extends MessageType<ServiceLogDraftServiceLogCreateRequest> {
    constructor() {
        super("ServiceLogDraftServiceLogCreateRequest", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftServiceLogCreateRequest>): ServiceLogDraftServiceLogCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftServiceLogCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftServiceLogCreateRequest): ServiceLogDraftServiceLogCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftServiceLogCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftServiceLogCreateRequest
 */
export const ServiceLogDraftServiceLogCreateRequest = new ServiceLogDraftServiceLogCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftServiceLogCreateReply$Type extends MessageType<ServiceLogDraftServiceLogCreateReply> {
    constructor() {
        super("ServiceLogDraftServiceLogCreateReply", [
            { no: 1, name: "log", kind: "message", T: () => ServiceLogModel_ServiceLogRead },
            { no: 2, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceLogItemModel_Error }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftServiceLogCreateReply>): ServiceLogDraftServiceLogCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        message.itemErrors = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftServiceLogCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftServiceLogCreateReply): ServiceLogDraftServiceLogCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceLogModel.ServiceLogRead log */ 1:
                    message.log = ServiceLogModel_ServiceLogRead.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                case /* repeated string item_ids */ 2:
                    message.itemIds.push(reader.string());
                    break;
                case /* repeated ServiceLogItemModel.Error item_errors */ 3:
                    message.itemErrors.push(ServiceLogItemModel_Error.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftServiceLogCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceLogModel.ServiceLogRead log = 1; */
        if (message.log)
            ServiceLogModel_ServiceLogRead.internalBinaryWrite(message.log, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string item_ids = 2; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.itemIds[i]);
        /* repeated ServiceLogItemModel.Error item_errors = 3; */
        for (let i = 0; i < message.itemErrors.length; i++)
            ServiceLogItemModel_Error.internalBinaryWrite(message.itemErrors[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftServiceLogCreateReply
 */
export const ServiceLogDraftServiceLogCreateReply = new ServiceLogDraftServiceLogCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftUpdateRequest$Type extends MessageType<ServiceLogDraftUpdateRequest> {
    constructor() {
        super("ServiceLogDraftUpdateRequest", [
            { no: 1, name: "draft", kind: "message", T: () => UserDraftModel_UserDraftWrite },
            { no: 2, name: "log", kind: "message", T: () => ServiceLogDraftModel_ServiceLog }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftUpdateRequest>): ServiceLogDraftUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftUpdateRequest): ServiceLogDraftUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UserDraftModel.UserDraftWrite draft */ 1:
                    message.draft = UserDraftModel_UserDraftWrite.internalBinaryRead(reader, reader.uint32(), options, message.draft);
                    break;
                case /* ServiceLogDraftModel.ServiceLog log */ 2:
                    message.log = ServiceLogDraftModel_ServiceLog.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UserDraftModel.UserDraftWrite draft = 1; */
        if (message.draft)
            UserDraftModel_UserDraftWrite.internalBinaryWrite(message.draft, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ServiceLogDraftModel.ServiceLog log = 2; */
        if (message.log)
            ServiceLogDraftModel_ServiceLog.internalBinaryWrite(message.log, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftUpdateRequest
 */
export const ServiceLogDraftUpdateRequest = new ServiceLogDraftUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftUpdateReply$Type extends MessageType<ServiceLogDraftUpdateReply> {
    constructor() {
        super("ServiceLogDraftUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceLogDraftUpdateReply>): ServiceLogDraftUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftUpdateReply): ServiceLogDraftUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftUpdateReply
 */
export const ServiceLogDraftUpdateReply = new ServiceLogDraftUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftRetrieveRequest$Type extends MessageType<ServiceLogDraftRetrieveRequest> {
    constructor() {
        super("ServiceLogDraftRetrieveRequest", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftRetrieveRequest>): ServiceLogDraftRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftRetrieveRequest): ServiceLogDraftRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftRetrieveRequest
 */
export const ServiceLogDraftRetrieveRequest = new ServiceLogDraftRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftRetrieveReply$Type extends MessageType<ServiceLogDraftRetrieveReply> {
    constructor() {
        super("ServiceLogDraftRetrieveReply", [
            { no: 1, name: "draft", kind: "message", T: () => UserDraftModel_UserDraftRead },
            { no: 2, name: "log", kind: "message", T: () => ServiceLogDraftModel_ServiceLog }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftRetrieveReply>): ServiceLogDraftRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftRetrieveReply): ServiceLogDraftRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UserDraftModel.UserDraftRead draft */ 1:
                    message.draft = UserDraftModel_UserDraftRead.internalBinaryRead(reader, reader.uint32(), options, message.draft);
                    break;
                case /* ServiceLogDraftModel.ServiceLog log */ 2:
                    message.log = ServiceLogDraftModel_ServiceLog.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UserDraftModel.UserDraftRead draft = 1; */
        if (message.draft)
            UserDraftModel_UserDraftRead.internalBinaryWrite(message.draft, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ServiceLogDraftModel.ServiceLog log = 2; */
        if (message.log)
            ServiceLogDraftModel_ServiceLog.internalBinaryWrite(message.log, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftRetrieveReply
 */
export const ServiceLogDraftRetrieveReply = new ServiceLogDraftRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftGetRequest$Type extends MessageType<ServiceLogDraftGetRequest> {
    constructor() {
        super("ServiceLogDraftGetRequest", []);
    }
    create(value?: PartialMessage<ServiceLogDraftGetRequest>): ServiceLogDraftGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftGetRequest): ServiceLogDraftGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftGetRequest
 */
export const ServiceLogDraftGetRequest = new ServiceLogDraftGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftGetReply$Type extends MessageType<ServiceLogDraftGetReply> {
    constructor() {
        super("ServiceLogDraftGetReply", [
            { no: 1, name: "drafts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceLogDraftGetReply_Draft }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftGetReply>): ServiceLogDraftGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.drafts = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftGetReply): ServiceLogDraftGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceLogDraftGetReply.Draft drafts */ 1:
                    message.drafts.push(ServiceLogDraftGetReply_Draft.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceLogDraftGetReply.Draft drafts = 1; */
        for (let i = 0; i < message.drafts.length; i++)
            ServiceLogDraftGetReply_Draft.internalBinaryWrite(message.drafts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftGetReply
 */
export const ServiceLogDraftGetReply = new ServiceLogDraftGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftGetReply_Draft$Type extends MessageType<ServiceLogDraftGetReply_Draft> {
    constructor() {
        super("ServiceLogDraftGetReply.Draft", [
            { no: 1, name: "draft", kind: "message", T: () => UserDraftModel_UserDraftRead },
            { no: 2, name: "log", kind: "message", T: () => ServiceLogDraftModel_ServiceLogHeader }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftGetReply_Draft>): ServiceLogDraftGetReply_Draft {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftGetReply_Draft>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftGetReply_Draft): ServiceLogDraftGetReply_Draft {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UserDraftModel.UserDraftRead draft */ 1:
                    message.draft = UserDraftModel_UserDraftRead.internalBinaryRead(reader, reader.uint32(), options, message.draft);
                    break;
                case /* ServiceLogDraftModel.ServiceLogHeader log */ 2:
                    message.log = ServiceLogDraftModel_ServiceLogHeader.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftGetReply_Draft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UserDraftModel.UserDraftRead draft = 1; */
        if (message.draft)
            UserDraftModel_UserDraftRead.internalBinaryWrite(message.draft, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ServiceLogDraftModel.ServiceLogHeader log = 2; */
        if (message.log)
            ServiceLogDraftModel_ServiceLogHeader.internalBinaryWrite(message.log, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftGetReply.Draft
 */
export const ServiceLogDraftGetReply_Draft = new ServiceLogDraftGetReply_Draft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftDeleteRequest$Type extends MessageType<ServiceLogDraftDeleteRequest> {
    constructor() {
        super("ServiceLogDraftDeleteRequest", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftDeleteRequest>): ServiceLogDraftDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftDeleteRequest): ServiceLogDraftDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftDeleteRequest
 */
export const ServiceLogDraftDeleteRequest = new ServiceLogDraftDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftDeleteReply$Type extends MessageType<ServiceLogDraftDeleteReply> {
    constructor() {
        super("ServiceLogDraftDeleteReply", []);
    }
    create(value?: PartialMessage<ServiceLogDraftDeleteReply>): ServiceLogDraftDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftDeleteReply): ServiceLogDraftDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftDeleteReply
 */
export const ServiceLogDraftDeleteReply = new ServiceLogDraftDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftDeleteAllRequest$Type extends MessageType<ServiceLogDraftDeleteAllRequest> {
    constructor() {
        super("ServiceLogDraftDeleteAllRequest", []);
    }
    create(value?: PartialMessage<ServiceLogDraftDeleteAllRequest>): ServiceLogDraftDeleteAllRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftDeleteAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftDeleteAllRequest): ServiceLogDraftDeleteAllRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftDeleteAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftDeleteAllRequest
 */
export const ServiceLogDraftDeleteAllRequest = new ServiceLogDraftDeleteAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftDeleteAllReply$Type extends MessageType<ServiceLogDraftDeleteAllReply> {
    constructor() {
        super("ServiceLogDraftDeleteAllReply", []);
    }
    create(value?: PartialMessage<ServiceLogDraftDeleteAllReply>): ServiceLogDraftDeleteAllReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftDeleteAllReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftDeleteAllReply): ServiceLogDraftDeleteAllReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftDeleteAllReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftDeleteAllReply
 */
export const ServiceLogDraftDeleteAllReply = new ServiceLogDraftDeleteAllReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogStartExtractRequest$Type extends MessageType<ServiceLogStartExtractRequest> {
    constructor() {
        super("ServiceLogStartExtractRequest", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogStartExtractRequest>): ServiceLogStartExtractRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        message.fileId = "";
        message.fileName = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogStartExtractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogStartExtractRequest): ServiceLogStartExtractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                case /* string file_id */ 2:
                    message.fileId = reader.string();
                    break;
                case /* string file_name */ 3:
                    message.fileName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogStartExtractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        /* string file_id = 2; */
        if (message.fileId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileId);
        /* string file_name = 3; */
        if (message.fileName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fileName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogStartExtractRequest
 */
export const ServiceLogStartExtractRequest = new ServiceLogStartExtractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogStartExtractReply$Type extends MessageType<ServiceLogStartExtractReply> {
    constructor() {
        super("ServiceLogStartExtractReply", []);
    }
    create(value?: PartialMessage<ServiceLogStartExtractReply>): ServiceLogStartExtractReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogStartExtractReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogStartExtractReply): ServiceLogStartExtractReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogStartExtractReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogStartExtractReply
 */
export const ServiceLogStartExtractReply = new ServiceLogStartExtractReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogCancelExtractRequest$Type extends MessageType<ServiceLogCancelExtractRequest> {
    constructor() {
        super("ServiceLogCancelExtractRequest", [
            { no: 1, name: "draft_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogCancelExtractRequest>): ServiceLogCancelExtractRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.draftId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogCancelExtractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogCancelExtractRequest): ServiceLogCancelExtractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string draft_id */ 1:
                    message.draftId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogCancelExtractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string draft_id = 1; */
        if (message.draftId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.draftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogCancelExtractRequest
 */
export const ServiceLogCancelExtractRequest = new ServiceLogCancelExtractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogCancelExtractReply$Type extends MessageType<ServiceLogCancelExtractReply> {
    constructor() {
        super("ServiceLogCancelExtractReply", []);
    }
    create(value?: PartialMessage<ServiceLogCancelExtractReply>): ServiceLogCancelExtractReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogCancelExtractReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogCancelExtractReply): ServiceLogCancelExtractReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogCancelExtractReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogCancelExtractReply
 */
export const ServiceLogCancelExtractReply = new ServiceLogCancelExtractReply$Type();
/**
 * @generated ServiceType for protobuf service ServiceLogDraftService
 */
export const ServiceLogDraftService = new ServiceType("ServiceLogDraftService", [
    { name: "ServiceLogDraftCreate", options: {}, I: ServiceLogDraftCreateRequest, O: ServiceLogDraftCreateReply },
    { name: "ServiceLogDraftFromSLCreate", options: {}, I: ServiceLogDraftFromSLCreateRequest, O: ServiceLogDraftFromSLCreateReply },
    { name: "ServiceLogDraftServiceLogCreate", options: {}, I: ServiceLogDraftServiceLogCreateRequest, O: ServiceLogDraftServiceLogCreateReply },
    { name: "ServiceLogDraftGet", options: {}, I: ServiceLogDraftGetRequest, O: ServiceLogDraftGetReply },
    { name: "ServiceLogDraftRetrieve", options: {}, I: ServiceLogDraftRetrieveRequest, O: ServiceLogDraftRetrieveReply },
    { name: "ServiceLogDraftUpdate", options: {}, I: ServiceLogDraftUpdateRequest, O: ServiceLogDraftUpdateReply },
    { name: "ServiceLogDraftDelete", options: {}, I: ServiceLogDraftDeleteRequest, O: ServiceLogDraftDeleteReply },
    { name: "ServiceLogDraftDeleteAll", options: {}, I: ServiceLogDraftDeleteAllRequest, O: ServiceLogDraftDeleteAllReply },
    { name: "ServiceLogStartExtract", options: {}, I: ServiceLogStartExtractRequest, O: ServiceLogStartExtractReply },
    { name: "ServiceLogCancelExtract", options: {}, I: ServiceLogCancelExtractRequest, O: ServiceLogCancelExtractReply }
]);
