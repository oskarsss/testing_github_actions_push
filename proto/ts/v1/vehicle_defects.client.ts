// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/vehicle_defects.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VehicleDefectsService } from "./vehicle_defects";
import type { DefectDeleteReply } from "./vehicle_defects";
import type { DefectDeleteRequest } from "./vehicle_defects";
import type { DefectUpdateReply } from "./vehicle_defects";
import type { DefectUpdateRequest } from "./vehicle_defects";
import type { DefectsGetReply } from "./vehicle_defects";
import type { DefectsGetRequest } from "./vehicle_defects";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DefectRetrieveReply } from "./vehicle_defects";
import type { DefectRetrieveRequest } from "./vehicle_defects";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service VehicleDefectsService
 */
export interface IVehicleDefectsServiceClient {
    /**
     * @generated from protobuf rpc: DefectRetrieve(DefectRetrieveRequest) returns (DefectRetrieveReply);
     */
    defectRetrieve(input: DefectRetrieveRequest, options?: RpcOptions): UnaryCall<DefectRetrieveRequest, DefectRetrieveReply>;
    /**
     * @generated from protobuf rpc: DefectsGet(DefectsGetRequest) returns (DefectsGetReply);
     */
    defectsGet(input: DefectsGetRequest, options?: RpcOptions): UnaryCall<DefectsGetRequest, DefectsGetReply>;
    /**
     * @generated from protobuf rpc: DefectUpdate(DefectUpdateRequest) returns (DefectUpdateReply);
     */
    defectUpdate(input: DefectUpdateRequest, options?: RpcOptions): UnaryCall<DefectUpdateRequest, DefectUpdateReply>;
    /**
     * @generated from protobuf rpc: DefectDelete(DefectDeleteRequest) returns (DefectDeleteReply);
     */
    defectDelete(input: DefectDeleteRequest, options?: RpcOptions): UnaryCall<DefectDeleteRequest, DefectDeleteReply>;
}
/**
 * @generated from protobuf service VehicleDefectsService
 */
export class VehicleDefectsServiceClient implements IVehicleDefectsServiceClient, ServiceInfo {
    typeName = VehicleDefectsService.typeName;
    methods = VehicleDefectsService.methods;
    options = VehicleDefectsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DefectRetrieve(DefectRetrieveRequest) returns (DefectRetrieveReply);
     */
    defectRetrieve(input: DefectRetrieveRequest, options?: RpcOptions): UnaryCall<DefectRetrieveRequest, DefectRetrieveReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DefectRetrieveRequest, DefectRetrieveReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DefectsGet(DefectsGetRequest) returns (DefectsGetReply);
     */
    defectsGet(input: DefectsGetRequest, options?: RpcOptions): UnaryCall<DefectsGetRequest, DefectsGetReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DefectsGetRequest, DefectsGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DefectUpdate(DefectUpdateRequest) returns (DefectUpdateReply);
     */
    defectUpdate(input: DefectUpdateRequest, options?: RpcOptions): UnaryCall<DefectUpdateRequest, DefectUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DefectUpdateRequest, DefectUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DefectDelete(DefectDeleteRequest) returns (DefectDeleteReply);
     */
    defectDelete(input: DefectDeleteRequest, options?: RpcOptions): UnaryCall<DefectDeleteRequest, DefectDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DefectDeleteRequest, DefectDeleteReply>("unary", this._transport, method, opt, input);
    }
}
