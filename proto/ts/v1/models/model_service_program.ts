// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_service_program.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VehicleMaintenanceModel_VehicleType } from "./model_vehicle_maintenance";
/**
 * @generated from protobuf message ServiceProgramModel
 */
export interface ServiceProgramModel {
}
/**
 * @generated from protobuf message ServiceProgramModel.ProgramRead
 */
export interface ServiceProgramModel_ProgramRead {
    /**
     * @generated from protobuf field: string service_program_id = 1;
     */
    serviceProgramId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: ServiceProgramModel.ServiceProgramType type = 3;
     */
    type: ServiceProgramModel_ServiceProgramType;
    /**
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 4;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType;
    /**
     * @generated from protobuf field: string created_by_user_id = 5;
     */
    createdByUserId: string;
    /**
     * @generated from protobuf field: bool deleted = 6;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string updated_at = 7;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 8;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message ServiceProgramModel.ProgramWrite
 */
export interface ServiceProgramModel_ProgramWrite {
    /**
     * string service_program_id //only Update
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: ServiceProgramModel.ServiceProgramType type = 3;
     */
    type: ServiceProgramModel_ServiceProgramType;
    /**
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 4;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType; // string created_by_user_id = 5; //backend set
    // bool deleted = 6; //backend set
    // string updated_at = 7; //backend set
    // string created_at = 8; //backend set
}
/**
 * @generated from protobuf enum ServiceProgramModel.ServiceProgramType
 */
export enum ServiceProgramModel_ServiceProgramType {
    /**
     * @generated from protobuf enum value: SERVICE_PROGRAM_TYPE_DISTANCE = 0;
     */
    DISTANCE = 0,
    /**
     * @generated from protobuf enum value: SERVICE_PROGRAM_TYPE_ENGINE_HOURS = 1;
     */
    ENGINE_HOURS = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramModel$Type extends MessageType<ServiceProgramModel> {
    constructor() {
        super("ServiceProgramModel", []);
    }
    create(value?: PartialMessage<ServiceProgramModel>): ServiceProgramModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramModel): ServiceProgramModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceProgramModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramModel
 */
export const ServiceProgramModel = new ServiceProgramModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramModel_ProgramRead$Type extends MessageType<ServiceProgramModel_ProgramRead> {
    constructor() {
        super("ServiceProgramModel.ProgramRead", [
            { no: 1, name: "service_program_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["ServiceProgramModel.ServiceProgramType", ServiceProgramModel_ServiceProgramType, "SERVICE_PROGRAM_TYPE_"] },
            { no: 4, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 5, name: "created_by_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramModel_ProgramRead>): ServiceProgramModel_ProgramRead {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProgramId = "";
        message.name = "";
        message.type = 0;
        message.vehicleType = 0;
        message.createdByUserId = "";
        message.deleted = false;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramModel_ProgramRead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramModel_ProgramRead): ServiceProgramModel_ProgramRead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_program_id */ 1:
                    message.serviceProgramId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* ServiceProgramModel.ServiceProgramType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 4:
                    message.vehicleType = reader.int32();
                    break;
                case /* string created_by_user_id */ 5:
                    message.createdByUserId = reader.string();
                    break;
                case /* bool deleted */ 6:
                    message.deleted = reader.bool();
                    break;
                case /* string updated_at */ 7:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 8:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramModel_ProgramRead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_program_id = 1; */
        if (message.serviceProgramId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProgramId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* ServiceProgramModel.ServiceProgramType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 4; */
        if (message.vehicleType !== 0)
            writer.tag(4, WireType.Varint).int32(message.vehicleType);
        /* string created_by_user_id = 5; */
        if (message.createdByUserId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdByUserId);
        /* bool deleted = 6; */
        if (message.deleted !== false)
            writer.tag(6, WireType.Varint).bool(message.deleted);
        /* string updated_at = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramModel.ProgramRead
 */
export const ServiceProgramModel_ProgramRead = new ServiceProgramModel_ProgramRead$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceProgramModel_ProgramWrite$Type extends MessageType<ServiceProgramModel_ProgramWrite> {
    constructor() {
        super("ServiceProgramModel.ProgramWrite", [
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["ServiceProgramModel.ServiceProgramType", ServiceProgramModel_ServiceProgramType, "SERVICE_PROGRAM_TYPE_"] },
            { no: 4, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ServiceProgramModel_ProgramWrite>): ServiceProgramModel_ProgramWrite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = 0;
        message.vehicleType = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceProgramModel_ProgramWrite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceProgramModel_ProgramWrite): ServiceProgramModel_ProgramWrite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* ServiceProgramModel.ServiceProgramType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 4:
                    message.vehicleType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceProgramModel_ProgramWrite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* ServiceProgramModel.ServiceProgramType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 4; */
        if (message.vehicleType !== 0)
            writer.tag(4, WireType.Varint).int32(message.vehicleType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceProgramModel.ProgramWrite
 */
export const ServiceProgramModel_ProgramWrite = new ServiceProgramModel_ProgramWrite$Type();
