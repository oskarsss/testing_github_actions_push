// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_location.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CountryCode } from "./country_code";
/**
 * @generated from protobuf message LocationModel
 */
export interface LocationModel {
    /**
     * @generated from protobuf field: string location_id = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: double lat = 2;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 3;
     */
    lon: number;
    /**
     * @generated from protobuf field: string address = 4;
     */
    address: string;
    /**
     * @generated from protobuf field: string timezone = 5;
     */
    timezone: string;
    /**
     * @generated from protobuf field: string name = 6;
     */
    name: string;
    /**
     * @generated from protobuf field: string line_1 = 7;
     */
    line1: string;
    /**
     * @generated from protobuf field: string line_2 = 8;
     */
    line2: string;
    /**
     * @generated from protobuf field: string city = 9;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 10;
     */
    state: string;
    /**
     * @generated from protobuf field: string postal_code = 11;
     */
    postalCode: string;
    /**
     * @generated from protobuf field: CountryCode country = 12;
     */
    country: CountryCode;
}
// @generated message type with reflection information, may provide speed optimized methods
class LocationModel$Type extends MessageType<LocationModel> {
    constructor() {
        super("LocationModel", [
            { no: 1, name: "location_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "line_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "line_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "country", kind: "enum", T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] }
        ]);
    }
    create(value?: PartialMessage<LocationModel>): LocationModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.locationId = "";
        message.lat = 0;
        message.lon = 0;
        message.address = "";
        message.timezone = "";
        message.name = "";
        message.line1 = "";
        message.line2 = "";
        message.city = "";
        message.state = "";
        message.postalCode = "";
        message.country = 0;
        if (value !== undefined)
            reflectionMergePartial<LocationModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocationModel): LocationModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string location_id */ 1:
                    message.locationId = reader.string();
                    break;
                case /* double lat */ 2:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 3:
                    message.lon = reader.double();
                    break;
                case /* string address */ 4:
                    message.address = reader.string();
                    break;
                case /* string timezone */ 5:
                    message.timezone = reader.string();
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* string line_1 */ 7:
                    message.line1 = reader.string();
                    break;
                case /* string line_2 */ 8:
                    message.line2 = reader.string();
                    break;
                case /* string city */ 9:
                    message.city = reader.string();
                    break;
                case /* string state */ 10:
                    message.state = reader.string();
                    break;
                case /* string postal_code */ 11:
                    message.postalCode = reader.string();
                    break;
                case /* CountryCode country */ 12:
                    message.country = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocationModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string location_id = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* double lat = 2; */
        if (message.lat !== 0)
            writer.tag(2, WireType.Bit64).double(message.lat);
        /* double lon = 3; */
        if (message.lon !== 0)
            writer.tag(3, WireType.Bit64).double(message.lon);
        /* string address = 4; */
        if (message.address !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.address);
        /* string timezone = 5; */
        if (message.timezone !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.timezone);
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* string line_1 = 7; */
        if (message.line1 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.line1);
        /* string line_2 = 8; */
        if (message.line2 !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.line2);
        /* string city = 9; */
        if (message.city !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.city);
        /* string state = 10; */
        if (message.state !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.state);
        /* string postal_code = 11; */
        if (message.postalCode !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.postalCode);
        /* CountryCode country = 12; */
        if (message.country !== 0)
            writer.tag(12, WireType.Varint).int32(message.country);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LocationModel
 */
export const LocationModel = new LocationModel$Type();
