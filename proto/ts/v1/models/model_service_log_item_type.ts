// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_service_log_item_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ServiceLogItemTypeModel
 */
export interface ServiceLogItemTypeModel {
}
/**
 * @generated from protobuf message ServiceLogItemTypeModel.ServiceLogItemTypeRead
 */
export interface ServiceLogItemTypeModel_ServiceLogItemTypeRead {
    /**
     * @generated from protobuf field: string item_type_id = 1;
     */
    itemTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 sequence = 3;
     */
    sequence: number;
    /**
     * @generated from protobuf field: bool deleted = 4;
     */
    deleted: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeModel$Type extends MessageType<ServiceLogItemTypeModel> {
    constructor() {
        super("ServiceLogItemTypeModel", []);
    }
    create(value?: PartialMessage<ServiceLogItemTypeModel>): ServiceLogItemTypeModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeModel): ServiceLogItemTypeModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogItemTypeModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeModel
 */
export const ServiceLogItemTypeModel = new ServiceLogItemTypeModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeModel_ServiceLogItemTypeRead$Type extends MessageType<ServiceLogItemTypeModel_ServiceLogItemTypeRead> {
    constructor() {
        super("ServiceLogItemTypeModel.ServiceLogItemTypeRead", [
            { no: 1, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeModel_ServiceLogItemTypeRead>): ServiceLogItemTypeModel_ServiceLogItemTypeRead {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemTypeId = "";
        message.name = "";
        message.sequence = 0;
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeModel_ServiceLogItemTypeRead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeModel_ServiceLogItemTypeRead): ServiceLogItemTypeModel_ServiceLogItemTypeRead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type_id */ 1:
                    message.itemTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 sequence */ 3:
                    message.sequence = reader.int64().toNumber();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeModel_ServiceLogItemTypeRead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type_id = 1; */
        if (message.itemTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 sequence = 3; */
        if (message.sequence !== 0)
            writer.tag(3, WireType.Varint).int64(message.sequence);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeModel.ServiceLogItemTypeRead
 */
export const ServiceLogItemTypeModel_ServiceLogItemTypeRead = new ServiceLogItemTypeModel_ServiceLogItemTypeRead$Type();
