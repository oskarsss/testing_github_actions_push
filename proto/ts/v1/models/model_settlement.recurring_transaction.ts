// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_settlement.recurring_transaction.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SettlementTransactionCategoryModel_Type } from "./model_settlement.transaction_category";
import { Settlements_RecurringTransaction_Status } from "./model_settlement";
/**
 * @generated from protobuf message SettlementRecurringTransactionModel
 */
export interface SettlementRecurringTransactionModel {
}
/**
 * @generated from protobuf message SettlementRecurringTransactionModel.RecurringTransaction
 */
export interface SettlementRecurringTransactionModel_RecurringTransaction {
    /**
     * @generated from protobuf field: string recurring_transaction_id = 1;
     */
    recurringTransactionId: string;
    /**
     * @generated from protobuf field: string entity_type = 2;
     */
    entityType: string;
    /**
     * @generated from protobuf field: string entity_id = 3;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string category_id = 4;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: double amount = 5;
     */
    amount: number;
    /**
     * @generated from protobuf field: double max_total_amount = 6;
     */
    maxTotalAmount: number;
    /**
     * @generated from protobuf field: Settlements.RecurringTransaction.Status status = 7;
     */
    status: Settlements_RecurringTransaction_Status;
    /**
     * @generated from protobuf field: string amount_formatted = 8;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string max_total_amount_formatted = 9;
     */
    maxTotalAmountFormatted: string;
    /**
     * @generated from protobuf field: string driver_id = 10;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string truck_id = 11;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 12;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string vendor_id = 13;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: string vendor_name = 14;
     */
    vendorName: string;
    /**
     * @generated from protobuf field: string note = 15;
     */
    note: string;
    /**
     * @generated from protobuf field: string start_date = 16;
     */
    startDate: string;
    /**
     * @generated from protobuf field: bool deleted = 17;
     */
    deleted: boolean;
}
/**
 * @generated from protobuf message SettlementRecurringTransactionModel.DriverDetails
 */
export interface SettlementRecurringTransactionModel_DriverDetails {
    /**
     * @generated from protobuf field: string driver_id = 1;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 3;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string vendor_id = 4;
     */
    vendorId: string;
    /**
     * @generated from protobuf field: string vendor_name = 5;
     */
    vendorName: string;
    /**
     * @generated from protobuf field: string note = 6;
     */
    note: string;
    /**
     * @generated from protobuf field: repeated SettlementRecurringTransactionModel.DriverDetails.DriverRecurringTransaction transactions = 7;
     */
    transactions: SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction[];
    /**
     * @generated from protobuf field: double total_debit_amount = 8;
     */
    totalDebitAmount: number;
    /**
     * @generated from protobuf field: double total_credit_amount = 9;
     */
    totalCreditAmount: number;
    /**
     * @generated from protobuf field: string total_debit_amount_formatted = 10;
     */
    totalDebitAmountFormatted: string;
    /**
     * @generated from protobuf field: string total_credit_amount_formatted = 11;
     */
    totalCreditAmountFormatted: string;
    /**
     * @generated from protobuf field: optional double total_debit_charged = 12;
     */
    totalDebitCharged?: number;
    /**
     * @generated from protobuf field: optional string total_debit_charged_formatted = 13;
     */
    totalDebitChargedFormatted?: string;
    /**
     * @generated from protobuf field: optional double total_credit_charged = 14;
     */
    totalCreditCharged?: number;
    /**
     * @generated from protobuf field: optional string total_credit_charged_formatted = 15;
     */
    totalCreditChargedFormatted?: string;
}
/**
 * @generated from protobuf message SettlementRecurringTransactionModel.DriverDetails.DriverRecurringTransaction
 */
export interface SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction {
    /**
     * @generated from protobuf field: string recurring_transaction_id = 1;
     */
    recurringTransactionId: string;
    /**
     * @generated from protobuf field: string category_id = 2;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: SettlementTransactionCategoryModel.Type category_type = 3;
     */
    categoryType: SettlementTransactionCategoryModel_Type;
    /**
     * @generated from protobuf field: double amount = 4;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_formatted = 5;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string amount_status_class = 6;
     */
    amountStatusClass: string;
    /**
     * @generated from protobuf field: optional double total_charged = 7;
     */
    totalCharged?: number;
    /**
     * @generated from protobuf field: optional string total_charged_formatted = 8;
     */
    totalChargedFormatted?: string;
}
/**
 * @generated from protobuf message SettlementRecurringTransactionModel.Filter
 */
export interface SettlementRecurringTransactionModel_Filter {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: string label = 3;
     */
    label: string;
    /**
     * @generated from protobuf field: string trans_prefix = 4;
     */
    transPrefix: string;
    /**
     * @generated from protobuf field: repeated SettlementRecurringTransactionModel.Filter.Item items = 5;
     */
    items: SettlementRecurringTransactionModel_Filter_Item[];
}
/**
 * @generated from protobuf message SettlementRecurringTransactionModel.Filter.Item
 */
export interface SettlementRecurringTransactionModel_Filter_Item {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
    /**
     * @generated from protobuf field: int64 count = 3;
     */
    count: number;
}
/**
 * @generated from protobuf message SettlementRecurringTransactionModel.Transaction
 */
export interface SettlementRecurringTransactionModel_Transaction {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string transaction_id = 3;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string settlement_id = 4;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: int64 settlement_friendly_id = 5;
     */
    settlementFriendlyId: number;
    /**
     * @generated from protobuf field: int64 amount = 6;
     */
    amount: number;
    /**
     * @generated from protobuf field: string period_start_datetime = 7;
     */
    periodStartDatetime: string;
    /**
     * @generated from protobuf field: string period_end_datetime = 8;
     */
    periodEndDatetime: string;
    /**
     * @generated from protobuf field: string amount_formatted = 9;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string total_amount_formatted = 10;
     */
    totalAmountFormatted: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel$Type extends MessageType<SettlementRecurringTransactionModel> {
    constructor() {
        super("SettlementRecurringTransactionModel", []);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel>): SettlementRecurringTransactionModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel): SettlementRecurringTransactionModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel
 */
export const SettlementRecurringTransactionModel = new SettlementRecurringTransactionModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel_RecurringTransaction$Type extends MessageType<SettlementRecurringTransactionModel_RecurringTransaction> {
    constructor() {
        super("SettlementRecurringTransactionModel.RecurringTransaction", [
            { no: 1, name: "recurring_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "max_total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["Settlements.RecurringTransaction.Status", Settlements_RecurringTransaction_Status] },
            { no: 8, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "max_total_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "vendor_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel_RecurringTransaction>): SettlementRecurringTransactionModel_RecurringTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recurringTransactionId = "";
        message.entityType = "";
        message.entityId = "";
        message.categoryId = "";
        message.amount = 0;
        message.maxTotalAmount = 0;
        message.status = 0;
        message.amountFormatted = "";
        message.maxTotalAmountFormatted = "";
        message.driverId = "";
        message.truckId = "";
        message.trailerId = "";
        message.vendorId = "";
        message.vendorName = "";
        message.note = "";
        message.startDate = "";
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel_RecurringTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel_RecurringTransaction): SettlementRecurringTransactionModel_RecurringTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recurring_transaction_id */ 1:
                    message.recurringTransactionId = reader.string();
                    break;
                case /* string entity_type */ 2:
                    message.entityType = reader.string();
                    break;
                case /* string entity_id */ 3:
                    message.entityId = reader.string();
                    break;
                case /* string category_id */ 4:
                    message.categoryId = reader.string();
                    break;
                case /* double amount */ 5:
                    message.amount = reader.double();
                    break;
                case /* double max_total_amount */ 6:
                    message.maxTotalAmount = reader.double();
                    break;
                case /* Settlements.RecurringTransaction.Status status */ 7:
                    message.status = reader.int32();
                    break;
                case /* string amount_formatted */ 8:
                    message.amountFormatted = reader.string();
                    break;
                case /* string max_total_amount_formatted */ 9:
                    message.maxTotalAmountFormatted = reader.string();
                    break;
                case /* string driver_id */ 10:
                    message.driverId = reader.string();
                    break;
                case /* string truck_id */ 11:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 12:
                    message.trailerId = reader.string();
                    break;
                case /* string vendor_id */ 13:
                    message.vendorId = reader.string();
                    break;
                case /* string vendor_name */ 14:
                    message.vendorName = reader.string();
                    break;
                case /* string note */ 15:
                    message.note = reader.string();
                    break;
                case /* string start_date */ 16:
                    message.startDate = reader.string();
                    break;
                case /* bool deleted */ 17:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel_RecurringTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string recurring_transaction_id = 1; */
        if (message.recurringTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recurringTransactionId);
        /* string entity_type = 2; */
        if (message.entityType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityType);
        /* string entity_id = 3; */
        if (message.entityId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.entityId);
        /* string category_id = 4; */
        if (message.categoryId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.categoryId);
        /* double amount = 5; */
        if (message.amount !== 0)
            writer.tag(5, WireType.Bit64).double(message.amount);
        /* double max_total_amount = 6; */
        if (message.maxTotalAmount !== 0)
            writer.tag(6, WireType.Bit64).double(message.maxTotalAmount);
        /* Settlements.RecurringTransaction.Status status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* string amount_formatted = 8; */
        if (message.amountFormatted !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.amountFormatted);
        /* string max_total_amount_formatted = 9; */
        if (message.maxTotalAmountFormatted !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.maxTotalAmountFormatted);
        /* string driver_id = 10; */
        if (message.driverId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.driverId);
        /* string truck_id = 11; */
        if (message.truckId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 12; */
        if (message.trailerId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.trailerId);
        /* string vendor_id = 13; */
        if (message.vendorId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.vendorId);
        /* string vendor_name = 14; */
        if (message.vendorName !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.vendorName);
        /* string note = 15; */
        if (message.note !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.note);
        /* string start_date = 16; */
        if (message.startDate !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.startDate);
        /* bool deleted = 17; */
        if (message.deleted !== false)
            writer.tag(17, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel.RecurringTransaction
 */
export const SettlementRecurringTransactionModel_RecurringTransaction = new SettlementRecurringTransactionModel_RecurringTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel_DriverDetails$Type extends MessageType<SettlementRecurringTransactionModel_DriverDetails> {
    constructor() {
        super("SettlementRecurringTransactionModel.DriverDetails", [
            { no: 1, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vendor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vendor_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction },
            { no: 8, name: "total_debit_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "total_credit_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "total_debit_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "total_credit_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "total_debit_charged", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "total_debit_charged_formatted", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "total_credit_charged", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "total_credit_charged_formatted", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel_DriverDetails>): SettlementRecurringTransactionModel_DriverDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverId = "";
        message.truckId = "";
        message.trailerId = "";
        message.vendorId = "";
        message.vendorName = "";
        message.note = "";
        message.transactions = [];
        message.totalDebitAmount = 0;
        message.totalCreditAmount = 0;
        message.totalDebitAmountFormatted = "";
        message.totalCreditAmountFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel_DriverDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel_DriverDetails): SettlementRecurringTransactionModel_DriverDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_id */ 1:
                    message.driverId = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 3:
                    message.trailerId = reader.string();
                    break;
                case /* string vendor_id */ 4:
                    message.vendorId = reader.string();
                    break;
                case /* string vendor_name */ 5:
                    message.vendorName = reader.string();
                    break;
                case /* string note */ 6:
                    message.note = reader.string();
                    break;
                case /* repeated SettlementRecurringTransactionModel.DriverDetails.DriverRecurringTransaction transactions */ 7:
                    message.transactions.push(SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double total_debit_amount */ 8:
                    message.totalDebitAmount = reader.double();
                    break;
                case /* double total_credit_amount */ 9:
                    message.totalCreditAmount = reader.double();
                    break;
                case /* string total_debit_amount_formatted */ 10:
                    message.totalDebitAmountFormatted = reader.string();
                    break;
                case /* string total_credit_amount_formatted */ 11:
                    message.totalCreditAmountFormatted = reader.string();
                    break;
                case /* optional double total_debit_charged */ 12:
                    message.totalDebitCharged = reader.double();
                    break;
                case /* optional string total_debit_charged_formatted */ 13:
                    message.totalDebitChargedFormatted = reader.string();
                    break;
                case /* optional double total_credit_charged */ 14:
                    message.totalCreditCharged = reader.double();
                    break;
                case /* optional string total_credit_charged_formatted */ 15:
                    message.totalCreditChargedFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel_DriverDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_id = 1; */
        if (message.driverId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverId);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 3; */
        if (message.trailerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.trailerId);
        /* string vendor_id = 4; */
        if (message.vendorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vendorId);
        /* string vendor_name = 5; */
        if (message.vendorName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.vendorName);
        /* string note = 6; */
        if (message.note !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.note);
        /* repeated SettlementRecurringTransactionModel.DriverDetails.DriverRecurringTransaction transactions = 7; */
        for (let i = 0; i < message.transactions.length; i++)
            SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction.internalBinaryWrite(message.transactions[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* double total_debit_amount = 8; */
        if (message.totalDebitAmount !== 0)
            writer.tag(8, WireType.Bit64).double(message.totalDebitAmount);
        /* double total_credit_amount = 9; */
        if (message.totalCreditAmount !== 0)
            writer.tag(9, WireType.Bit64).double(message.totalCreditAmount);
        /* string total_debit_amount_formatted = 10; */
        if (message.totalDebitAmountFormatted !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.totalDebitAmountFormatted);
        /* string total_credit_amount_formatted = 11; */
        if (message.totalCreditAmountFormatted !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.totalCreditAmountFormatted);
        /* optional double total_debit_charged = 12; */
        if (message.totalDebitCharged !== undefined)
            writer.tag(12, WireType.Bit64).double(message.totalDebitCharged);
        /* optional string total_debit_charged_formatted = 13; */
        if (message.totalDebitChargedFormatted !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.totalDebitChargedFormatted);
        /* optional double total_credit_charged = 14; */
        if (message.totalCreditCharged !== undefined)
            writer.tag(14, WireType.Bit64).double(message.totalCreditCharged);
        /* optional string total_credit_charged_formatted = 15; */
        if (message.totalCreditChargedFormatted !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.totalCreditChargedFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel.DriverDetails
 */
export const SettlementRecurringTransactionModel_DriverDetails = new SettlementRecurringTransactionModel_DriverDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction$Type extends MessageType<SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction> {
    constructor() {
        super("SettlementRecurringTransactionModel.DriverDetails.DriverRecurringTransaction", [
            { no: 1, name: "recurring_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "category_type", kind: "enum", T: () => ["SettlementTransactionCategoryModel.Type", SettlementTransactionCategoryModel_Type, "TYPE_"] },
            { no: 4, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "amount_status_class", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "total_charged", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "total_charged_formatted", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction>): SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recurringTransactionId = "";
        message.categoryId = "";
        message.categoryType = 0;
        message.amount = 0;
        message.amountFormatted = "";
        message.amountStatusClass = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction): SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recurring_transaction_id */ 1:
                    message.recurringTransactionId = reader.string();
                    break;
                case /* string category_id */ 2:
                    message.categoryId = reader.string();
                    break;
                case /* SettlementTransactionCategoryModel.Type category_type */ 3:
                    message.categoryType = reader.int32();
                    break;
                case /* double amount */ 4:
                    message.amount = reader.double();
                    break;
                case /* string amount_formatted */ 5:
                    message.amountFormatted = reader.string();
                    break;
                case /* string amount_status_class */ 6:
                    message.amountStatusClass = reader.string();
                    break;
                case /* optional double total_charged */ 7:
                    message.totalCharged = reader.double();
                    break;
                case /* optional string total_charged_formatted */ 8:
                    message.totalChargedFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string recurring_transaction_id = 1; */
        if (message.recurringTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recurringTransactionId);
        /* string category_id = 2; */
        if (message.categoryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.categoryId);
        /* SettlementTransactionCategoryModel.Type category_type = 3; */
        if (message.categoryType !== 0)
            writer.tag(3, WireType.Varint).int32(message.categoryType);
        /* double amount = 4; */
        if (message.amount !== 0)
            writer.tag(4, WireType.Bit64).double(message.amount);
        /* string amount_formatted = 5; */
        if (message.amountFormatted !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.amountFormatted);
        /* string amount_status_class = 6; */
        if (message.amountStatusClass !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.amountStatusClass);
        /* optional double total_charged = 7; */
        if (message.totalCharged !== undefined)
            writer.tag(7, WireType.Bit64).double(message.totalCharged);
        /* optional string total_charged_formatted = 8; */
        if (message.totalChargedFormatted !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.totalChargedFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel.DriverDetails.DriverRecurringTransaction
 */
export const SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction = new SettlementRecurringTransactionModel_DriverDetails_DriverRecurringTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel_Filter$Type extends MessageType<SettlementRecurringTransactionModel_Filter> {
    constructor() {
        super("SettlementRecurringTransactionModel.Filter", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trans_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettlementRecurringTransactionModel_Filter_Item }
        ]);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel_Filter>): SettlementRecurringTransactionModel_Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = "";
        message.label = "";
        message.transPrefix = "";
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel_Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel_Filter): SettlementRecurringTransactionModel_Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* string label */ 3:
                    message.label = reader.string();
                    break;
                case /* string trans_prefix */ 4:
                    message.transPrefix = reader.string();
                    break;
                case /* repeated SettlementRecurringTransactionModel.Filter.Item items */ 5:
                    message.items.push(SettlementRecurringTransactionModel_Filter_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel_Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* string label = 3; */
        if (message.label !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.label);
        /* string trans_prefix = 4; */
        if (message.transPrefix !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transPrefix);
        /* repeated SettlementRecurringTransactionModel.Filter.Item items = 5; */
        for (let i = 0; i < message.items.length; i++)
            SettlementRecurringTransactionModel_Filter_Item.internalBinaryWrite(message.items[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel.Filter
 */
export const SettlementRecurringTransactionModel_Filter = new SettlementRecurringTransactionModel_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel_Filter_Item$Type extends MessageType<SettlementRecurringTransactionModel_Filter_Item> {
    constructor() {
        super("SettlementRecurringTransactionModel.Filter.Item", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel_Filter_Item>): SettlementRecurringTransactionModel_Filter_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.label = "";
        message.value = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel_Filter_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel_Filter_Item): SettlementRecurringTransactionModel_Filter_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* int64 count */ 3:
                    message.count = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel_Filter_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* int64 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel.Filter.Item
 */
export const SettlementRecurringTransactionModel_Filter_Item = new SettlementRecurringTransactionModel_Filter_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementRecurringTransactionModel_Transaction$Type extends MessageType<SettlementRecurringTransactionModel_Transaction> {
    constructor() {
        super("SettlementRecurringTransactionModel.Transaction", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "settlement_friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "period_start_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "period_end_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "total_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementRecurringTransactionModel_Transaction>): SettlementRecurringTransactionModel_Transaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.transactionId = "";
        message.settlementId = "";
        message.settlementFriendlyId = 0;
        message.amount = 0;
        message.periodStartDatetime = "";
        message.periodEndDatetime = "";
        message.amountFormatted = "";
        message.totalAmountFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementRecurringTransactionModel_Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementRecurringTransactionModel_Transaction): SettlementRecurringTransactionModel_Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string transaction_id */ 3:
                    message.transactionId = reader.string();
                    break;
                case /* string settlement_id */ 4:
                    message.settlementId = reader.string();
                    break;
                case /* int64 settlement_friendly_id */ 5:
                    message.settlementFriendlyId = reader.int64().toNumber();
                    break;
                case /* int64 amount */ 6:
                    message.amount = reader.int64().toNumber();
                    break;
                case /* string period_start_datetime */ 7:
                    message.periodStartDatetime = reader.string();
                    break;
                case /* string period_end_datetime */ 8:
                    message.periodEndDatetime = reader.string();
                    break;
                case /* string amount_formatted */ 9:
                    message.amountFormatted = reader.string();
                    break;
                case /* string total_amount_formatted */ 10:
                    message.totalAmountFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementRecurringTransactionModel_Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string transaction_id = 3; */
        if (message.transactionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transactionId);
        /* string settlement_id = 4; */
        if (message.settlementId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.settlementId);
        /* int64 settlement_friendly_id = 5; */
        if (message.settlementFriendlyId !== 0)
            writer.tag(5, WireType.Varint).int64(message.settlementFriendlyId);
        /* int64 amount = 6; */
        if (message.amount !== 0)
            writer.tag(6, WireType.Varint).int64(message.amount);
        /* string period_start_datetime = 7; */
        if (message.periodStartDatetime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.periodStartDatetime);
        /* string period_end_datetime = 8; */
        if (message.periodEndDatetime !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.periodEndDatetime);
        /* string amount_formatted = 9; */
        if (message.amountFormatted !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.amountFormatted);
        /* string total_amount_formatted = 10; */
        if (message.totalAmountFormatted !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.totalAmountFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementRecurringTransactionModel.Transaction
 */
export const SettlementRecurringTransactionModel_Transaction = new SettlementRecurringTransactionModel_Transaction$Type();
