// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_notification.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message NotificationModel
 */
export interface NotificationModel {
}
/**
 * @generated from protobuf message NotificationModel.NotificationSetting
 */
export interface NotificationModel_NotificationSetting {
    /**
     * @generated from protobuf field: NotificationModel.NotificationSettingsCategory category = 1;
     */
    category: NotificationModel_NotificationSettingsCategory;
    /**
     * @generated from protobuf field: string notification_type = 2;
     */
    notificationType: string;
    /**
     * @generated from protobuf field: string friendly_name = 3;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: bool enabled = 4;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: bool enabled_sms = 5;
     */
    enabledSms: boolean;
    /**
     * @generated from protobuf field: bool enabled_email = 6;
     */
    enabledEmail: boolean;
    /**
     * @generated from protobuf field: bool enabled_web_push = 7;
     */
    enabledWebPush: boolean;
}
/**
 * @generated from protobuf message NotificationModel.Notification
 */
export interface NotificationModel_Notification {
    /**
     * @generated from protobuf field: NotificationModel.NotificationEntityType entity_type = 1;
     */
    entityType: NotificationModel_NotificationEntityType; // acts like channel_id
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string notification_id = 3;
     */
    notificationId: string;
    /**
     * @generated from protobuf field: string notification_type = 4;
     */
    notificationType: string;
    /**
     * @generated from protobuf field: string body = 5;
     */
    body: string;
    /**
     * @generated from protobuf field: NotificationModel.NotificationFromEntityType from_entity_type = 6;
     */
    fromEntityType: NotificationModel_NotificationFromEntityType;
    /**
     * @generated from protobuf field: string from_entity_id = 7;
     */
    fromEntityId: string;
    /**
     * @generated from protobuf field: repeated string file_ids = 8;
     */
    fileIds: string[];
    /**
     * @generated from protobuf field: string created_at = 9;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool is_read = 10;
     */
    isRead: boolean;
}
/**
 * @generated from protobuf enum NotificationModel.NotificationEntityType
 */
export enum NotificationModel_NotificationEntityType {
    /**
     * @generated from protobuf enum value: NOTIFICATION_ENTITY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: NOTIFICATION_ENTITY_TYPE_ORDER = 1;
     */
    ORDER = 1,
    /**
     * @generated from protobuf enum value: NOTIFICATION_ENTITY_TYPE_MANIFEST = 2;
     */
    MANIFEST = 2
}
/**
 * @generated from protobuf enum NotificationModel.NotificationFromEntityType
 */
export enum NotificationModel_NotificationFromEntityType {
    /**
     * @generated from protobuf enum value: NOTIFICATION_FROM_ENTITY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: NOTIFICATION_FROM_ENTITY_TYPE_USER = 1;
     */
    USER = 1,
    /**
     * @generated from protobuf enum value: NOTIFICATION_FROM_ENTITY_TYPE_DRIVER = 2;
     */
    DRIVER = 2,
    /**
     * @generated from protobuf enum value: NOTIFICATION_FROM_ENTITY_TYPE_CUSTOMER_USER = 3;
     */
    CUSTOMER_USER = 3,
    /**
     * @generated from protobuf enum value: NOTIFICATION_FROM_ENTITY_TYPE_BROKER_USER = 4;
     */
    BROKER_USER = 4
}
/**
 * @generated from protobuf enum NotificationModel.NotificationSettingsCategory
 */
export enum NotificationModel_NotificationSettingsCategory {
    /**
     * @generated from protobuf enum value: NOTIFICATION_SETTINGS_CATEGORY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: NOTIFICATION_SETTINGS_CATEGORY_ORDER = 1;
     */
    ORDER = 1,
    /**
     * @generated from protobuf enum value: NOTIFICATION_SETTINGS_CATEGORY_MANIFEST = 2;
     */
    MANIFEST = 2,
    /**
     * @generated from protobuf enum value: NOTIFICATION_SETTINGS_CATEGORY_OTHER = 3;
     */
    OTHER = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class NotificationModel$Type extends MessageType<NotificationModel> {
    constructor() {
        super("NotificationModel", []);
    }
    create(value?: PartialMessage<NotificationModel>): NotificationModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationModel): NotificationModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NotificationModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationModel
 */
export const NotificationModel = new NotificationModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationModel_NotificationSetting$Type extends MessageType<NotificationModel_NotificationSetting> {
    constructor() {
        super("NotificationModel.NotificationSetting", [
            { no: 1, name: "category", kind: "enum", T: () => ["NotificationModel.NotificationSettingsCategory", NotificationModel_NotificationSettingsCategory, "NOTIFICATION_SETTINGS_CATEGORY_"] },
            { no: 2, name: "notification_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "enabled_sms", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "enabled_email", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "enabled_web_push", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationModel_NotificationSetting>): NotificationModel_NotificationSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.category = 0;
        message.notificationType = "";
        message.friendlyName = "";
        message.enabled = false;
        message.enabledSms = false;
        message.enabledEmail = false;
        message.enabledWebPush = false;
        if (value !== undefined)
            reflectionMergePartial<NotificationModel_NotificationSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationModel_NotificationSetting): NotificationModel_NotificationSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* NotificationModel.NotificationSettingsCategory category */ 1:
                    message.category = reader.int32();
                    break;
                case /* string notification_type */ 2:
                    message.notificationType = reader.string();
                    break;
                case /* string friendly_name */ 3:
                    message.friendlyName = reader.string();
                    break;
                case /* bool enabled */ 4:
                    message.enabled = reader.bool();
                    break;
                case /* bool enabled_sms */ 5:
                    message.enabledSms = reader.bool();
                    break;
                case /* bool enabled_email */ 6:
                    message.enabledEmail = reader.bool();
                    break;
                case /* bool enabled_web_push */ 7:
                    message.enabledWebPush = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationModel_NotificationSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* NotificationModel.NotificationSettingsCategory category = 1; */
        if (message.category !== 0)
            writer.tag(1, WireType.Varint).int32(message.category);
        /* string notification_type = 2; */
        if (message.notificationType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.notificationType);
        /* string friendly_name = 3; */
        if (message.friendlyName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.friendlyName);
        /* bool enabled = 4; */
        if (message.enabled !== false)
            writer.tag(4, WireType.Varint).bool(message.enabled);
        /* bool enabled_sms = 5; */
        if (message.enabledSms !== false)
            writer.tag(5, WireType.Varint).bool(message.enabledSms);
        /* bool enabled_email = 6; */
        if (message.enabledEmail !== false)
            writer.tag(6, WireType.Varint).bool(message.enabledEmail);
        /* bool enabled_web_push = 7; */
        if (message.enabledWebPush !== false)
            writer.tag(7, WireType.Varint).bool(message.enabledWebPush);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationModel.NotificationSetting
 */
export const NotificationModel_NotificationSetting = new NotificationModel_NotificationSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationModel_Notification$Type extends MessageType<NotificationModel_Notification> {
    constructor() {
        super("NotificationModel.Notification", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["NotificationModel.NotificationEntityType", NotificationModel_NotificationEntityType, "NOTIFICATION_ENTITY_TYPE_"] },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notification_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "notification_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "from_entity_type", kind: "enum", T: () => ["NotificationModel.NotificationFromEntityType", NotificationModel_NotificationFromEntityType, "NOTIFICATION_FROM_ENTITY_TYPE_"] },
            { no: 7, name: "from_entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "file_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "is_read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationModel_Notification>): NotificationModel_Notification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.entityId = "";
        message.notificationId = "";
        message.notificationType = "";
        message.body = "";
        message.fromEntityType = 0;
        message.fromEntityId = "";
        message.fileIds = [];
        message.createdAt = "";
        message.isRead = false;
        if (value !== undefined)
            reflectionMergePartial<NotificationModel_Notification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationModel_Notification): NotificationModel_Notification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* NotificationModel.NotificationEntityType entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                case /* string notification_id */ 3:
                    message.notificationId = reader.string();
                    break;
                case /* string notification_type */ 4:
                    message.notificationType = reader.string();
                    break;
                case /* string body */ 5:
                    message.body = reader.string();
                    break;
                case /* NotificationModel.NotificationFromEntityType from_entity_type */ 6:
                    message.fromEntityType = reader.int32();
                    break;
                case /* string from_entity_id */ 7:
                    message.fromEntityId = reader.string();
                    break;
                case /* repeated string file_ids */ 8:
                    message.fileIds.push(reader.string());
                    break;
                case /* string created_at */ 9:
                    message.createdAt = reader.string();
                    break;
                case /* bool is_read */ 10:
                    message.isRead = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationModel_Notification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* NotificationModel.NotificationEntityType entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        /* string notification_id = 3; */
        if (message.notificationId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.notificationId);
        /* string notification_type = 4; */
        if (message.notificationType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.notificationType);
        /* string body = 5; */
        if (message.body !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.body);
        /* NotificationModel.NotificationFromEntityType from_entity_type = 6; */
        if (message.fromEntityType !== 0)
            writer.tag(6, WireType.Varint).int32(message.fromEntityType);
        /* string from_entity_id = 7; */
        if (message.fromEntityId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.fromEntityId);
        /* repeated string file_ids = 8; */
        for (let i = 0; i < message.fileIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.fileIds[i]);
        /* string created_at = 9; */
        if (message.createdAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.createdAt);
        /* bool is_read = 10; */
        if (message.isRead !== false)
            writer.tag(10, WireType.Varint).bool(message.isRead);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NotificationModel.Notification
 */
export const NotificationModel_Notification = new NotificationModel_Notification$Type();
