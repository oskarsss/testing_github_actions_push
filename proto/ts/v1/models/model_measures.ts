// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_measures.proto" (package "v1.models", syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message v1.models.Measures
 */
export interface Measures {
}
/**
 * @generated from protobuf message v1.models.Measures.Distance
 */
export interface Measures_Distance {
    /**
     * @generated from protobuf field: int64 miles = 1;
     */
    miles: number;
    /**
     * @generated from protobuf field: int64 kilometers = 2;
     */
    kilometers: number;
}
/**
 * @generated from protobuf message v1.models.Measures.Weight
 */
export interface Measures_Weight {
    /**
     * @generated from protobuf field: int64 pounds = 1;
     */
    pounds: number;
    /**
     * @generated from protobuf field: int64 kilograms = 2;
     */
    kilograms: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Measures$Type extends MessageType<Measures> {
    constructor() {
        super("v1.models.Measures", []);
    }
    create(value?: PartialMessage<Measures>): Measures {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Measures>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Measures): Measures {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Measures, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.Measures
 */
export const Measures = new Measures$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Measures_Distance$Type extends MessageType<Measures_Distance> {
    constructor() {
        super("v1.models.Measures.Distance", [
            { no: 1, name: "miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "kilometers", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Measures_Distance>): Measures_Distance {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.miles = 0;
        message.kilometers = 0;
        if (value !== undefined)
            reflectionMergePartial<Measures_Distance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Measures_Distance): Measures_Distance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 miles */ 1:
                    message.miles = reader.int64().toNumber();
                    break;
                case /* int64 kilometers */ 2:
                    message.kilometers = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Measures_Distance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 miles = 1; */
        if (message.miles !== 0)
            writer.tag(1, WireType.Varint).int64(message.miles);
        /* int64 kilometers = 2; */
        if (message.kilometers !== 0)
            writer.tag(2, WireType.Varint).int64(message.kilometers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.Measures.Distance
 */
export const Measures_Distance = new Measures_Distance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Measures_Weight$Type extends MessageType<Measures_Weight> {
    constructor() {
        super("v1.models.Measures.Weight", [
            { no: 1, name: "pounds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "kilograms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Measures_Weight>): Measures_Weight {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pounds = 0;
        message.kilograms = 0;
        if (value !== undefined)
            reflectionMergePartial<Measures_Weight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Measures_Weight): Measures_Weight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pounds */ 1:
                    message.pounds = reader.int64().toNumber();
                    break;
                case /* int64 kilograms */ 2:
                    message.kilograms = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Measures_Weight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pounds = 1; */
        if (message.pounds !== 0)
            writer.tag(1, WireType.Varint).int64(message.pounds);
        /* int64 kilograms = 2; */
        if (message.kilograms !== 0)
            writer.tag(2, WireType.Varint).int64(message.kilograms);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.Measures.Weight
 */
export const Measures_Weight = new Measures_Weight$Type();
