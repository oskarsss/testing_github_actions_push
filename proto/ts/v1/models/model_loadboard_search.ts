// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_loadboard_search.proto" (package "v1.models", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Measures_Weight } from "./model_measures";
/**
 * @generated from protobuf message v1.models.LoadboardSearch
 */
export interface LoadboardSearch {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string truck_id = 3;
     */
    truckId: string;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.Origin origin = 4;
     */
    origin?: LoadboardSearch_Origin;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.Destination destination = 5;
     */
    destination?: LoadboardSearch_Destination;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.PickupDateRange pickup_date_range = 6;
     */
    pickupDateRange?: LoadboardSearch_PickupDateRange;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.Filters filters = 7;
     */
    filters?: LoadboardSearch_Filters;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.Status status = 8;
     */
    status: LoadboardSearch_Status;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.SortResultBy sort_result_by = 9;
     */
    sortResultBy: LoadboardSearch_SortResultBy;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.SortResultDirection sort_result_direction = 10;
     */
    sortResultDirection: LoadboardSearch_SortResultDirection;
    /**
     * @generated from protobuf field: v1.models.LoadboardSearch.Stats stats = 11;
     */
    stats?: LoadboardSearch_Stats;
    /**
     * @generated from protobuf field: bool is_muted = 12;
     */
    isMuted: boolean;
}
/**
 * @generated from protobuf message v1.models.LoadboardSearch.Origin
 */
export interface LoadboardSearch_Origin {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 radius = 5;
     */
    radius: number;
}
/**
 * @generated from protobuf message v1.models.LoadboardSearch.Destination
 */
export interface LoadboardSearch_Destination {
    /**
     * @generated from protobuf field: string city = 1;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 2;
     */
    state: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
    /**
     * @generated from protobuf field: int64 radius = 5;
     */
    radius: number;
}
/**
 * @generated from protobuf message v1.models.LoadboardSearch.PickupDateRange
 */
export interface LoadboardSearch_PickupDateRange {
    /**
     * @generated from protobuf field: string start = 1;
     */
    start: string;
    /**
     * @generated from protobuf field: string end = 2;
     */
    end: string;
}
/**
 * @generated from protobuf message v1.models.LoadboardSearch.Filters
 */
export interface LoadboardSearch_Filters {
    /**
     * @generated from protobuf field: repeated string equipment_ids = 1;
     */
    equipmentIds: string[];
    /**
     * @generated from protobuf field: int64 min_rate = 2;
     */
    minRate: number;
    /**
     * @generated from protobuf field: int64 max_rate = 3;
     */
    maxRate: number;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight min_weight = 4;
     */
    minWeight?: Measures_Weight;
    /**
     * @generated from protobuf field: v1.models.Measures.Weight max_weight = 5;
     */
    maxWeight?: Measures_Weight;
    /**
     * @generated from protobuf field: int64 min_length = 6;
     */
    minLength: number;
    /**
     * @generated from protobuf field: int64 max_length = 7;
     */
    maxLength: number;
    /**
     * @generated from protobuf field: int64 max_age_minutes = 8;
     */
    maxAgeMinutes: number;
}
/**
 * @generated from protobuf message v1.models.LoadboardSearch.Stats
 */
export interface LoadboardSearch_Stats {
    /**
     * @generated from protobuf field: string avg_rpm = 1;
     */
    avgRpm: string;
}
/**
 * @generated from protobuf enum v1.models.LoadboardSearch.Status
 */
export enum LoadboardSearch_Status {
    /**
     * @generated from protobuf enum value: STATUS_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STATUS_ACTIVE = 1;
     */
    ACTIVE = 1,
    /**
     * @generated from protobuf enum value: STATUS_INACTIVE = 2;
     */
    INACTIVE = 2,
    /**
     * @generated from protobuf enum value: STATUS_DELETED = 3;
     */
    DELETED = 3
}
/**
 * @generated from protobuf enum v1.models.LoadboardSearch.SortResultBy
 */
export enum LoadboardSearch_SortResultBy {
    /**
     * @generated from protobuf enum value: SORT_BY_UNKNOWN = 0;
     */
    SORT_BY_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SORT_BY_AUTO = 1;
     */
    SORT_BY_AUTO = 1,
    /**
     * @generated from protobuf enum value: SORT_BY_ORIGIN_DEADHEAD = 3;
     */
    SORT_BY_ORIGIN_DEADHEAD = 3,
    /**
     * @generated from protobuf enum value: SORT_BY_DESTINATION_DEADHEAD = 4;
     */
    SORT_BY_DESTINATION_DEADHEAD = 4,
    /**
     * @generated from protobuf enum value: SORT_BY_PICKUP_DATE = 5;
     */
    SORT_BY_PICKUP_DATE = 5,
    /**
     * @generated from protobuf enum value: SORT_BY_EQUIPMENT = 6;
     */
    SORT_BY_EQUIPMENT = 6,
    /**
     * @generated from protobuf enum value: SORT_BY_SIZE = 7;
     */
    SORT_BY_SIZE = 7,
    /**
     * @generated from protobuf enum value: SORT_BY_LENGTH = 8;
     */
    SORT_BY_LENGTH = 8,
    /**
     * @generated from protobuf enum value: SORT_BY_WEIGHT = 9;
     */
    SORT_BY_WEIGHT = 9,
    /**
     * @generated from protobuf enum value: SORT_BY_DISTANCE = 10;
     */
    SORT_BY_DISTANCE = 10,
    /**
     * @generated from protobuf enum value: SORT_BY_AGE = 11;
     */
    SORT_BY_AGE = 11
}
/**
 * @generated from protobuf enum v1.models.LoadboardSearch.SortResultDirection
 */
export enum LoadboardSearch_SortResultDirection {
    /**
     * @generated from protobuf enum value: SORT_DIRECTION_UNKNOWN = 0;
     */
    SORT_DIRECTION_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SORT_DIRECTION_ASC = 1;
     */
    SORT_DIRECTION_ASC = 1,
    /**
     * @generated from protobuf enum value: SORT_DIRECTION_DESC = 2;
     */
    SORT_DIRECTION_DESC = 2
}
/**
 * @generated from protobuf message v1.models.LoadboardSearchResultToDelete
 */
export interface LoadboardSearchResultToDelete {
    /**
     * @generated from protobuf field: string search_id = 1;
     */
    searchId: string;
    /**
     * @generated from protobuf field: repeated v1.models.LoadboardSearchResultToDelete.ResultData result_data = 2;
     */
    resultData: LoadboardSearchResultToDelete_ResultData[];
}
/**
 * @generated from protobuf message v1.models.LoadboardSearchResultToDelete.ResultData
 */
export interface LoadboardSearchResultToDelete_ResultData {
    /**
     * @generated from protobuf field: string result_id = 1;
     */
    resultId: string;
    /**
     * @generated from protobuf field: string integration_id = 2;
     */
    integrationId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearch$Type extends MessageType<LoadboardSearch> {
    constructor() {
        super("v1.models.LoadboardSearch", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "origin", kind: "message", T: () => LoadboardSearch_Origin },
            { no: 5, name: "destination", kind: "message", T: () => LoadboardSearch_Destination },
            { no: 6, name: "pickup_date_range", kind: "message", T: () => LoadboardSearch_PickupDateRange },
            { no: 7, name: "filters", kind: "message", T: () => LoadboardSearch_Filters },
            { no: 8, name: "status", kind: "enum", T: () => ["v1.models.LoadboardSearch.Status", LoadboardSearch_Status, "STATUS_"] },
            { no: 9, name: "sort_result_by", kind: "enum", T: () => ["v1.models.LoadboardSearch.SortResultBy", LoadboardSearch_SortResultBy] },
            { no: 10, name: "sort_result_direction", kind: "enum", T: () => ["v1.models.LoadboardSearch.SortResultDirection", LoadboardSearch_SortResultDirection] },
            { no: 11, name: "stats", kind: "message", T: () => LoadboardSearch_Stats },
            { no: 12, name: "is_muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearch>): LoadboardSearch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        message.name = "";
        message.truckId = "";
        message.status = 0;
        message.sortResultBy = 0;
        message.sortResultDirection = 0;
        message.isMuted = false;
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearch): LoadboardSearch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string truck_id */ 3:
                    message.truckId = reader.string();
                    break;
                case /* v1.models.LoadboardSearch.Origin origin */ 4:
                    message.origin = LoadboardSearch_Origin.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                case /* v1.models.LoadboardSearch.Destination destination */ 5:
                    message.destination = LoadboardSearch_Destination.internalBinaryRead(reader, reader.uint32(), options, message.destination);
                    break;
                case /* v1.models.LoadboardSearch.PickupDateRange pickup_date_range */ 6:
                    message.pickupDateRange = LoadboardSearch_PickupDateRange.internalBinaryRead(reader, reader.uint32(), options, message.pickupDateRange);
                    break;
                case /* v1.models.LoadboardSearch.Filters filters */ 7:
                    message.filters = LoadboardSearch_Filters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                case /* v1.models.LoadboardSearch.Status status */ 8:
                    message.status = reader.int32();
                    break;
                case /* v1.models.LoadboardSearch.SortResultBy sort_result_by */ 9:
                    message.sortResultBy = reader.int32();
                    break;
                case /* v1.models.LoadboardSearch.SortResultDirection sort_result_direction */ 10:
                    message.sortResultDirection = reader.int32();
                    break;
                case /* v1.models.LoadboardSearch.Stats stats */ 11:
                    message.stats = LoadboardSearch_Stats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* bool is_muted */ 12:
                    message.isMuted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string truck_id = 3; */
        if (message.truckId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.truckId);
        /* v1.models.LoadboardSearch.Origin origin = 4; */
        if (message.origin)
            LoadboardSearch_Origin.internalBinaryWrite(message.origin, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.LoadboardSearch.Destination destination = 5; */
        if (message.destination)
            LoadboardSearch_Destination.internalBinaryWrite(message.destination, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.LoadboardSearch.PickupDateRange pickup_date_range = 6; */
        if (message.pickupDateRange)
            LoadboardSearch_PickupDateRange.internalBinaryWrite(message.pickupDateRange, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.LoadboardSearch.Filters filters = 7; */
        if (message.filters)
            LoadboardSearch_Filters.internalBinaryWrite(message.filters, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.LoadboardSearch.Status status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* v1.models.LoadboardSearch.SortResultBy sort_result_by = 9; */
        if (message.sortResultBy !== 0)
            writer.tag(9, WireType.Varint).int32(message.sortResultBy);
        /* v1.models.LoadboardSearch.SortResultDirection sort_result_direction = 10; */
        if (message.sortResultDirection !== 0)
            writer.tag(10, WireType.Varint).int32(message.sortResultDirection);
        /* v1.models.LoadboardSearch.Stats stats = 11; */
        if (message.stats)
            LoadboardSearch_Stats.internalBinaryWrite(message.stats, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool is_muted = 12; */
        if (message.isMuted !== false)
            writer.tag(12, WireType.Varint).bool(message.isMuted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearch
 */
export const LoadboardSearch = new LoadboardSearch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearch_Origin$Type extends MessageType<LoadboardSearch_Origin> {
    constructor() {
        super("v1.models.LoadboardSearch.Origin", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radius", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearch_Origin>): LoadboardSearch_Origin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.radius = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearch_Origin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearch_Origin): LoadboardSearch_Origin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* int64 radius */ 5:
                    message.radius = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearch_Origin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* int64 radius = 5; */
        if (message.radius !== 0)
            writer.tag(5, WireType.Varint).int64(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearch.Origin
 */
export const LoadboardSearch_Origin = new LoadboardSearch_Origin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearch_Destination$Type extends MessageType<LoadboardSearch_Destination> {
    constructor() {
        super("v1.models.LoadboardSearch.Destination", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radius", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearch_Destination>): LoadboardSearch_Destination {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.state = "";
        message.lat = 0;
        message.lon = 0;
        message.radius = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearch_Destination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearch_Destination): LoadboardSearch_Destination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* string state */ 2:
                    message.state = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                case /* int64 radius */ 5:
                    message.radius = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearch_Destination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* string state = 2; */
        if (message.state !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.state);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        /* int64 radius = 5; */
        if (message.radius !== 0)
            writer.tag(5, WireType.Varint).int64(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearch.Destination
 */
export const LoadboardSearch_Destination = new LoadboardSearch_Destination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearch_PickupDateRange$Type extends MessageType<LoadboardSearch_PickupDateRange> {
    constructor() {
        super("v1.models.LoadboardSearch.PickupDateRange", [
            { no: 1, name: "start", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearch_PickupDateRange>): LoadboardSearch_PickupDateRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = "";
        message.end = "";
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearch_PickupDateRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearch_PickupDateRange): LoadboardSearch_PickupDateRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start */ 1:
                    message.start = reader.string();
                    break;
                case /* string end */ 2:
                    message.end = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearch_PickupDateRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start = 1; */
        if (message.start !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.start);
        /* string end = 2; */
        if (message.end !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearch.PickupDateRange
 */
export const LoadboardSearch_PickupDateRange = new LoadboardSearch_PickupDateRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearch_Filters$Type extends MessageType<LoadboardSearch_Filters> {
    constructor() {
        super("v1.models.LoadboardSearch.Filters", [
            { no: 1, name: "equipment_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "min_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "max_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "min_weight", kind: "message", T: () => Measures_Weight },
            { no: 5, name: "max_weight", kind: "message", T: () => Measures_Weight },
            { no: 6, name: "min_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "max_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "max_age_minutes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearch_Filters>): LoadboardSearch_Filters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentIds = [];
        message.minRate = 0;
        message.maxRate = 0;
        message.minLength = 0;
        message.maxLength = 0;
        message.maxAgeMinutes = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearch_Filters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearch_Filters): LoadboardSearch_Filters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string equipment_ids */ 1:
                    message.equipmentIds.push(reader.string());
                    break;
                case /* int64 min_rate */ 2:
                    message.minRate = reader.int64().toNumber();
                    break;
                case /* int64 max_rate */ 3:
                    message.maxRate = reader.int64().toNumber();
                    break;
                case /* v1.models.Measures.Weight min_weight */ 4:
                    message.minWeight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.minWeight);
                    break;
                case /* v1.models.Measures.Weight max_weight */ 5:
                    message.maxWeight = Measures_Weight.internalBinaryRead(reader, reader.uint32(), options, message.maxWeight);
                    break;
                case /* int64 min_length */ 6:
                    message.minLength = reader.int64().toNumber();
                    break;
                case /* int64 max_length */ 7:
                    message.maxLength = reader.int64().toNumber();
                    break;
                case /* int64 max_age_minutes */ 8:
                    message.maxAgeMinutes = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearch_Filters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string equipment_ids = 1; */
        for (let i = 0; i < message.equipmentIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentIds[i]);
        /* int64 min_rate = 2; */
        if (message.minRate !== 0)
            writer.tag(2, WireType.Varint).int64(message.minRate);
        /* int64 max_rate = 3; */
        if (message.maxRate !== 0)
            writer.tag(3, WireType.Varint).int64(message.maxRate);
        /* v1.models.Measures.Weight min_weight = 4; */
        if (message.minWeight)
            Measures_Weight.internalBinaryWrite(message.minWeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* v1.models.Measures.Weight max_weight = 5; */
        if (message.maxWeight)
            Measures_Weight.internalBinaryWrite(message.maxWeight, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 min_length = 6; */
        if (message.minLength !== 0)
            writer.tag(6, WireType.Varint).int64(message.minLength);
        /* int64 max_length = 7; */
        if (message.maxLength !== 0)
            writer.tag(7, WireType.Varint).int64(message.maxLength);
        /* int64 max_age_minutes = 8; */
        if (message.maxAgeMinutes !== 0)
            writer.tag(8, WireType.Varint).int64(message.maxAgeMinutes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearch.Filters
 */
export const LoadboardSearch_Filters = new LoadboardSearch_Filters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearch_Stats$Type extends MessageType<LoadboardSearch_Stats> {
    constructor() {
        super("v1.models.LoadboardSearch.Stats", [
            { no: 1, name: "avg_rpm", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearch_Stats>): LoadboardSearch_Stats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.avgRpm = "";
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearch_Stats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearch_Stats): LoadboardSearch_Stats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string avg_rpm */ 1:
                    message.avgRpm = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearch_Stats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string avg_rpm = 1; */
        if (message.avgRpm !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.avgRpm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearch.Stats
 */
export const LoadboardSearch_Stats = new LoadboardSearch_Stats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearchResultToDelete$Type extends MessageType<LoadboardSearchResultToDelete> {
    constructor() {
        super("v1.models.LoadboardSearchResultToDelete", [
            { no: 1, name: "search_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "result_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadboardSearchResultToDelete_ResultData }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearchResultToDelete>): LoadboardSearchResultToDelete {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchId = "";
        message.resultData = [];
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearchResultToDelete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearchResultToDelete): LoadboardSearchResultToDelete {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search_id */ 1:
                    message.searchId = reader.string();
                    break;
                case /* repeated v1.models.LoadboardSearchResultToDelete.ResultData result_data */ 2:
                    message.resultData.push(LoadboardSearchResultToDelete_ResultData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearchResultToDelete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search_id = 1; */
        if (message.searchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchId);
        /* repeated v1.models.LoadboardSearchResultToDelete.ResultData result_data = 2; */
        for (let i = 0; i < message.resultData.length; i++)
            LoadboardSearchResultToDelete_ResultData.internalBinaryWrite(message.resultData[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearchResultToDelete
 */
export const LoadboardSearchResultToDelete = new LoadboardSearchResultToDelete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadboardSearchResultToDelete_ResultData$Type extends MessageType<LoadboardSearchResultToDelete_ResultData> {
    constructor() {
        super("v1.models.LoadboardSearchResultToDelete.ResultData", [
            { no: 1, name: "result_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "integration_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadboardSearchResultToDelete_ResultData>): LoadboardSearchResultToDelete_ResultData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resultId = "";
        message.integrationId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadboardSearchResultToDelete_ResultData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadboardSearchResultToDelete_ResultData): LoadboardSearchResultToDelete_ResultData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string result_id */ 1:
                    message.resultId = reader.string();
                    break;
                case /* string integration_id */ 2:
                    message.integrationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadboardSearchResultToDelete_ResultData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string result_id = 1; */
        if (message.resultId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resultId);
        /* string integration_id = 2; */
        if (message.integrationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.integrationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.models.LoadboardSearchResultToDelete.ResultData
 */
export const LoadboardSearchResultToDelete_ResultData = new LoadboardSearchResultToDelete_ResultData$Type();
