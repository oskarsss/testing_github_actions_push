// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_service_log_draft.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceLogItemModel_WarrantyCoverage } from "./model_service_log_item";
import { VehicleMaintenanceModel_VehicleType } from "./model_vehicle_maintenance";
import { ServiceLogModel_ServiceLogType } from "./model_service_log";
/**
 * @generated from protobuf message ServiceLogDraftModel
 */
export interface ServiceLogDraftModel {
}
/**
 * @generated from protobuf message ServiceLogDraftModel.ServiceLog
 */
export interface ServiceLogDraftModel_ServiceLog {
    /**
     * service_log_id       //at sl create
     *
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
    /**
     * friendly_id         //at sl create
     *
     * @generated from protobuf field: ServiceLogModel.ServiceLogType type = 2;
     */
    type: ServiceLogModel_ServiceLogType;
    /**
     * @generated from protobuf field: string order_number = 3;
     */
    orderNumber: string;
    /**
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 4;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType;
    /**
     * @generated from protobuf field: optional string truck_id = 5;
     */
    truckId?: string;
    /**
     * @generated from protobuf field: optional string trailer_id = 6;
     */
    trailerId?: string;
    /**
     * @generated from protobuf field: optional int64 odometer_miles = 7;
     */
    odometerMiles?: number;
    /**
     * @generated from protobuf field: optional int64 odometer_kilometers = 8;
     */
    odometerKilometers?: number;
    /**
     * @generated from protobuf field: optional int64 engine_hours = 9;
     */
    engineHours?: number;
    /**
     * @generated from protobuf field: optional string driver_id = 10;
     */
    driverId?: string;
    /**
     * @generated from protobuf field: string start_date = 11;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 12;
     */
    endDate: string; // optional
    /**
     * @generated from protobuf field: string description = 13;
     */
    description: string;
    /**
     * @generated from protobuf field: optional double total_amount = 14;
     */
    totalAmount?: number; // Will be passed only in retrieve! In Create/Update do not send.
    /**
     * created_by_user_id    //not needed in draft
     * deleted               //not needed in draft
     * updated_at            //not needed in draft
     * created_at            //not needed in draft
     *
     * @generated from protobuf field: string file_id = 15;
     */
    fileId: string;
    /**
     * @generated from protobuf field: string file_name = 16;
     */
    fileName: string;
    /**
     * @generated from protobuf field: repeated ServiceLogDraftModel.ServiceLogItem items = 17;
     */
    items: ServiceLogDraftModel_ServiceLogItem[];
}
/**
 * @generated from protobuf message ServiceLogDraftModel.ServiceLogHeader
 */
export interface ServiceLogDraftModel_ServiceLogHeader {
    /**
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
    /**
     * @generated from protobuf field: string order_number = 2;
     */
    orderNumber: string;
    /**
     * @generated from protobuf field: double total_amount = 3;
     */
    totalAmount: number;
}
/**
 * @generated from protobuf message ServiceLogDraftModel.ServiceLogItem
 */
export interface ServiceLogDraftModel_ServiceLogItem {
    /**
     * service_log_id        //at sl create
     * service_log_item_id   //at sl create
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string item_type_id = 2;
     */
    itemTypeId: string;
    /**
     * @generated from protobuf field: ServiceLogItemModel.WarrantyCoverage warranty_coverage = 3;
     */
    warrantyCoverage: ServiceLogItemModel_WarrantyCoverage;
    /**
     * @generated from protobuf field: double quantity = 4;
     */
    quantity: number;
    /**
     * @generated from protobuf field: double rate = 5;
     */
    rate: number;
    /**
     * @generated from protobuf field: optional double amount = 6;
     */
    amount?: number; // Will be passed only in retrieve! In Create/Update do not send.
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftModel$Type extends MessageType<ServiceLogDraftModel> {
    constructor() {
        super("ServiceLogDraftModel", []);
    }
    create(value?: PartialMessage<ServiceLogDraftModel>): ServiceLogDraftModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftModel): ServiceLogDraftModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogDraftModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftModel
 */
export const ServiceLogDraftModel = new ServiceLogDraftModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftModel_ServiceLog$Type extends MessageType<ServiceLogDraftModel_ServiceLog> {
    constructor() {
        super("ServiceLogDraftModel.ServiceLog", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["ServiceLogModel.ServiceLogType", ServiceLogModel_ServiceLogType, "SERVICE_LOG_TYPE_"] },
            { no: 3, name: "order_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 5, name: "truck_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailer_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "odometer_miles", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "odometer_kilometers", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "engine_hours", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "driver_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "total_amount", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceLogDraftModel_ServiceLogItem }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftModel_ServiceLog>): ServiceLogDraftModel_ServiceLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        message.type = 0;
        message.orderNumber = "";
        message.vehicleType = 0;
        message.startDate = "";
        message.endDate = "";
        message.description = "";
        message.fileId = "";
        message.fileName = "";
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftModel_ServiceLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftModel_ServiceLog): ServiceLogDraftModel_ServiceLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                case /* ServiceLogModel.ServiceLogType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string order_number */ 3:
                    message.orderNumber = reader.string();
                    break;
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 4:
                    message.vehicleType = reader.int32();
                    break;
                case /* optional string truck_id */ 5:
                    message.truckId = reader.string();
                    break;
                case /* optional string trailer_id */ 6:
                    message.trailerId = reader.string();
                    break;
                case /* optional int64 odometer_miles */ 7:
                    message.odometerMiles = reader.int64().toNumber();
                    break;
                case /* optional int64 odometer_kilometers */ 8:
                    message.odometerKilometers = reader.int64().toNumber();
                    break;
                case /* optional int64 engine_hours */ 9:
                    message.engineHours = reader.int64().toNumber();
                    break;
                case /* optional string driver_id */ 10:
                    message.driverId = reader.string();
                    break;
                case /* string start_date */ 11:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 12:
                    message.endDate = reader.string();
                    break;
                case /* string description */ 13:
                    message.description = reader.string();
                    break;
                case /* optional double total_amount */ 14:
                    message.totalAmount = reader.double();
                    break;
                case /* string file_id */ 15:
                    message.fileId = reader.string();
                    break;
                case /* string file_name */ 16:
                    message.fileName = reader.string();
                    break;
                case /* repeated ServiceLogDraftModel.ServiceLogItem items */ 17:
                    message.items.push(ServiceLogDraftModel_ServiceLogItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftModel_ServiceLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        /* ServiceLogModel.ServiceLogType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string order_number = 3; */
        if (message.orderNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.orderNumber);
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 4; */
        if (message.vehicleType !== 0)
            writer.tag(4, WireType.Varint).int32(message.vehicleType);
        /* optional string truck_id = 5; */
        if (message.truckId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.truckId);
        /* optional string trailer_id = 6; */
        if (message.trailerId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.trailerId);
        /* optional int64 odometer_miles = 7; */
        if (message.odometerMiles !== undefined)
            writer.tag(7, WireType.Varint).int64(message.odometerMiles);
        /* optional int64 odometer_kilometers = 8; */
        if (message.odometerKilometers !== undefined)
            writer.tag(8, WireType.Varint).int64(message.odometerKilometers);
        /* optional int64 engine_hours = 9; */
        if (message.engineHours !== undefined)
            writer.tag(9, WireType.Varint).int64(message.engineHours);
        /* optional string driver_id = 10; */
        if (message.driverId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.driverId);
        /* string start_date = 11; */
        if (message.startDate !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 12; */
        if (message.endDate !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.endDate);
        /* string description = 13; */
        if (message.description !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.description);
        /* optional double total_amount = 14; */
        if (message.totalAmount !== undefined)
            writer.tag(14, WireType.Bit64).double(message.totalAmount);
        /* string file_id = 15; */
        if (message.fileId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.fileId);
        /* string file_name = 16; */
        if (message.fileName !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.fileName);
        /* repeated ServiceLogDraftModel.ServiceLogItem items = 17; */
        for (let i = 0; i < message.items.length; i++)
            ServiceLogDraftModel_ServiceLogItem.internalBinaryWrite(message.items[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftModel.ServiceLog
 */
export const ServiceLogDraftModel_ServiceLog = new ServiceLogDraftModel_ServiceLog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftModel_ServiceLogHeader$Type extends MessageType<ServiceLogDraftModel_ServiceLogHeader> {
    constructor() {
        super("ServiceLogDraftModel.ServiceLogHeader", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "order_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftModel_ServiceLogHeader>): ServiceLogDraftModel_ServiceLogHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        message.orderNumber = "";
        message.totalAmount = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftModel_ServiceLogHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftModel_ServiceLogHeader): ServiceLogDraftModel_ServiceLogHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                case /* string order_number */ 2:
                    message.orderNumber = reader.string();
                    break;
                case /* double total_amount */ 3:
                    message.totalAmount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftModel_ServiceLogHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        /* string order_number = 2; */
        if (message.orderNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.orderNumber);
        /* double total_amount = 3; */
        if (message.totalAmount !== 0)
            writer.tag(3, WireType.Bit64).double(message.totalAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftModel.ServiceLogHeader
 */
export const ServiceLogDraftModel_ServiceLogHeader = new ServiceLogDraftModel_ServiceLogHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogDraftModel_ServiceLogItem$Type extends MessageType<ServiceLogDraftModel_ServiceLogItem> {
    constructor() {
        super("ServiceLogDraftModel.ServiceLogItem", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "warranty_coverage", kind: "enum", T: () => ["ServiceLogItemModel.WarrantyCoverage", ServiceLogItemModel_WarrantyCoverage, "WARRANTY_COVERAGE_"] },
            { no: 4, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "rate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "amount", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogDraftModel_ServiceLogItem>): ServiceLogDraftModel_ServiceLogItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.itemTypeId = "";
        message.warrantyCoverage = 0;
        message.quantity = 0;
        message.rate = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogDraftModel_ServiceLogItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogDraftModel_ServiceLogItem): ServiceLogDraftModel_ServiceLogItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string item_type_id */ 2:
                    message.itemTypeId = reader.string();
                    break;
                case /* ServiceLogItemModel.WarrantyCoverage warranty_coverage */ 3:
                    message.warrantyCoverage = reader.int32();
                    break;
                case /* double quantity */ 4:
                    message.quantity = reader.double();
                    break;
                case /* double rate */ 5:
                    message.rate = reader.double();
                    break;
                case /* optional double amount */ 6:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogDraftModel_ServiceLogItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string item_type_id = 2; */
        if (message.itemTypeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemTypeId);
        /* ServiceLogItemModel.WarrantyCoverage warranty_coverage = 3; */
        if (message.warrantyCoverage !== 0)
            writer.tag(3, WireType.Varint).int32(message.warrantyCoverage);
        /* double quantity = 4; */
        if (message.quantity !== 0)
            writer.tag(4, WireType.Bit64).double(message.quantity);
        /* double rate = 5; */
        if (message.rate !== 0)
            writer.tag(5, WireType.Bit64).double(message.rate);
        /* optional double amount = 6; */
        if (message.amount !== undefined)
            writer.tag(6, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogDraftModel.ServiceLogItem
 */
export const ServiceLogDraftModel_ServiceLogItem = new ServiceLogDraftModel_ServiceLogItem$Type();
