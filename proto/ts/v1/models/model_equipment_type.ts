// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_equipment_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message EquipmentTypeModel
 */
export interface EquipmentTypeModel {
    /**
     * @generated from protobuf field: string equipment_type_id = 1;
     */
    equipmentTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 3;
     */
    code: string;
    /**
     * @generated from protobuf field: bool deleted = 4;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: EquipmentTypeModel.Icon icon = 5;
     */
    icon: EquipmentTypeModel_Icon;
}
/**
 * @generated from protobuf enum EquipmentTypeModel.Icon
 */
export enum EquipmentTypeModel_Icon {
    /**
     * @generated from protobuf enum value: ICON_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ICON_DEFAULT = 1;
     */
    DEFAULT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class EquipmentTypeModel$Type extends MessageType<EquipmentTypeModel> {
    constructor() {
        super("EquipmentTypeModel", [
            { no: 1, name: "equipment_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "icon", kind: "enum", T: () => ["EquipmentTypeModel.Icon", EquipmentTypeModel_Icon, "ICON_"] }
        ]);
    }
    create(value?: PartialMessage<EquipmentTypeModel>): EquipmentTypeModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipmentTypeId = "";
        message.name = "";
        message.code = "";
        message.deleted = false;
        message.icon = 0;
        if (value !== undefined)
            reflectionMergePartial<EquipmentTypeModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentTypeModel): EquipmentTypeModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string equipment_type_id */ 1:
                    message.equipmentTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string code */ 3:
                    message.code = reader.string();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                case /* EquipmentTypeModel.Icon icon */ 5:
                    message.icon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipmentTypeModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string equipment_type_id = 1; */
        if (message.equipmentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.equipmentTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string code = 3; */
        if (message.code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.code);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, WireType.Varint).bool(message.deleted);
        /* EquipmentTypeModel.Icon icon = 5; */
        if (message.icon !== 0)
            writer.tag(5, WireType.Varint).int32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EquipmentTypeModel
 */
export const EquipmentTypeModel = new EquipmentTypeModel$Type();
