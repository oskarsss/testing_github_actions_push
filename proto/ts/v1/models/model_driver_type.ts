// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_driver_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message DriverTypeModel
 */
export interface DriverTypeModel {
    /**
     * @generated from protobuf field: string driver_type_id = 1;
     */
    driverTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: DriverTypeModel.Icon icon = 3;
     */
    icon: DriverTypeModel_Icon;
    /**
     * @generated from protobuf field: bool is_default = 4;
     */
    isDefault: boolean;
    /**
     * @generated from protobuf field: DriverTypeModel.Permissions permissions = 5;
     */
    permissions?: DriverTypeModel_Permissions;
}
/**
 * @generated from protobuf message DriverTypeModel.Permissions
 */
export interface DriverTypeModel_Permissions {
    /**
     * @generated from protobuf field: DriverTypeModel.Permissions.Settlements settlements = 1;
     */
    settlements?: DriverTypeModel_Permissions_Settlements;
    /**
     * @generated from protobuf field: DriverTypeModel.Permissions.Loads loads = 2;
     */
    loads?: DriverTypeModel_Permissions_Loads;
    /**
     * @generated from protobuf field: DriverTypeModel.Permissions.Bank bank = 3;
     */
    bank?: DriverTypeModel_Permissions_Bank;
    /**
     * @generated from protobuf field: DriverTypeModel.Permissions.App app = 4;
     */
    app?: DriverTypeModel_Permissions_App;
}
/**
 * @generated from protobuf message DriverTypeModel.Permissions.Settlements
 */
export interface DriverTypeModel_Permissions_Settlements {
    /**
     * @generated from protobuf field: bool settlements = 1;
     */
    settlements: boolean;
    /**
     * @generated from protobuf field: bool view_loads = 2;
     */
    viewLoads: boolean;
    /**
     * @generated from protobuf field: bool view_load_total_amount = 3;
     */
    viewLoadTotalAmount: boolean;
    /**
     * @generated from protobuf field: bool view_loads_pay_amount = 4;
     */
    viewLoadsPayAmount: boolean;
    /**
     * @generated from protobuf field: bool view_loads_distance = 5;
     */
    viewLoadsDistance: boolean;
    /**
     * @generated from protobuf field: bool view_fuel = 6;
     */
    viewFuel: boolean;
    /**
     * @generated from protobuf field: bool view_tolls = 7;
     */
    viewTolls: boolean;
    /**
     * @generated from protobuf field: bool view_company_fee = 8;
     */
    viewCompanyFee: boolean;
    /**
     * @generated from protobuf field: bool view_debits = 9;
     */
    viewDebits: boolean;
    /**
     * @generated from protobuf field: bool view_credits = 10;
     */
    viewCredits: boolean;
}
/**
 * @generated from protobuf message DriverTypeModel.Permissions.Loads
 */
export interface DriverTypeModel_Permissions_Loads {
    /**
     * @generated from protobuf field: bool completed_loads = 1;
     */
    completedLoads: boolean;
    /**
     * @generated from protobuf field: bool total_amount = 2;
     */
    totalAmount: boolean;
    /**
     * @generated from protobuf field: bool driver_pay_amount = 3;
     */
    driverPayAmount: boolean;
    /**
     * @generated from protobuf field: bool distance = 4;
     */
    distance: boolean;
}
/**
 * @generated from protobuf message DriverTypeModel.Permissions.Bank
 */
export interface DriverTypeModel_Permissions_Bank {
    /**
     * @generated from protobuf field: bool bank_accounts = 1;
     */
    bankAccounts: boolean;
}
/**
 * @generated from protobuf message DriverTypeModel.Permissions.App
 */
export interface DriverTypeModel_Permissions_App {
    /**
     * @generated from protobuf field: bool take_screenshots = 1;
     */
    takeScreenshots: boolean;
    /**
     * @generated from protobuf field: bool update_order_commodity = 2;
     */
    updateOrderCommodity: boolean;
    /**
     * @generated from protobuf field: bool truck_self_assign = 3;
     */
    truckSelfAssign: boolean;
    /**
     * @generated from protobuf field: bool trailer_self_assign = 4;
     */
    trailerSelfAssign: boolean;
}
/**
 * @generated from protobuf enum DriverTypeModel.Icon
 */
export enum DriverTypeModel_Icon {
    /**
     * @generated from protobuf enum value: ICON_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ICON_DEFAULT = 1;
     */
    DEFAULT = 1,
    /**
     * @generated from protobuf enum value: ICON_OWNER_OPERATOR = 2;
     */
    OWNER_OPERATOR = 2,
    /**
     * @generated from protobuf enum value: ICON_COMPANY = 3;
     */
    COMPANY = 3,
    /**
     * @generated from protobuf enum value: ICON_LEASE = 4;
     */
    LEASE = 4,
    /**
     * @generated from protobuf enum value: ICON_LEASE_TO_OWN = 5;
     */
    LEASE_TO_OWN = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeModel$Type extends MessageType<DriverTypeModel> {
    constructor() {
        super("DriverTypeModel", [
            { no: 1, name: "driver_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "enum", T: () => ["DriverTypeModel.Icon", DriverTypeModel_Icon, "ICON_"] },
            { no: 4, name: "is_default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "permissions", kind: "message", T: () => DriverTypeModel_Permissions }
        ]);
    }
    create(value?: PartialMessage<DriverTypeModel>): DriverTypeModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driverTypeId = "";
        message.name = "";
        message.icon = 0;
        message.isDefault = false;
        if (value !== undefined)
            reflectionMergePartial<DriverTypeModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeModel): DriverTypeModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string driver_type_id */ 1:
                    message.driverTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* DriverTypeModel.Icon icon */ 3:
                    message.icon = reader.int32();
                    break;
                case /* bool is_default */ 4:
                    message.isDefault = reader.bool();
                    break;
                case /* DriverTypeModel.Permissions permissions */ 5:
                    message.permissions = DriverTypeModel_Permissions.internalBinaryRead(reader, reader.uint32(), options, message.permissions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string driver_type_id = 1; */
        if (message.driverTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driverTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* DriverTypeModel.Icon icon = 3; */
        if (message.icon !== 0)
            writer.tag(3, WireType.Varint).int32(message.icon);
        /* bool is_default = 4; */
        if (message.isDefault !== false)
            writer.tag(4, WireType.Varint).bool(message.isDefault);
        /* DriverTypeModel.Permissions permissions = 5; */
        if (message.permissions)
            DriverTypeModel_Permissions.internalBinaryWrite(message.permissions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeModel
 */
export const DriverTypeModel = new DriverTypeModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeModel_Permissions$Type extends MessageType<DriverTypeModel_Permissions> {
    constructor() {
        super("DriverTypeModel.Permissions", [
            { no: 1, name: "settlements", kind: "message", T: () => DriverTypeModel_Permissions_Settlements },
            { no: 2, name: "loads", kind: "message", T: () => DriverTypeModel_Permissions_Loads },
            { no: 3, name: "bank", kind: "message", T: () => DriverTypeModel_Permissions_Bank },
            { no: 4, name: "app", kind: "message", T: () => DriverTypeModel_Permissions_App }
        ]);
    }
    create(value?: PartialMessage<DriverTypeModel_Permissions>): DriverTypeModel_Permissions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DriverTypeModel_Permissions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeModel_Permissions): DriverTypeModel_Permissions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DriverTypeModel.Permissions.Settlements settlements */ 1:
                    message.settlements = DriverTypeModel_Permissions_Settlements.internalBinaryRead(reader, reader.uint32(), options, message.settlements);
                    break;
                case /* DriverTypeModel.Permissions.Loads loads */ 2:
                    message.loads = DriverTypeModel_Permissions_Loads.internalBinaryRead(reader, reader.uint32(), options, message.loads);
                    break;
                case /* DriverTypeModel.Permissions.Bank bank */ 3:
                    message.bank = DriverTypeModel_Permissions_Bank.internalBinaryRead(reader, reader.uint32(), options, message.bank);
                    break;
                case /* DriverTypeModel.Permissions.App app */ 4:
                    message.app = DriverTypeModel_Permissions_App.internalBinaryRead(reader, reader.uint32(), options, message.app);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeModel_Permissions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* DriverTypeModel.Permissions.Settlements settlements = 1; */
        if (message.settlements)
            DriverTypeModel_Permissions_Settlements.internalBinaryWrite(message.settlements, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* DriverTypeModel.Permissions.Loads loads = 2; */
        if (message.loads)
            DriverTypeModel_Permissions_Loads.internalBinaryWrite(message.loads, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* DriverTypeModel.Permissions.Bank bank = 3; */
        if (message.bank)
            DriverTypeModel_Permissions_Bank.internalBinaryWrite(message.bank, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DriverTypeModel.Permissions.App app = 4; */
        if (message.app)
            DriverTypeModel_Permissions_App.internalBinaryWrite(message.app, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeModel.Permissions
 */
export const DriverTypeModel_Permissions = new DriverTypeModel_Permissions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeModel_Permissions_Settlements$Type extends MessageType<DriverTypeModel_Permissions_Settlements> {
    constructor() {
        super("DriverTypeModel.Permissions.Settlements", [
            { no: 1, name: "settlements", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "view_loads", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "view_load_total_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "view_loads_pay_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "view_loads_distance", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "view_fuel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "view_tolls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "view_company_fee", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "view_debits", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "view_credits", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeModel_Permissions_Settlements>): DriverTypeModel_Permissions_Settlements {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settlements = false;
        message.viewLoads = false;
        message.viewLoadTotalAmount = false;
        message.viewLoadsPayAmount = false;
        message.viewLoadsDistance = false;
        message.viewFuel = false;
        message.viewTolls = false;
        message.viewCompanyFee = false;
        message.viewDebits = false;
        message.viewCredits = false;
        if (value !== undefined)
            reflectionMergePartial<DriverTypeModel_Permissions_Settlements>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeModel_Permissions_Settlements): DriverTypeModel_Permissions_Settlements {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool settlements */ 1:
                    message.settlements = reader.bool();
                    break;
                case /* bool view_loads */ 2:
                    message.viewLoads = reader.bool();
                    break;
                case /* bool view_load_total_amount */ 3:
                    message.viewLoadTotalAmount = reader.bool();
                    break;
                case /* bool view_loads_pay_amount */ 4:
                    message.viewLoadsPayAmount = reader.bool();
                    break;
                case /* bool view_loads_distance */ 5:
                    message.viewLoadsDistance = reader.bool();
                    break;
                case /* bool view_fuel */ 6:
                    message.viewFuel = reader.bool();
                    break;
                case /* bool view_tolls */ 7:
                    message.viewTolls = reader.bool();
                    break;
                case /* bool view_company_fee */ 8:
                    message.viewCompanyFee = reader.bool();
                    break;
                case /* bool view_debits */ 9:
                    message.viewDebits = reader.bool();
                    break;
                case /* bool view_credits */ 10:
                    message.viewCredits = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeModel_Permissions_Settlements, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool settlements = 1; */
        if (message.settlements !== false)
            writer.tag(1, WireType.Varint).bool(message.settlements);
        /* bool view_loads = 2; */
        if (message.viewLoads !== false)
            writer.tag(2, WireType.Varint).bool(message.viewLoads);
        /* bool view_load_total_amount = 3; */
        if (message.viewLoadTotalAmount !== false)
            writer.tag(3, WireType.Varint).bool(message.viewLoadTotalAmount);
        /* bool view_loads_pay_amount = 4; */
        if (message.viewLoadsPayAmount !== false)
            writer.tag(4, WireType.Varint).bool(message.viewLoadsPayAmount);
        /* bool view_loads_distance = 5; */
        if (message.viewLoadsDistance !== false)
            writer.tag(5, WireType.Varint).bool(message.viewLoadsDistance);
        /* bool view_fuel = 6; */
        if (message.viewFuel !== false)
            writer.tag(6, WireType.Varint).bool(message.viewFuel);
        /* bool view_tolls = 7; */
        if (message.viewTolls !== false)
            writer.tag(7, WireType.Varint).bool(message.viewTolls);
        /* bool view_company_fee = 8; */
        if (message.viewCompanyFee !== false)
            writer.tag(8, WireType.Varint).bool(message.viewCompanyFee);
        /* bool view_debits = 9; */
        if (message.viewDebits !== false)
            writer.tag(9, WireType.Varint).bool(message.viewDebits);
        /* bool view_credits = 10; */
        if (message.viewCredits !== false)
            writer.tag(10, WireType.Varint).bool(message.viewCredits);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeModel.Permissions.Settlements
 */
export const DriverTypeModel_Permissions_Settlements = new DriverTypeModel_Permissions_Settlements$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeModel_Permissions_Loads$Type extends MessageType<DriverTypeModel_Permissions_Loads> {
    constructor() {
        super("DriverTypeModel.Permissions.Loads", [
            { no: 1, name: "completed_loads", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "total_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "driver_pay_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "distance", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeModel_Permissions_Loads>): DriverTypeModel_Permissions_Loads {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.completedLoads = false;
        message.totalAmount = false;
        message.driverPayAmount = false;
        message.distance = false;
        if (value !== undefined)
            reflectionMergePartial<DriverTypeModel_Permissions_Loads>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeModel_Permissions_Loads): DriverTypeModel_Permissions_Loads {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool completed_loads */ 1:
                    message.completedLoads = reader.bool();
                    break;
                case /* bool total_amount */ 2:
                    message.totalAmount = reader.bool();
                    break;
                case /* bool driver_pay_amount */ 3:
                    message.driverPayAmount = reader.bool();
                    break;
                case /* bool distance */ 4:
                    message.distance = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeModel_Permissions_Loads, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool completed_loads = 1; */
        if (message.completedLoads !== false)
            writer.tag(1, WireType.Varint).bool(message.completedLoads);
        /* bool total_amount = 2; */
        if (message.totalAmount !== false)
            writer.tag(2, WireType.Varint).bool(message.totalAmount);
        /* bool driver_pay_amount = 3; */
        if (message.driverPayAmount !== false)
            writer.tag(3, WireType.Varint).bool(message.driverPayAmount);
        /* bool distance = 4; */
        if (message.distance !== false)
            writer.tag(4, WireType.Varint).bool(message.distance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeModel.Permissions.Loads
 */
export const DriverTypeModel_Permissions_Loads = new DriverTypeModel_Permissions_Loads$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeModel_Permissions_Bank$Type extends MessageType<DriverTypeModel_Permissions_Bank> {
    constructor() {
        super("DriverTypeModel.Permissions.Bank", [
            { no: 1, name: "bank_accounts", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeModel_Permissions_Bank>): DriverTypeModel_Permissions_Bank {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bankAccounts = false;
        if (value !== undefined)
            reflectionMergePartial<DriverTypeModel_Permissions_Bank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeModel_Permissions_Bank): DriverTypeModel_Permissions_Bank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool bank_accounts */ 1:
                    message.bankAccounts = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeModel_Permissions_Bank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool bank_accounts = 1; */
        if (message.bankAccounts !== false)
            writer.tag(1, WireType.Varint).bool(message.bankAccounts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeModel.Permissions.Bank
 */
export const DriverTypeModel_Permissions_Bank = new DriverTypeModel_Permissions_Bank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTypeModel_Permissions_App$Type extends MessageType<DriverTypeModel_Permissions_App> {
    constructor() {
        super("DriverTypeModel.Permissions.App", [
            { no: 1, name: "take_screenshots", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "update_order_commodity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "truck_self_assign", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "trailer_self_assign", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DriverTypeModel_Permissions_App>): DriverTypeModel_Permissions_App {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.takeScreenshots = false;
        message.updateOrderCommodity = false;
        message.truckSelfAssign = false;
        message.trailerSelfAssign = false;
        if (value !== undefined)
            reflectionMergePartial<DriverTypeModel_Permissions_App>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTypeModel_Permissions_App): DriverTypeModel_Permissions_App {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool take_screenshots */ 1:
                    message.takeScreenshots = reader.bool();
                    break;
                case /* bool update_order_commodity */ 2:
                    message.updateOrderCommodity = reader.bool();
                    break;
                case /* bool truck_self_assign */ 3:
                    message.truckSelfAssign = reader.bool();
                    break;
                case /* bool trailer_self_assign */ 4:
                    message.trailerSelfAssign = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTypeModel_Permissions_App, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool take_screenshots = 1; */
        if (message.takeScreenshots !== false)
            writer.tag(1, WireType.Varint).bool(message.takeScreenshots);
        /* bool update_order_commodity = 2; */
        if (message.updateOrderCommodity !== false)
            writer.tag(2, WireType.Varint).bool(message.updateOrderCommodity);
        /* bool truck_self_assign = 3; */
        if (message.truckSelfAssign !== false)
            writer.tag(3, WireType.Varint).bool(message.truckSelfAssign);
        /* bool trailer_self_assign = 4; */
        if (message.trailerSelfAssign !== false)
            writer.tag(4, WireType.Varint).bool(message.trailerSelfAssign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DriverTypeModel.Permissions.App
 */
export const DriverTypeModel_Permissions_App = new DriverTypeModel_Permissions_App$Type();
