// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/distance.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Distance
 */
export interface Distance {
    /**
     * @generated from protobuf field: double miles = 1;
     */
    miles: number;
    /**
     * @generated from protobuf field: string miles_formatted = 2;
     */
    milesFormatted: string;
    /**
     * @generated from protobuf field: double kilometers = 3;
     */
    kilometers: number;
    /**
     * @generated from protobuf field: string kilometers_formatted = 4;
     */
    kilometersFormatted: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Distance$Type extends MessageType<Distance> {
    constructor() {
        super("Distance", [
            { no: 1, name: "miles", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "miles_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kilometers", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "kilometers_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Distance>): Distance {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.miles = 0;
        message.milesFormatted = "";
        message.kilometers = 0;
        message.kilometersFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<Distance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distance): Distance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double miles */ 1:
                    message.miles = reader.double();
                    break;
                case /* string miles_formatted */ 2:
                    message.milesFormatted = reader.string();
                    break;
                case /* double kilometers */ 3:
                    message.kilometers = reader.double();
                    break;
                case /* string kilometers_formatted */ 4:
                    message.kilometersFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Distance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double miles = 1; */
        if (message.miles !== 0)
            writer.tag(1, WireType.Bit64).double(message.miles);
        /* string miles_formatted = 2; */
        if (message.milesFormatted !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.milesFormatted);
        /* double kilometers = 3; */
        if (message.kilometers !== 0)
            writer.tag(3, WireType.Bit64).double(message.kilometers);
        /* string kilometers_formatted = 4; */
        if (message.kilometersFormatted !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.kilometersFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Distance
 */
export const Distance = new Distance$Type();
