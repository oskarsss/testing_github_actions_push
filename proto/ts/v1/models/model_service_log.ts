// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_service_log.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VehicleMaintenanceModel_VehicleType } from "./model_vehicle_maintenance";
/**
 * @generated from protobuf message ServiceLogModel
 */
export interface ServiceLogModel {
}
/**
 * @generated from protobuf message ServiceLogModel.ServiceLogRead
 */
export interface ServiceLogModel_ServiceLogRead {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
    /**
     * @generated from protobuf field: string service_provider_id = 2;
     */
    serviceProviderId: string;
    /**
     * @generated from protobuf field: int64 friendly_id = 3;
     */
    friendlyId: number;
    /**
     * @generated from protobuf field: ServiceLogModel.ServiceLogType type = 4;
     */
    type: ServiceLogModel_ServiceLogType;
    /**
     * @generated from protobuf field: string order_number = 5;
     */
    orderNumber: string;
    /**
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 6;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType;
    /**
     * @generated from protobuf field: string truck_id = 7;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 8;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: optional int64 odometer_miles = 9;
     */
    odometerMiles?: number;
    /**
     * @generated from protobuf field: optional int64 odometer_kilometers = 10;
     */
    odometerKilometers?: number;
    /**
     * @generated from protobuf field: optional int64 engine_hours = 11;
     */
    engineHours?: number;
    /**
     * @generated from protobuf field: string driver_id = 12;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string start_date = 13;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 14;
     */
    endDate: string; // optional
    /**
     * @generated from protobuf field: string description = 15;
     */
    description: string;
    /**
     * @generated from protobuf field: double total_amount = 16;
     */
    totalAmount: number;
    /**
     * @generated from protobuf field: string created_by_user_id = 17;
     */
    createdByUserId: string;
    /**
     * @generated from protobuf field: bool deleted = 18;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string updated_at = 19;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 20;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message ServiceLogModel.ServiceLogWrite
 */
export interface ServiceLogModel_ServiceLogWrite {
    /**
     * string service_log_id //only Update
     *
     * @generated from protobuf field: string service_provider_id = 1;
     */
    serviceProviderId: string;
    /**
     * int64 friendly_id //responsibility of repo create
     *
     * @generated from protobuf field: ServiceLogModel.ServiceLogType type = 2;
     */
    type: ServiceLogModel_ServiceLogType;
    /**
     * @generated from protobuf field: string order_number = 3;
     */
    orderNumber: string;
    /**
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 4;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType;
    /**
     * @generated from protobuf field: optional string truck_id = 5;
     */
    truckId?: string; // optional
    /**
     * @generated from protobuf field: optional string trailer_id = 6;
     */
    trailerId?: string; // optional
    /**
     * @generated from protobuf field: optional int64 odometer_miles = 7;
     */
    odometerMiles?: number; // optional
    /**
     * @generated from protobuf field: optional int64 odometer_kilometers = 8;
     */
    odometerKilometers?: number; // optional
    /**
     * @generated from protobuf field: optional int64 engine_hours = 9;
     */
    engineHours?: number; // optional
    /**
     * @generated from protobuf field: optional string driver_id = 10;
     */
    driverId?: string; // optional
    /**
     * @generated from protobuf field: string start_date = 11;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string end_date = 12;
     */
    endDate: string; // optional
    /**
     * @generated from protobuf field: string description = 13;
     */
    description: string; // responsibility of repo create
    // double total_amount
    // string created_by_user_id
    // bool deleted
    // string updated_at
    // string created_at
}
/**
 * @generated from protobuf enum ServiceLogModel.ServiceLogType
 */
export enum ServiceLogModel_ServiceLogType {
    /**
     * @generated from protobuf enum value: SERVICE_LOG_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SERVICE_LOG_TYPE_UNPLANNED = 1;
     */
    UNPLANNED = 1,
    /**
     * @generated from protobuf enum value: SERVICE_LOG_TYPE_PLANNED = 2;
     */
    PLANNED = 2,
    /**
     * @generated from protobuf enum value: SERVICE_LOG_TYPE_EMERGENCY = 3;
     */
    EMERGENCY = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogModel$Type extends MessageType<ServiceLogModel> {
    constructor() {
        super("ServiceLogModel", []);
    }
    create(value?: PartialMessage<ServiceLogModel>): ServiceLogModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogModel): ServiceLogModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogModel
 */
export const ServiceLogModel = new ServiceLogModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogModel_ServiceLogRead$Type extends MessageType<ServiceLogModel_ServiceLogRead> {
    constructor() {
        super("ServiceLogModel.ServiceLogRead", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["ServiceLogModel.ServiceLogType", ServiceLogModel_ServiceLogType, "SERVICE_LOG_TYPE_"] },
            { no: 5, name: "order_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 7, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "odometer_miles", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "odometer_kilometers", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "engine_hours", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "total_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "created_by_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogModel_ServiceLogRead>): ServiceLogModel_ServiceLogRead {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        message.serviceProviderId = "";
        message.friendlyId = 0;
        message.type = 0;
        message.orderNumber = "";
        message.vehicleType = 0;
        message.truckId = "";
        message.trailerId = "";
        message.driverId = "";
        message.startDate = "";
        message.endDate = "";
        message.description = "";
        message.totalAmount = 0;
        message.createdByUserId = "";
        message.deleted = false;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogModel_ServiceLogRead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogModel_ServiceLogRead): ServiceLogModel_ServiceLogRead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                case /* string service_provider_id */ 2:
                    message.serviceProviderId = reader.string();
                    break;
                case /* int64 friendly_id */ 3:
                    message.friendlyId = reader.int64().toNumber();
                    break;
                case /* ServiceLogModel.ServiceLogType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* string order_number */ 5:
                    message.orderNumber = reader.string();
                    break;
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 6:
                    message.vehicleType = reader.int32();
                    break;
                case /* string truck_id */ 7:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 8:
                    message.trailerId = reader.string();
                    break;
                case /* optional int64 odometer_miles */ 9:
                    message.odometerMiles = reader.int64().toNumber();
                    break;
                case /* optional int64 odometer_kilometers */ 10:
                    message.odometerKilometers = reader.int64().toNumber();
                    break;
                case /* optional int64 engine_hours */ 11:
                    message.engineHours = reader.int64().toNumber();
                    break;
                case /* string driver_id */ 12:
                    message.driverId = reader.string();
                    break;
                case /* string start_date */ 13:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 14:
                    message.endDate = reader.string();
                    break;
                case /* string description */ 15:
                    message.description = reader.string();
                    break;
                case /* double total_amount */ 16:
                    message.totalAmount = reader.double();
                    break;
                case /* string created_by_user_id */ 17:
                    message.createdByUserId = reader.string();
                    break;
                case /* bool deleted */ 18:
                    message.deleted = reader.bool();
                    break;
                case /* string updated_at */ 19:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 20:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogModel_ServiceLogRead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        /* string service_provider_id = 2; */
        if (message.serviceProviderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceProviderId);
        /* int64 friendly_id = 3; */
        if (message.friendlyId !== 0)
            writer.tag(3, WireType.Varint).int64(message.friendlyId);
        /* ServiceLogModel.ServiceLogType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* string order_number = 5; */
        if (message.orderNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.orderNumber);
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 6; */
        if (message.vehicleType !== 0)
            writer.tag(6, WireType.Varint).int32(message.vehicleType);
        /* string truck_id = 7; */
        if (message.truckId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 8; */
        if (message.trailerId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.trailerId);
        /* optional int64 odometer_miles = 9; */
        if (message.odometerMiles !== undefined)
            writer.tag(9, WireType.Varint).int64(message.odometerMiles);
        /* optional int64 odometer_kilometers = 10; */
        if (message.odometerKilometers !== undefined)
            writer.tag(10, WireType.Varint).int64(message.odometerKilometers);
        /* optional int64 engine_hours = 11; */
        if (message.engineHours !== undefined)
            writer.tag(11, WireType.Varint).int64(message.engineHours);
        /* string driver_id = 12; */
        if (message.driverId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.driverId);
        /* string start_date = 13; */
        if (message.startDate !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 14; */
        if (message.endDate !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.endDate);
        /* string description = 15; */
        if (message.description !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.description);
        /* double total_amount = 16; */
        if (message.totalAmount !== 0)
            writer.tag(16, WireType.Bit64).double(message.totalAmount);
        /* string created_by_user_id = 17; */
        if (message.createdByUserId !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.createdByUserId);
        /* bool deleted = 18; */
        if (message.deleted !== false)
            writer.tag(18, WireType.Varint).bool(message.deleted);
        /* string updated_at = 19; */
        if (message.updatedAt !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 20; */
        if (message.createdAt !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogModel.ServiceLogRead
 */
export const ServiceLogModel_ServiceLogRead = new ServiceLogModel_ServiceLogRead$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogModel_ServiceLogWrite$Type extends MessageType<ServiceLogModel_ServiceLogWrite> {
    constructor() {
        super("ServiceLogModel.ServiceLogWrite", [
            { no: 1, name: "service_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["ServiceLogModel.ServiceLogType", ServiceLogModel_ServiceLogType, "SERVICE_LOG_TYPE_"] },
            { no: 3, name: "order_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 5, name: "truck_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailer_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "odometer_miles", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "odometer_kilometers", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "engine_hours", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "driver_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "end_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogModel_ServiceLogWrite>): ServiceLogModel_ServiceLogWrite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceProviderId = "";
        message.type = 0;
        message.orderNumber = "";
        message.vehicleType = 0;
        message.startDate = "";
        message.endDate = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogModel_ServiceLogWrite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogModel_ServiceLogWrite): ServiceLogModel_ServiceLogWrite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_provider_id */ 1:
                    message.serviceProviderId = reader.string();
                    break;
                case /* ServiceLogModel.ServiceLogType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string order_number */ 3:
                    message.orderNumber = reader.string();
                    break;
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 4:
                    message.vehicleType = reader.int32();
                    break;
                case /* optional string truck_id */ 5:
                    message.truckId = reader.string();
                    break;
                case /* optional string trailer_id */ 6:
                    message.trailerId = reader.string();
                    break;
                case /* optional int64 odometer_miles */ 7:
                    message.odometerMiles = reader.int64().toNumber();
                    break;
                case /* optional int64 odometer_kilometers */ 8:
                    message.odometerKilometers = reader.int64().toNumber();
                    break;
                case /* optional int64 engine_hours */ 9:
                    message.engineHours = reader.int64().toNumber();
                    break;
                case /* optional string driver_id */ 10:
                    message.driverId = reader.string();
                    break;
                case /* string start_date */ 11:
                    message.startDate = reader.string();
                    break;
                case /* string end_date */ 12:
                    message.endDate = reader.string();
                    break;
                case /* string description */ 13:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogModel_ServiceLogWrite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_provider_id = 1; */
        if (message.serviceProviderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceProviderId);
        /* ServiceLogModel.ServiceLogType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string order_number = 3; */
        if (message.orderNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.orderNumber);
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 4; */
        if (message.vehicleType !== 0)
            writer.tag(4, WireType.Varint).int32(message.vehicleType);
        /* optional string truck_id = 5; */
        if (message.truckId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.truckId);
        /* optional string trailer_id = 6; */
        if (message.trailerId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.trailerId);
        /* optional int64 odometer_miles = 7; */
        if (message.odometerMiles !== undefined)
            writer.tag(7, WireType.Varint).int64(message.odometerMiles);
        /* optional int64 odometer_kilometers = 8; */
        if (message.odometerKilometers !== undefined)
            writer.tag(8, WireType.Varint).int64(message.odometerKilometers);
        /* optional int64 engine_hours = 9; */
        if (message.engineHours !== undefined)
            writer.tag(9, WireType.Varint).int64(message.engineHours);
        /* optional string driver_id = 10; */
        if (message.driverId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.driverId);
        /* string start_date = 11; */
        if (message.startDate !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.startDate);
        /* string end_date = 12; */
        if (message.endDate !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.endDate);
        /* string description = 13; */
        if (message.description !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogModel.ServiceLogWrite
 */
export const ServiceLogModel_ServiceLogWrite = new ServiceLogModel_ServiceLogWrite$Type();
