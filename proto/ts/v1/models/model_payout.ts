// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_payout.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PayoutModel
 */
export interface PayoutModel {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
    /**
     * @generated from protobuf field: string entity_type = 2;
     */
    entityType: string;
    /**
     * @generated from protobuf field: string entity_id = 3;
     */
    entityId: string;
    /**
     * @generated from protobuf field: PayoutModel.Type type = 4;
     */
    type: PayoutModel_Type;
    /**
     * @generated from protobuf field: double amount = 5;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_formatted = 6;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string bank_account_id = 7;
     */
    bankAccountId: string;
    /**
     * @generated from protobuf field: string bank_name = 8;
     */
    bankName: string;
    /**
     * @generated from protobuf field: string bank_account_last_four = 9;
     */
    bankAccountLastFour: string;
    /**
     * @generated from protobuf field: string payout_batch_id = 10;
     */
    payoutBatchId: string;
    /**
     * @generated from protobuf field: PayoutModel.Status status = 11;
     */
    status: PayoutModel_Status;
    /**
     * @generated from protobuf field: string settlement_id = 12;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string reference_id = 13;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string updated_at = 14;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 15;
     */
    createdAt: string;
}
/**
 * @generated from protobuf enum PayoutModel.Status
 */
export enum PayoutModel_Status {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: STATUS_SUCCEEDED = 2;
     */
    SUCCEEDED = 2,
    /**
     * @generated from protobuf enum value: STATUS_CANCELED = 3;
     */
    CANCELED = 3,
    /**
     * @generated from protobuf enum value: STATUS_FAILED = 4;
     */
    FAILED = 4
}
/**
 * @generated from protobuf enum PayoutModel.Type
 */
export enum PayoutModel_Type {
    /**
     * @generated from protobuf enum value: TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TYPE_ACH = 1;
     */
    ACH = 1,
    /**
     * @generated from protobuf enum value: TYPE_WIRE = 2;
     */
    WIRE = 2,
    /**
     * @generated from protobuf enum value: TYPE_CHECK = 3;
     */
    CHECK = 3,
    /**
     * @generated from protobuf enum value: TYPE_CASH = 4;
     */
    CASH = 4,
    /**
     * @generated from protobuf enum value: TYPE_ZELLE = 5;
     */
    ZELLE = 5,
    /**
     * @generated from protobuf enum value: TYPE_VENMO = 6;
     */
    VENMO = 6,
    /**
     * @generated from protobuf enum value: TYPE_CASH_APP = 7;
     */
    CASH_APP = 7,
    /**
     * @generated from protobuf enum value: TYPE_CRYPTO = 8;
     */
    CRYPTO = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class PayoutModel$Type extends MessageType<PayoutModel> {
    constructor() {
        super("PayoutModel", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["PayoutModel.Type", PayoutModel_Type, "TYPE_"] },
            { no: 5, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bank_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "bank_account_last_four", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "payout_batch_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "status", kind: "enum", T: () => ["PayoutModel.Status", PayoutModel_Status, "STATUS_"] },
            { no: 12, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PayoutModel>): PayoutModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        message.entityType = "";
        message.entityId = "";
        message.type = 0;
        message.amount = 0;
        message.amountFormatted = "";
        message.bankAccountId = "";
        message.bankName = "";
        message.bankAccountLastFour = "";
        message.payoutBatchId = "";
        message.status = 0;
        message.settlementId = "";
        message.referenceId = "";
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<PayoutModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutModel): PayoutModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                case /* string entity_type */ 2:
                    message.entityType = reader.string();
                    break;
                case /* string entity_id */ 3:
                    message.entityId = reader.string();
                    break;
                case /* PayoutModel.Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* double amount */ 5:
                    message.amount = reader.double();
                    break;
                case /* string amount_formatted */ 6:
                    message.amountFormatted = reader.string();
                    break;
                case /* string bank_account_id */ 7:
                    message.bankAccountId = reader.string();
                    break;
                case /* string bank_name */ 8:
                    message.bankName = reader.string();
                    break;
                case /* string bank_account_last_four */ 9:
                    message.bankAccountLastFour = reader.string();
                    break;
                case /* string payout_batch_id */ 10:
                    message.payoutBatchId = reader.string();
                    break;
                case /* PayoutModel.Status status */ 11:
                    message.status = reader.int32();
                    break;
                case /* string settlement_id */ 12:
                    message.settlementId = reader.string();
                    break;
                case /* string reference_id */ 13:
                    message.referenceId = reader.string();
                    break;
                case /* string updated_at */ 14:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 15:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        /* string entity_type = 2; */
        if (message.entityType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityType);
        /* string entity_id = 3; */
        if (message.entityId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.entityId);
        /* PayoutModel.Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* double amount = 5; */
        if (message.amount !== 0)
            writer.tag(5, WireType.Bit64).double(message.amount);
        /* string amount_formatted = 6; */
        if (message.amountFormatted !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.amountFormatted);
        /* string bank_account_id = 7; */
        if (message.bankAccountId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bankAccountId);
        /* string bank_name = 8; */
        if (message.bankName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bankName);
        /* string bank_account_last_four = 9; */
        if (message.bankAccountLastFour !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.bankAccountLastFour);
        /* string payout_batch_id = 10; */
        if (message.payoutBatchId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.payoutBatchId);
        /* PayoutModel.Status status = 11; */
        if (message.status !== 0)
            writer.tag(11, WireType.Varint).int32(message.status);
        /* string settlement_id = 12; */
        if (message.settlementId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.settlementId);
        /* string reference_id = 13; */
        if (message.referenceId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.referenceId);
        /* string updated_at = 14; */
        if (message.updatedAt !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 15; */
        if (message.createdAt !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutModel
 */
export const PayoutModel = new PayoutModel$Type();
