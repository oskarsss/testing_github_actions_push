// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_service_log_item.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ServiceLogItemModel
 */
export interface ServiceLogItemModel {
}
/**
 * @generated from protobuf message ServiceLogItemModel.ItemRead
 */
export interface ServiceLogItemModel_ItemRead {
    /**
     * @generated from protobuf field: string service_log_id = 1;
     */
    serviceLogId: string;
    /**
     * @generated from protobuf field: string service_log_item_id = 2;
     */
    serviceLogItemId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string item_type_id = 4;
     */
    itemTypeId: string;
    /**
     * @generated from protobuf field: ServiceLogItemModel.WarrantyCoverage warranty_coverage = 5;
     */
    warrantyCoverage: ServiceLogItemModel_WarrantyCoverage;
    /**
     * @generated from protobuf field: double quantity = 6;
     */
    quantity: number;
    /**
     * @generated from protobuf field: double rate = 7;
     */
    rate: number;
    /**
     * @generated from protobuf field: double amount = 8;
     */
    amount: number;
}
/**
 * @generated from protobuf message ServiceLogItemModel.ItemWrite
 */
export interface ServiceLogItemModel_ItemWrite {
    /**
     * string service_log_id
     * string service_log_item_id = 1;
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string item_type_id = 2;
     */
    itemTypeId: string;
    /**
     * @generated from protobuf field: ServiceLogItemModel.WarrantyCoverage warranty_coverage = 3;
     */
    warrantyCoverage: ServiceLogItemModel_WarrantyCoverage;
    /**
     * @generated from protobuf field: double quantity = 4;
     */
    quantity: number;
    /**
     * @generated from protobuf field: double rate = 5;
     */
    rate: number; // double amount = 7; Calculate at backend?
}
/**
 * @generated from protobuf message ServiceLogItemModel.Error
 */
export interface ServiceLogItemModel_Error {
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
/**
 * @generated from protobuf enum ServiceLogItemModel.WarrantyCoverage
 */
export enum ServiceLogItemModel_WarrantyCoverage {
    /**
     * @generated from protobuf enum value: WARRANTY_COVERAGE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: WARRANTY_COVERAGE_COVERED = 1;
     */
    COVERED = 1,
    /**
     * @generated from protobuf enum value: WARRANTY_COVERAGE_UNCOVERED = 2;
     */
    UNCOVERED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemModel$Type extends MessageType<ServiceLogItemModel> {
    constructor() {
        super("ServiceLogItemModel", []);
    }
    create(value?: PartialMessage<ServiceLogItemModel>): ServiceLogItemModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemModel): ServiceLogItemModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogItemModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemModel
 */
export const ServiceLogItemModel = new ServiceLogItemModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemModel_ItemRead$Type extends MessageType<ServiceLogItemModel_ItemRead> {
    constructor() {
        super("ServiceLogItemModel.ItemRead", [
            { no: 1, name: "service_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_log_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "warranty_coverage", kind: "enum", T: () => ["ServiceLogItemModel.WarrantyCoverage", ServiceLogItemModel_WarrantyCoverage, "WARRANTY_COVERAGE_"] },
            { no: 6, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "rate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemModel_ItemRead>): ServiceLogItemModel_ItemRead {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceLogId = "";
        message.serviceLogItemId = "";
        message.name = "";
        message.itemTypeId = "";
        message.warrantyCoverage = 0;
        message.quantity = 0;
        message.rate = 0;
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemModel_ItemRead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemModel_ItemRead): ServiceLogItemModel_ItemRead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_log_id */ 1:
                    message.serviceLogId = reader.string();
                    break;
                case /* string service_log_item_id */ 2:
                    message.serviceLogItemId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string item_type_id */ 4:
                    message.itemTypeId = reader.string();
                    break;
                case /* ServiceLogItemModel.WarrantyCoverage warranty_coverage */ 5:
                    message.warrantyCoverage = reader.int32();
                    break;
                case /* double quantity */ 6:
                    message.quantity = reader.double();
                    break;
                case /* double rate */ 7:
                    message.rate = reader.double();
                    break;
                case /* double amount */ 8:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemModel_ItemRead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_log_id = 1; */
        if (message.serviceLogId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceLogId);
        /* string service_log_item_id = 2; */
        if (message.serviceLogItemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceLogItemId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string item_type_id = 4; */
        if (message.itemTypeId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemTypeId);
        /* ServiceLogItemModel.WarrantyCoverage warranty_coverage = 5; */
        if (message.warrantyCoverage !== 0)
            writer.tag(5, WireType.Varint).int32(message.warrantyCoverage);
        /* double quantity = 6; */
        if (message.quantity !== 0)
            writer.tag(6, WireType.Bit64).double(message.quantity);
        /* double rate = 7; */
        if (message.rate !== 0)
            writer.tag(7, WireType.Bit64).double(message.rate);
        /* double amount = 8; */
        if (message.amount !== 0)
            writer.tag(8, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemModel.ItemRead
 */
export const ServiceLogItemModel_ItemRead = new ServiceLogItemModel_ItemRead$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemModel_ItemWrite$Type extends MessageType<ServiceLogItemModel_ItemWrite> {
    constructor() {
        super("ServiceLogItemModel.ItemWrite", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "warranty_coverage", kind: "enum", T: () => ["ServiceLogItemModel.WarrantyCoverage", ServiceLogItemModel_WarrantyCoverage, "WARRANTY_COVERAGE_"] },
            { no: 4, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "rate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemModel_ItemWrite>): ServiceLogItemModel_ItemWrite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.itemTypeId = "";
        message.warrantyCoverage = 0;
        message.quantity = 0;
        message.rate = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemModel_ItemWrite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemModel_ItemWrite): ServiceLogItemModel_ItemWrite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string item_type_id */ 2:
                    message.itemTypeId = reader.string();
                    break;
                case /* ServiceLogItemModel.WarrantyCoverage warranty_coverage */ 3:
                    message.warrantyCoverage = reader.int32();
                    break;
                case /* double quantity */ 4:
                    message.quantity = reader.double();
                    break;
                case /* double rate */ 5:
                    message.rate = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemModel_ItemWrite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string item_type_id = 2; */
        if (message.itemTypeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemTypeId);
        /* ServiceLogItemModel.WarrantyCoverage warranty_coverage = 3; */
        if (message.warrantyCoverage !== 0)
            writer.tag(3, WireType.Varint).int32(message.warrantyCoverage);
        /* double quantity = 4; */
        if (message.quantity !== 0)
            writer.tag(4, WireType.Bit64).double(message.quantity);
        /* double rate = 5; */
        if (message.rate !== 0)
            writer.tag(5, WireType.Bit64).double(message.rate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemModel.ItemWrite
 */
export const ServiceLogItemModel_ItemWrite = new ServiceLogItemModel_ItemWrite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemModel_Error$Type extends MessageType<ServiceLogItemModel_Error> {
    constructor() {
        super("ServiceLogItemModel.Error", [
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemModel_Error>): ServiceLogItemModel_Error {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemModel_Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemModel_Error): ServiceLogItemModel_Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemModel_Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemModel.Error
 */
export const ServiceLogItemModel_Error = new ServiceLogItemModel_Error$Type();
