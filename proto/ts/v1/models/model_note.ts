// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_note.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message NoteModel
 */
export interface NoteModel {
}
/**
 * used in NoteGet
 *
 * @generated from protobuf message NoteModel.Note
 */
export interface NoteModel_Note {
    /**
     * @generated from protobuf field: string entity = 1;
     */
    entity: string; // acts like channel_id
    /**
     * @generated from protobuf field: string note_id = 2;
     */
    noteId: string;
    /**
     * @generated from protobuf field: string body = 3;
     */
    body: string;
    /**
     * @generated from protobuf field: string user_id = 4;
     */
    userId: string;
    /**
     * @generated from protobuf field: string driver_id = 5;
     */
    driverId: string;
    /**
     * @generated from protobuf field: repeated NoteModel.Note.File files = 6;
     */
    files: NoteModel_Note_File[];
    /**
     * @generated from protobuf field: string created_at = 7;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 8;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: bool read = 9;
     */
    read: boolean;
    /**
     * @generated from protobuf field: bool delivered = 10;
     */
    delivered: boolean;
}
/**
 * @generated from protobuf message NoteModel.Note.File
 */
export interface NoteModel_Note_File {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * used for quick / cached notes to display right away
 *
 * @generated from protobuf message NoteModel.EntityNote
 */
export interface NoteModel_EntityNote {
    /**
     * @generated from protobuf field: string body = 1;
     */
    body: string;
    /**
     * @generated from protobuf field: string created_at = 2;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: repeated NoteModel.EntityNote.File files = 3;
     */
    files: NoteModel_EntityNote_File[];
    /**
     * @generated from protobuf field: string note_id = 4;
     */
    noteId: string;
    /**
     * @generated from protobuf field: string user_id = 5;
     */
    userId: string;
}
/**
 * @generated from protobuf message NoteModel.EntityNote.File
 */
export interface NoteModel_EntityNote_File {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class NoteModel$Type extends MessageType<NoteModel> {
    constructor() {
        super("NoteModel", []);
    }
    create(value?: PartialMessage<NoteModel>): NoteModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NoteModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoteModel): NoteModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NoteModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoteModel
 */
export const NoteModel = new NoteModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoteModel_Note$Type extends MessageType<NoteModel_Note> {
    constructor() {
        super("NoteModel.Note", [
            { no: 1, name: "entity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "note_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NoteModel_Note_File },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "delivered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NoteModel_Note>): NoteModel_Note {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entity = "";
        message.noteId = "";
        message.body = "";
        message.userId = "";
        message.driverId = "";
        message.files = [];
        message.createdAt = "";
        message.deleted = false;
        message.read = false;
        message.delivered = false;
        if (value !== undefined)
            reflectionMergePartial<NoteModel_Note>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoteModel_Note): NoteModel_Note {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entity */ 1:
                    message.entity = reader.string();
                    break;
                case /* string note_id */ 2:
                    message.noteId = reader.string();
                    break;
                case /* string body */ 3:
                    message.body = reader.string();
                    break;
                case /* string user_id */ 4:
                    message.userId = reader.string();
                    break;
                case /* string driver_id */ 5:
                    message.driverId = reader.string();
                    break;
                case /* repeated NoteModel.Note.File files */ 6:
                    message.files.push(NoteModel_Note_File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 8:
                    message.deleted = reader.bool();
                    break;
                case /* bool read */ 9:
                    message.read = reader.bool();
                    break;
                case /* bool delivered */ 10:
                    message.delivered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NoteModel_Note, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entity = 1; */
        if (message.entity !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entity);
        /* string note_id = 2; */
        if (message.noteId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.noteId);
        /* string body = 3; */
        if (message.body !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.body);
        /* string user_id = 4; */
        if (message.userId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userId);
        /* string driver_id = 5; */
        if (message.driverId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.driverId);
        /* repeated NoteModel.Note.File files = 6; */
        for (let i = 0; i < message.files.length; i++)
            NoteModel_Note_File.internalBinaryWrite(message.files[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 8; */
        if (message.deleted !== false)
            writer.tag(8, WireType.Varint).bool(message.deleted);
        /* bool read = 9; */
        if (message.read !== false)
            writer.tag(9, WireType.Varint).bool(message.read);
        /* bool delivered = 10; */
        if (message.delivered !== false)
            writer.tag(10, WireType.Varint).bool(message.delivered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoteModel.Note
 */
export const NoteModel_Note = new NoteModel_Note$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoteModel_Note_File$Type extends MessageType<NoteModel_Note_File> {
    constructor() {
        super("NoteModel.Note.File", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NoteModel_Note_File>): NoteModel_Note_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<NoteModel_Note_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoteModel_Note_File): NoteModel_Note_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NoteModel_Note_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoteModel.Note.File
 */
export const NoteModel_Note_File = new NoteModel_Note_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoteModel_EntityNote$Type extends MessageType<NoteModel_EntityNote> {
    constructor() {
        super("NoteModel.EntityNote", [
            { no: 1, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NoteModel_EntityNote_File },
            { no: 4, name: "note_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NoteModel_EntityNote>): NoteModel_EntityNote {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.body = "";
        message.createdAt = "";
        message.files = [];
        message.noteId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<NoteModel_EntityNote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoteModel_EntityNote): NoteModel_EntityNote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string body */ 1:
                    message.body = reader.string();
                    break;
                case /* string created_at */ 2:
                    message.createdAt = reader.string();
                    break;
                case /* repeated NoteModel.EntityNote.File files */ 3:
                    message.files.push(NoteModel_EntityNote_File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string note_id */ 4:
                    message.noteId = reader.string();
                    break;
                case /* string user_id */ 5:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NoteModel_EntityNote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string body = 1; */
        if (message.body !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.body);
        /* string created_at = 2; */
        if (message.createdAt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdAt);
        /* repeated NoteModel.EntityNote.File files = 3; */
        for (let i = 0; i < message.files.length; i++)
            NoteModel_EntityNote_File.internalBinaryWrite(message.files[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string note_id = 4; */
        if (message.noteId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.noteId);
        /* string user_id = 5; */
        if (message.userId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoteModel.EntityNote
 */
export const NoteModel_EntityNote = new NoteModel_EntityNote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoteModel_EntityNote_File$Type extends MessageType<NoteModel_EntityNote_File> {
    constructor() {
        super("NoteModel.EntityNote.File", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NoteModel_EntityNote_File>): NoteModel_EntityNote_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<NoteModel_EntityNote_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoteModel_EntityNote_File): NoteModel_EntityNote_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NoteModel_EntityNote_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoteModel.EntityNote.File
 */
export const NoteModel_EntityNote_File = new NoteModel_EntityNote_File$Type();
