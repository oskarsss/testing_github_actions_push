// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/amount.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CurrencyCode } from "./currency_code";
/**
 * @generated from protobuf message Amount
 */
export interface Amount {
    /**
     * @generated from protobuf field: double amount = 1;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_formatted = 2;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: CurrencyCode currency = 3;
     */
    currency: CurrencyCode;
}
// @generated message type with reflection information, may provide speed optimized methods
class Amount$Type extends MessageType<Amount> {
    constructor() {
        super("Amount", [
            { no: 1, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "currency", kind: "enum", T: () => ["CurrencyCode", CurrencyCode, "CURRENCY_CODE_"] }
        ]);
    }
    create(value?: PartialMessage<Amount>): Amount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0;
        message.amountFormatted = "";
        message.currency = 0;
        if (value !== undefined)
            reflectionMergePartial<Amount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Amount): Amount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double amount */ 1:
                    message.amount = reader.double();
                    break;
                case /* string amount_formatted */ 2:
                    message.amountFormatted = reader.string();
                    break;
                case /* CurrencyCode currency */ 3:
                    message.currency = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Amount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double amount = 1; */
        if (message.amount !== 0)
            writer.tag(1, WireType.Bit64).double(message.amount);
        /* string amount_formatted = 2; */
        if (message.amountFormatted !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amountFormatted);
        /* CurrencyCode currency = 3; */
        if (message.currency !== 0)
            writer.tag(3, WireType.Varint).int32(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Amount
 */
export const Amount = new Amount$Type();
