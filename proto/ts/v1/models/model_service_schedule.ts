// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_service_schedule.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VehicleMaintenanceModel_YearToMonthUnitsEnum } from "./model_vehicle_maintenance";
import { VehicleMaintenanceModel_VehicleType } from "./model_vehicle_maintenance";
/**
 * @generated from protobuf message ServiceScheduleModel
 */
export interface ServiceScheduleModel {
}
/**
 * @generated from protobuf message ServiceScheduleModel.ScheduleRead
 */
export interface ServiceScheduleModel_ScheduleRead {
    /**
     * @generated from protobuf field: string service_schedule_id = 2;
     */
    serviceScheduleId: string;
    /**
     * @generated from protobuf field: optional string service_program_id = 3;
     */
    serviceProgramId?: string;
    /**
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 4;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType;
    /**
     * @generated from protobuf field: bool interval_time_enabled = 5;
     */
    intervalTimeEnabled: boolean;
    /**
     * @generated from protobuf field: optional int64 interval_time = 6;
     */
    intervalTime?: number;
    /**
     * @generated from protobuf field: optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_units = 7;
     */
    intervalTimeUnits?: VehicleMaintenanceModel_YearToMonthUnitsEnum;
    /**
     * @generated from protobuf field: optional int64 interval_time_due = 8;
     */
    intervalTimeDue?: number;
    /**
     * @generated from protobuf field: optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_due_units = 9;
     */
    intervalTimeDueUnits?: VehicleMaintenanceModel_YearToMonthUnitsEnum;
    /**
     * @generated from protobuf field: bool interval_distance_enabled = 10;
     */
    intervalDistanceEnabled: boolean;
    /**
     * @generated from protobuf field: optional int64 interval_miles = 11;
     */
    intervalMiles?: number;
    /**
     * @generated from protobuf field: optional int64 interval_miles_due = 12;
     */
    intervalMilesDue?: number;
    /**
     * @generated from protobuf field: optional int64 interval_kilometers = 13;
     */
    intervalKilometers?: number;
    /**
     * @generated from protobuf field: optional int64 interval_kilometers_due = 14;
     */
    intervalKilometersDue?: number;
    /**
     * @generated from protobuf field: bool interval_engine_hours_enabled = 15;
     */
    intervalEngineHoursEnabled: boolean;
    /**
     * @generated from protobuf field: optional int64 interval_engine_hours = 16;
     */
    intervalEngineHours?: number;
    /**
     * @generated from protobuf field: optional int64 interval_engine_hours_due = 17;
     */
    intervalEngineHoursDue?: number;
    /**
     * @generated from protobuf field: string created_by_user_id = 18;
     */
    createdByUserId: string;
    /**
     * @generated from protobuf field: bool deleted = 19;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string updated_at = 20;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 21;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message ServiceScheduleModel.ScheduleWrite
 */
export interface ServiceScheduleModel_ScheduleWrite {
    /**
     * string service_schedule_id //only Update
     * optional string service_program_id = 3; //not possible to change once created in program scope
     *
     * @generated from protobuf field: VehicleMaintenanceModel.VehicleType vehicle_type = 1;
     */
    vehicleType: VehicleMaintenanceModel_VehicleType;
    /**
     * @generated from protobuf field: bool interval_time_enabled = 2;
     */
    intervalTimeEnabled: boolean;
    /**
     * @generated from protobuf field: optional int64 interval_time = 3;
     */
    intervalTime?: number;
    /**
     * @generated from protobuf field: optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_units = 4;
     */
    intervalTimeUnits?: VehicleMaintenanceModel_YearToMonthUnitsEnum;
    /**
     * @generated from protobuf field: optional int64 interval_time_due = 5;
     */
    intervalTimeDue?: number;
    /**
     * @generated from protobuf field: optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_due_units = 6;
     */
    intervalTimeDueUnits?: VehicleMaintenanceModel_YearToMonthUnitsEnum;
    /**
     * @generated from protobuf field: bool interval_distance_enabled = 7;
     */
    intervalDistanceEnabled: boolean;
    /**
     * @generated from protobuf field: optional int64 interval_miles = 8;
     */
    intervalMiles?: number;
    /**
     * @generated from protobuf field: optional int64 interval_miles_due = 9;
     */
    intervalMilesDue?: number;
    /**
     * @generated from protobuf field: optional int64 interval_kilometers = 10;
     */
    intervalKilometers?: number;
    /**
     * @generated from protobuf field: optional int64 interval_kilometers_due = 11;
     */
    intervalKilometersDue?: number;
    /**
     * @generated from protobuf field: bool interval_engine_hours_enabled = 12;
     */
    intervalEngineHoursEnabled: boolean;
    /**
     * @generated from protobuf field: optional int64 interval_engine_hours = 13;
     */
    intervalEngineHours?: number;
    /**
     * @generated from protobuf field: optional int64 interval_engine_hours_due = 14;
     */
    intervalEngineHoursDue?: number; // string created_by_user_id = 5; //backend set
    // bool deleted = 6; //backend set
    // string updated_at = 7; //backend set
    // string created_at = 8; //backend set
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleModel$Type extends MessageType<ServiceScheduleModel> {
    constructor() {
        super("ServiceScheduleModel", []);
    }
    create(value?: PartialMessage<ServiceScheduleModel>): ServiceScheduleModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleModel): ServiceScheduleModel {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceScheduleModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleModel
 */
export const ServiceScheduleModel = new ServiceScheduleModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleModel_ScheduleRead$Type extends MessageType<ServiceScheduleModel_ScheduleRead> {
    constructor() {
        super("ServiceScheduleModel.ScheduleRead", [
            { no: 2, name: "service_schedule_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "service_program_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 5, name: "interval_time_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "interval_time", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "interval_time_units", kind: "enum", opt: true, T: () => ["VehicleMaintenanceModel.YearToMonthUnitsEnum", VehicleMaintenanceModel_YearToMonthUnitsEnum] },
            { no: 8, name: "interval_time_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "interval_time_due_units", kind: "enum", opt: true, T: () => ["VehicleMaintenanceModel.YearToMonthUnitsEnum", VehicleMaintenanceModel_YearToMonthUnitsEnum] },
            { no: 10, name: "interval_distance_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "interval_miles", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "interval_miles_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "interval_kilometers", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "interval_kilometers_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "interval_engine_hours_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "interval_engine_hours", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 17, name: "interval_engine_hours_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 18, name: "created_by_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleModel_ScheduleRead>): ServiceScheduleModel_ScheduleRead {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceScheduleId = "";
        message.vehicleType = 0;
        message.intervalTimeEnabled = false;
        message.intervalDistanceEnabled = false;
        message.intervalEngineHoursEnabled = false;
        message.createdByUserId = "";
        message.deleted = false;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleModel_ScheduleRead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleModel_ScheduleRead): ServiceScheduleModel_ScheduleRead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_schedule_id */ 2:
                    message.serviceScheduleId = reader.string();
                    break;
                case /* optional string service_program_id */ 3:
                    message.serviceProgramId = reader.string();
                    break;
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 4:
                    message.vehicleType = reader.int32();
                    break;
                case /* bool interval_time_enabled */ 5:
                    message.intervalTimeEnabled = reader.bool();
                    break;
                case /* optional int64 interval_time */ 6:
                    message.intervalTime = reader.int64().toNumber();
                    break;
                case /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_units */ 7:
                    message.intervalTimeUnits = reader.int32();
                    break;
                case /* optional int64 interval_time_due */ 8:
                    message.intervalTimeDue = reader.int64().toNumber();
                    break;
                case /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_due_units */ 9:
                    message.intervalTimeDueUnits = reader.int32();
                    break;
                case /* bool interval_distance_enabled */ 10:
                    message.intervalDistanceEnabled = reader.bool();
                    break;
                case /* optional int64 interval_miles */ 11:
                    message.intervalMiles = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_miles_due */ 12:
                    message.intervalMilesDue = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_kilometers */ 13:
                    message.intervalKilometers = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_kilometers_due */ 14:
                    message.intervalKilometersDue = reader.int64().toNumber();
                    break;
                case /* bool interval_engine_hours_enabled */ 15:
                    message.intervalEngineHoursEnabled = reader.bool();
                    break;
                case /* optional int64 interval_engine_hours */ 16:
                    message.intervalEngineHours = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_engine_hours_due */ 17:
                    message.intervalEngineHoursDue = reader.int64().toNumber();
                    break;
                case /* string created_by_user_id */ 18:
                    message.createdByUserId = reader.string();
                    break;
                case /* bool deleted */ 19:
                    message.deleted = reader.bool();
                    break;
                case /* string updated_at */ 20:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 21:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleModel_ScheduleRead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_schedule_id = 2; */
        if (message.serviceScheduleId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceScheduleId);
        /* optional string service_program_id = 3; */
        if (message.serviceProgramId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.serviceProgramId);
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 4; */
        if (message.vehicleType !== 0)
            writer.tag(4, WireType.Varint).int32(message.vehicleType);
        /* bool interval_time_enabled = 5; */
        if (message.intervalTimeEnabled !== false)
            writer.tag(5, WireType.Varint).bool(message.intervalTimeEnabled);
        /* optional int64 interval_time = 6; */
        if (message.intervalTime !== undefined)
            writer.tag(6, WireType.Varint).int64(message.intervalTime);
        /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_units = 7; */
        if (message.intervalTimeUnits !== undefined)
            writer.tag(7, WireType.Varint).int32(message.intervalTimeUnits);
        /* optional int64 interval_time_due = 8; */
        if (message.intervalTimeDue !== undefined)
            writer.tag(8, WireType.Varint).int64(message.intervalTimeDue);
        /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_due_units = 9; */
        if (message.intervalTimeDueUnits !== undefined)
            writer.tag(9, WireType.Varint).int32(message.intervalTimeDueUnits);
        /* bool interval_distance_enabled = 10; */
        if (message.intervalDistanceEnabled !== false)
            writer.tag(10, WireType.Varint).bool(message.intervalDistanceEnabled);
        /* optional int64 interval_miles = 11; */
        if (message.intervalMiles !== undefined)
            writer.tag(11, WireType.Varint).int64(message.intervalMiles);
        /* optional int64 interval_miles_due = 12; */
        if (message.intervalMilesDue !== undefined)
            writer.tag(12, WireType.Varint).int64(message.intervalMilesDue);
        /* optional int64 interval_kilometers = 13; */
        if (message.intervalKilometers !== undefined)
            writer.tag(13, WireType.Varint).int64(message.intervalKilometers);
        /* optional int64 interval_kilometers_due = 14; */
        if (message.intervalKilometersDue !== undefined)
            writer.tag(14, WireType.Varint).int64(message.intervalKilometersDue);
        /* bool interval_engine_hours_enabled = 15; */
        if (message.intervalEngineHoursEnabled !== false)
            writer.tag(15, WireType.Varint).bool(message.intervalEngineHoursEnabled);
        /* optional int64 interval_engine_hours = 16; */
        if (message.intervalEngineHours !== undefined)
            writer.tag(16, WireType.Varint).int64(message.intervalEngineHours);
        /* optional int64 interval_engine_hours_due = 17; */
        if (message.intervalEngineHoursDue !== undefined)
            writer.tag(17, WireType.Varint).int64(message.intervalEngineHoursDue);
        /* string created_by_user_id = 18; */
        if (message.createdByUserId !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.createdByUserId);
        /* bool deleted = 19; */
        if (message.deleted !== false)
            writer.tag(19, WireType.Varint).bool(message.deleted);
        /* string updated_at = 20; */
        if (message.updatedAt !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 21; */
        if (message.createdAt !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleModel.ScheduleRead
 */
export const ServiceScheduleModel_ScheduleRead = new ServiceScheduleModel_ScheduleRead$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceScheduleModel_ScheduleWrite$Type extends MessageType<ServiceScheduleModel_ScheduleWrite> {
    constructor() {
        super("ServiceScheduleModel.ScheduleWrite", [
            { no: 1, name: "vehicle_type", kind: "enum", T: () => ["VehicleMaintenanceModel.VehicleType", VehicleMaintenanceModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 2, name: "interval_time_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "interval_time", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "interval_time_units", kind: "enum", opt: true, T: () => ["VehicleMaintenanceModel.YearToMonthUnitsEnum", VehicleMaintenanceModel_YearToMonthUnitsEnum] },
            { no: 5, name: "interval_time_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "interval_time_due_units", kind: "enum", opt: true, T: () => ["VehicleMaintenanceModel.YearToMonthUnitsEnum", VehicleMaintenanceModel_YearToMonthUnitsEnum] },
            { no: 7, name: "interval_distance_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "interval_miles", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "interval_miles_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "interval_kilometers", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "interval_kilometers_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "interval_engine_hours_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "interval_engine_hours", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "interval_engine_hours_due", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceScheduleModel_ScheduleWrite>): ServiceScheduleModel_ScheduleWrite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vehicleType = 0;
        message.intervalTimeEnabled = false;
        message.intervalDistanceEnabled = false;
        message.intervalEngineHoursEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<ServiceScheduleModel_ScheduleWrite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceScheduleModel_ScheduleWrite): ServiceScheduleModel_ScheduleWrite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VehicleMaintenanceModel.VehicleType vehicle_type */ 1:
                    message.vehicleType = reader.int32();
                    break;
                case /* bool interval_time_enabled */ 2:
                    message.intervalTimeEnabled = reader.bool();
                    break;
                case /* optional int64 interval_time */ 3:
                    message.intervalTime = reader.int64().toNumber();
                    break;
                case /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_units */ 4:
                    message.intervalTimeUnits = reader.int32();
                    break;
                case /* optional int64 interval_time_due */ 5:
                    message.intervalTimeDue = reader.int64().toNumber();
                    break;
                case /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_due_units */ 6:
                    message.intervalTimeDueUnits = reader.int32();
                    break;
                case /* bool interval_distance_enabled */ 7:
                    message.intervalDistanceEnabled = reader.bool();
                    break;
                case /* optional int64 interval_miles */ 8:
                    message.intervalMiles = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_miles_due */ 9:
                    message.intervalMilesDue = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_kilometers */ 10:
                    message.intervalKilometers = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_kilometers_due */ 11:
                    message.intervalKilometersDue = reader.int64().toNumber();
                    break;
                case /* bool interval_engine_hours_enabled */ 12:
                    message.intervalEngineHoursEnabled = reader.bool();
                    break;
                case /* optional int64 interval_engine_hours */ 13:
                    message.intervalEngineHours = reader.int64().toNumber();
                    break;
                case /* optional int64 interval_engine_hours_due */ 14:
                    message.intervalEngineHoursDue = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceScheduleModel_ScheduleWrite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VehicleMaintenanceModel.VehicleType vehicle_type = 1; */
        if (message.vehicleType !== 0)
            writer.tag(1, WireType.Varint).int32(message.vehicleType);
        /* bool interval_time_enabled = 2; */
        if (message.intervalTimeEnabled !== false)
            writer.tag(2, WireType.Varint).bool(message.intervalTimeEnabled);
        /* optional int64 interval_time = 3; */
        if (message.intervalTime !== undefined)
            writer.tag(3, WireType.Varint).int64(message.intervalTime);
        /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_units = 4; */
        if (message.intervalTimeUnits !== undefined)
            writer.tag(4, WireType.Varint).int32(message.intervalTimeUnits);
        /* optional int64 interval_time_due = 5; */
        if (message.intervalTimeDue !== undefined)
            writer.tag(5, WireType.Varint).int64(message.intervalTimeDue);
        /* optional VehicleMaintenanceModel.YearToMonthUnitsEnum interval_time_due_units = 6; */
        if (message.intervalTimeDueUnits !== undefined)
            writer.tag(6, WireType.Varint).int32(message.intervalTimeDueUnits);
        /* bool interval_distance_enabled = 7; */
        if (message.intervalDistanceEnabled !== false)
            writer.tag(7, WireType.Varint).bool(message.intervalDistanceEnabled);
        /* optional int64 interval_miles = 8; */
        if (message.intervalMiles !== undefined)
            writer.tag(8, WireType.Varint).int64(message.intervalMiles);
        /* optional int64 interval_miles_due = 9; */
        if (message.intervalMilesDue !== undefined)
            writer.tag(9, WireType.Varint).int64(message.intervalMilesDue);
        /* optional int64 interval_kilometers = 10; */
        if (message.intervalKilometers !== undefined)
            writer.tag(10, WireType.Varint).int64(message.intervalKilometers);
        /* optional int64 interval_kilometers_due = 11; */
        if (message.intervalKilometersDue !== undefined)
            writer.tag(11, WireType.Varint).int64(message.intervalKilometersDue);
        /* bool interval_engine_hours_enabled = 12; */
        if (message.intervalEngineHoursEnabled !== false)
            writer.tag(12, WireType.Varint).bool(message.intervalEngineHoursEnabled);
        /* optional int64 interval_engine_hours = 13; */
        if (message.intervalEngineHours !== undefined)
            writer.tag(13, WireType.Varint).int64(message.intervalEngineHours);
        /* optional int64 interval_engine_hours_due = 14; */
        if (message.intervalEngineHoursDue !== undefined)
            writer.tag(14, WireType.Varint).int64(message.intervalEngineHoursDue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceScheduleModel.ScheduleWrite
 */
export const ServiceScheduleModel_ScheduleWrite = new ServiceScheduleModel_ScheduleWrite$Type();
