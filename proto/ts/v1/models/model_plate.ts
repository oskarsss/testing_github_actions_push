// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/models/model_plate.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CountryCode } from "./country_code";
/**
 * @generated from protobuf message PlateModel
 */
export interface PlateModel {
    /**
     * @generated from protobuf field: string plate_id = 1;
     */
    plateId: string;
    /**
     * @generated from protobuf field: string plate_company_id = 2;
     */
    plateCompanyId: string;
    /**
     * @generated from protobuf field: CountryCode country_code = 3;
     */
    countryCode: CountryCode;
    /**
     * @generated from protobuf field: string state = 4;
     */
    state: string;
    /**
     * @generated from protobuf field: string number = 5;
     */
    number: string;
    /**
     * @generated from protobuf field: PlateModel.VehicleType vehicle_type = 6;
     */
    vehicleType: PlateModel_VehicleType;
    /**
     * @generated from protobuf field: double annual_cost = 7;
     */
    annualCost: number;
    /**
     * @generated from protobuf field: bool owned = 8;
     */
    owned: boolean;
    /**
     * @generated from protobuf field: string owner_name = 9;
     */
    ownerName: string;
    /**
     * @generated from protobuf field: PlateModel.Status status = 10;
     */
    status: PlateModel_Status;
    /**
     * @generated from protobuf field: string updated_at = 11;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 12;
     */
    createdAt: string;
}
/**
 * @generated from protobuf enum PlateModel.VehicleType
 */
export enum PlateModel_VehicleType {
    /**
     * @generated from protobuf enum value: VEHICLE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: VEHICLE_TYPE_TRUCK = 1;
     */
    TRUCK = 1,
    /**
     * @generated from protobuf enum value: VEHICLE_TYPE_TRAILER = 2;
     */
    TRAILER = 2
}
/**
 * @generated from protobuf enum PlateModel.Status
 */
export enum PlateModel_Status {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_ACTIVE = 1;
     */
    ACTIVE = 1,
    /**
     * @generated from protobuf enum value: STATUS_PENDING_CANCELLATION = 2;
     */
    PENDING_CANCELLATION = 2,
    /**
     * @generated from protobuf enum value: STATUS_CANCELLED = 3;
     */
    CANCELLED = 3,
    /**
     * @generated from protobuf enum value: STATUS_DELETED = 4;
     */
    DELETED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class PlateModel$Type extends MessageType<PlateModel> {
    constructor() {
        super("PlateModel", [
            { no: 1, name: "plate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plate_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country_code", kind: "enum", T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 4, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "vehicle_type", kind: "enum", T: () => ["PlateModel.VehicleType", PlateModel_VehicleType, "VEHICLE_TYPE_"] },
            { no: 7, name: "annual_cost", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "owned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "owner_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "status", kind: "enum", T: () => ["PlateModel.Status", PlateModel_Status, "STATUS_"] },
            { no: 11, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlateModel>): PlateModel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plateId = "";
        message.plateCompanyId = "";
        message.countryCode = 0;
        message.state = "";
        message.number = "";
        message.vehicleType = 0;
        message.annualCost = 0;
        message.owned = false;
        message.ownerName = "";
        message.status = 0;
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<PlateModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateModel): PlateModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate_id */ 1:
                    message.plateId = reader.string();
                    break;
                case /* string plate_company_id */ 2:
                    message.plateCompanyId = reader.string();
                    break;
                case /* CountryCode country_code */ 3:
                    message.countryCode = reader.int32();
                    break;
                case /* string state */ 4:
                    message.state = reader.string();
                    break;
                case /* string number */ 5:
                    message.number = reader.string();
                    break;
                case /* PlateModel.VehicleType vehicle_type */ 6:
                    message.vehicleType = reader.int32();
                    break;
                case /* double annual_cost */ 7:
                    message.annualCost = reader.double();
                    break;
                case /* bool owned */ 8:
                    message.owned = reader.bool();
                    break;
                case /* string owner_name */ 9:
                    message.ownerName = reader.string();
                    break;
                case /* PlateModel.Status status */ 10:
                    message.status = reader.int32();
                    break;
                case /* string updated_at */ 11:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 12:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate_id = 1; */
        if (message.plateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plateId);
        /* string plate_company_id = 2; */
        if (message.plateCompanyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.plateCompanyId);
        /* CountryCode country_code = 3; */
        if (message.countryCode !== 0)
            writer.tag(3, WireType.Varint).int32(message.countryCode);
        /* string state = 4; */
        if (message.state !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.state);
        /* string number = 5; */
        if (message.number !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.number);
        /* PlateModel.VehicleType vehicle_type = 6; */
        if (message.vehicleType !== 0)
            writer.tag(6, WireType.Varint).int32(message.vehicleType);
        /* double annual_cost = 7; */
        if (message.annualCost !== 0)
            writer.tag(7, WireType.Bit64).double(message.annualCost);
        /* bool owned = 8; */
        if (message.owned !== false)
            writer.tag(8, WireType.Varint).bool(message.owned);
        /* string owner_name = 9; */
        if (message.ownerName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.ownerName);
        /* PlateModel.Status status = 10; */
        if (message.status !== 0)
            writer.tag(10, WireType.Varint).int32(message.status);
        /* string updated_at = 11; */
        if (message.updatedAt !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 12; */
        if (message.createdAt !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlateModel
 */
export const PlateModel = new PlateModel$Type();
