// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/stats.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadModel_InvoiceStatus } from "./models/model_load";
/**
 * @generated from protobuf message GetLoadsStatsRequest
 */
export interface GetLoadsStatsRequest {
}
/**
 * @generated from protobuf message GetLoadsStatsReply
 */
export interface GetLoadsStatsReply {
    /**
     * @generated from protobuf field: int64 late_pickups = 1;
     */
    latePickups: number;
    /**
     * @generated from protobuf field: int64 late_deliveries = 2;
     */
    lateDeliveries: number;
    /**
     * @generated from protobuf field: int64 inactive_gps = 3;
     */
    inactiveGps: number;
    /**
     * @generated from protobuf field: repeated GetLoadsStatsReply.Broker brokers = 4;
     */
    brokers: GetLoadsStatsReply_Broker[];
    /**
     * @generated from protobuf field: repeated GetLoadsStatsReply.Customer customers = 5;
     */
    customers: GetLoadsStatsReply_Customer[];
    /**
     * @generated from protobuf field: repeated GetLoadsStatsReply.ActiveLoad active_loads = 6;
     */
    activeLoads: GetLoadsStatsReply_ActiveLoad[];
}
/**
 * @generated from protobuf message GetLoadsStatsReply.Broker
 */
export interface GetLoadsStatsReply_Broker {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: int64 loads_count = 2;
     */
    loadsCount: number;
}
/**
 * @generated from protobuf message GetLoadsStatsReply.Customer
 */
export interface GetLoadsStatsReply_Customer {
    /**
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * @generated from protobuf field: int64 loads_count = 2;
     */
    loadsCount: number;
}
/**
 * @generated from protobuf message GetLoadsStatsReply.ActiveLoad
 */
export interface GetLoadsStatsReply_ActiveLoad {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
    /**
     * @generated from protobuf field: int64 count = 3;
     */
    count: number;
}
/**
 * @generated from protobuf message GetTrendsRequest
 */
export interface GetTrendsRequest {
}
/**
 * @generated from protobuf message GetTrendsReply
 */
export interface GetTrendsReply {
    /**
     * @generated from protobuf field: GetTrendsReply.Trend avg_fuel_price_per_quantity = 1;
     */
    avgFuelPricePerQuantity?: GetTrendsReply_Trend;
    /**
     * @generated from protobuf field: GetTrendsReply.Trend avg_fuel_price_per_total_mile = 2;
     */
    avgFuelPricePerTotalMile?: GetTrendsReply_Trend;
    /**
     * @generated from protobuf field: GetTrendsReply.Trend avg_rpm = 3;
     */
    avgRpm?: GetTrendsReply_Trend;
}
/**
 * @generated from protobuf message GetTrendsReply.Trend
 */
export interface GetTrendsReply_Trend {
    /**
     * @generated from protobuf field: string avg_price = 1;
     */
    avgPrice: string;
    /**
     * @generated from protobuf field: string change = 2;
     */
    change: string;
    /**
     * @generated from protobuf field: GetTrendsReply.Trend trend = 3;
     */
    trend?: GetTrendsReply_Trend;
    /**
     * @generated from protobuf field: repeated double series = 4;
     */
    series: number[];
    /**
     * @generated from protobuf field: GetTrendsReply.Position position = 5;
     */
    position: GetTrendsReply_Position;
}
/**
 * @generated from protobuf enum GetTrendsReply.Position
 */
export enum GetTrendsReply_Position {
    /**
     * @generated from protobuf enum value: FLAT = 0;
     */
    FLAT = 0,
    /**
     * @generated from protobuf enum value: UP = 1;
     */
    UP = 1,
    /**
     * @generated from protobuf enum value: DOWN = 2;
     */
    DOWN = 2
}
/**
 * @generated from protobuf message GetPeriodStatsRequest
 */
export interface GetPeriodStatsRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
}
/**
 * @generated from protobuf message GetPeriodStatsReply
 */
export interface GetPeriodStatsReply {
    /**
     * @generated from protobuf field: double avg_fuel_price_per_quantity = 1;
     */
    avgFuelPricePerQuantity: number;
    /**
     * @generated from protobuf field: double avg_fuel_price_per_total_mile = 2;
     */
    avgFuelPricePerTotalMile: number;
    /**
     * @generated from protobuf field: double avg_rpm = 3;
     */
    avgRpm: number;
}
/**
 * StatsFactoringCompaniesGet
 *
 * @generated from protobuf message StatsFactoringCompaniesGetRequest
 */
export interface StatsFactoringCompaniesGetRequest {
}
/**
 * StatsFactoringCompaniesGet
 *
 * @generated from protobuf message StatsFactoringCompaniesGetReply
 */
export interface StatsFactoringCompaniesGetReply {
    /**
     * @generated from protobuf field: repeated StatsFactoringCompaniesGetReply.FactoringCompany factoring_companies = 1;
     */
    factoringCompanies: StatsFactoringCompaniesGetReply_FactoringCompany[];
}
/**
 * @generated from protobuf message StatsFactoringCompaniesGetReply.FactoringCompany
 */
export interface StatsFactoringCompaniesGetReply_FactoringCompany {
    /**
     * @generated from protobuf field: string factoring_company_id = 1;
     */
    factoringCompanyId: string;
    /**
     * @generated from protobuf field: repeated StatsFactoringCompaniesGetReply.FactoringCompany.Stats stats = 2;
     */
    stats: StatsFactoringCompaniesGetReply_FactoringCompany_Stats[];
    /**
     * @generated from protobuf field: StatsFactoringCompaniesGetReply.FactoringCompany.Last30DaysStats last_30_days_stats = 3;
     */
    last30DaysStats?: StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats;
}
/**
 * @generated from protobuf message StatsFactoringCompaniesGetReply.FactoringCompany.Stats
 */
export interface StatsFactoringCompaniesGetReply_FactoringCompany_Stats {
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 1;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
    /**
     * @generated from protobuf field: double broker_amount = 2;
     */
    brokerAmount: number;
    /**
     * @generated from protobuf field: string broker_amount_formatted = 3;
     */
    brokerAmountFormatted: string;
    /**
     * @generated from protobuf field: int64 count = 4;
     */
    count: number;
}
/**
 * @generated from protobuf message StatsFactoringCompaniesGetReply.FactoringCompany.Last30DaysStats
 */
export interface StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats {
    /**
     * @generated from protobuf field: double broker_amount = 1;
     */
    brokerAmount: number;
    /**
     * @generated from protobuf field: string broker_amount_formatted = 2;
     */
    brokerAmountFormatted: string;
    /**
     * @generated from protobuf field: int64 count = 3;
     */
    count: number;
    /**
     * @generated from protobuf field: double factoring_fee = 4;
     */
    factoringFee: number;
    /**
     * @generated from protobuf field: string factoring_fee_formatted = 5;
     */
    factoringFeeFormatted: string;
    /**
     * @generated from protobuf field: double paid = 6;
     */
    paid: number;
    /**
     * @generated from protobuf field: string paid_formatted = 7;
     */
    paidFormatted: string;
    /**
     * @generated from protobuf field: double pending = 8;
     */
    pending: number;
    /**
     * @generated from protobuf field: string pending_formatted = 9;
     */
    pendingFormatted: string;
    /**
     * @generated from protobuf field: double rejected = 10;
     */
    rejected: number;
    /**
     * @generated from protobuf field: string rejected_formatted = 11;
     */
    rejectedFormatted: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsStatsRequest$Type extends MessageType<GetLoadsStatsRequest> {
    constructor() {
        super("GetLoadsStatsRequest", []);
    }
    create(value?: PartialMessage<GetLoadsStatsRequest>): GetLoadsStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetLoadsStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsStatsRequest): GetLoadsStatsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetLoadsStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsStatsRequest
 */
export const GetLoadsStatsRequest = new GetLoadsStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsStatsReply$Type extends MessageType<GetLoadsStatsReply> {
    constructor() {
        super("GetLoadsStatsReply", [
            { no: 1, name: "late_pickups", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "late_deliveries", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "inactive_gps", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "brokers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetLoadsStatsReply_Broker },
            { no: 5, name: "customers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetLoadsStatsReply_Customer },
            { no: 6, name: "active_loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetLoadsStatsReply_ActiveLoad }
        ]);
    }
    create(value?: PartialMessage<GetLoadsStatsReply>): GetLoadsStatsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.latePickups = 0;
        message.lateDeliveries = 0;
        message.inactiveGps = 0;
        message.brokers = [];
        message.customers = [];
        message.activeLoads = [];
        if (value !== undefined)
            reflectionMergePartial<GetLoadsStatsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsStatsReply): GetLoadsStatsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 late_pickups */ 1:
                    message.latePickups = reader.int64().toNumber();
                    break;
                case /* int64 late_deliveries */ 2:
                    message.lateDeliveries = reader.int64().toNumber();
                    break;
                case /* int64 inactive_gps */ 3:
                    message.inactiveGps = reader.int64().toNumber();
                    break;
                case /* repeated GetLoadsStatsReply.Broker brokers */ 4:
                    message.brokers.push(GetLoadsStatsReply_Broker.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated GetLoadsStatsReply.Customer customers */ 5:
                    message.customers.push(GetLoadsStatsReply_Customer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated GetLoadsStatsReply.ActiveLoad active_loads */ 6:
                    message.activeLoads.push(GetLoadsStatsReply_ActiveLoad.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsStatsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 late_pickups = 1; */
        if (message.latePickups !== 0)
            writer.tag(1, WireType.Varint).int64(message.latePickups);
        /* int64 late_deliveries = 2; */
        if (message.lateDeliveries !== 0)
            writer.tag(2, WireType.Varint).int64(message.lateDeliveries);
        /* int64 inactive_gps = 3; */
        if (message.inactiveGps !== 0)
            writer.tag(3, WireType.Varint).int64(message.inactiveGps);
        /* repeated GetLoadsStatsReply.Broker brokers = 4; */
        for (let i = 0; i < message.brokers.length; i++)
            GetLoadsStatsReply_Broker.internalBinaryWrite(message.brokers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetLoadsStatsReply.Customer customers = 5; */
        for (let i = 0; i < message.customers.length; i++)
            GetLoadsStatsReply_Customer.internalBinaryWrite(message.customers[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated GetLoadsStatsReply.ActiveLoad active_loads = 6; */
        for (let i = 0; i < message.activeLoads.length; i++)
            GetLoadsStatsReply_ActiveLoad.internalBinaryWrite(message.activeLoads[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsStatsReply
 */
export const GetLoadsStatsReply = new GetLoadsStatsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsStatsReply_Broker$Type extends MessageType<GetLoadsStatsReply_Broker> {
    constructor() {
        super("GetLoadsStatsReply.Broker", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "loads_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetLoadsStatsReply_Broker>): GetLoadsStatsReply_Broker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.loadsCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetLoadsStatsReply_Broker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsStatsReply_Broker): GetLoadsStatsReply_Broker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* int64 loads_count */ 2:
                    message.loadsCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsStatsReply_Broker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* int64 loads_count = 2; */
        if (message.loadsCount !== 0)
            writer.tag(2, WireType.Varint).int64(message.loadsCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsStatsReply.Broker
 */
export const GetLoadsStatsReply_Broker = new GetLoadsStatsReply_Broker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsStatsReply_Customer$Type extends MessageType<GetLoadsStatsReply_Customer> {
    constructor() {
        super("GetLoadsStatsReply.Customer", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "loads_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetLoadsStatsReply_Customer>): GetLoadsStatsReply_Customer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerId = "";
        message.loadsCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetLoadsStatsReply_Customer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsStatsReply_Customer): GetLoadsStatsReply_Customer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* int64 loads_count */ 2:
                    message.loadsCount = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsStatsReply_Customer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* int64 loads_count = 2; */
        if (message.loadsCount !== 0)
            writer.tag(2, WireType.Varint).int64(message.loadsCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsStatsReply.Customer
 */
export const GetLoadsStatsReply_Customer = new GetLoadsStatsReply_Customer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsStatsReply_ActiveLoad$Type extends MessageType<GetLoadsStatsReply_ActiveLoad> {
    constructor() {
        super("GetLoadsStatsReply.ActiveLoad", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetLoadsStatsReply_ActiveLoad>): GetLoadsStatsReply_ActiveLoad {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.label = "";
        message.value = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<GetLoadsStatsReply_ActiveLoad>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsStatsReply_ActiveLoad): GetLoadsStatsReply_ActiveLoad {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* int64 count */ 3:
                    message.count = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsStatsReply_ActiveLoad, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* int64 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsStatsReply.ActiveLoad
 */
export const GetLoadsStatsReply_ActiveLoad = new GetLoadsStatsReply_ActiveLoad$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrendsRequest$Type extends MessageType<GetTrendsRequest> {
    constructor() {
        super("GetTrendsRequest", []);
    }
    create(value?: PartialMessage<GetTrendsRequest>): GetTrendsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTrendsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrendsRequest): GetTrendsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetTrendsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrendsRequest
 */
export const GetTrendsRequest = new GetTrendsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrendsReply$Type extends MessageType<GetTrendsReply> {
    constructor() {
        super("GetTrendsReply", [
            { no: 1, name: "avg_fuel_price_per_quantity", kind: "message", T: () => GetTrendsReply_Trend },
            { no: 2, name: "avg_fuel_price_per_total_mile", kind: "message", T: () => GetTrendsReply_Trend },
            { no: 3, name: "avg_rpm", kind: "message", T: () => GetTrendsReply_Trend }
        ]);
    }
    create(value?: PartialMessage<GetTrendsReply>): GetTrendsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTrendsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrendsReply): GetTrendsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetTrendsReply.Trend avg_fuel_price_per_quantity */ 1:
                    message.avgFuelPricePerQuantity = GetTrendsReply_Trend.internalBinaryRead(reader, reader.uint32(), options, message.avgFuelPricePerQuantity);
                    break;
                case /* GetTrendsReply.Trend avg_fuel_price_per_total_mile */ 2:
                    message.avgFuelPricePerTotalMile = GetTrendsReply_Trend.internalBinaryRead(reader, reader.uint32(), options, message.avgFuelPricePerTotalMile);
                    break;
                case /* GetTrendsReply.Trend avg_rpm */ 3:
                    message.avgRpm = GetTrendsReply_Trend.internalBinaryRead(reader, reader.uint32(), options, message.avgRpm);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrendsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetTrendsReply.Trend avg_fuel_price_per_quantity = 1; */
        if (message.avgFuelPricePerQuantity)
            GetTrendsReply_Trend.internalBinaryWrite(message.avgFuelPricePerQuantity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetTrendsReply.Trend avg_fuel_price_per_total_mile = 2; */
        if (message.avgFuelPricePerTotalMile)
            GetTrendsReply_Trend.internalBinaryWrite(message.avgFuelPricePerTotalMile, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetTrendsReply.Trend avg_rpm = 3; */
        if (message.avgRpm)
            GetTrendsReply_Trend.internalBinaryWrite(message.avgRpm, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrendsReply
 */
export const GetTrendsReply = new GetTrendsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrendsReply_Trend$Type extends MessageType<GetTrendsReply_Trend> {
    constructor() {
        super("GetTrendsReply.Trend", [
            { no: 1, name: "avg_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "change", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trend", kind: "message", T: () => GetTrendsReply_Trend },
            { no: 4, name: "series", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "position", kind: "enum", T: () => ["GetTrendsReply.Position", GetTrendsReply_Position] }
        ]);
    }
    create(value?: PartialMessage<GetTrendsReply_Trend>): GetTrendsReply_Trend {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.avgPrice = "";
        message.change = "";
        message.series = [];
        message.position = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTrendsReply_Trend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrendsReply_Trend): GetTrendsReply_Trend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string avg_price */ 1:
                    message.avgPrice = reader.string();
                    break;
                case /* string change */ 2:
                    message.change = reader.string();
                    break;
                case /* GetTrendsReply.Trend trend */ 3:
                    message.trend = GetTrendsReply_Trend.internalBinaryRead(reader, reader.uint32(), options, message.trend);
                    break;
                case /* repeated double series */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.series.push(reader.double());
                    else
                        message.series.push(reader.double());
                    break;
                case /* GetTrendsReply.Position position */ 5:
                    message.position = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrendsReply_Trend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string avg_price = 1; */
        if (message.avgPrice !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.avgPrice);
        /* string change = 2; */
        if (message.change !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.change);
        /* GetTrendsReply.Trend trend = 3; */
        if (message.trend)
            GetTrendsReply_Trend.internalBinaryWrite(message.trend, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated double series = 4; */
        if (message.series.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.series.length; i++)
                writer.double(message.series[i]);
            writer.join();
        }
        /* GetTrendsReply.Position position = 5; */
        if (message.position !== 0)
            writer.tag(5, WireType.Varint).int32(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTrendsReply.Trend
 */
export const GetTrendsReply_Trend = new GetTrendsReply_Trend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodStatsRequest$Type extends MessageType<GetPeriodStatsRequest> {
    constructor() {
        super("GetPeriodStatsRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodStatsRequest>): GetPeriodStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPeriodStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodStatsRequest): GetPeriodStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodStatsRequest
 */
export const GetPeriodStatsRequest = new GetPeriodStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeriodStatsReply$Type extends MessageType<GetPeriodStatsReply> {
    constructor() {
        super("GetPeriodStatsReply", [
            { no: 1, name: "avg_fuel_price_per_quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "avg_fuel_price_per_total_mile", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "avg_rpm", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeriodStatsReply>): GetPeriodStatsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.avgFuelPricePerQuantity = 0;
        message.avgFuelPricePerTotalMile = 0;
        message.avgRpm = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPeriodStatsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeriodStatsReply): GetPeriodStatsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double avg_fuel_price_per_quantity */ 1:
                    message.avgFuelPricePerQuantity = reader.double();
                    break;
                case /* double avg_fuel_price_per_total_mile */ 2:
                    message.avgFuelPricePerTotalMile = reader.double();
                    break;
                case /* double avg_rpm */ 3:
                    message.avgRpm = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeriodStatsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double avg_fuel_price_per_quantity = 1; */
        if (message.avgFuelPricePerQuantity !== 0)
            writer.tag(1, WireType.Bit64).double(message.avgFuelPricePerQuantity);
        /* double avg_fuel_price_per_total_mile = 2; */
        if (message.avgFuelPricePerTotalMile !== 0)
            writer.tag(2, WireType.Bit64).double(message.avgFuelPricePerTotalMile);
        /* double avg_rpm = 3; */
        if (message.avgRpm !== 0)
            writer.tag(3, WireType.Bit64).double(message.avgRpm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeriodStatsReply
 */
export const GetPeriodStatsReply = new GetPeriodStatsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsFactoringCompaniesGetRequest$Type extends MessageType<StatsFactoringCompaniesGetRequest> {
    constructor() {
        super("StatsFactoringCompaniesGetRequest", []);
    }
    create(value?: PartialMessage<StatsFactoringCompaniesGetRequest>): StatsFactoringCompaniesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StatsFactoringCompaniesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsFactoringCompaniesGetRequest): StatsFactoringCompaniesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StatsFactoringCompaniesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StatsFactoringCompaniesGetRequest
 */
export const StatsFactoringCompaniesGetRequest = new StatsFactoringCompaniesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsFactoringCompaniesGetReply$Type extends MessageType<StatsFactoringCompaniesGetReply> {
    constructor() {
        super("StatsFactoringCompaniesGetReply", [
            { no: 1, name: "factoring_companies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StatsFactoringCompaniesGetReply_FactoringCompany }
        ]);
    }
    create(value?: PartialMessage<StatsFactoringCompaniesGetReply>): StatsFactoringCompaniesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.factoringCompanies = [];
        if (value !== undefined)
            reflectionMergePartial<StatsFactoringCompaniesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsFactoringCompaniesGetReply): StatsFactoringCompaniesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StatsFactoringCompaniesGetReply.FactoringCompany factoring_companies */ 1:
                    message.factoringCompanies.push(StatsFactoringCompaniesGetReply_FactoringCompany.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatsFactoringCompaniesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StatsFactoringCompaniesGetReply.FactoringCompany factoring_companies = 1; */
        for (let i = 0; i < message.factoringCompanies.length; i++)
            StatsFactoringCompaniesGetReply_FactoringCompany.internalBinaryWrite(message.factoringCompanies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StatsFactoringCompaniesGetReply
 */
export const StatsFactoringCompaniesGetReply = new StatsFactoringCompaniesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsFactoringCompaniesGetReply_FactoringCompany$Type extends MessageType<StatsFactoringCompaniesGetReply_FactoringCompany> {
    constructor() {
        super("StatsFactoringCompaniesGetReply.FactoringCompany", [
            { no: 1, name: "factoring_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StatsFactoringCompaniesGetReply_FactoringCompany_Stats },
            { no: 3, name: "last_30_days_stats", kind: "message", T: () => StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats }
        ]);
    }
    create(value?: PartialMessage<StatsFactoringCompaniesGetReply_FactoringCompany>): StatsFactoringCompaniesGetReply_FactoringCompany {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.factoringCompanyId = "";
        message.stats = [];
        if (value !== undefined)
            reflectionMergePartial<StatsFactoringCompaniesGetReply_FactoringCompany>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsFactoringCompaniesGetReply_FactoringCompany): StatsFactoringCompaniesGetReply_FactoringCompany {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string factoring_company_id */ 1:
                    message.factoringCompanyId = reader.string();
                    break;
                case /* repeated StatsFactoringCompaniesGetReply.FactoringCompany.Stats stats */ 2:
                    message.stats.push(StatsFactoringCompaniesGetReply_FactoringCompany_Stats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* StatsFactoringCompaniesGetReply.FactoringCompany.Last30DaysStats last_30_days_stats */ 3:
                    message.last30DaysStats = StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats.internalBinaryRead(reader, reader.uint32(), options, message.last30DaysStats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatsFactoringCompaniesGetReply_FactoringCompany, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string factoring_company_id = 1; */
        if (message.factoringCompanyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.factoringCompanyId);
        /* repeated StatsFactoringCompaniesGetReply.FactoringCompany.Stats stats = 2; */
        for (let i = 0; i < message.stats.length; i++)
            StatsFactoringCompaniesGetReply_FactoringCompany_Stats.internalBinaryWrite(message.stats[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* StatsFactoringCompaniesGetReply.FactoringCompany.Last30DaysStats last_30_days_stats = 3; */
        if (message.last30DaysStats)
            StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats.internalBinaryWrite(message.last30DaysStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StatsFactoringCompaniesGetReply.FactoringCompany
 */
export const StatsFactoringCompaniesGetReply_FactoringCompany = new StatsFactoringCompaniesGetReply_FactoringCompany$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsFactoringCompaniesGetReply_FactoringCompany_Stats$Type extends MessageType<StatsFactoringCompaniesGetReply_FactoringCompany_Stats> {
    constructor() {
        super("StatsFactoringCompaniesGetReply.FactoringCompany.Stats", [
            { no: 1, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 2, name: "broker_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "broker_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<StatsFactoringCompaniesGetReply_FactoringCompany_Stats>): StatsFactoringCompaniesGetReply_FactoringCompany_Stats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invoiceStatus = 0;
        message.brokerAmount = 0;
        message.brokerAmountFormatted = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<StatsFactoringCompaniesGetReply_FactoringCompany_Stats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsFactoringCompaniesGetReply_FactoringCompany_Stats): StatsFactoringCompaniesGetReply_FactoringCompany_Stats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LoadModel.InvoiceStatus invoice_status */ 1:
                    message.invoiceStatus = reader.int32();
                    break;
                case /* double broker_amount */ 2:
                    message.brokerAmount = reader.double();
                    break;
                case /* string broker_amount_formatted */ 3:
                    message.brokerAmountFormatted = reader.string();
                    break;
                case /* int64 count */ 4:
                    message.count = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatsFactoringCompaniesGetReply_FactoringCompany_Stats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LoadModel.InvoiceStatus invoice_status = 1; */
        if (message.invoiceStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.invoiceStatus);
        /* double broker_amount = 2; */
        if (message.brokerAmount !== 0)
            writer.tag(2, WireType.Bit64).double(message.brokerAmount);
        /* string broker_amount_formatted = 3; */
        if (message.brokerAmountFormatted !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.brokerAmountFormatted);
        /* int64 count = 4; */
        if (message.count !== 0)
            writer.tag(4, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StatsFactoringCompaniesGetReply.FactoringCompany.Stats
 */
export const StatsFactoringCompaniesGetReply_FactoringCompany_Stats = new StatsFactoringCompaniesGetReply_FactoringCompany_Stats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats$Type extends MessageType<StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats> {
    constructor() {
        super("StatsFactoringCompaniesGetReply.FactoringCompany.Last30DaysStats", [
            { no: 1, name: "broker_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "broker_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "factoring_fee", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "factoring_fee_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "paid", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "paid_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "pending", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "pending_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "rejected", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "rejected_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats>): StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerAmount = 0;
        message.brokerAmountFormatted = "";
        message.count = 0;
        message.factoringFee = 0;
        message.factoringFeeFormatted = "";
        message.paid = 0;
        message.paidFormatted = "";
        message.pending = 0;
        message.pendingFormatted = "";
        message.rejected = 0;
        message.rejectedFormatted = "";
        if (value !== undefined)
            reflectionMergePartial<StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats): StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double broker_amount */ 1:
                    message.brokerAmount = reader.double();
                    break;
                case /* string broker_amount_formatted */ 2:
                    message.brokerAmountFormatted = reader.string();
                    break;
                case /* int64 count */ 3:
                    message.count = reader.int64().toNumber();
                    break;
                case /* double factoring_fee */ 4:
                    message.factoringFee = reader.double();
                    break;
                case /* string factoring_fee_formatted */ 5:
                    message.factoringFeeFormatted = reader.string();
                    break;
                case /* double paid */ 6:
                    message.paid = reader.double();
                    break;
                case /* string paid_formatted */ 7:
                    message.paidFormatted = reader.string();
                    break;
                case /* double pending */ 8:
                    message.pending = reader.double();
                    break;
                case /* string pending_formatted */ 9:
                    message.pendingFormatted = reader.string();
                    break;
                case /* double rejected */ 10:
                    message.rejected = reader.double();
                    break;
                case /* string rejected_formatted */ 11:
                    message.rejectedFormatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double broker_amount = 1; */
        if (message.brokerAmount !== 0)
            writer.tag(1, WireType.Bit64).double(message.brokerAmount);
        /* string broker_amount_formatted = 2; */
        if (message.brokerAmountFormatted !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.brokerAmountFormatted);
        /* int64 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int64(message.count);
        /* double factoring_fee = 4; */
        if (message.factoringFee !== 0)
            writer.tag(4, WireType.Bit64).double(message.factoringFee);
        /* string factoring_fee_formatted = 5; */
        if (message.factoringFeeFormatted !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.factoringFeeFormatted);
        /* double paid = 6; */
        if (message.paid !== 0)
            writer.tag(6, WireType.Bit64).double(message.paid);
        /* string paid_formatted = 7; */
        if (message.paidFormatted !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.paidFormatted);
        /* double pending = 8; */
        if (message.pending !== 0)
            writer.tag(8, WireType.Bit64).double(message.pending);
        /* string pending_formatted = 9; */
        if (message.pendingFormatted !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.pendingFormatted);
        /* double rejected = 10; */
        if (message.rejected !== 0)
            writer.tag(10, WireType.Bit64).double(message.rejected);
        /* string rejected_formatted = 11; */
        if (message.rejectedFormatted !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.rejectedFormatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StatsFactoringCompaniesGetReply.FactoringCompany.Last30DaysStats
 */
export const StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats = new StatsFactoringCompaniesGetReply_FactoringCompany_Last30DaysStats$Type();
/**
 * @generated ServiceType for protobuf service StatsService
 */
export const StatsService = new ServiceType("StatsService", [
    { name: "GetLoadsStats", serverStreaming: true, options: {}, I: GetLoadsStatsRequest, O: GetLoadsStatsReply },
    { name: "GetTrends", serverStreaming: true, options: {}, I: GetTrendsRequest, O: GetTrendsReply },
    { name: "GetPeriodStats", serverStreaming: true, options: {}, I: GetPeriodStatsRequest, O: GetPeriodStatsReply },
    { name: "StatsFactoringCompaniesGet", serverStreaming: true, options: {}, I: StatsFactoringCompaniesGetRequest, O: StatsFactoringCompaniesGetReply }
]);
