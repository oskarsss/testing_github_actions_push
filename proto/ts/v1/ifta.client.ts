// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/ifta.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { IftaService } from "./ifta";
import type { GetPeriodReply } from "./ifta";
import type { GetPeriodRequest } from "./ifta";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetPeriodsReply } from "./ifta";
import type { GetPeriodsRequest } from "./ifta";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service IftaService
 */
export interface IIftaServiceClient {
    /**
     * @generated from protobuf rpc: GetPeriods(GetPeriodsRequest) returns (GetPeriodsReply);
     */
    getPeriods(input: GetPeriodsRequest, options?: RpcOptions): UnaryCall<GetPeriodsRequest, GetPeriodsReply>;
    /**
     * @generated from protobuf rpc: GetPeriod(GetPeriodRequest) returns (GetPeriodReply);
     */
    getPeriod(input: GetPeriodRequest, options?: RpcOptions): UnaryCall<GetPeriodRequest, GetPeriodReply>;
}
/**
 * @generated from protobuf service IftaService
 */
export class IftaServiceClient implements IIftaServiceClient, ServiceInfo {
    typeName = IftaService.typeName;
    methods = IftaService.methods;
    options = IftaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetPeriods(GetPeriodsRequest) returns (GetPeriodsReply);
     */
    getPeriods(input: GetPeriodsRequest, options?: RpcOptions): UnaryCall<GetPeriodsRequest, GetPeriodsReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPeriodsRequest, GetPeriodsReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPeriod(GetPeriodRequest) returns (GetPeriodReply);
     */
    getPeriod(input: GetPeriodRequest, options?: RpcOptions): UnaryCall<GetPeriodRequest, GetPeriodReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPeriodRequest, GetPeriodReply>("unary", this._transport, method, opt, input);
    }
}
