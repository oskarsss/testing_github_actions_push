// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/service_log_item_type.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceLogItemTypeModel_ServiceLogItemTypeRead } from "./models/model_service_log_item_type";
/**
 * Create
 *
 * @generated from protobuf message ServiceLogItemTypeCreateRequest
 */
export interface ServiceLogItemTypeCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message ServiceLogItemTypeCreateReply
 */
export interface ServiceLogItemTypeCreateReply {
    /**
     * @generated from protobuf field: string item_type_id = 1;
     */
    itemTypeId: string;
}
/**
 * Retrieve
 *
 * @generated from protobuf message ServiceLogItemTypeRetrieveRequest
 */
export interface ServiceLogItemTypeRetrieveRequest {
    /**
     * @generated from protobuf field: string item_type_id = 1;
     */
    itemTypeId: string;
}
/**
 * @generated from protobuf message ServiceLogItemTypeRetrieveReply
 */
export interface ServiceLogItemTypeRetrieveReply {
    /**
     * @generated from protobuf field: ServiceLogItemTypeModel.ServiceLogItemTypeRead item = 1;
     */
    item?: ServiceLogItemTypeModel_ServiceLogItemTypeRead;
}
/**
 * Get
 *
 * @generated from protobuf message ServiceLogItemTypeGetRequest
 */
export interface ServiceLogItemTypeGetRequest {
}
/**
 * @generated from protobuf message ServiceLogItemTypeGetReply
 */
export interface ServiceLogItemTypeGetReply {
    /**
     * @generated from protobuf field: repeated ServiceLogItemTypeModel.ServiceLogItemTypeRead items = 1;
     */
    items: ServiceLogItemTypeModel_ServiceLogItemTypeRead[];
}
/**
 * Update
 *
 * @generated from protobuf message ServiceLogItemTypeUpdateRequest
 */
export interface ServiceLogItemTypeUpdateRequest {
    /**
     * @generated from protobuf field: string item_type_id = 1;
     */
    itemTypeId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message ServiceLogItemTypeUpdateReply
 */
export interface ServiceLogItemTypeUpdateReply {
}
/**
 * Delete
 *
 * @generated from protobuf message ServiceLogItemTypeDeleteRequest
 */
export interface ServiceLogItemTypeDeleteRequest {
    /**
     * @generated from protobuf field: string item_type_id = 1;
     */
    itemTypeId: string;
}
/**
 * @generated from protobuf message ServiceLogItemTypeDeleteReply
 */
export interface ServiceLogItemTypeDeleteReply {
}
/**
 * Sequence update
 *
 * @generated from protobuf message ServiceLogItemTypeSequenceUpdateRequest
 */
export interface ServiceLogItemTypeSequenceUpdateRequest {
    /**
     * @generated from protobuf field: repeated ServiceLogItemTypeSequenceUpdateRequest.SequenceItem items = 1;
     */
    items: ServiceLogItemTypeSequenceUpdateRequest_SequenceItem[];
}
/**
 * @generated from protobuf message ServiceLogItemTypeSequenceUpdateRequest.SequenceItem
 */
export interface ServiceLogItemTypeSequenceUpdateRequest_SequenceItem {
    /**
     * @generated from protobuf field: string item_type_id = 1;
     */
    itemTypeId: string;
    /**
     * @generated from protobuf field: int64 sequence = 2;
     */
    sequence: number;
}
/**
 * @generated from protobuf message ServiceLogItemTypeSequenceUpdateReply
 */
export interface ServiceLogItemTypeSequenceUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeCreateRequest$Type extends MessageType<ServiceLogItemTypeCreateRequest> {
    constructor() {
        super("ServiceLogItemTypeCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeCreateRequest>): ServiceLogItemTypeCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeCreateRequest): ServiceLogItemTypeCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeCreateRequest
 */
export const ServiceLogItemTypeCreateRequest = new ServiceLogItemTypeCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeCreateReply$Type extends MessageType<ServiceLogItemTypeCreateReply> {
    constructor() {
        super("ServiceLogItemTypeCreateReply", [
            { no: 1, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeCreateReply>): ServiceLogItemTypeCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeCreateReply): ServiceLogItemTypeCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type_id */ 1:
                    message.itemTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type_id = 1; */
        if (message.itemTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeCreateReply
 */
export const ServiceLogItemTypeCreateReply = new ServiceLogItemTypeCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeRetrieveRequest$Type extends MessageType<ServiceLogItemTypeRetrieveRequest> {
    constructor() {
        super("ServiceLogItemTypeRetrieveRequest", [
            { no: 1, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeRetrieveRequest>): ServiceLogItemTypeRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeRetrieveRequest): ServiceLogItemTypeRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type_id */ 1:
                    message.itemTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type_id = 1; */
        if (message.itemTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeRetrieveRequest
 */
export const ServiceLogItemTypeRetrieveRequest = new ServiceLogItemTypeRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeRetrieveReply$Type extends MessageType<ServiceLogItemTypeRetrieveReply> {
    constructor() {
        super("ServiceLogItemTypeRetrieveReply", [
            { no: 1, name: "item", kind: "message", T: () => ServiceLogItemTypeModel_ServiceLogItemTypeRead }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeRetrieveReply>): ServiceLogItemTypeRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeRetrieveReply): ServiceLogItemTypeRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServiceLogItemTypeModel.ServiceLogItemTypeRead item */ 1:
                    message.item = ServiceLogItemTypeModel_ServiceLogItemTypeRead.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServiceLogItemTypeModel.ServiceLogItemTypeRead item = 1; */
        if (message.item)
            ServiceLogItemTypeModel_ServiceLogItemTypeRead.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeRetrieveReply
 */
export const ServiceLogItemTypeRetrieveReply = new ServiceLogItemTypeRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeGetRequest$Type extends MessageType<ServiceLogItemTypeGetRequest> {
    constructor() {
        super("ServiceLogItemTypeGetRequest", []);
    }
    create(value?: PartialMessage<ServiceLogItemTypeGetRequest>): ServiceLogItemTypeGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeGetRequest): ServiceLogItemTypeGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogItemTypeGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeGetRequest
 */
export const ServiceLogItemTypeGetRequest = new ServiceLogItemTypeGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeGetReply$Type extends MessageType<ServiceLogItemTypeGetReply> {
    constructor() {
        super("ServiceLogItemTypeGetReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceLogItemTypeModel_ServiceLogItemTypeRead }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeGetReply>): ServiceLogItemTypeGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeGetReply): ServiceLogItemTypeGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceLogItemTypeModel.ServiceLogItemTypeRead items */ 1:
                    message.items.push(ServiceLogItemTypeModel_ServiceLogItemTypeRead.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceLogItemTypeModel.ServiceLogItemTypeRead items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ServiceLogItemTypeModel_ServiceLogItemTypeRead.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeGetReply
 */
export const ServiceLogItemTypeGetReply = new ServiceLogItemTypeGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeUpdateRequest$Type extends MessageType<ServiceLogItemTypeUpdateRequest> {
    constructor() {
        super("ServiceLogItemTypeUpdateRequest", [
            { no: 1, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeUpdateRequest>): ServiceLogItemTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemTypeId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeUpdateRequest): ServiceLogItemTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type_id */ 1:
                    message.itemTypeId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type_id = 1; */
        if (message.itemTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemTypeId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeUpdateRequest
 */
export const ServiceLogItemTypeUpdateRequest = new ServiceLogItemTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeUpdateReply$Type extends MessageType<ServiceLogItemTypeUpdateReply> {
    constructor() {
        super("ServiceLogItemTypeUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceLogItemTypeUpdateReply>): ServiceLogItemTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeUpdateReply): ServiceLogItemTypeUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogItemTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeUpdateReply
 */
export const ServiceLogItemTypeUpdateReply = new ServiceLogItemTypeUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeDeleteRequest$Type extends MessageType<ServiceLogItemTypeDeleteRequest> {
    constructor() {
        super("ServiceLogItemTypeDeleteRequest", [
            { no: 1, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeDeleteRequest>): ServiceLogItemTypeDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeDeleteRequest): ServiceLogItemTypeDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type_id */ 1:
                    message.itemTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type_id = 1; */
        if (message.itemTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeDeleteRequest
 */
export const ServiceLogItemTypeDeleteRequest = new ServiceLogItemTypeDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeDeleteReply$Type extends MessageType<ServiceLogItemTypeDeleteReply> {
    constructor() {
        super("ServiceLogItemTypeDeleteReply", []);
    }
    create(value?: PartialMessage<ServiceLogItemTypeDeleteReply>): ServiceLogItemTypeDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeDeleteReply): ServiceLogItemTypeDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogItemTypeDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeDeleteReply
 */
export const ServiceLogItemTypeDeleteReply = new ServiceLogItemTypeDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeSequenceUpdateRequest$Type extends MessageType<ServiceLogItemTypeSequenceUpdateRequest> {
    constructor() {
        super("ServiceLogItemTypeSequenceUpdateRequest", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceLogItemTypeSequenceUpdateRequest_SequenceItem }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeSequenceUpdateRequest>): ServiceLogItemTypeSequenceUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeSequenceUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeSequenceUpdateRequest): ServiceLogItemTypeSequenceUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceLogItemTypeSequenceUpdateRequest.SequenceItem items */ 1:
                    message.items.push(ServiceLogItemTypeSequenceUpdateRequest_SequenceItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeSequenceUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceLogItemTypeSequenceUpdateRequest.SequenceItem items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ServiceLogItemTypeSequenceUpdateRequest_SequenceItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeSequenceUpdateRequest
 */
export const ServiceLogItemTypeSequenceUpdateRequest = new ServiceLogItemTypeSequenceUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeSequenceUpdateRequest_SequenceItem$Type extends MessageType<ServiceLogItemTypeSequenceUpdateRequest_SequenceItem> {
    constructor() {
        super("ServiceLogItemTypeSequenceUpdateRequest.SequenceItem", [
            { no: 1, name: "item_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceLogItemTypeSequenceUpdateRequest_SequenceItem>): ServiceLogItemTypeSequenceUpdateRequest_SequenceItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemTypeId = "";
        message.sequence = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeSequenceUpdateRequest_SequenceItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeSequenceUpdateRequest_SequenceItem): ServiceLogItemTypeSequenceUpdateRequest_SequenceItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type_id */ 1:
                    message.itemTypeId = reader.string();
                    break;
                case /* int64 sequence */ 2:
                    message.sequence = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceLogItemTypeSequenceUpdateRequest_SequenceItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type_id = 1; */
        if (message.itemTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemTypeId);
        /* int64 sequence = 2; */
        if (message.sequence !== 0)
            writer.tag(2, WireType.Varint).int64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeSequenceUpdateRequest.SequenceItem
 */
export const ServiceLogItemTypeSequenceUpdateRequest_SequenceItem = new ServiceLogItemTypeSequenceUpdateRequest_SequenceItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceLogItemTypeSequenceUpdateReply$Type extends MessageType<ServiceLogItemTypeSequenceUpdateReply> {
    constructor() {
        super("ServiceLogItemTypeSequenceUpdateReply", []);
    }
    create(value?: PartialMessage<ServiceLogItemTypeSequenceUpdateReply>): ServiceLogItemTypeSequenceUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ServiceLogItemTypeSequenceUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceLogItemTypeSequenceUpdateReply): ServiceLogItemTypeSequenceUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ServiceLogItemTypeSequenceUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceLogItemTypeSequenceUpdateReply
 */
export const ServiceLogItemTypeSequenceUpdateReply = new ServiceLogItemTypeSequenceUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service ServiceLogItemTypeService
 */
export const ServiceLogItemTypeService = new ServiceType("ServiceLogItemTypeService", [
    { name: "ServiceLogItemTypeCreate", options: {}, I: ServiceLogItemTypeCreateRequest, O: ServiceLogItemTypeCreateReply },
    { name: "ServiceLogItemTypeRetrieve", options: {}, I: ServiceLogItemTypeRetrieveRequest, O: ServiceLogItemTypeRetrieveReply },
    { name: "ServiceLogItemTypeGet", options: {}, I: ServiceLogItemTypeGetRequest, O: ServiceLogItemTypeGetReply },
    { name: "ServiceLogItemTypeUpdate", options: {}, I: ServiceLogItemTypeUpdateRequest, O: ServiceLogItemTypeUpdateReply },
    { name: "ServiceLogItemTypeDelete", options: {}, I: ServiceLogItemTypeDeleteRequest, O: ServiceLogItemTypeDeleteReply },
    { name: "ServiceLogItemTypeSequenceUpdate", options: {}, I: ServiceLogItemTypeSequenceUpdateRequest, O: ServiceLogItemTypeSequenceUpdateReply }
]);
