// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/teams.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message TeamsGetRequest
 */
export interface TeamsGetRequest {
}
/**
 * @generated from protobuf message TeamsGetReply
 */
export interface TeamsGetReply {
    /**
     * @generated from protobuf field: repeated TeamsGetReply.Team teams = 1;
     */
    teams: TeamsGetReply_Team[];
}
/**
 * @generated from protobuf message TeamsGetReply.Team
 */
export interface TeamsGetReply_Team {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string logo_url = 4;
     */
    logoUrl: string;
    /**
     * @generated from protobuf field: bool deleted = 5;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: repeated string drivers = 6;
     */
    drivers: string[];
    /**
     * @generated from protobuf field: repeated string trucks = 7;
     */
    trucks: string[];
    /**
     * @generated from protobuf field: repeated string trailers = 8;
     */
    trailers: string[];
    /**
     * @generated from protobuf field: repeated string users = 9;
     */
    users: string[];
}
/**
 * @generated from protobuf message TeamRetrieveRequest
 */
export interface TeamRetrieveRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
}
/**
 * @generated from protobuf message TeamRetrieveReply
 */
export interface TeamRetrieveReply {
    /**
     * @generated from protobuf field: TeamRetrieveReply.Team team = 1;
     */
    team?: TeamRetrieveReply_Team;
}
/**
 * @generated from protobuf message TeamRetrieveReply.Team
 */
export interface TeamRetrieveReply_Team {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string logo_url = 4;
     */
    logoUrl: string;
    /**
     * @generated from protobuf field: repeated string drivers = 5;
     */
    drivers: string[];
    /**
     * @generated from protobuf field: repeated string trucks = 6;
     */
    trucks: string[];
    /**
     * @generated from protobuf field: repeated string trailers = 7;
     */
    trailers: string[];
    /**
     * @generated from protobuf field: repeated string users = 8;
     */
    users: string[];
}
/**
 * @generated from protobuf message TeamCreateRequest
 */
export interface TeamCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: string logo_url = 3;
     */
    logoUrl: string;
}
/**
 * @generated from protobuf message TeamCreateReply
 */
export interface TeamCreateReply {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
}
/**
 * @generated from protobuf message TeamUpdateRequest
 */
export interface TeamUpdateRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
}
/**
 * @generated from protobuf message TeamUpdateReply
 */
export interface TeamUpdateReply {
}
/**
 * @generated from protobuf message TeamDeleteRequest
 */
export interface TeamDeleteRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
}
/**
 * @generated from protobuf message TeamDeleteReply
 */
export interface TeamDeleteReply {
}
/**
 * @generated from protobuf message TeamLogoUpdateRequest
 */
export interface TeamLogoUpdateRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string logo_url = 2;
     */
    logoUrl: string;
}
/**
 * @generated from protobuf message TeamLogoUpdateReply
 */
export interface TeamLogoUpdateReply {
}
/**
 * @generated from protobuf message TeamUsersCreateRequest
 */
export interface TeamUsersCreateRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: repeated string users_id = 2;
     */
    usersId: string[];
}
/**
 * @generated from protobuf message TeamUsersCreateReply
 */
export interface TeamUsersCreateReply {
}
/**
 * @generated from protobuf message TeamUserDeleteRequest
 */
export interface TeamUserDeleteRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message TeamUserDeleteReply
 */
export interface TeamUserDeleteReply {
}
/**
 * @generated from protobuf message TeamTrucksCreateRequest
 */
export interface TeamTrucksCreateRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: repeated string trucks_id = 2;
     */
    trucksId: string[];
}
/**
 * @generated from protobuf message TeamTrucksCreateReply
 */
export interface TeamTrucksCreateReply {
}
/**
 * @generated from protobuf message TeamTruckDeleteRequest
 */
export interface TeamTruckDeleteRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
}
/**
 * @generated from protobuf message TeamTruckDeleteReply
 */
export interface TeamTruckDeleteReply {
}
/**
 * @generated from protobuf message TeamTrailersCreateRequest
 */
export interface TeamTrailersCreateRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: repeated string trailers_id = 2;
     */
    trailersId: string[];
}
/**
 * @generated from protobuf message TeamTrailersCreateReply
 */
export interface TeamTrailersCreateReply {
}
/**
 * @generated from protobuf message TeamTrailerDeleteRequest
 */
export interface TeamTrailerDeleteRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string trailer_id = 2;
     */
    trailerId: string;
}
/**
 * @generated from protobuf message TeamTrailerDeleteReply
 */
export interface TeamTrailerDeleteReply {
}
/**
 * @generated from protobuf message TeamDriversCreateRequest
 */
export interface TeamDriversCreateRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: repeated string drivers_id = 2;
     */
    driversId: string[];
}
/**
 * @generated from protobuf message TeamDriversCreateReply
 */
export interface TeamDriversCreateReply {
}
/**
 * @generated from protobuf message TeamDriverDeleteRequest
 */
export interface TeamDriverDeleteRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string driver_id = 2;
     */
    driverId: string;
}
/**
 * @generated from protobuf message TeamDriverDeleteReply
 */
export interface TeamDriverDeleteReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamsGetRequest$Type extends MessageType<TeamsGetRequest> {
    constructor() {
        super("TeamsGetRequest", []);
    }
    create(value?: PartialMessage<TeamsGetRequest>): TeamsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamsGetRequest): TeamsGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamsGetRequest
 */
export const TeamsGetRequest = new TeamsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamsGetReply$Type extends MessageType<TeamsGetReply> {
    constructor() {
        super("TeamsGetReply", [
            { no: 1, name: "teams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamsGetReply_Team }
        ]);
    }
    create(value?: PartialMessage<TeamsGetReply>): TeamsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teams = [];
        if (value !== undefined)
            reflectionMergePartial<TeamsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamsGetReply): TeamsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TeamsGetReply.Team teams */ 1:
                    message.teams.push(TeamsGetReply_Team.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TeamsGetReply.Team teams = 1; */
        for (let i = 0; i < message.teams.length; i++)
            TeamsGetReply_Team.internalBinaryWrite(message.teams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamsGetReply
 */
export const TeamsGetReply = new TeamsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamsGetReply_Team$Type extends MessageType<TeamsGetReply_Team> {
    constructor() {
        super("TeamsGetReply.Team", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "drivers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "trucks", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "trailers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamsGetReply_Team>): TeamsGetReply_Team {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.name = "";
        message.description = "";
        message.logoUrl = "";
        message.deleted = false;
        message.drivers = [];
        message.trucks = [];
        message.trailers = [];
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<TeamsGetReply_Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamsGetReply_Team): TeamsGetReply_Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string logo_url */ 4:
                    message.logoUrl = reader.string();
                    break;
                case /* bool deleted */ 5:
                    message.deleted = reader.bool();
                    break;
                case /* repeated string drivers */ 6:
                    message.drivers.push(reader.string());
                    break;
                case /* repeated string trucks */ 7:
                    message.trucks.push(reader.string());
                    break;
                case /* repeated string trailers */ 8:
                    message.trailers.push(reader.string());
                    break;
                case /* repeated string users */ 9:
                    message.users.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamsGetReply_Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string logo_url = 4; */
        if (message.logoUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logoUrl);
        /* bool deleted = 5; */
        if (message.deleted !== false)
            writer.tag(5, WireType.Varint).bool(message.deleted);
        /* repeated string drivers = 6; */
        for (let i = 0; i < message.drivers.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.drivers[i]);
        /* repeated string trucks = 7; */
        for (let i = 0; i < message.trucks.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.trucks[i]);
        /* repeated string trailers = 8; */
        for (let i = 0; i < message.trailers.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.trailers[i]);
        /* repeated string users = 9; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.users[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamsGetReply.Team
 */
export const TeamsGetReply_Team = new TeamsGetReply_Team$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamRetrieveRequest$Type extends MessageType<TeamRetrieveRequest> {
    constructor() {
        super("TeamRetrieveRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamRetrieveRequest>): TeamRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamRetrieveRequest): TeamRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamRetrieveRequest
 */
export const TeamRetrieveRequest = new TeamRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamRetrieveReply$Type extends MessageType<TeamRetrieveReply> {
    constructor() {
        super("TeamRetrieveReply", [
            { no: 1, name: "team", kind: "message", T: () => TeamRetrieveReply_Team }
        ]);
    }
    create(value?: PartialMessage<TeamRetrieveReply>): TeamRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamRetrieveReply): TeamRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TeamRetrieveReply.Team team */ 1:
                    message.team = TeamRetrieveReply_Team.internalBinaryRead(reader, reader.uint32(), options, message.team);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TeamRetrieveReply.Team team = 1; */
        if (message.team)
            TeamRetrieveReply_Team.internalBinaryWrite(message.team, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamRetrieveReply
 */
export const TeamRetrieveReply = new TeamRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamRetrieveReply_Team$Type extends MessageType<TeamRetrieveReply_Team> {
    constructor() {
        super("TeamRetrieveReply.Team", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "drivers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trucks", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "trailers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamRetrieveReply_Team>): TeamRetrieveReply_Team {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.name = "";
        message.description = "";
        message.logoUrl = "";
        message.drivers = [];
        message.trucks = [];
        message.trailers = [];
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<TeamRetrieveReply_Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamRetrieveReply_Team): TeamRetrieveReply_Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string logo_url */ 4:
                    message.logoUrl = reader.string();
                    break;
                case /* repeated string drivers */ 5:
                    message.drivers.push(reader.string());
                    break;
                case /* repeated string trucks */ 6:
                    message.trucks.push(reader.string());
                    break;
                case /* repeated string trailers */ 7:
                    message.trailers.push(reader.string());
                    break;
                case /* repeated string users */ 8:
                    message.users.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamRetrieveReply_Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string logo_url = 4; */
        if (message.logoUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logoUrl);
        /* repeated string drivers = 5; */
        for (let i = 0; i < message.drivers.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.drivers[i]);
        /* repeated string trucks = 6; */
        for (let i = 0; i < message.trucks.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.trucks[i]);
        /* repeated string trailers = 7; */
        for (let i = 0; i < message.trailers.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.trailers[i]);
        /* repeated string users = 8; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.users[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamRetrieveReply.Team
 */
export const TeamRetrieveReply_Team = new TeamRetrieveReply_Team$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamCreateRequest$Type extends MessageType<TeamCreateRequest> {
    constructor() {
        super("TeamCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamCreateRequest>): TeamCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.logoUrl = "";
        if (value !== undefined)
            reflectionMergePartial<TeamCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamCreateRequest): TeamCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string logo_url */ 3:
                    message.logoUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string logo_url = 3; */
        if (message.logoUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logoUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamCreateRequest
 */
export const TeamCreateRequest = new TeamCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamCreateReply$Type extends MessageType<TeamCreateReply> {
    constructor() {
        super("TeamCreateReply", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamCreateReply>): TeamCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamCreateReply): TeamCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamCreateReply
 */
export const TeamCreateReply = new TeamCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamUpdateRequest$Type extends MessageType<TeamUpdateRequest> {
    constructor() {
        super("TeamUpdateRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamUpdateRequest>): TeamUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.name = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<TeamUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamUpdateRequest): TeamUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamUpdateRequest
 */
export const TeamUpdateRequest = new TeamUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamUpdateReply$Type extends MessageType<TeamUpdateReply> {
    constructor() {
        super("TeamUpdateReply", []);
    }
    create(value?: PartialMessage<TeamUpdateReply>): TeamUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamUpdateReply): TeamUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamUpdateReply
 */
export const TeamUpdateReply = new TeamUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDeleteRequest$Type extends MessageType<TeamDeleteRequest> {
    constructor() {
        super("TeamDeleteRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDeleteRequest>): TeamDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDeleteRequest): TeamDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamDeleteRequest
 */
export const TeamDeleteRequest = new TeamDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDeleteReply$Type extends MessageType<TeamDeleteReply> {
    constructor() {
        super("TeamDeleteReply", []);
    }
    create(value?: PartialMessage<TeamDeleteReply>): TeamDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDeleteReply): TeamDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamDeleteReply
 */
export const TeamDeleteReply = new TeamDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamLogoUpdateRequest$Type extends MessageType<TeamLogoUpdateRequest> {
    constructor() {
        super("TeamLogoUpdateRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamLogoUpdateRequest>): TeamLogoUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.logoUrl = "";
        if (value !== undefined)
            reflectionMergePartial<TeamLogoUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamLogoUpdateRequest): TeamLogoUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string logo_url */ 2:
                    message.logoUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamLogoUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string logo_url = 2; */
        if (message.logoUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.logoUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamLogoUpdateRequest
 */
export const TeamLogoUpdateRequest = new TeamLogoUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamLogoUpdateReply$Type extends MessageType<TeamLogoUpdateReply> {
    constructor() {
        super("TeamLogoUpdateReply", []);
    }
    create(value?: PartialMessage<TeamLogoUpdateReply>): TeamLogoUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamLogoUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamLogoUpdateReply): TeamLogoUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamLogoUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamLogoUpdateReply
 */
export const TeamLogoUpdateReply = new TeamLogoUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamUsersCreateRequest$Type extends MessageType<TeamUsersCreateRequest> {
    constructor() {
        super("TeamUsersCreateRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "users_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamUsersCreateRequest>): TeamUsersCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.usersId = [];
        if (value !== undefined)
            reflectionMergePartial<TeamUsersCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamUsersCreateRequest): TeamUsersCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* repeated string users_id */ 2:
                    message.usersId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamUsersCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* repeated string users_id = 2; */
        for (let i = 0; i < message.usersId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.usersId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamUsersCreateRequest
 */
export const TeamUsersCreateRequest = new TeamUsersCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamUsersCreateReply$Type extends MessageType<TeamUsersCreateReply> {
    constructor() {
        super("TeamUsersCreateReply", []);
    }
    create(value?: PartialMessage<TeamUsersCreateReply>): TeamUsersCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamUsersCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamUsersCreateReply): TeamUsersCreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamUsersCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamUsersCreateReply
 */
export const TeamUsersCreateReply = new TeamUsersCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamUserDeleteRequest$Type extends MessageType<TeamUserDeleteRequest> {
    constructor() {
        super("TeamUserDeleteRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamUserDeleteRequest>): TeamUserDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamUserDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamUserDeleteRequest): TeamUserDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamUserDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamUserDeleteRequest
 */
export const TeamUserDeleteRequest = new TeamUserDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamUserDeleteReply$Type extends MessageType<TeamUserDeleteReply> {
    constructor() {
        super("TeamUserDeleteReply", []);
    }
    create(value?: PartialMessage<TeamUserDeleteReply>): TeamUserDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamUserDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamUserDeleteReply): TeamUserDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamUserDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamUserDeleteReply
 */
export const TeamUserDeleteReply = new TeamUserDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTrucksCreateRequest$Type extends MessageType<TeamTrucksCreateRequest> {
    constructor() {
        super("TeamTrucksCreateRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trucks_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTrucksCreateRequest>): TeamTrucksCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.trucksId = [];
        if (value !== undefined)
            reflectionMergePartial<TeamTrucksCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTrucksCreateRequest): TeamTrucksCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* repeated string trucks_id */ 2:
                    message.trucksId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTrucksCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* repeated string trucks_id = 2; */
        for (let i = 0; i < message.trucksId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.trucksId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTrucksCreateRequest
 */
export const TeamTrucksCreateRequest = new TeamTrucksCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTrucksCreateReply$Type extends MessageType<TeamTrucksCreateReply> {
    constructor() {
        super("TeamTrucksCreateReply", []);
    }
    create(value?: PartialMessage<TeamTrucksCreateReply>): TeamTrucksCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamTrucksCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTrucksCreateReply): TeamTrucksCreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamTrucksCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTrucksCreateReply
 */
export const TeamTrucksCreateReply = new TeamTrucksCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTruckDeleteRequest$Type extends MessageType<TeamTruckDeleteRequest> {
    constructor() {
        super("TeamTruckDeleteRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTruckDeleteRequest>): TeamTruckDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamTruckDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTruckDeleteRequest): TeamTruckDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTruckDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTruckDeleteRequest
 */
export const TeamTruckDeleteRequest = new TeamTruckDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTruckDeleteReply$Type extends MessageType<TeamTruckDeleteReply> {
    constructor() {
        super("TeamTruckDeleteReply", []);
    }
    create(value?: PartialMessage<TeamTruckDeleteReply>): TeamTruckDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamTruckDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTruckDeleteReply): TeamTruckDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamTruckDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTruckDeleteReply
 */
export const TeamTruckDeleteReply = new TeamTruckDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTrailersCreateRequest$Type extends MessageType<TeamTrailersCreateRequest> {
    constructor() {
        super("TeamTrailersCreateRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailers_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTrailersCreateRequest>): TeamTrailersCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.trailersId = [];
        if (value !== undefined)
            reflectionMergePartial<TeamTrailersCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTrailersCreateRequest): TeamTrailersCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* repeated string trailers_id */ 2:
                    message.trailersId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTrailersCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* repeated string trailers_id = 2; */
        for (let i = 0; i < message.trailersId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.trailersId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTrailersCreateRequest
 */
export const TeamTrailersCreateRequest = new TeamTrailersCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTrailersCreateReply$Type extends MessageType<TeamTrailersCreateReply> {
    constructor() {
        super("TeamTrailersCreateReply", []);
    }
    create(value?: PartialMessage<TeamTrailersCreateReply>): TeamTrailersCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamTrailersCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTrailersCreateReply): TeamTrailersCreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamTrailersCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTrailersCreateReply
 */
export const TeamTrailersCreateReply = new TeamTrailersCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTrailerDeleteRequest$Type extends MessageType<TeamTrailerDeleteRequest> {
    constructor() {
        super("TeamTrailerDeleteRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTrailerDeleteRequest>): TeamTrailerDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.trailerId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamTrailerDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTrailerDeleteRequest): TeamTrailerDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string trailer_id */ 2:
                    message.trailerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTrailerDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string trailer_id = 2; */
        if (message.trailerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trailerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTrailerDeleteRequest
 */
export const TeamTrailerDeleteRequest = new TeamTrailerDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTrailerDeleteReply$Type extends MessageType<TeamTrailerDeleteReply> {
    constructor() {
        super("TeamTrailerDeleteReply", []);
    }
    create(value?: PartialMessage<TeamTrailerDeleteReply>): TeamTrailerDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamTrailerDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTrailerDeleteReply): TeamTrailerDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamTrailerDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamTrailerDeleteReply
 */
export const TeamTrailerDeleteReply = new TeamTrailerDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDriversCreateRequest$Type extends MessageType<TeamDriversCreateRequest> {
    constructor() {
        super("TeamDriversCreateRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "drivers_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDriversCreateRequest>): TeamDriversCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.driversId = [];
        if (value !== undefined)
            reflectionMergePartial<TeamDriversCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDriversCreateRequest): TeamDriversCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* repeated string drivers_id */ 2:
                    message.driversId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDriversCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* repeated string drivers_id = 2; */
        for (let i = 0; i < message.driversId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.driversId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamDriversCreateRequest
 */
export const TeamDriversCreateRequest = new TeamDriversCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDriversCreateReply$Type extends MessageType<TeamDriversCreateReply> {
    constructor() {
        super("TeamDriversCreateReply", []);
    }
    create(value?: PartialMessage<TeamDriversCreateReply>): TeamDriversCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamDriversCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDriversCreateReply): TeamDriversCreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamDriversCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamDriversCreateReply
 */
export const TeamDriversCreateReply = new TeamDriversCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDriverDeleteRequest$Type extends MessageType<TeamDriverDeleteRequest> {
    constructor() {
        super("TeamDriverDeleteRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDriverDeleteRequest>): TeamDriverDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        message.driverId = "";
        if (value !== undefined)
            reflectionMergePartial<TeamDriverDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDriverDeleteRequest): TeamDriverDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                case /* string driver_id */ 2:
                    message.driverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDriverDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        /* string driver_id = 2; */
        if (message.driverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.driverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamDriverDeleteRequest
 */
export const TeamDriverDeleteRequest = new TeamDriverDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDriverDeleteReply$Type extends MessageType<TeamDriverDeleteReply> {
    constructor() {
        super("TeamDriverDeleteReply", []);
    }
    create(value?: PartialMessage<TeamDriverDeleteReply>): TeamDriverDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TeamDriverDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDriverDeleteReply): TeamDriverDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TeamDriverDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamDriverDeleteReply
 */
export const TeamDriverDeleteReply = new TeamDriverDeleteReply$Type();
/**
 * @generated ServiceType for protobuf service TeamsService
 */
export const TeamsService = new ServiceType("TeamsService", [
    { name: "TeamsGet", options: {}, I: TeamsGetRequest, O: TeamsGetReply },
    { name: "TeamRetrieve", options: {}, I: TeamRetrieveRequest, O: TeamRetrieveReply },
    { name: "TeamCreate", options: {}, I: TeamCreateRequest, O: TeamCreateReply },
    { name: "TeamUpdate", options: {}, I: TeamUpdateRequest, O: TeamUpdateReply },
    { name: "TeamDelete", options: {}, I: TeamDeleteRequest, O: TeamDeleteReply },
    { name: "TeamLogoUpdate", options: {}, I: TeamLogoUpdateRequest, O: TeamLogoUpdateReply },
    { name: "TeamUsersCreate", options: {}, I: TeamUsersCreateRequest, O: TeamUsersCreateReply },
    { name: "TeamUserDelete", options: {}, I: TeamUserDeleteRequest, O: TeamUserDeleteReply },
    { name: "TeamTrucksCreate", options: {}, I: TeamTrucksCreateRequest, O: TeamTrucksCreateReply },
    { name: "TeamTruckDelete", options: {}, I: TeamTruckDeleteRequest, O: TeamTruckDeleteReply },
    { name: "TeamTrailersCreate", options: {}, I: TeamTrailersCreateRequest, O: TeamTrailersCreateReply },
    { name: "TeamTrailerDelete", options: {}, I: TeamTrailerDeleteRequest, O: TeamTrailerDeleteReply },
    { name: "TeamDriversCreate", options: {}, I: TeamDriversCreateRequest, O: TeamDriversCreateReply },
    { name: "TeamDriverDelete", options: {}, I: TeamDriverDeleteRequest, O: TeamDriverDeleteReply }
]);
