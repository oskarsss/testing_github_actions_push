// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/critical_notifications.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CriticalNotificationService } from "./critical_notifications";
import type { CriticalNotificationsClearReply } from "./critical_notifications";
import type { CriticalNotificationsClearRequest } from "./critical_notifications";
import type { CriticalNotificationSendReply } from "./critical_notifications";
import type { CriticalNotificationSendRequest } from "./critical_notifications";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CriticalNotificationsGetReply } from "./critical_notifications";
import type { CriticalNotificationsGetRequest } from "./critical_notifications";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service CriticalNotificationService
 */
export interface ICriticalNotificationServiceClient {
    /**
     * @generated from protobuf rpc: CriticalNotificationsGet(CriticalNotificationsGetRequest) returns (CriticalNotificationsGetReply);
     */
    criticalNotificationsGet(input: CriticalNotificationsGetRequest, options?: RpcOptions): UnaryCall<CriticalNotificationsGetRequest, CriticalNotificationsGetReply>;
    /**
     * @generated from protobuf rpc: CriticalNotificationSend(CriticalNotificationSendRequest) returns (CriticalNotificationSendReply);
     */
    criticalNotificationSend(input: CriticalNotificationSendRequest, options?: RpcOptions): UnaryCall<CriticalNotificationSendRequest, CriticalNotificationSendReply>;
    /**
     * @generated from protobuf rpc: CriticalNotificationsClear(CriticalNotificationsClearRequest) returns (CriticalNotificationsClearReply);
     */
    criticalNotificationsClear(input: CriticalNotificationsClearRequest, options?: RpcOptions): UnaryCall<CriticalNotificationsClearRequest, CriticalNotificationsClearReply>;
}
/**
 * @generated from protobuf service CriticalNotificationService
 */
export class CriticalNotificationServiceClient implements ICriticalNotificationServiceClient, ServiceInfo {
    typeName = CriticalNotificationService.typeName;
    methods = CriticalNotificationService.methods;
    options = CriticalNotificationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CriticalNotificationsGet(CriticalNotificationsGetRequest) returns (CriticalNotificationsGetReply);
     */
    criticalNotificationsGet(input: CriticalNotificationsGetRequest, options?: RpcOptions): UnaryCall<CriticalNotificationsGetRequest, CriticalNotificationsGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CriticalNotificationsGetRequest, CriticalNotificationsGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CriticalNotificationSend(CriticalNotificationSendRequest) returns (CriticalNotificationSendReply);
     */
    criticalNotificationSend(input: CriticalNotificationSendRequest, options?: RpcOptions): UnaryCall<CriticalNotificationSendRequest, CriticalNotificationSendReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CriticalNotificationSendRequest, CriticalNotificationSendReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CriticalNotificationsClear(CriticalNotificationsClearRequest) returns (CriticalNotificationsClearReply);
     */
    criticalNotificationsClear(input: CriticalNotificationsClearRequest, options?: RpcOptions): UnaryCall<CriticalNotificationsClearRequest, CriticalNotificationsClearReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CriticalNotificationsClearRequest, CriticalNotificationsClearReply>("unary", this._transport, method, opt, input);
    }
}
