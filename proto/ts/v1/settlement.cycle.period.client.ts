// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlement.cycle.period.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SettlementCyclePeriodService } from "./settlement.cycle.period";
import type { SettlementCyclePeriodStatusUpdateReply } from "./settlement.cycle.period";
import type { SettlementCyclePeriodStatusUpdateRequest } from "./settlement.cycle.period";
import type { SettlementCyclePeriodUpdateReply } from "./settlement.cycle.period";
import type { SettlementCyclePeriodUpdateRequest } from "./settlement.cycle.period";
import type { SettlementCyclePeriodCreateReply } from "./settlement.cycle.period";
import type { SettlementCyclePeriodCreateRequest } from "./settlement.cycle.period";
import type { SettlementCyclePeriodDeleteReply } from "./settlement.cycle.period";
import type { SettlementCyclePeriodDeleteRequest } from "./settlement.cycle.period";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SettlementCyclePeriodGetReply } from "./settlement.cycle.period";
import type { SettlementCyclePeriodGetRequest } from "./settlement.cycle.period";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SettlementCyclePeriodService
 */
export interface ISettlementCyclePeriodServiceClient {
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodGet(SettlementCyclePeriodGetRequest) returns (SettlementCyclePeriodGetReply);
     */
    settlementCyclePeriodGet(input: SettlementCyclePeriodGetRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodGetRequest, SettlementCyclePeriodGetReply>;
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodDelete(SettlementCyclePeriodDeleteRequest) returns (SettlementCyclePeriodDeleteReply);
     */
    settlementCyclePeriodDelete(input: SettlementCyclePeriodDeleteRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodDeleteRequest, SettlementCyclePeriodDeleteReply>;
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodCreate(SettlementCyclePeriodCreateRequest) returns (SettlementCyclePeriodCreateReply);
     */
    settlementCyclePeriodCreate(input: SettlementCyclePeriodCreateRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodCreateRequest, SettlementCyclePeriodCreateReply>;
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodUpdate(SettlementCyclePeriodUpdateRequest) returns (SettlementCyclePeriodUpdateReply);
     */
    settlementCyclePeriodUpdate(input: SettlementCyclePeriodUpdateRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodUpdateRequest, SettlementCyclePeriodUpdateReply>;
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodStatusUpdate(SettlementCyclePeriodStatusUpdateRequest) returns (SettlementCyclePeriodStatusUpdateReply);
     */
    settlementCyclePeriodStatusUpdate(input: SettlementCyclePeriodStatusUpdateRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodStatusUpdateRequest, SettlementCyclePeriodStatusUpdateReply>;
}
/**
 * @generated from protobuf service SettlementCyclePeriodService
 */
export class SettlementCyclePeriodServiceClient implements ISettlementCyclePeriodServiceClient, ServiceInfo {
    typeName = SettlementCyclePeriodService.typeName;
    methods = SettlementCyclePeriodService.methods;
    options = SettlementCyclePeriodService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodGet(SettlementCyclePeriodGetRequest) returns (SettlementCyclePeriodGetReply);
     */
    settlementCyclePeriodGet(input: SettlementCyclePeriodGetRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodGetRequest, SettlementCyclePeriodGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCyclePeriodGetRequest, SettlementCyclePeriodGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodDelete(SettlementCyclePeriodDeleteRequest) returns (SettlementCyclePeriodDeleteReply);
     */
    settlementCyclePeriodDelete(input: SettlementCyclePeriodDeleteRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodDeleteRequest, SettlementCyclePeriodDeleteReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCyclePeriodDeleteRequest, SettlementCyclePeriodDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodCreate(SettlementCyclePeriodCreateRequest) returns (SettlementCyclePeriodCreateReply);
     */
    settlementCyclePeriodCreate(input: SettlementCyclePeriodCreateRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodCreateRequest, SettlementCyclePeriodCreateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCyclePeriodCreateRequest, SettlementCyclePeriodCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodUpdate(SettlementCyclePeriodUpdateRequest) returns (SettlementCyclePeriodUpdateReply);
     */
    settlementCyclePeriodUpdate(input: SettlementCyclePeriodUpdateRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodUpdateRequest, SettlementCyclePeriodUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCyclePeriodUpdateRequest, SettlementCyclePeriodUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SettlementCyclePeriodStatusUpdate(SettlementCyclePeriodStatusUpdateRequest) returns (SettlementCyclePeriodStatusUpdateReply);
     */
    settlementCyclePeriodStatusUpdate(input: SettlementCyclePeriodStatusUpdateRequest, options?: RpcOptions): UnaryCall<SettlementCyclePeriodStatusUpdateRequest, SettlementCyclePeriodStatusUpdateReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SettlementCyclePeriodStatusUpdateRequest, SettlementCyclePeriodStatusUpdateReply>("unary", this._transport, method, opt, input);
    }
}
