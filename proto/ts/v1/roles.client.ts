// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/roles.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RolesService } from "./roles";
import type { RolePermissionRemoveReply } from "./roles";
import type { RolePermissionRemoveRequest } from "./roles";
import type { RolePermissionAssignReply } from "./roles";
import type { RolePermissionAssignRequest } from "./roles";
import type { RoleRestoreReply } from "./roles";
import type { RoleRestoreRequest } from "./roles";
import type { RoleDeleteReply } from "./roles";
import type { RoleDeleteRequest } from "./roles";
import type { RoleUpdateReply } from "./roles";
import type { RoleUpdateRequest } from "./roles";
import type { RoleCreateReply } from "./roles";
import type { RoleCreateRequest } from "./roles";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RoleGetReply } from "./roles";
import type { RoleGetRequest } from "./roles";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service RolesService
 */
export interface IRolesServiceClient {
    /**
     * @generated from protobuf rpc: RoleGet(RoleGetRequest) returns (RoleGetReply);
     */
    roleGet(input: RoleGetRequest, options?: RpcOptions): UnaryCall<RoleGetRequest, RoleGetReply>;
    /**
     * @generated from protobuf rpc: RoleCreate(RoleCreateRequest) returns (RoleCreateReply);
     */
    roleCreate(input: RoleCreateRequest, options?: RpcOptions): UnaryCall<RoleCreateRequest, RoleCreateReply>;
    /**
     * @generated from protobuf rpc: RoleUpdate(RoleUpdateRequest) returns (RoleUpdateReply);
     */
    roleUpdate(input: RoleUpdateRequest, options?: RpcOptions): UnaryCall<RoleUpdateRequest, RoleUpdateReply>;
    /**
     * @generated from protobuf rpc: RoleDelete(RoleDeleteRequest) returns (RoleDeleteReply);
     */
    roleDelete(input: RoleDeleteRequest, options?: RpcOptions): UnaryCall<RoleDeleteRequest, RoleDeleteReply>;
    /**
     * @generated from protobuf rpc: RoleRestore(RoleRestoreRequest) returns (RoleRestoreReply);
     */
    roleRestore(input: RoleRestoreRequest, options?: RpcOptions): UnaryCall<RoleRestoreRequest, RoleRestoreReply>;
    /**
     * @generated from protobuf rpc: RolePermissionAssign(RolePermissionAssignRequest) returns (RolePermissionAssignReply);
     */
    rolePermissionAssign(input: RolePermissionAssignRequest, options?: RpcOptions): UnaryCall<RolePermissionAssignRequest, RolePermissionAssignReply>;
    /**
     * @generated from protobuf rpc: RolePermissionRemove(RolePermissionRemoveRequest) returns (RolePermissionRemoveReply);
     */
    rolePermissionRemove(input: RolePermissionRemoveRequest, options?: RpcOptions): UnaryCall<RolePermissionRemoveRequest, RolePermissionRemoveReply>;
}
/**
 * @generated from protobuf service RolesService
 */
export class RolesServiceClient implements IRolesServiceClient, ServiceInfo {
    typeName = RolesService.typeName;
    methods = RolesService.methods;
    options = RolesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RoleGet(RoleGetRequest) returns (RoleGetReply);
     */
    roleGet(input: RoleGetRequest, options?: RpcOptions): UnaryCall<RoleGetRequest, RoleGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleGetRequest, RoleGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RoleCreate(RoleCreateRequest) returns (RoleCreateReply);
     */
    roleCreate(input: RoleCreateRequest, options?: RpcOptions): UnaryCall<RoleCreateRequest, RoleCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleCreateRequest, RoleCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RoleUpdate(RoleUpdateRequest) returns (RoleUpdateReply);
     */
    roleUpdate(input: RoleUpdateRequest, options?: RpcOptions): UnaryCall<RoleUpdateRequest, RoleUpdateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleUpdateRequest, RoleUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RoleDelete(RoleDeleteRequest) returns (RoleDeleteReply);
     */
    roleDelete(input: RoleDeleteRequest, options?: RpcOptions): UnaryCall<RoleDeleteRequest, RoleDeleteReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleDeleteRequest, RoleDeleteReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RoleRestore(RoleRestoreRequest) returns (RoleRestoreReply);
     */
    roleRestore(input: RoleRestoreRequest, options?: RpcOptions): UnaryCall<RoleRestoreRequest, RoleRestoreReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleRestoreRequest, RoleRestoreReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RolePermissionAssign(RolePermissionAssignRequest) returns (RolePermissionAssignReply);
     */
    rolePermissionAssign(input: RolePermissionAssignRequest, options?: RpcOptions): UnaryCall<RolePermissionAssignRequest, RolePermissionAssignReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<RolePermissionAssignRequest, RolePermissionAssignReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RolePermissionRemove(RolePermissionRemoveRequest) returns (RolePermissionRemoveReply);
     */
    rolePermissionRemove(input: RolePermissionRemoveRequest, options?: RpcOptions): UnaryCall<RolePermissionRemoveRequest, RolePermissionRemoveReply> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RolePermissionRemoveRequest, RolePermissionRemoveReply>("unary", this._transport, method, opt, input);
    }
}
