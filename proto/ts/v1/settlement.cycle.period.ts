// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/settlement.cycle.period.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Settlements_Cycle_Period_Status } from "./models/model_settlement";
import { Settlements_Cycle_Period_Period } from "./models/model_settlement";
/**
 * GetPeriods
 *
 * @generated from protobuf message SettlementCyclePeriodGetRequest
 */
export interface SettlementCyclePeriodGetRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
}
/**
 * @generated from protobuf message SettlementCyclePeriodGetReply
 */
export interface SettlementCyclePeriodGetReply {
    /**
     * @generated from protobuf field: repeated Settlements.Cycle.Period.Period periods = 1;
     */
    periods: Settlements_Cycle_Period_Period[];
}
/**
 * DeletePeriod
 *
 * @generated from protobuf message SettlementCyclePeriodDeleteRequest
 */
export interface SettlementCyclePeriodDeleteRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
}
/**
 * @generated from protobuf message SettlementCyclePeriodDeleteReply
 */
export interface SettlementCyclePeriodDeleteReply {
}
/**
 * CreatePeriod
 *
 * @generated from protobuf message SettlementCyclePeriodCreateRequest
 */
export interface SettlementCyclePeriodCreateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string start_datetime = 2;
     */
    startDatetime: string;
    /**
     * @generated from protobuf field: string end_datetime = 3;
     */
    endDatetime: string;
}
/**
 * @generated from protobuf message SettlementCyclePeriodCreateReply
 */
export interface SettlementCyclePeriodCreateReply {
    /**
     * @generated from protobuf field: string period_id = 1;
     */
    periodId: string;
}
/**
 * UpdatePeriod
 *
 * @generated from protobuf message SettlementCyclePeriodUpdateRequest
 */
export interface SettlementCyclePeriodUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: string start_datetime = 3;
     */
    startDatetime: string;
    /**
     * @generated from protobuf field: string end_datetime = 4;
     */
    endDatetime: string;
}
/**
 * @generated from protobuf message SettlementCyclePeriodUpdateReply
 */
export interface SettlementCyclePeriodUpdateReply {
    /**
     * @generated from protobuf field: string period_id = 1;
     */
    periodId: string;
}
/**
 * StatusUpdate
 *
 * @generated from protobuf message SettlementCyclePeriodStatusUpdateRequest
 */
export interface SettlementCyclePeriodStatusUpdateRequest {
    /**
     * @generated from protobuf field: string cycle_id = 1;
     */
    cycleId: string;
    /**
     * @generated from protobuf field: string period_id = 2;
     */
    periodId: string;
    /**
     * @generated from protobuf field: Settlements.Cycle.Period.Status status = 3;
     */
    status: Settlements_Cycle_Period_Status;
}
/**
 * @generated from protobuf message SettlementCyclePeriodStatusUpdateReply
 */
export interface SettlementCyclePeriodStatusUpdateReply {
    /**
     * @generated from protobuf field: string period_id = 1;
     */
    periodId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodGetRequest$Type extends MessageType<SettlementCyclePeriodGetRequest> {
    constructor() {
        super("SettlementCyclePeriodGetRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodGetRequest>): SettlementCyclePeriodGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodGetRequest): SettlementCyclePeriodGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodGetRequest
 */
export const SettlementCyclePeriodGetRequest = new SettlementCyclePeriodGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodGetReply$Type extends MessageType<SettlementCyclePeriodGetReply> {
    constructor() {
        super("SettlementCyclePeriodGetReply", [
            { no: 1, name: "periods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Settlements_Cycle_Period_Period }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodGetReply>): SettlementCyclePeriodGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.periods = [];
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodGetReply): SettlementCyclePeriodGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Settlements.Cycle.Period.Period periods */ 1:
                    message.periods.push(Settlements_Cycle_Period_Period.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Settlements.Cycle.Period.Period periods = 1; */
        for (let i = 0; i < message.periods.length; i++)
            Settlements_Cycle_Period_Period.internalBinaryWrite(message.periods[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodGetReply
 */
export const SettlementCyclePeriodGetReply = new SettlementCyclePeriodGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodDeleteRequest$Type extends MessageType<SettlementCyclePeriodDeleteRequest> {
    constructor() {
        super("SettlementCyclePeriodDeleteRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodDeleteRequest>): SettlementCyclePeriodDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodDeleteRequest): SettlementCyclePeriodDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodDeleteRequest
 */
export const SettlementCyclePeriodDeleteRequest = new SettlementCyclePeriodDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodDeleteReply$Type extends MessageType<SettlementCyclePeriodDeleteReply> {
    constructor() {
        super("SettlementCyclePeriodDeleteReply", []);
    }
    create(value?: PartialMessage<SettlementCyclePeriodDeleteReply>): SettlementCyclePeriodDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodDeleteReply): SettlementCyclePeriodDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SettlementCyclePeriodDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodDeleteReply
 */
export const SettlementCyclePeriodDeleteReply = new SettlementCyclePeriodDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodCreateRequest$Type extends MessageType<SettlementCyclePeriodCreateRequest> {
    constructor() {
        super("SettlementCyclePeriodCreateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "end_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodCreateRequest>): SettlementCyclePeriodCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.startDatetime = "";
        message.endDatetime = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodCreateRequest): SettlementCyclePeriodCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string start_datetime */ 2:
                    message.startDatetime = reader.string();
                    break;
                case /* string end_datetime */ 3:
                    message.endDatetime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string start_datetime = 2; */
        if (message.startDatetime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startDatetime);
        /* string end_datetime = 3; */
        if (message.endDatetime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.endDatetime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodCreateRequest
 */
export const SettlementCyclePeriodCreateRequest = new SettlementCyclePeriodCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodCreateReply$Type extends MessageType<SettlementCyclePeriodCreateReply> {
    constructor() {
        super("SettlementCyclePeriodCreateReply", [
            { no: 1, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodCreateReply>): SettlementCyclePeriodCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodCreateReply): SettlementCyclePeriodCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string period_id */ 1:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string period_id = 1; */
        if (message.periodId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodCreateReply
 */
export const SettlementCyclePeriodCreateReply = new SettlementCyclePeriodCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodUpdateRequest$Type extends MessageType<SettlementCyclePeriodUpdateRequest> {
    constructor() {
        super("SettlementCyclePeriodUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "end_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodUpdateRequest>): SettlementCyclePeriodUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.startDatetime = "";
        message.endDatetime = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodUpdateRequest): SettlementCyclePeriodUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* string start_datetime */ 3:
                    message.startDatetime = reader.string();
                    break;
                case /* string end_datetime */ 4:
                    message.endDatetime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* string start_datetime = 3; */
        if (message.startDatetime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.startDatetime);
        /* string end_datetime = 4; */
        if (message.endDatetime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.endDatetime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodUpdateRequest
 */
export const SettlementCyclePeriodUpdateRequest = new SettlementCyclePeriodUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodUpdateReply$Type extends MessageType<SettlementCyclePeriodUpdateReply> {
    constructor() {
        super("SettlementCyclePeriodUpdateReply", [
            { no: 1, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodUpdateReply>): SettlementCyclePeriodUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodUpdateReply): SettlementCyclePeriodUpdateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string period_id */ 1:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string period_id = 1; */
        if (message.periodId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodUpdateReply
 */
export const SettlementCyclePeriodUpdateReply = new SettlementCyclePeriodUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodStatusUpdateRequest$Type extends MessageType<SettlementCyclePeriodStatusUpdateRequest> {
    constructor() {
        super("SettlementCyclePeriodStatusUpdateRequest", [
            { no: 1, name: "cycle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["Settlements.Cycle.Period.Status", Settlements_Cycle_Period_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodStatusUpdateRequest>): SettlementCyclePeriodStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cycleId = "";
        message.periodId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodStatusUpdateRequest): SettlementCyclePeriodStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cycle_id */ 1:
                    message.cycleId = reader.string();
                    break;
                case /* string period_id */ 2:
                    message.periodId = reader.string();
                    break;
                case /* Settlements.Cycle.Period.Status status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cycle_id = 1; */
        if (message.cycleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cycleId);
        /* string period_id = 2; */
        if (message.periodId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.periodId);
        /* Settlements.Cycle.Period.Status status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodStatusUpdateRequest
 */
export const SettlementCyclePeriodStatusUpdateRequest = new SettlementCyclePeriodStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettlementCyclePeriodStatusUpdateReply$Type extends MessageType<SettlementCyclePeriodStatusUpdateReply> {
    constructor() {
        super("SettlementCyclePeriodStatusUpdateReply", [
            { no: 1, name: "period_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettlementCyclePeriodStatusUpdateReply>): SettlementCyclePeriodStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.periodId = "";
        if (value !== undefined)
            reflectionMergePartial<SettlementCyclePeriodStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettlementCyclePeriodStatusUpdateReply): SettlementCyclePeriodStatusUpdateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string period_id */ 1:
                    message.periodId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettlementCyclePeriodStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string period_id = 1; */
        if (message.periodId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.periodId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SettlementCyclePeriodStatusUpdateReply
 */
export const SettlementCyclePeriodStatusUpdateReply = new SettlementCyclePeriodStatusUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service SettlementCyclePeriodService
 */
export const SettlementCyclePeriodService = new ServiceType("SettlementCyclePeriodService", [
    { name: "SettlementCyclePeriodGet", options: {}, I: SettlementCyclePeriodGetRequest, O: SettlementCyclePeriodGetReply },
    { name: "SettlementCyclePeriodDelete", options: {}, I: SettlementCyclePeriodDeleteRequest, O: SettlementCyclePeriodDeleteReply },
    { name: "SettlementCyclePeriodCreate", options: {}, I: SettlementCyclePeriodCreateRequest, O: SettlementCyclePeriodCreateReply },
    { name: "SettlementCyclePeriodUpdate", options: {}, I: SettlementCyclePeriodUpdateRequest, O: SettlementCyclePeriodUpdateReply },
    { name: "SettlementCyclePeriodStatusUpdate", options: {}, I: SettlementCyclePeriodStatusUpdateRequest, O: SettlementCyclePeriodStatusUpdateReply }
]);
