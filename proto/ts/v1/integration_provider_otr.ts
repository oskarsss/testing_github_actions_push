// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/integration_provider_otr.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LoadModel_InvoiceStatus } from "./models/model_load";
import { LoadModel_Status } from "./models/model_load";
/**
 * OTR - Get Invoices Preview
 *
 * @generated from protobuf message IP_OTR_Invoices_PreviewRequest
 */
export interface IP_OTR_Invoices_PreviewRequest {
}
/**
 * @generated from protobuf message IP_OTR_Invoices_PreviewReply
 */
export interface IP_OTR_Invoices_PreviewReply {
    /**
     * @generated from protobuf field: string totalAmount = 1;
     */
    totalAmount: string;
    /**
     * @generated from protobuf field: string totalFactoringAmount = 2;
     */
    totalFactoringAmount: string;
    /**
     * @generated from protobuf field: string totalCompanyNet = 3;
     */
    totalCompanyNet: string;
    /**
     * @generated from protobuf field: repeated IP_OTR_Invoices_PreviewReply.Invoice invoices = 4;
     */
    invoices: IP_OTR_Invoices_PreviewReply_Invoice[];
}
/**
 * @generated from protobuf message IP_OTR_Invoices_PreviewReply.Invoice
 */
export interface IP_OTR_Invoices_PreviewReply_Invoice {
    /**
     * @generated from protobuf field: string load_friendly_id = 1;
     */
    loadFriendlyId: string;
    /**
     * @generated from protobuf field: string load_reference_id = 2;
     */
    loadReferenceId: string;
    /**
     * @generated from protobuf field: string broker_id = 3;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string load_id = 4;
     */
    loadId: string;
    /**
     * @generated from protobuf field: LoadModel.Status status = 5;
     */
    status: LoadModel_Status;
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 6;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
    /**
     * @generated from protobuf field: string amount = 7;
     */
    amount: string;
    /**
     * @generated from protobuf field: string factoring_amount = 8;
     */
    factoringAmount: string;
    /**
     * @generated from protobuf field: string company_net = 9;
     */
    companyNet: string;
    /**
     * @generated from protobuf field: bool has_errors = 10;
     */
    hasErrors: boolean;
    /**
     * @generated from protobuf field: repeated string errors = 11;
     */
    errors: string[];
}
/**
 * OTR - Invoices - Create
 *
 * @generated from protobuf message IP_OTR_Invoices_CreateRequest
 */
export interface IP_OTR_Invoices_CreateRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message IP_OTR_Invoices_CreateReply_Enum_Code
 */
export interface IP_OTR_Invoices_CreateReply_Enum_Code {
}
/**
 * @generated from protobuf enum IP_OTR_Invoices_CreateReply_Enum_Code.Code
 */
export enum IP_OTR_Invoices_CreateReply_Enum_Code_Code {
    /**
     * @generated from protobuf enum value: CODE_SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: CODE_WARN = 1;
     */
    WARN = 1,
    /**
     * @generated from protobuf enum value: CODE_FAILED = 2;
     */
    FAILED = 2,
    /**
     * @generated from protobuf enum value: CODE_INTERNAL = 3;
     */
    INTERNAL = 3,
    /**
     * @generated from protobuf enum value: CODE_UNKNOWN = 4;
     */
    UNKNOWN = 4
}
/**
 * @generated from protobuf message IP_OTR_Invoices_CreateReply
 */
export interface IP_OTR_Invoices_CreateReply {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: IP_OTR_Invoices_CreateReply_Enum_Code.Code code = 3;
     */
    code: IP_OTR_Invoices_CreateReply_Enum_Code_Code;
}
/**
 * OTR - Get Document Types
 *
 * @generated from protobuf message IP_OTR_DocumentTypesGetRequest
 */
export interface IP_OTR_DocumentTypesGetRequest {
}
/**
 * @generated from protobuf message IP_OTR_DocumentTypesGetReply
 */
export interface IP_OTR_DocumentTypesGetReply {
    /**
     * @generated from protobuf field: repeated IP_OTR_DocumentTypesGetReply.DocumentType document_types = 1;
     */
    documentTypes: IP_OTR_DocumentTypesGetReply_DocumentType[];
    /**
     * @generated from protobuf field: repeated IP_OTR_DocumentTypesGetReply.OtrDocumentTypes otr_document_types = 2;
     */
    otrDocumentTypes: IP_OTR_DocumentTypesGetReply_OtrDocumentTypes[];
}
/**
 * @generated from protobuf message IP_OTR_DocumentTypesGetReply.DocumentType
 */
export interface IP_OTR_DocumentTypesGetReply_DocumentType {
    /**
     * @generated from protobuf field: string system_document_type = 1;
     */
    systemDocumentType: string;
    /**
     * @generated from protobuf field: string otr_document_type_id = 2;
     */
    otrDocumentTypeId: string;
    /**
     * @generated from protobuf field: string otr_document_type_name = 3;
     */
    otrDocumentTypeName: string;
}
/**
 * @generated from protobuf message IP_OTR_DocumentTypesGetReply.OtrDocumentTypes
 */
export interface IP_OTR_DocumentTypesGetReply_OtrDocumentTypes {
    /**
     * @generated from protobuf field: string otr_document_type_id = 1;
     */
    otrDocumentTypeId: string;
    /**
     * @generated from protobuf field: string otr_document_type_name = 2;
     */
    otrDocumentTypeName: string;
}
/**
 * OTR - Document Types - Update Document Type
 *
 * @generated from protobuf message IP_OTR_DocumentTypes_DocumentTypeUpdateRequest
 */
export interface IP_OTR_DocumentTypes_DocumentTypeUpdateRequest {
    /**
     * @generated from protobuf field: string otr_document_type_id = 1;
     */
    otrDocumentTypeId: string;
    /**
     * @generated from protobuf field: string system_document_type_id = 2;
     */
    systemDocumentTypeId: string;
}
/**
 * @generated from protobuf message IP_OTR_DocumentTypes_DocumentTypeUpdateReply
 */
export interface IP_OTR_DocumentTypes_DocumentTypeUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_Invoices_PreviewRequest$Type extends MessageType<IP_OTR_Invoices_PreviewRequest> {
    constructor() {
        super("IP_OTR_Invoices_PreviewRequest", []);
    }
    create(value?: PartialMessage<IP_OTR_Invoices_PreviewRequest>): IP_OTR_Invoices_PreviewRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_Invoices_PreviewRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_Invoices_PreviewRequest): IP_OTR_Invoices_PreviewRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_OTR_Invoices_PreviewRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_Invoices_PreviewRequest
 */
export const IP_OTR_Invoices_PreviewRequest = new IP_OTR_Invoices_PreviewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_Invoices_PreviewReply$Type extends MessageType<IP_OTR_Invoices_PreviewReply> {
    constructor() {
        super("IP_OTR_Invoices_PreviewReply", [
            { no: 1, name: "totalAmount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "totalFactoringAmount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "totalCompanyNet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "invoices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_OTR_Invoices_PreviewReply_Invoice }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_Invoices_PreviewReply>): IP_OTR_Invoices_PreviewReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalAmount = "";
        message.totalFactoringAmount = "";
        message.totalCompanyNet = "";
        message.invoices = [];
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_Invoices_PreviewReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_Invoices_PreviewReply): IP_OTR_Invoices_PreviewReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string totalAmount */ 1:
                    message.totalAmount = reader.string();
                    break;
                case /* string totalFactoringAmount */ 2:
                    message.totalFactoringAmount = reader.string();
                    break;
                case /* string totalCompanyNet */ 3:
                    message.totalCompanyNet = reader.string();
                    break;
                case /* repeated IP_OTR_Invoices_PreviewReply.Invoice invoices */ 4:
                    message.invoices.push(IP_OTR_Invoices_PreviewReply_Invoice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_Invoices_PreviewReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string totalAmount = 1; */
        if (message.totalAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.totalAmount);
        /* string totalFactoringAmount = 2; */
        if (message.totalFactoringAmount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalFactoringAmount);
        /* string totalCompanyNet = 3; */
        if (message.totalCompanyNet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalCompanyNet);
        /* repeated IP_OTR_Invoices_PreviewReply.Invoice invoices = 4; */
        for (let i = 0; i < message.invoices.length; i++)
            IP_OTR_Invoices_PreviewReply_Invoice.internalBinaryWrite(message.invoices[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_Invoices_PreviewReply
 */
export const IP_OTR_Invoices_PreviewReply = new IP_OTR_Invoices_PreviewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_Invoices_PreviewReply_Invoice$Type extends MessageType<IP_OTR_Invoices_PreviewReply_Invoice> {
    constructor() {
        super("IP_OTR_Invoices_PreviewReply.Invoice", [
            { no: 1, name: "load_friendly_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "load_reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 6, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 7, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "factoring_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "company_net", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "has_errors", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "errors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_Invoices_PreviewReply_Invoice>): IP_OTR_Invoices_PreviewReply_Invoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadFriendlyId = "";
        message.loadReferenceId = "";
        message.brokerId = "";
        message.loadId = "";
        message.status = 0;
        message.invoiceStatus = 0;
        message.amount = "";
        message.factoringAmount = "";
        message.companyNet = "";
        message.hasErrors = false;
        message.errors = [];
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_Invoices_PreviewReply_Invoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_Invoices_PreviewReply_Invoice): IP_OTR_Invoices_PreviewReply_Invoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_friendly_id */ 1:
                    message.loadFriendlyId = reader.string();
                    break;
                case /* string load_reference_id */ 2:
                    message.loadReferenceId = reader.string();
                    break;
                case /* string broker_id */ 3:
                    message.brokerId = reader.string();
                    break;
                case /* string load_id */ 4:
                    message.loadId = reader.string();
                    break;
                case /* LoadModel.Status status */ 5:
                    message.status = reader.int32();
                    break;
                case /* LoadModel.InvoiceStatus invoice_status */ 6:
                    message.invoiceStatus = reader.int32();
                    break;
                case /* string amount */ 7:
                    message.amount = reader.string();
                    break;
                case /* string factoring_amount */ 8:
                    message.factoringAmount = reader.string();
                    break;
                case /* string company_net */ 9:
                    message.companyNet = reader.string();
                    break;
                case /* bool has_errors */ 10:
                    message.hasErrors = reader.bool();
                    break;
                case /* repeated string errors */ 11:
                    message.errors.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_Invoices_PreviewReply_Invoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_friendly_id = 1; */
        if (message.loadFriendlyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadFriendlyId);
        /* string load_reference_id = 2; */
        if (message.loadReferenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadReferenceId);
        /* string broker_id = 3; */
        if (message.brokerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.brokerId);
        /* string load_id = 4; */
        if (message.loadId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.loadId);
        /* LoadModel.Status status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* LoadModel.InvoiceStatus invoice_status = 6; */
        if (message.invoiceStatus !== 0)
            writer.tag(6, WireType.Varint).int32(message.invoiceStatus);
        /* string amount = 7; */
        if (message.amount !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.amount);
        /* string factoring_amount = 8; */
        if (message.factoringAmount !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.factoringAmount);
        /* string company_net = 9; */
        if (message.companyNet !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.companyNet);
        /* bool has_errors = 10; */
        if (message.hasErrors !== false)
            writer.tag(10, WireType.Varint).bool(message.hasErrors);
        /* repeated string errors = 11; */
        for (let i = 0; i < message.errors.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.errors[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_Invoices_PreviewReply.Invoice
 */
export const IP_OTR_Invoices_PreviewReply_Invoice = new IP_OTR_Invoices_PreviewReply_Invoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_Invoices_CreateRequest$Type extends MessageType<IP_OTR_Invoices_CreateRequest> {
    constructor() {
        super("IP_OTR_Invoices_CreateRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_Invoices_CreateRequest>): IP_OTR_Invoices_CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_Invoices_CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_Invoices_CreateRequest): IP_OTR_Invoices_CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_Invoices_CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_Invoices_CreateRequest
 */
export const IP_OTR_Invoices_CreateRequest = new IP_OTR_Invoices_CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_Invoices_CreateReply_Enum_Code$Type extends MessageType<IP_OTR_Invoices_CreateReply_Enum_Code> {
    constructor() {
        super("IP_OTR_Invoices_CreateReply_Enum_Code", []);
    }
    create(value?: PartialMessage<IP_OTR_Invoices_CreateReply_Enum_Code>): IP_OTR_Invoices_CreateReply_Enum_Code {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_Invoices_CreateReply_Enum_Code>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_Invoices_CreateReply_Enum_Code): IP_OTR_Invoices_CreateReply_Enum_Code {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_OTR_Invoices_CreateReply_Enum_Code, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_Invoices_CreateReply_Enum_Code
 */
export const IP_OTR_Invoices_CreateReply_Enum_Code = new IP_OTR_Invoices_CreateReply_Enum_Code$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_Invoices_CreateReply$Type extends MessageType<IP_OTR_Invoices_CreateReply> {
    constructor() {
        super("IP_OTR_Invoices_CreateReply", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "enum", T: () => ["IP_OTR_Invoices_CreateReply_Enum_Code.Code", IP_OTR_Invoices_CreateReply_Enum_Code_Code, "CODE_"] }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_Invoices_CreateReply>): IP_OTR_Invoices_CreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.message = "";
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_Invoices_CreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_Invoices_CreateReply): IP_OTR_Invoices_CreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* IP_OTR_Invoices_CreateReply_Enum_Code.Code code */ 3:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_Invoices_CreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* IP_OTR_Invoices_CreateReply_Enum_Code.Code code = 3; */
        if (message.code !== 0)
            writer.tag(3, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_Invoices_CreateReply
 */
export const IP_OTR_Invoices_CreateReply = new IP_OTR_Invoices_CreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_DocumentTypesGetRequest$Type extends MessageType<IP_OTR_DocumentTypesGetRequest> {
    constructor() {
        super("IP_OTR_DocumentTypesGetRequest", []);
    }
    create(value?: PartialMessage<IP_OTR_DocumentTypesGetRequest>): IP_OTR_DocumentTypesGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_DocumentTypesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_DocumentTypesGetRequest): IP_OTR_DocumentTypesGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_OTR_DocumentTypesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_DocumentTypesGetRequest
 */
export const IP_OTR_DocumentTypesGetRequest = new IP_OTR_DocumentTypesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_DocumentTypesGetReply$Type extends MessageType<IP_OTR_DocumentTypesGetReply> {
    constructor() {
        super("IP_OTR_DocumentTypesGetReply", [
            { no: 1, name: "document_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_OTR_DocumentTypesGetReply_DocumentType },
            { no: 2, name: "otr_document_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IP_OTR_DocumentTypesGetReply_OtrDocumentTypes }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_DocumentTypesGetReply>): IP_OTR_DocumentTypesGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentTypes = [];
        message.otrDocumentTypes = [];
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_DocumentTypesGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_DocumentTypesGetReply): IP_OTR_DocumentTypesGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated IP_OTR_DocumentTypesGetReply.DocumentType document_types */ 1:
                    message.documentTypes.push(IP_OTR_DocumentTypesGetReply_DocumentType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated IP_OTR_DocumentTypesGetReply.OtrDocumentTypes otr_document_types */ 2:
                    message.otrDocumentTypes.push(IP_OTR_DocumentTypesGetReply_OtrDocumentTypes.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_DocumentTypesGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated IP_OTR_DocumentTypesGetReply.DocumentType document_types = 1; */
        for (let i = 0; i < message.documentTypes.length; i++)
            IP_OTR_DocumentTypesGetReply_DocumentType.internalBinaryWrite(message.documentTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated IP_OTR_DocumentTypesGetReply.OtrDocumentTypes otr_document_types = 2; */
        for (let i = 0; i < message.otrDocumentTypes.length; i++)
            IP_OTR_DocumentTypesGetReply_OtrDocumentTypes.internalBinaryWrite(message.otrDocumentTypes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_DocumentTypesGetReply
 */
export const IP_OTR_DocumentTypesGetReply = new IP_OTR_DocumentTypesGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_DocumentTypesGetReply_DocumentType$Type extends MessageType<IP_OTR_DocumentTypesGetReply_DocumentType> {
    constructor() {
        super("IP_OTR_DocumentTypesGetReply.DocumentType", [
            { no: 1, name: "system_document_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otr_document_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "otr_document_type_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_DocumentTypesGetReply_DocumentType>): IP_OTR_DocumentTypesGetReply_DocumentType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.systemDocumentType = "";
        message.otrDocumentTypeId = "";
        message.otrDocumentTypeName = "";
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_DocumentTypesGetReply_DocumentType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_DocumentTypesGetReply_DocumentType): IP_OTR_DocumentTypesGetReply_DocumentType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string system_document_type */ 1:
                    message.systemDocumentType = reader.string();
                    break;
                case /* string otr_document_type_id */ 2:
                    message.otrDocumentTypeId = reader.string();
                    break;
                case /* string otr_document_type_name */ 3:
                    message.otrDocumentTypeName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_DocumentTypesGetReply_DocumentType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string system_document_type = 1; */
        if (message.systemDocumentType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.systemDocumentType);
        /* string otr_document_type_id = 2; */
        if (message.otrDocumentTypeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otrDocumentTypeId);
        /* string otr_document_type_name = 3; */
        if (message.otrDocumentTypeName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.otrDocumentTypeName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_DocumentTypesGetReply.DocumentType
 */
export const IP_OTR_DocumentTypesGetReply_DocumentType = new IP_OTR_DocumentTypesGetReply_DocumentType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_DocumentTypesGetReply_OtrDocumentTypes$Type extends MessageType<IP_OTR_DocumentTypesGetReply_OtrDocumentTypes> {
    constructor() {
        super("IP_OTR_DocumentTypesGetReply.OtrDocumentTypes", [
            { no: 1, name: "otr_document_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otr_document_type_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_DocumentTypesGetReply_OtrDocumentTypes>): IP_OTR_DocumentTypesGetReply_OtrDocumentTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.otrDocumentTypeId = "";
        message.otrDocumentTypeName = "";
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_DocumentTypesGetReply_OtrDocumentTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_DocumentTypesGetReply_OtrDocumentTypes): IP_OTR_DocumentTypesGetReply_OtrDocumentTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string otr_document_type_id */ 1:
                    message.otrDocumentTypeId = reader.string();
                    break;
                case /* string otr_document_type_name */ 2:
                    message.otrDocumentTypeName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_DocumentTypesGetReply_OtrDocumentTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string otr_document_type_id = 1; */
        if (message.otrDocumentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.otrDocumentTypeId);
        /* string otr_document_type_name = 2; */
        if (message.otrDocumentTypeName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otrDocumentTypeName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_DocumentTypesGetReply.OtrDocumentTypes
 */
export const IP_OTR_DocumentTypesGetReply_OtrDocumentTypes = new IP_OTR_DocumentTypesGetReply_OtrDocumentTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_DocumentTypes_DocumentTypeUpdateRequest$Type extends MessageType<IP_OTR_DocumentTypes_DocumentTypeUpdateRequest> {
    constructor() {
        super("IP_OTR_DocumentTypes_DocumentTypeUpdateRequest", [
            { no: 1, name: "otr_document_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "system_document_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IP_OTR_DocumentTypes_DocumentTypeUpdateRequest>): IP_OTR_DocumentTypes_DocumentTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.otrDocumentTypeId = "";
        message.systemDocumentTypeId = "";
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_DocumentTypes_DocumentTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_DocumentTypes_DocumentTypeUpdateRequest): IP_OTR_DocumentTypes_DocumentTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string otr_document_type_id */ 1:
                    message.otrDocumentTypeId = reader.string();
                    break;
                case /* string system_document_type_id */ 2:
                    message.systemDocumentTypeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IP_OTR_DocumentTypes_DocumentTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string otr_document_type_id = 1; */
        if (message.otrDocumentTypeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.otrDocumentTypeId);
        /* string system_document_type_id = 2; */
        if (message.systemDocumentTypeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.systemDocumentTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_DocumentTypes_DocumentTypeUpdateRequest
 */
export const IP_OTR_DocumentTypes_DocumentTypeUpdateRequest = new IP_OTR_DocumentTypes_DocumentTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IP_OTR_DocumentTypes_DocumentTypeUpdateReply$Type extends MessageType<IP_OTR_DocumentTypes_DocumentTypeUpdateReply> {
    constructor() {
        super("IP_OTR_DocumentTypes_DocumentTypeUpdateReply", []);
    }
    create(value?: PartialMessage<IP_OTR_DocumentTypes_DocumentTypeUpdateReply>): IP_OTR_DocumentTypes_DocumentTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IP_OTR_DocumentTypes_DocumentTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IP_OTR_DocumentTypes_DocumentTypeUpdateReply): IP_OTR_DocumentTypes_DocumentTypeUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IP_OTR_DocumentTypes_DocumentTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IP_OTR_DocumentTypes_DocumentTypeUpdateReply
 */
export const IP_OTR_DocumentTypes_DocumentTypeUpdateReply = new IP_OTR_DocumentTypes_DocumentTypeUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service IntegrationProviderOTR
 */
export const IntegrationProviderOTR = new ServiceType("IntegrationProviderOTR", [
    { name: "IP_OTR_Invoices_Preview", options: {}, I: IP_OTR_Invoices_PreviewRequest, O: IP_OTR_Invoices_PreviewReply },
    { name: "IP_OTR_Invoices_Create", serverStreaming: true, options: {}, I: IP_OTR_Invoices_CreateRequest, O: IP_OTR_Invoices_CreateReply },
    { name: "IP_OTR_DocumentTypesGet", options: {}, I: IP_OTR_DocumentTypesGetRequest, O: IP_OTR_DocumentTypesGetReply },
    { name: "IP_OTR_DocumentTypes_DocumentTypeUpdate", options: {}, I: IP_OTR_DocumentTypes_DocumentTypeUpdateRequest, O: IP_OTR_DocumentTypes_DocumentTypeUpdateReply }
]);
