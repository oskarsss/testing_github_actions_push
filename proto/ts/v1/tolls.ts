// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/tolls.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FilterModel_Filter } from "./models/model_filter_type";
import { TollModel_SettlementStatus } from "./models/model_toll";
import { TruckModel_Status } from "./models/model_truck";
import { TruckModel_Type } from "./models/model_truck";
/**
 * TollRetrieve
 *
 * @generated from protobuf message TollRetrieveRequest
 */
export interface TollRetrieveRequest {
    /**
     * @generated from protobuf field: string toll_id = 1;
     */
    tollId: string;
}
/**
 * TollRetrieve
 *
 * @generated from protobuf message TollRetrieveReply
 */
export interface TollRetrieveReply {
    /**
     * @generated from protobuf field: string toll_id = 1;
     */
    tollId: string;
    /**
     * @generated from protobuf field: string transponder_number = 2;
     */
    transponderNumber: string;
    /**
     * @generated from protobuf field: string plate_number = 3;
     */
    plateNumber: string;
    /**
     * @generated from protobuf field: string agency = 4;
     */
    agency: string;
    /**
     * @generated from protobuf field: string entry_plaza = 5;
     */
    entryPlaza: string;
    /**
     * @generated from protobuf field: string exit_plaza = 6;
     */
    exitPlaza: string;
    /**
     * @generated from protobuf field: string exit_datetime = 7;
     */
    exitDatetime: string;
    /**
     * @generated from protobuf field: string source = 8;
     */
    source: string;
    /**
     * @generated from protobuf field: string posting_date = 9;
     */
    postingDate: string;
    /**
     * @generated from protobuf field: double amount = 10;
     */
    amount: number;
    /**
     * @generated from protobuf field: string amount_formatted = 11;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string truck_id = 12;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string settlement_id = 13;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string trailer_id = 14;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string reference_id = 15;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string entry_datetime = 16;
     */
    entryDatetime: string;
    /**
     * @generated from protobuf field: double lat = 17;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 18;
     */
    lon: number;
    /**
     * @generated from protobuf field: string plate_state = 19;
     */
    plateState: string;
}
/**
 * @generated from protobuf message TollGetRequest
 */
export interface TollGetRequest {
    /**
     * @generated from protobuf field: int64 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int64 per_page = 2;
     */
    perPage: number;
    /**
     * @generated from protobuf field: TollGetRequest.SortBy sort_by = 3;
     */
    sortBy: TollGetRequest_SortBy;
    /**
     * @generated from protobuf field: optional string search = 4;
     */
    search?: string;
    /**
     * @generated from protobuf field: repeated TruckModel.Type truck_types = 5;
     */
    truckTypes: TruckModel_Type[];
    /**
     * @generated from protobuf field: repeated TruckModel.Status truck_statuses = 6;
     */
    truckStatuses: TruckModel_Status[];
    /**
     * @generated from protobuf field: repeated string truck_ids = 7;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 8;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: bool assigned = 9;
     */
    assigned: boolean;
    /**
     * @generated from protobuf field: optional string start_date = 10;
     */
    startDate?: string;
    /**
     * @generated from protobuf field: optional string end_date = 11;
     */
    endDate?: string;
    /**
     * @generated from protobuf field: optional TollModel.SettlementStatus settlement_status = 12;
     */
    settlementStatus?: TollModel_SettlementStatus;
}
/**
 * @generated from protobuf enum TollGetRequest.SortBy
 */
export enum TollGetRequest_SortBy {
    /**
     * @generated from protobuf enum value: SORT_BY_UKNOWN = 0;
     */
    UKNOWN = 0,
    /**
     * @generated from protobuf enum value: SORT_BY_AGENCY_ASC = 1;
     */
    AGENCY_ASC = 1,
    /**
     * @generated from protobuf enum value: SORT_BY_AGENCY_DESC = 2;
     */
    AGENCY_DESC = 2,
    /**
     * @generated from protobuf enum value: SORT_BY_AMOUNT_ASC = 3;
     */
    AMOUNT_ASC = 3,
    /**
     * @generated from protobuf enum value: SORT_BY_AMOUNT_DESC = 4;
     */
    AMOUNT_DESC = 4,
    /**
     * @generated from protobuf enum value: SORT_BY_TRANSPONDER_NUMBER_ASC = 5;
     */
    TRANSPONDER_NUMBER_ASC = 5,
    /**
     * @generated from protobuf enum value: SORT_BY_TRANSPONDER_NUMBER_DESC = 6;
     */
    TRANSPONDER_NUMBER_DESC = 6,
    /**
     * @generated from protobuf enum value: SORT_BY_ENTRY_DATETIME_ASC = 7;
     */
    ENTRY_DATETIME_ASC = 7,
    /**
     * @generated from protobuf enum value: SORT_BY_ENTRY_DATETIME_DESC = 8;
     */
    ENTRY_DATETIME_DESC = 8,
    /**
     * @generated from protobuf enum value: SORT_BY_ENTRY_PLAZA_ASC = 9;
     */
    ENTRY_PLAZA_ASC = 9,
    /**
     * @generated from protobuf enum value: SORT_BY_ENTRY_PLAZA_DESC = 10;
     */
    ENTRY_PLAZA_DESC = 10,
    /**
     * @generated from protobuf enum value: SORT_BY_EXIT_DATETIME_ASC = 11;
     */
    EXIT_DATETIME_ASC = 11,
    /**
     * @generated from protobuf enum value: SORT_BY_EXIT_DATETIME_DESC = 12;
     */
    EXIT_DATETIME_DESC = 12,
    /**
     * @generated from protobuf enum value: SORT_BY_EXIT_PLAZA_ASC = 13;
     */
    EXIT_PLAZA_ASC = 13,
    /**
     * @generated from protobuf enum value: SORT_BY_EXIT_PLAZA_DESC = 14;
     */
    EXIT_PLAZA_DESC = 14,
    /**
     * @generated from protobuf enum value: SORT_BY_PLATE_NUMBER_ASC = 15;
     */
    PLATE_NUMBER_ASC = 15,
    /**
     * @generated from protobuf enum value: SORT_BY_PLATE_NUMBER_DESC = 16;
     */
    PLATE_NUMBER_DESC = 16,
    /**
     * @generated from protobuf enum value: SORT_BY_POSTING_DATE_ASC = 17;
     */
    POSTING_DATE_ASC = 17,
    /**
     * @generated from protobuf enum value: SORT_BY_POSTING_DATE_DESC = 18;
     */
    POSTING_DATE_DESC = 18,
    /**
     * @generated from protobuf enum value: SORT_BY_SOURCE_ASC = 19;
     */
    SOURCE_ASC = 19,
    /**
     * @generated from protobuf enum value: SORT_BY_SOURCE_DESC = 20;
     */
    SOURCE_DESC = 20
}
/**
 * @generated from protobuf message TollGetReply
 */
export interface TollGetReply {
    /**
     * @generated from protobuf field: repeated TollGetReply.Toll tolls = 1;
     */
    tolls: TollGetReply_Toll[];
}
/**
 * @generated from protobuf message TollGetReply.Toll
 */
export interface TollGetReply_Toll {
    /**
     * @generated from protobuf field: string toll_transaction_id = 1;
     */
    tollTransactionId: string;
    /**
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string transponder_number = 3;
     */
    transponderNumber: string;
    /**
     * @generated from protobuf field: string plate_number = 4;
     */
    plateNumber: string;
    /**
     * @generated from protobuf field: string agency = 5;
     */
    agency: string;
    /**
     * @generated from protobuf field: string entry_plaza = 6;
     */
    entryPlaza: string;
    /**
     * @generated from protobuf field: string entry_datetime = 7;
     */
    entryDatetime: string;
    /**
     * @generated from protobuf field: string exit_plaza = 8;
     */
    exitPlaza: string;
    /**
     * @generated from protobuf field: string exit_datetime = 9;
     */
    exitDatetime: string;
    /**
     * @generated from protobuf field: string source = 10;
     */
    source: string;
    /**
     * @generated from protobuf field: string posting_date = 11;
     */
    postingDate: string;
    /**
     * @generated from protobuf field: string amount_formatted = 12;
     */
    amountFormatted: string;
    /**
     * @generated from protobuf field: string truck_id = 13;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string trailer_id = 14;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string driver_id = 15;
     */
    driverId: string;
    /**
     * @generated from protobuf field: string settlement_id = 16;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: TollModel.SettlementStatus settlement_status = 17;
     */
    settlementStatus: TollModel_SettlementStatus;
}
/**
 * @generated from protobuf message TollStatsGetRequest
 */
export interface TollStatsGetRequest {
    /**
     * @generated from protobuf field: optional string start_date = 1;
     */
    startDate?: string;
    /**
     * @generated from protobuf field: optional string end_date = 2;
     */
    endDate?: string;
    /**
     * @generated from protobuf field: repeated string truck_ids = 3;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 4;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: bool assigned = 5;
     */
    assigned: boolean;
    /**
     * @generated from protobuf field: optional TollModel.SettlementStatus settlement_status = 6;
     */
    settlementStatus?: TollModel_SettlementStatus;
    /**
     * @generated from protobuf field: repeated TruckModel.Type truck_types = 7;
     */
    truckTypes: TruckModel_Type[];
    /**
     * @generated from protobuf field: repeated TruckModel.Status truck_statuses = 8;
     */
    truckStatuses: TruckModel_Status[];
}
/**
 * @generated from protobuf message TollStatsGetReply
 */
export interface TollStatsGetReply {
    /**
     * @generated from protobuf field: int64 total_tolls_count = 1;
     */
    totalTollsCount: number;
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
/**
 * @generated from protobuf message CreateTollRequest
 */
export interface CreateTollRequest {
    /**
     * @generated from protobuf field: optional string truckID = 1;
     */
    truckID?: string; // one of trailerID or truckID or none of them
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: int64 datetime = 3;
     */
    datetime: number;
    /**
     * @generated from protobuf field: string source = 4;
     */
    source: string;
    /**
     * @generated from protobuf field: string toll_agency = 5;
     */
    tollAgency: string;
    /**
     * @generated from protobuf field: optional string trailerID = 6;
     */
    trailerID?: string; // one of trailerID or truckID or none of them
    /**
     * @generated from protobuf field: string reference_id = 7;
     */
    referenceId: string;
}
/**
 * @generated from protobuf message CreateTollReply
 */
export interface CreateTollReply {
}
/**
 * @generated from protobuf message UpdateTollRequest
 */
export interface UpdateTollRequest {
    /**
     * @generated from protobuf field: string toll_id = 1;
     */
    tollId: string;
    /**
     * @generated from protobuf field: string entry_plaza = 2;
     */
    entryPlaza: string;
    /**
     * @generated from protobuf field: string plate_number = 3;
     */
    plateNumber: string;
    /**
     * @generated from protobuf field: string source = 4;
     */
    source: string;
    /**
     * @generated from protobuf field: string truck_id = 5;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string settlement_id = 6;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string transponder = 7;
     */
    transponder: string;
    /**
     * @generated from protobuf field: string posting_date = 8;
     */
    postingDate: string;
    /**
     * @generated from protobuf field: string exit_plaza = 9;
     */
    exitPlaza: string;
    /**
     * @generated from protobuf field: int64 exit_datetime = 10;
     */
    exitDatetime: number;
    /**
     * @generated from protobuf field: int64 entry_datetime = 11;
     */
    entryDatetime: number;
    /**
     * @generated from protobuf field: double amount = 12;
     */
    amount: number;
    /**
     * @generated from protobuf field: string agency = 13;
     */
    agency: string;
    /**
     * @generated from protobuf field: string trailer_id = 14;
     */
    trailerId: string;
    /**
     * @generated from protobuf field: string reference_id = 15;
     */
    referenceId: string;
}
/**
 * @generated from protobuf message UpdateTollReply
 */
export interface UpdateTollReply {
}
/**
 * @generated from protobuf message DeleteTollRequest
 */
export interface DeleteTollRequest {
    /**
     * @generated from protobuf field: repeated string toll_ids = 1;
     */
    tollIds: string[];
}
/**
 * @generated from protobuf message DeleteTollReply
 */
export interface DeleteTollReply {
}
/**
 * @generated from protobuf message AssignEquipmentRequest
 */
export interface AssignEquipmentRequest {
    /**
     * @generated from protobuf oneof: equipment
     */
    equipment: {
        oneofKind: "truckID";
        /**
         * @generated from protobuf field: string truckID = 1;
         */
        truckID: string;
    } | {
        oneofKind: "trailerID";
        /**
         * @generated from protobuf field: string trailerID = 2;
         */
        trailerID: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: string tollID = 3;
     */
    tollID: string;
}
/**
 * @generated from protobuf message AssignEquipmentReply
 */
export interface AssignEquipmentReply {
}
/**
 * @generated from protobuf message UnassignEquipmentRequest
 */
export interface UnassignEquipmentRequest {
    /**
     * @generated from protobuf field: string tollID = 2;
     */
    tollID: string;
}
/**
 * @generated from protobuf message UnassignEquipmentReply
 */
export interface UnassignEquipmentReply {
}
/**
 * @generated from protobuf message TollBatchAssignRequest
 */
export interface TollBatchAssignRequest {
    /**
     * @generated from protobuf field: repeated string toll_ids = 1;
     */
    tollIds: string[];
    /**
     * @generated from protobuf oneof: equipment
     */
    equipment: {
        oneofKind: "truckID";
        /**
         * @generated from protobuf field: string truckID = 2;
         */
        truckID: string;
    } | {
        oneofKind: "trailerID";
        /**
         * @generated from protobuf field: string trailerID = 3;
         */
        trailerID: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message TollBatchAssignReply
 */
export interface TollBatchAssignReply {
}
/**
 * @generated from protobuf message TollBatchUnassignRequest
 */
export interface TollBatchUnassignRequest {
    /**
     * @generated from protobuf field: repeated string toll_ids = 1;
     */
    tollIds: string[];
}
/**
 * @generated from protobuf message TollBatchUnassignReply
 */
export interface TollBatchUnassignReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class TollRetrieveRequest$Type extends MessageType<TollRetrieveRequest> {
    constructor() {
        super("TollRetrieveRequest", [
            { no: 1, name: "toll_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TollRetrieveRequest>): TollRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollId = "";
        if (value !== undefined)
            reflectionMergePartial<TollRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollRetrieveRequest): TollRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toll_id */ 1:
                    message.tollId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toll_id = 1; */
        if (message.tollId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tollId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollRetrieveRequest
 */
export const TollRetrieveRequest = new TollRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollRetrieveReply$Type extends MessageType<TollRetrieveReply> {
    constructor() {
        super("TollRetrieveReply", [
            { no: 1, name: "toll_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transponder_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "plate_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "agency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "entry_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "exit_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "exit_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "posting_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "entry_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "plate_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TollRetrieveReply>): TollRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollId = "";
        message.transponderNumber = "";
        message.plateNumber = "";
        message.agency = "";
        message.entryPlaza = "";
        message.exitPlaza = "";
        message.exitDatetime = "";
        message.source = "";
        message.postingDate = "";
        message.amount = 0;
        message.amountFormatted = "";
        message.truckId = "";
        message.settlementId = "";
        message.trailerId = "";
        message.referenceId = "";
        message.entryDatetime = "";
        message.lat = 0;
        message.lon = 0;
        message.plateState = "";
        if (value !== undefined)
            reflectionMergePartial<TollRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollRetrieveReply): TollRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toll_id */ 1:
                    message.tollId = reader.string();
                    break;
                case /* string transponder_number */ 2:
                    message.transponderNumber = reader.string();
                    break;
                case /* string plate_number */ 3:
                    message.plateNumber = reader.string();
                    break;
                case /* string agency */ 4:
                    message.agency = reader.string();
                    break;
                case /* string entry_plaza */ 5:
                    message.entryPlaza = reader.string();
                    break;
                case /* string exit_plaza */ 6:
                    message.exitPlaza = reader.string();
                    break;
                case /* string exit_datetime */ 7:
                    message.exitDatetime = reader.string();
                    break;
                case /* string source */ 8:
                    message.source = reader.string();
                    break;
                case /* string posting_date */ 9:
                    message.postingDate = reader.string();
                    break;
                case /* double amount */ 10:
                    message.amount = reader.double();
                    break;
                case /* string amount_formatted */ 11:
                    message.amountFormatted = reader.string();
                    break;
                case /* string truck_id */ 12:
                    message.truckId = reader.string();
                    break;
                case /* string settlement_id */ 13:
                    message.settlementId = reader.string();
                    break;
                case /* string trailer_id */ 14:
                    message.trailerId = reader.string();
                    break;
                case /* string reference_id */ 15:
                    message.referenceId = reader.string();
                    break;
                case /* string entry_datetime */ 16:
                    message.entryDatetime = reader.string();
                    break;
                case /* double lat */ 17:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 18:
                    message.lon = reader.double();
                    break;
                case /* string plate_state */ 19:
                    message.plateState = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toll_id = 1; */
        if (message.tollId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tollId);
        /* string transponder_number = 2; */
        if (message.transponderNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transponderNumber);
        /* string plate_number = 3; */
        if (message.plateNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.plateNumber);
        /* string agency = 4; */
        if (message.agency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.agency);
        /* string entry_plaza = 5; */
        if (message.entryPlaza !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.entryPlaza);
        /* string exit_plaza = 6; */
        if (message.exitPlaza !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.exitPlaza);
        /* string exit_datetime = 7; */
        if (message.exitDatetime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.exitDatetime);
        /* string source = 8; */
        if (message.source !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.source);
        /* string posting_date = 9; */
        if (message.postingDate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.postingDate);
        /* double amount = 10; */
        if (message.amount !== 0)
            writer.tag(10, WireType.Bit64).double(message.amount);
        /* string amount_formatted = 11; */
        if (message.amountFormatted !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.amountFormatted);
        /* string truck_id = 12; */
        if (message.truckId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.truckId);
        /* string settlement_id = 13; */
        if (message.settlementId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.settlementId);
        /* string trailer_id = 14; */
        if (message.trailerId !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.trailerId);
        /* string reference_id = 15; */
        if (message.referenceId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.referenceId);
        /* string entry_datetime = 16; */
        if (message.entryDatetime !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.entryDatetime);
        /* double lat = 17; */
        if (message.lat !== 0)
            writer.tag(17, WireType.Bit64).double(message.lat);
        /* double lon = 18; */
        if (message.lon !== 0)
            writer.tag(18, WireType.Bit64).double(message.lon);
        /* string plate_state = 19; */
        if (message.plateState !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.plateState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollRetrieveReply
 */
export const TollRetrieveReply = new TollRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollGetRequest$Type extends MessageType<TollGetRequest> {
    constructor() {
        super("TollGetRequest", [
            { no: 1, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "per_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "sort_by", kind: "enum", T: () => ["TollGetRequest.SortBy", TollGetRequest_SortBy, "SORT_BY_"] },
            { no: 4, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "truck_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Type", TruckModel_Type, "TYPE_"] },
            { no: 6, name: "truck_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Status", TruckModel_Status] },
            { no: 7, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "assigned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "settlement_status", kind: "enum", opt: true, T: () => ["TollModel.SettlementStatus", TollModel_SettlementStatus, "SETTLEMENT_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<TollGetRequest>): TollGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.perPage = 0;
        message.sortBy = 0;
        message.truckTypes = [];
        message.truckStatuses = [];
        message.truckIds = [];
        message.trailerIds = [];
        message.assigned = false;
        if (value !== undefined)
            reflectionMergePartial<TollGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollGetRequest): TollGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page */ 1:
                    message.page = reader.int64().toNumber();
                    break;
                case /* int64 per_page */ 2:
                    message.perPage = reader.int64().toNumber();
                    break;
                case /* TollGetRequest.SortBy sort_by */ 3:
                    message.sortBy = reader.int32();
                    break;
                case /* optional string search */ 4:
                    message.search = reader.string();
                    break;
                case /* repeated TruckModel.Type truck_types */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckTypes.push(reader.int32());
                    else
                        message.truckTypes.push(reader.int32());
                    break;
                case /* repeated TruckModel.Status truck_statuses */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckStatuses.push(reader.int32());
                    else
                        message.truckStatuses.push(reader.int32());
                    break;
                case /* repeated string truck_ids */ 7:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 8:
                    message.trailerIds.push(reader.string());
                    break;
                case /* bool assigned */ 9:
                    message.assigned = reader.bool();
                    break;
                case /* optional string start_date */ 10:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 11:
                    message.endDate = reader.string();
                    break;
                case /* optional TollModel.SettlementStatus settlement_status */ 12:
                    message.settlementStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int64(message.page);
        /* int64 per_page = 2; */
        if (message.perPage !== 0)
            writer.tag(2, WireType.Varint).int64(message.perPage);
        /* TollGetRequest.SortBy sort_by = 3; */
        if (message.sortBy !== 0)
            writer.tag(3, WireType.Varint).int32(message.sortBy);
        /* optional string search = 4; */
        if (message.search !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.search);
        /* repeated TruckModel.Type truck_types = 5; */
        if (message.truckTypes.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckTypes.length; i++)
                writer.int32(message.truckTypes[i]);
            writer.join();
        }
        /* repeated TruckModel.Status truck_statuses = 6; */
        if (message.truckStatuses.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckStatuses.length; i++)
                writer.int32(message.truckStatuses[i]);
            writer.join();
        }
        /* repeated string truck_ids = 7; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string trailer_ids = 8; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* bool assigned = 9; */
        if (message.assigned !== false)
            writer.tag(9, WireType.Varint).bool(message.assigned);
        /* optional string start_date = 10; */
        if (message.startDate !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 11; */
        if (message.endDate !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.endDate);
        /* optional TollModel.SettlementStatus settlement_status = 12; */
        if (message.settlementStatus !== undefined)
            writer.tag(12, WireType.Varint).int32(message.settlementStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollGetRequest
 */
export const TollGetRequest = new TollGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollGetReply$Type extends MessageType<TollGetReply> {
    constructor() {
        super("TollGetReply", [
            { no: 1, name: "tolls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TollGetReply_Toll }
        ]);
    }
    create(value?: PartialMessage<TollGetReply>): TollGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tolls = [];
        if (value !== undefined)
            reflectionMergePartial<TollGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollGetReply): TollGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TollGetReply.Toll tolls */ 1:
                    message.tolls.push(TollGetReply_Toll.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TollGetReply.Toll tolls = 1; */
        for (let i = 0; i < message.tolls.length; i++)
            TollGetReply_Toll.internalBinaryWrite(message.tolls[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollGetReply
 */
export const TollGetReply = new TollGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollGetReply_Toll$Type extends MessageType<TollGetReply_Toll> {
    constructor() {
        super("TollGetReply.Toll", [
            { no: 1, name: "toll_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transponder_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "plate_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "agency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "entry_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "entry_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "exit_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "exit_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "posting_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "driver_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "settlement_status", kind: "enum", T: () => ["TollModel.SettlementStatus", TollModel_SettlementStatus, "SETTLEMENT_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<TollGetReply_Toll>): TollGetReply_Toll {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollTransactionId = "";
        message.referenceId = "";
        message.transponderNumber = "";
        message.plateNumber = "";
        message.agency = "";
        message.entryPlaza = "";
        message.entryDatetime = "";
        message.exitPlaza = "";
        message.exitDatetime = "";
        message.source = "";
        message.postingDate = "";
        message.amountFormatted = "";
        message.truckId = "";
        message.trailerId = "";
        message.driverId = "";
        message.settlementId = "";
        message.settlementStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<TollGetReply_Toll>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollGetReply_Toll): TollGetReply_Toll {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toll_transaction_id */ 1:
                    message.tollTransactionId = reader.string();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* string transponder_number */ 3:
                    message.transponderNumber = reader.string();
                    break;
                case /* string plate_number */ 4:
                    message.plateNumber = reader.string();
                    break;
                case /* string agency */ 5:
                    message.agency = reader.string();
                    break;
                case /* string entry_plaza */ 6:
                    message.entryPlaza = reader.string();
                    break;
                case /* string entry_datetime */ 7:
                    message.entryDatetime = reader.string();
                    break;
                case /* string exit_plaza */ 8:
                    message.exitPlaza = reader.string();
                    break;
                case /* string exit_datetime */ 9:
                    message.exitDatetime = reader.string();
                    break;
                case /* string source */ 10:
                    message.source = reader.string();
                    break;
                case /* string posting_date */ 11:
                    message.postingDate = reader.string();
                    break;
                case /* string amount_formatted */ 12:
                    message.amountFormatted = reader.string();
                    break;
                case /* string truck_id */ 13:
                    message.truckId = reader.string();
                    break;
                case /* string trailer_id */ 14:
                    message.trailerId = reader.string();
                    break;
                case /* string driver_id */ 15:
                    message.driverId = reader.string();
                    break;
                case /* string settlement_id */ 16:
                    message.settlementId = reader.string();
                    break;
                case /* TollModel.SettlementStatus settlement_status */ 17:
                    message.settlementStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollGetReply_Toll, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toll_transaction_id = 1; */
        if (message.tollTransactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tollTransactionId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* string transponder_number = 3; */
        if (message.transponderNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transponderNumber);
        /* string plate_number = 4; */
        if (message.plateNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.plateNumber);
        /* string agency = 5; */
        if (message.agency !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.agency);
        /* string entry_plaza = 6; */
        if (message.entryPlaza !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.entryPlaza);
        /* string entry_datetime = 7; */
        if (message.entryDatetime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.entryDatetime);
        /* string exit_plaza = 8; */
        if (message.exitPlaza !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.exitPlaza);
        /* string exit_datetime = 9; */
        if (message.exitDatetime !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.exitDatetime);
        /* string source = 10; */
        if (message.source !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.source);
        /* string posting_date = 11; */
        if (message.postingDate !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.postingDate);
        /* string amount_formatted = 12; */
        if (message.amountFormatted !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.amountFormatted);
        /* string truck_id = 13; */
        if (message.truckId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.truckId);
        /* string trailer_id = 14; */
        if (message.trailerId !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.trailerId);
        /* string driver_id = 15; */
        if (message.driverId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.driverId);
        /* string settlement_id = 16; */
        if (message.settlementId !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.settlementId);
        /* TollModel.SettlementStatus settlement_status = 17; */
        if (message.settlementStatus !== 0)
            writer.tag(17, WireType.Varint).int32(message.settlementStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollGetReply.Toll
 */
export const TollGetReply_Toll = new TollGetReply_Toll$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollStatsGetRequest$Type extends MessageType<TollStatsGetRequest> {
    constructor() {
        super("TollStatsGetRequest", [
            { no: 1, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "assigned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "settlement_status", kind: "enum", opt: true, T: () => ["TollModel.SettlementStatus", TollModel_SettlementStatus, "SETTLEMENT_STATUS_"] },
            { no: 7, name: "truck_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Type", TruckModel_Type, "TYPE_"] },
            { no: 8, name: "truck_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TruckModel.Status", TruckModel_Status] }
        ]);
    }
    create(value?: PartialMessage<TollStatsGetRequest>): TollStatsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckIds = [];
        message.trailerIds = [];
        message.assigned = false;
        message.truckTypes = [];
        message.truckStatuses = [];
        if (value !== undefined)
            reflectionMergePartial<TollStatsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollStatsGetRequest): TollStatsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string start_date */ 1:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 2:
                    message.endDate = reader.string();
                    break;
                case /* repeated string truck_ids */ 3:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 4:
                    message.trailerIds.push(reader.string());
                    break;
                case /* bool assigned */ 5:
                    message.assigned = reader.bool();
                    break;
                case /* optional TollModel.SettlementStatus settlement_status */ 6:
                    message.settlementStatus = reader.int32();
                    break;
                case /* repeated TruckModel.Type truck_types */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckTypes.push(reader.int32());
                    else
                        message.truckTypes.push(reader.int32());
                    break;
                case /* repeated TruckModel.Status truck_statuses */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.truckStatuses.push(reader.int32());
                    else
                        message.truckStatuses.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollStatsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string start_date = 1; */
        if (message.startDate !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 2; */
        if (message.endDate !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.endDate);
        /* repeated string truck_ids = 3; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string trailer_ids = 4; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* bool assigned = 5; */
        if (message.assigned !== false)
            writer.tag(5, WireType.Varint).bool(message.assigned);
        /* optional TollModel.SettlementStatus settlement_status = 6; */
        if (message.settlementStatus !== undefined)
            writer.tag(6, WireType.Varint).int32(message.settlementStatus);
        /* repeated TruckModel.Type truck_types = 7; */
        if (message.truckTypes.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckTypes.length; i++)
                writer.int32(message.truckTypes[i]);
            writer.join();
        }
        /* repeated TruckModel.Status truck_statuses = 8; */
        if (message.truckStatuses.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.truckStatuses.length; i++)
                writer.int32(message.truckStatuses[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollStatsGetRequest
 */
export const TollStatsGetRequest = new TollStatsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollStatsGetReply$Type extends MessageType<TollStatsGetReply> {
    constructor() {
        super("TollStatsGetReply", [
            { no: 1, name: "total_tolls_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<TollStatsGetReply>): TollStatsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalTollsCount = 0;
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<TollStatsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollStatsGetReply): TollStatsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_tolls_count */ 1:
                    message.totalTollsCount = reader.int64().toNumber();
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollStatsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_tolls_count = 1; */
        if (message.totalTollsCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalTollsCount);
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollStatsGetReply
 */
export const TollStatsGetReply = new TollStatsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTollRequest$Type extends MessageType<CreateTollRequest> {
    constructor() {
        super("CreateTollRequest", [
            { no: 1, name: "truckID", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "datetime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "toll_agency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trailerID", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTollRequest>): CreateTollRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0;
        message.datetime = 0;
        message.source = "";
        message.tollAgency = "";
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTollRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTollRequest): CreateTollRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string truckID */ 1:
                    message.truckID = reader.string();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                case /* int64 datetime */ 3:
                    message.datetime = reader.int64().toNumber();
                    break;
                case /* string source */ 4:
                    message.source = reader.string();
                    break;
                case /* string toll_agency */ 5:
                    message.tollAgency = reader.string();
                    break;
                case /* optional string trailerID */ 6:
                    message.trailerID = reader.string();
                    break;
                case /* string reference_id */ 7:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTollRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string truckID = 1; */
        if (message.truckID !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.truckID);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        /* int64 datetime = 3; */
        if (message.datetime !== 0)
            writer.tag(3, WireType.Varint).int64(message.datetime);
        /* string source = 4; */
        if (message.source !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.source);
        /* string toll_agency = 5; */
        if (message.tollAgency !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tollAgency);
        /* optional string trailerID = 6; */
        if (message.trailerID !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.trailerID);
        /* string reference_id = 7; */
        if (message.referenceId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTollRequest
 */
export const CreateTollRequest = new CreateTollRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTollReply$Type extends MessageType<CreateTollReply> {
    constructor() {
        super("CreateTollReply", []);
    }
    create(value?: PartialMessage<CreateTollReply>): CreateTollReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateTollReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTollReply): CreateTollReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateTollReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTollReply
 */
export const CreateTollReply = new CreateTollReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTollRequest$Type extends MessageType<UpdateTollRequest> {
    constructor() {
        super("UpdateTollRequest", [
            { no: 1, name: "toll_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entry_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "plate_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "transponder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "posting_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "exit_plaza", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "exit_datetime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "entry_datetime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "agency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "trailer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTollRequest>): UpdateTollRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollId = "";
        message.entryPlaza = "";
        message.plateNumber = "";
        message.source = "";
        message.truckId = "";
        message.settlementId = "";
        message.transponder = "";
        message.postingDate = "";
        message.exitPlaza = "";
        message.exitDatetime = 0;
        message.entryDatetime = 0;
        message.amount = 0;
        message.agency = "";
        message.trailerId = "";
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateTollRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTollRequest): UpdateTollRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toll_id */ 1:
                    message.tollId = reader.string();
                    break;
                case /* string entry_plaza */ 2:
                    message.entryPlaza = reader.string();
                    break;
                case /* string plate_number */ 3:
                    message.plateNumber = reader.string();
                    break;
                case /* string source */ 4:
                    message.source = reader.string();
                    break;
                case /* string truck_id */ 5:
                    message.truckId = reader.string();
                    break;
                case /* string settlement_id */ 6:
                    message.settlementId = reader.string();
                    break;
                case /* string transponder */ 7:
                    message.transponder = reader.string();
                    break;
                case /* string posting_date */ 8:
                    message.postingDate = reader.string();
                    break;
                case /* string exit_plaza */ 9:
                    message.exitPlaza = reader.string();
                    break;
                case /* int64 exit_datetime */ 10:
                    message.exitDatetime = reader.int64().toNumber();
                    break;
                case /* int64 entry_datetime */ 11:
                    message.entryDatetime = reader.int64().toNumber();
                    break;
                case /* double amount */ 12:
                    message.amount = reader.double();
                    break;
                case /* string agency */ 13:
                    message.agency = reader.string();
                    break;
                case /* string trailer_id */ 14:
                    message.trailerId = reader.string();
                    break;
                case /* string reference_id */ 15:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTollRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toll_id = 1; */
        if (message.tollId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tollId);
        /* string entry_plaza = 2; */
        if (message.entryPlaza !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entryPlaza);
        /* string plate_number = 3; */
        if (message.plateNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.plateNumber);
        /* string source = 4; */
        if (message.source !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.source);
        /* string truck_id = 5; */
        if (message.truckId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.truckId);
        /* string settlement_id = 6; */
        if (message.settlementId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.settlementId);
        /* string transponder = 7; */
        if (message.transponder !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.transponder);
        /* string posting_date = 8; */
        if (message.postingDate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.postingDate);
        /* string exit_plaza = 9; */
        if (message.exitPlaza !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.exitPlaza);
        /* int64 exit_datetime = 10; */
        if (message.exitDatetime !== 0)
            writer.tag(10, WireType.Varint).int64(message.exitDatetime);
        /* int64 entry_datetime = 11; */
        if (message.entryDatetime !== 0)
            writer.tag(11, WireType.Varint).int64(message.entryDatetime);
        /* double amount = 12; */
        if (message.amount !== 0)
            writer.tag(12, WireType.Bit64).double(message.amount);
        /* string agency = 13; */
        if (message.agency !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.agency);
        /* string trailer_id = 14; */
        if (message.trailerId !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.trailerId);
        /* string reference_id = 15; */
        if (message.referenceId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTollRequest
 */
export const UpdateTollRequest = new UpdateTollRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTollReply$Type extends MessageType<UpdateTollReply> {
    constructor() {
        super("UpdateTollReply", []);
    }
    create(value?: PartialMessage<UpdateTollReply>): UpdateTollReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateTollReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTollReply): UpdateTollReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateTollReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTollReply
 */
export const UpdateTollReply = new UpdateTollReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTollRequest$Type extends MessageType<DeleteTollRequest> {
    constructor() {
        super("DeleteTollRequest", [
            { no: 1, name: "toll_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTollRequest>): DeleteTollRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollIds = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteTollRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTollRequest): DeleteTollRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string toll_ids */ 1:
                    message.tollIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTollRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string toll_ids = 1; */
        for (let i = 0; i < message.tollIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tollIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTollRequest
 */
export const DeleteTollRequest = new DeleteTollRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTollReply$Type extends MessageType<DeleteTollReply> {
    constructor() {
        super("DeleteTollReply", []);
    }
    create(value?: PartialMessage<DeleteTollReply>): DeleteTollReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteTollReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTollReply): DeleteTollReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteTollReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTollReply
 */
export const DeleteTollReply = new DeleteTollReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignEquipmentRequest$Type extends MessageType<AssignEquipmentRequest> {
    constructor() {
        super("AssignEquipmentRequest", [
            { no: 1, name: "truckID", kind: "scalar", oneof: "equipment", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trailerID", kind: "scalar", oneof: "equipment", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tollID", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssignEquipmentRequest>): AssignEquipmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.equipment = { oneofKind: undefined };
        message.tollID = "";
        if (value !== undefined)
            reflectionMergePartial<AssignEquipmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignEquipmentRequest): AssignEquipmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string truckID */ 1:
                    message.equipment = {
                        oneofKind: "truckID",
                        truckID: reader.string()
                    };
                    break;
                case /* string trailerID */ 2:
                    message.equipment = {
                        oneofKind: "trailerID",
                        trailerID: reader.string()
                    };
                    break;
                case /* string tollID */ 3:
                    message.tollID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignEquipmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string truckID = 1; */
        if (message.equipment.oneofKind === "truckID")
            writer.tag(1, WireType.LengthDelimited).string(message.equipment.truckID);
        /* string trailerID = 2; */
        if (message.equipment.oneofKind === "trailerID")
            writer.tag(2, WireType.LengthDelimited).string(message.equipment.trailerID);
        /* string tollID = 3; */
        if (message.tollID !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tollID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AssignEquipmentRequest
 */
export const AssignEquipmentRequest = new AssignEquipmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignEquipmentReply$Type extends MessageType<AssignEquipmentReply> {
    constructor() {
        super("AssignEquipmentReply", []);
    }
    create(value?: PartialMessage<AssignEquipmentReply>): AssignEquipmentReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AssignEquipmentReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignEquipmentReply): AssignEquipmentReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AssignEquipmentReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AssignEquipmentReply
 */
export const AssignEquipmentReply = new AssignEquipmentReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnassignEquipmentRequest$Type extends MessageType<UnassignEquipmentRequest> {
    constructor() {
        super("UnassignEquipmentRequest", [
            { no: 2, name: "tollID", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnassignEquipmentRequest>): UnassignEquipmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollID = "";
        if (value !== undefined)
            reflectionMergePartial<UnassignEquipmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnassignEquipmentRequest): UnassignEquipmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tollID */ 2:
                    message.tollID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnassignEquipmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tollID = 2; */
        if (message.tollID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tollID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UnassignEquipmentRequest
 */
export const UnassignEquipmentRequest = new UnassignEquipmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnassignEquipmentReply$Type extends MessageType<UnassignEquipmentReply> {
    constructor() {
        super("UnassignEquipmentReply", []);
    }
    create(value?: PartialMessage<UnassignEquipmentReply>): UnassignEquipmentReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UnassignEquipmentReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnassignEquipmentReply): UnassignEquipmentReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UnassignEquipmentReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UnassignEquipmentReply
 */
export const UnassignEquipmentReply = new UnassignEquipmentReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollBatchAssignRequest$Type extends MessageType<TollBatchAssignRequest> {
    constructor() {
        super("TollBatchAssignRequest", [
            { no: 1, name: "toll_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truckID", kind: "scalar", oneof: "equipment", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trailerID", kind: "scalar", oneof: "equipment", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TollBatchAssignRequest>): TollBatchAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollIds = [];
        message.equipment = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TollBatchAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollBatchAssignRequest): TollBatchAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string toll_ids */ 1:
                    message.tollIds.push(reader.string());
                    break;
                case /* string truckID */ 2:
                    message.equipment = {
                        oneofKind: "truckID",
                        truckID: reader.string()
                    };
                    break;
                case /* string trailerID */ 3:
                    message.equipment = {
                        oneofKind: "trailerID",
                        trailerID: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollBatchAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string toll_ids = 1; */
        for (let i = 0; i < message.tollIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tollIds[i]);
        /* string truckID = 2; */
        if (message.equipment.oneofKind === "truckID")
            writer.tag(2, WireType.LengthDelimited).string(message.equipment.truckID);
        /* string trailerID = 3; */
        if (message.equipment.oneofKind === "trailerID")
            writer.tag(3, WireType.LengthDelimited).string(message.equipment.trailerID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollBatchAssignRequest
 */
export const TollBatchAssignRequest = new TollBatchAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollBatchAssignReply$Type extends MessageType<TollBatchAssignReply> {
    constructor() {
        super("TollBatchAssignReply", []);
    }
    create(value?: PartialMessage<TollBatchAssignReply>): TollBatchAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TollBatchAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollBatchAssignReply): TollBatchAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TollBatchAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollBatchAssignReply
 */
export const TollBatchAssignReply = new TollBatchAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollBatchUnassignRequest$Type extends MessageType<TollBatchUnassignRequest> {
    constructor() {
        super("TollBatchUnassignRequest", [
            { no: 1, name: "toll_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TollBatchUnassignRequest>): TollBatchUnassignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tollIds = [];
        if (value !== undefined)
            reflectionMergePartial<TollBatchUnassignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollBatchUnassignRequest): TollBatchUnassignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string toll_ids */ 1:
                    message.tollIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TollBatchUnassignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string toll_ids = 1; */
        for (let i = 0; i < message.tollIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tollIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollBatchUnassignRequest
 */
export const TollBatchUnassignRequest = new TollBatchUnassignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TollBatchUnassignReply$Type extends MessageType<TollBatchUnassignReply> {
    constructor() {
        super("TollBatchUnassignReply", []);
    }
    create(value?: PartialMessage<TollBatchUnassignReply>): TollBatchUnassignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TollBatchUnassignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TollBatchUnassignReply): TollBatchUnassignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TollBatchUnassignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TollBatchUnassignReply
 */
export const TollBatchUnassignReply = new TollBatchUnassignReply$Type();
/**
 * @generated ServiceType for protobuf service TollsService
 */
export const TollsService = new ServiceType("TollsService", [
    { name: "TollRetrieve", options: {}, I: TollRetrieveRequest, O: TollRetrieveReply },
    { name: "TollGet", options: {}, I: TollGetRequest, O: TollGetReply },
    { name: "TollStatsGet", options: {}, I: TollStatsGetRequest, O: TollStatsGetReply },
    { name: "CreateToll", options: {}, I: CreateTollRequest, O: CreateTollReply },
    { name: "UpdateToll", options: {}, I: UpdateTollRequest, O: UpdateTollReply },
    { name: "DeleteToll", options: {}, I: DeleteTollRequest, O: DeleteTollReply },
    { name: "AssignEquipment", options: {}, I: AssignEquipmentRequest, O: AssignEquipmentReply },
    { name: "UnassignEquipment", options: {}, I: UnassignEquipmentRequest, O: UnassignEquipmentReply },
    { name: "TollBatchAssign", options: {}, I: TollBatchAssignRequest, O: TollBatchAssignReply },
    { name: "TollBatchUnassign", options: {}, I: TollBatchUnassignRequest, O: TollBatchUnassignReply }
]);
