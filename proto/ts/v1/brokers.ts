// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/brokers.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BrokerModel_User_Invite_Status } from "./models/model_broker";
import { BrokerModel_User_Status } from "./models/model_broker";
/**
 * Broker Create
 *
 * @generated from protobuf message BrokerCreateRequest
 */
export interface BrokerCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: optional int64 mc = 3;
     */
    mc?: number;
    /**
     * @generated from protobuf field: optional int64 dot = 4;
     */
    dot?: number;
    /**
     * @generated from protobuf field: optional string phone_number = 5;
     */
    phoneNumber?: string;
    /**
     * @generated from protobuf field: optional string email = 6;
     */
    email?: string;
    /**
     * @generated from protobuf field: optional string created_at = 7;
     */
    createdAt?: string;
}
/**
 * @generated from protobuf message BrokerCreateReply
 */
export interface BrokerCreateReply {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
}
/**
 * Broker Delete
 *
 * @generated from protobuf message BrokerDeleteRequest
 */
export interface BrokerDeleteRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
}
/**
 * @generated from protobuf message BrokerDeleteReply
 */
export interface BrokerDeleteReply {
}
/**
 * Broker Get
 *
 * @generated from protobuf message BrokerGetRequest
 */
export interface BrokerGetRequest {
}
/**
 * @generated from protobuf message BrokerGetReply
 */
export interface BrokerGetReply {
    /**
     * @generated from protobuf field: repeated BrokerGetReply.Broker brokers = 1;
     */
    brokers: BrokerGetReply_Broker[];
}
/**
 * @generated from protobuf message BrokerGetReply.Broker
 */
export interface BrokerGetReply_Broker {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: int64 mc = 2;
     */
    mc: number;
    /**
     * @generated from protobuf field: int64 dot = 3;
     */
    dot: number;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string name_and_mc = 5;
     */
    nameAndMc: string;
    /**
     * @generated from protobuf field: string short_name = 6;
     */
    shortName: string;
    /**
     * @generated from protobuf field: string phone_number = 7;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string email = 8;
     */
    email: string;
    /**
     * @generated from protobuf field: string billing_email = 9;
     */
    billingEmail: string;
    /**
     * @generated from protobuf field: string address = 10;
     */
    address: string;
    /**
     * @generated from protobuf field: bool active = 11;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string note = 12;
     */
    note: string;
    /**
     * @generated from protobuf field: string updated_at = 13;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 14;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: bool deleted = 15;
     */
    deleted: boolean;
}
/**
 * Broker Update
 *
 * @generated from protobuf message BrokerUpdateRequest
 */
export interface BrokerUpdateRequest {
    /**
     * @generated from protobuf field: BrokerUpdateRequest.Broker broker = 1;
     */
    broker?: BrokerUpdateRequest_Broker;
}
/**
 * @generated from protobuf message BrokerUpdateRequest.Broker
 */
export interface BrokerUpdateRequest_Broker {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: int64 mc = 2;
     */
    mc: number;
    /**
     * @generated from protobuf field: int64 dot = 3;
     */
    dot: number;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string short_name = 5;
     */
    shortName: string;
    /**
     * @generated from protobuf field: string phone_number = 6;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string email = 7;
     */
    email: string;
    /**
     * @generated from protobuf field: string billing_email = 8;
     */
    billingEmail: string;
    /**
     * @generated from protobuf field: string address = 9;
     */
    address: string;
    /**
     * @generated from protobuf field: bool active = 10;
     */
    active: boolean;
    /**
     * @generated from protobuf field: string note = 11;
     */
    note: string;
}
/**
 * @generated from protobuf message BrokerUpdateReply
 */
export interface BrokerUpdateReply {
}
/**
 * Broker Retrieve
 *
 * @generated from protobuf message BrokerRetrieveRequest
 */
export interface BrokerRetrieveRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
}
/**
 * @generated from protobuf message BrokerRetrieveReply
 */
export interface BrokerRetrieveReply {
    /**
     * @generated from protobuf field: BrokerRetrieveReply.Broker broker = 1;
     */
    broker?: BrokerRetrieveReply_Broker;
}
/**
 * @generated from protobuf message BrokerRetrieveReply.Broker
 */
export interface BrokerRetrieveReply_Broker {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string broker_id = 2;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: int64 mc = 3;
     */
    mc: number;
    /**
     * @generated from protobuf field: int64 dot = 4;
     */
    dot: number;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string short_name = 6;
     */
    shortName: string;
    /**
     * @generated from protobuf field: string phone_number = 7;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string email = 8;
     */
    email: string;
    /**
     * @generated from protobuf field: string billing_email = 9;
     */
    billingEmail: string;
    /**
     * @generated from protobuf field: string address = 10;
     */
    address: string;
    /**
     * @generated from protobuf field: bool active = 11;
     */
    active: boolean;
    /**
     * @generated from protobuf field: bool deleted = 12;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string note = 13;
     */
    note: string;
    /**
     * @generated from protobuf field: string updated_at = 14;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string created_at = 15;
     */
    createdAt: string;
}
/**
 * Get FMCSA Brokers
 *
 * @generated from protobuf message GetFMCSABrokersRequest
 */
export interface GetFMCSABrokersRequest {
    /**
     * @generated from protobuf field: string search = 1;
     */
    search: string;
}
/**
 * @generated from protobuf message GetFMCSABrokersReply
 */
export interface GetFMCSABrokersReply {
    /**
     * @generated from protobuf field: repeated GetFMCSABrokersReply.Broker brokers = 1;
     */
    brokers: GetFMCSABrokersReply_Broker[];
}
/**
 * @generated from protobuf message GetFMCSABrokersReply.Broker
 */
export interface GetFMCSABrokersReply_Broker {
    /**
     * @generated from protobuf field: int64 dot = 1;
     */
    dot: number;
    /**
     * @generated from protobuf field: int64 mc = 2;
     */
    mc: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string phone = 4;
     */
    phone: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string short_name = 6;
     */
    shortName: string;
    /**
     * @generated from protobuf field: string address = 7;
     */
    address: string;
    /**
     * @generated from protobuf field: string address_short = 8;
     */
    addressShort: string;
    /**
     * @generated from protobuf field: string note = 9;
     */
    note: string;
    /**
     * @generated from protobuf field: bool active = 10;
     */
    active: boolean;
}
/**
 * Get Broker Users
 *
 * @generated from protobuf message GetBrokerUsersRequest
 */
export interface GetBrokerUsersRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
}
/**
 * @generated from protobuf message GetBrokerUsersReply
 */
export interface GetBrokerUsersReply {
    /**
     * @generated from protobuf field: repeated GetBrokerUsersReply.User users = 1;
     */
    users: GetBrokerUsersReply_User[];
}
/**
 * @generated from protobuf message GetBrokerUsersReply.User
 */
export interface GetBrokerUsersReply_User {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string friendly_name = 2;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 7;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string selfie_url = 9;
     */
    selfieUrl: string;
    /**
     * @generated from protobuf field: string selfie_thumb_url = 10;
     */
    selfieThumbUrl: string;
    /**
     * @generated from protobuf field: string title = 11;
     */
    title: string;
    /**
     * @generated from protobuf field: string internal_note = 12;
     */
    internalNote: string;
    /**
     * @generated from protobuf field: BrokerModel.User.Status status = 13;
     */
    status: BrokerModel_User_Status;
    /**
     * @generated from protobuf field: string created_at = 14;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: optional GetBrokerUsersReply.User.Invite invite = 15;
     */
    invite?: GetBrokerUsersReply_User_Invite;
}
/**
 * @generated from protobuf message GetBrokerUsersReply.User.Invite
 */
export interface GetBrokerUsersReply_User_Invite {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: BrokerModel.User.Invite.Status status = 2;
     */
    status: BrokerModel_User_Invite_Status;
}
/**
 * Create Broker User
 *
 * @generated from protobuf message CreateBrokerUserRequest
 */
export interface CreateBrokerUserRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string friendly_name = 2;
     */
    friendlyName: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 6;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 7;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 8;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string title = 9;
     */
    title: string;
    /**
     * @generated from protobuf field: string internal_note = 10;
     */
    internalNote: string;
    /**
     * @generated from protobuf field: string password = 11;
     */
    password: string;
}
/**
 * @generated from protobuf message CreateBrokerUserReply
 */
export interface CreateBrokerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Update Broker User
 *
 * @generated from protobuf message UpdateBrokerUserRequest
 */
export interface UpdateBrokerUserRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: optional string friendly_name = 3;
     */
    friendlyName?: string;
    /**
     * @generated from protobuf field: string first_name = 4;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 5;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 6;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 7;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool password_change_required = 8;
     */
    passwordChangeRequired: boolean;
    /**
     * @generated from protobuf field: bool second_step_auth_enabled = 9;
     */
    secondStepAuthEnabled: boolean;
    /**
     * @generated from protobuf field: string title = 10;
     */
    title: string;
    /**
     * @generated from protobuf field: optional string internal_note = 11;
     */
    internalNote?: string;
    /**
     * @generated from protobuf field: BrokerModel.User.Status status = 12;
     */
    status: BrokerModel_User_Status;
    /**
     * @generated from protobuf field: optional string password = 13;
     */
    password?: string;
}
/**
 * @generated from protobuf message UpdateBrokerUserReply
 */
export interface UpdateBrokerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Delete Broker User
 *
 * @generated from protobuf message DeleteBrokerUserRequest
 */
export interface DeleteBrokerUserRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message DeleteBrokerUserReply
 */
export interface DeleteBrokerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * Invite Broker User
 *
 * @generated from protobuf message InviteBrokerUserRequest
 */
export interface InviteBrokerUserRequest {
    /**
     * @generated from protobuf field: string broker_id = 1;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
}
/**
 * @generated from protobuf message InviteBrokerUserReply
 */
export interface InviteBrokerUserReply {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BrokerCreateRequest$Type extends MessageType<BrokerCreateRequest> {
    constructor() {
        super("BrokerCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mc", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "dot", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "phone_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerCreateRequest>): BrokerCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<BrokerCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerCreateRequest): BrokerCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* optional int64 mc */ 3:
                    message.mc = reader.int64().toNumber();
                    break;
                case /* optional int64 dot */ 4:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* optional string phone_number */ 5:
                    message.phoneNumber = reader.string();
                    break;
                case /* optional string email */ 6:
                    message.email = reader.string();
                    break;
                case /* optional string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* optional int64 mc = 3; */
        if (message.mc !== undefined)
            writer.tag(3, WireType.Varint).int64(message.mc);
        /* optional int64 dot = 4; */
        if (message.dot !== undefined)
            writer.tag(4, WireType.Varint).int64(message.dot);
        /* optional string phone_number = 5; */
        if (message.phoneNumber !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.phoneNumber);
        /* optional string email = 6; */
        if (message.email !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        /* optional string created_at = 7; */
        if (message.createdAt !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerCreateRequest
 */
export const BrokerCreateRequest = new BrokerCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerCreateReply$Type extends MessageType<BrokerCreateReply> {
    constructor() {
        super("BrokerCreateReply", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerCreateReply>): BrokerCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        if (value !== undefined)
            reflectionMergePartial<BrokerCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerCreateReply): BrokerCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerCreateReply
 */
export const BrokerCreateReply = new BrokerCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerDeleteRequest$Type extends MessageType<BrokerDeleteRequest> {
    constructor() {
        super("BrokerDeleteRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerDeleteRequest>): BrokerDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        if (value !== undefined)
            reflectionMergePartial<BrokerDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerDeleteRequest): BrokerDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerDeleteRequest
 */
export const BrokerDeleteRequest = new BrokerDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerDeleteReply$Type extends MessageType<BrokerDeleteReply> {
    constructor() {
        super("BrokerDeleteReply", []);
    }
    create(value?: PartialMessage<BrokerDeleteReply>): BrokerDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BrokerDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerDeleteReply): BrokerDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BrokerDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerDeleteReply
 */
export const BrokerDeleteReply = new BrokerDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerGetRequest$Type extends MessageType<BrokerGetRequest> {
    constructor() {
        super("BrokerGetRequest", []);
    }
    create(value?: PartialMessage<BrokerGetRequest>): BrokerGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BrokerGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerGetRequest): BrokerGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BrokerGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerGetRequest
 */
export const BrokerGetRequest = new BrokerGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerGetReply$Type extends MessageType<BrokerGetReply> {
    constructor() {
        super("BrokerGetReply", [
            { no: 1, name: "brokers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BrokerGetReply_Broker }
        ]);
    }
    create(value?: PartialMessage<BrokerGetReply>): BrokerGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokers = [];
        if (value !== undefined)
            reflectionMergePartial<BrokerGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerGetReply): BrokerGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated BrokerGetReply.Broker brokers */ 1:
                    message.brokers.push(BrokerGetReply_Broker.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated BrokerGetReply.Broker brokers = 1; */
        for (let i = 0; i < message.brokers.length; i++)
            BrokerGetReply_Broker.internalBinaryWrite(message.brokers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerGetReply
 */
export const BrokerGetReply = new BrokerGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerGetReply_Broker$Type extends MessageType<BrokerGetReply_Broker> {
    constructor() {
        super("BrokerGetReply.Broker", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mc", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "dot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "name_and_mc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "short_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "billing_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerGetReply_Broker>): BrokerGetReply_Broker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.mc = 0;
        message.dot = 0;
        message.name = "";
        message.nameAndMc = "";
        message.shortName = "";
        message.phoneNumber = "";
        message.email = "";
        message.billingEmail = "";
        message.address = "";
        message.active = false;
        message.note = "";
        message.updatedAt = "";
        message.createdAt = "";
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<BrokerGetReply_Broker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerGetReply_Broker): BrokerGetReply_Broker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* int64 mc */ 2:
                    message.mc = reader.int64().toNumber();
                    break;
                case /* int64 dot */ 3:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string name_and_mc */ 5:
                    message.nameAndMc = reader.string();
                    break;
                case /* string short_name */ 6:
                    message.shortName = reader.string();
                    break;
                case /* string phone_number */ 7:
                    message.phoneNumber = reader.string();
                    break;
                case /* string email */ 8:
                    message.email = reader.string();
                    break;
                case /* string billing_email */ 9:
                    message.billingEmail = reader.string();
                    break;
                case /* string address */ 10:
                    message.address = reader.string();
                    break;
                case /* bool active */ 11:
                    message.active = reader.bool();
                    break;
                case /* string note */ 12:
                    message.note = reader.string();
                    break;
                case /* string updated_at */ 13:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 14:
                    message.createdAt = reader.string();
                    break;
                case /* bool deleted */ 15:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerGetReply_Broker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* int64 mc = 2; */
        if (message.mc !== 0)
            writer.tag(2, WireType.Varint).int64(message.mc);
        /* int64 dot = 3; */
        if (message.dot !== 0)
            writer.tag(3, WireType.Varint).int64(message.dot);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string name_and_mc = 5; */
        if (message.nameAndMc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nameAndMc);
        /* string short_name = 6; */
        if (message.shortName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.shortName);
        /* string phone_number = 7; */
        if (message.phoneNumber !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.phoneNumber);
        /* string email = 8; */
        if (message.email !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.email);
        /* string billing_email = 9; */
        if (message.billingEmail !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.billingEmail);
        /* string address = 10; */
        if (message.address !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.address);
        /* bool active = 11; */
        if (message.active !== false)
            writer.tag(11, WireType.Varint).bool(message.active);
        /* string note = 12; */
        if (message.note !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.note);
        /* string updated_at = 13; */
        if (message.updatedAt !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 14; */
        if (message.createdAt !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.createdAt);
        /* bool deleted = 15; */
        if (message.deleted !== false)
            writer.tag(15, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerGetReply.Broker
 */
export const BrokerGetReply_Broker = new BrokerGetReply_Broker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerUpdateRequest$Type extends MessageType<BrokerUpdateRequest> {
    constructor() {
        super("BrokerUpdateRequest", [
            { no: 1, name: "broker", kind: "message", T: () => BrokerUpdateRequest_Broker }
        ]);
    }
    create(value?: PartialMessage<BrokerUpdateRequest>): BrokerUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BrokerUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerUpdateRequest): BrokerUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BrokerUpdateRequest.Broker broker */ 1:
                    message.broker = BrokerUpdateRequest_Broker.internalBinaryRead(reader, reader.uint32(), options, message.broker);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BrokerUpdateRequest.Broker broker = 1; */
        if (message.broker)
            BrokerUpdateRequest_Broker.internalBinaryWrite(message.broker, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerUpdateRequest
 */
export const BrokerUpdateRequest = new BrokerUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerUpdateRequest_Broker$Type extends MessageType<BrokerUpdateRequest_Broker> {
    constructor() {
        super("BrokerUpdateRequest.Broker", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mc", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "dot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "short_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "billing_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerUpdateRequest_Broker>): BrokerUpdateRequest_Broker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.mc = 0;
        message.dot = 0;
        message.name = "";
        message.shortName = "";
        message.phoneNumber = "";
        message.email = "";
        message.billingEmail = "";
        message.address = "";
        message.active = false;
        message.note = "";
        if (value !== undefined)
            reflectionMergePartial<BrokerUpdateRequest_Broker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerUpdateRequest_Broker): BrokerUpdateRequest_Broker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* int64 mc */ 2:
                    message.mc = reader.int64().toNumber();
                    break;
                case /* int64 dot */ 3:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string short_name */ 5:
                    message.shortName = reader.string();
                    break;
                case /* string phone_number */ 6:
                    message.phoneNumber = reader.string();
                    break;
                case /* string email */ 7:
                    message.email = reader.string();
                    break;
                case /* string billing_email */ 8:
                    message.billingEmail = reader.string();
                    break;
                case /* string address */ 9:
                    message.address = reader.string();
                    break;
                case /* bool active */ 10:
                    message.active = reader.bool();
                    break;
                case /* string note */ 11:
                    message.note = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerUpdateRequest_Broker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* int64 mc = 2; */
        if (message.mc !== 0)
            writer.tag(2, WireType.Varint).int64(message.mc);
        /* int64 dot = 3; */
        if (message.dot !== 0)
            writer.tag(3, WireType.Varint).int64(message.dot);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string short_name = 5; */
        if (message.shortName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.shortName);
        /* string phone_number = 6; */
        if (message.phoneNumber !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phoneNumber);
        /* string email = 7; */
        if (message.email !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.email);
        /* string billing_email = 8; */
        if (message.billingEmail !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.billingEmail);
        /* string address = 9; */
        if (message.address !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.address);
        /* bool active = 10; */
        if (message.active !== false)
            writer.tag(10, WireType.Varint).bool(message.active);
        /* string note = 11; */
        if (message.note !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.note);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerUpdateRequest.Broker
 */
export const BrokerUpdateRequest_Broker = new BrokerUpdateRequest_Broker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerUpdateReply$Type extends MessageType<BrokerUpdateReply> {
    constructor() {
        super("BrokerUpdateReply", []);
    }
    create(value?: PartialMessage<BrokerUpdateReply>): BrokerUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BrokerUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerUpdateReply): BrokerUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BrokerUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerUpdateReply
 */
export const BrokerUpdateReply = new BrokerUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerRetrieveRequest$Type extends MessageType<BrokerRetrieveRequest> {
    constructor() {
        super("BrokerRetrieveRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerRetrieveRequest>): BrokerRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        if (value !== undefined)
            reflectionMergePartial<BrokerRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerRetrieveRequest): BrokerRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerRetrieveRequest
 */
export const BrokerRetrieveRequest = new BrokerRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerRetrieveReply$Type extends MessageType<BrokerRetrieveReply> {
    constructor() {
        super("BrokerRetrieveReply", [
            { no: 1, name: "broker", kind: "message", T: () => BrokerRetrieveReply_Broker }
        ]);
    }
    create(value?: PartialMessage<BrokerRetrieveReply>): BrokerRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BrokerRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerRetrieveReply): BrokerRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BrokerRetrieveReply.Broker broker */ 1:
                    message.broker = BrokerRetrieveReply_Broker.internalBinaryRead(reader, reader.uint32(), options, message.broker);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BrokerRetrieveReply.Broker broker = 1; */
        if (message.broker)
            BrokerRetrieveReply_Broker.internalBinaryWrite(message.broker, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerRetrieveReply
 */
export const BrokerRetrieveReply = new BrokerRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerRetrieveReply_Broker$Type extends MessageType<BrokerRetrieveReply_Broker> {
    constructor() {
        super("BrokerRetrieveReply.Broker", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mc", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "dot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "short_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "billing_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerRetrieveReply_Broker>): BrokerRetrieveReply_Broker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.brokerId = "";
        message.mc = 0;
        message.dot = 0;
        message.name = "";
        message.shortName = "";
        message.phoneNumber = "";
        message.email = "";
        message.billingEmail = "";
        message.address = "";
        message.active = false;
        message.deleted = false;
        message.note = "";
        message.updatedAt = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<BrokerRetrieveReply_Broker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerRetrieveReply_Broker): BrokerRetrieveReply_Broker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string broker_id */ 2:
                    message.brokerId = reader.string();
                    break;
                case /* int64 mc */ 3:
                    message.mc = reader.int64().toNumber();
                    break;
                case /* int64 dot */ 4:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string short_name */ 6:
                    message.shortName = reader.string();
                    break;
                case /* string phone_number */ 7:
                    message.phoneNumber = reader.string();
                    break;
                case /* string email */ 8:
                    message.email = reader.string();
                    break;
                case /* string billing_email */ 9:
                    message.billingEmail = reader.string();
                    break;
                case /* string address */ 10:
                    message.address = reader.string();
                    break;
                case /* bool active */ 11:
                    message.active = reader.bool();
                    break;
                case /* bool deleted */ 12:
                    message.deleted = reader.bool();
                    break;
                case /* string note */ 13:
                    message.note = reader.string();
                    break;
                case /* string updated_at */ 14:
                    message.updatedAt = reader.string();
                    break;
                case /* string created_at */ 15:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerRetrieveReply_Broker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string broker_id = 2; */
        if (message.brokerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.brokerId);
        /* int64 mc = 3; */
        if (message.mc !== 0)
            writer.tag(3, WireType.Varint).int64(message.mc);
        /* int64 dot = 4; */
        if (message.dot !== 0)
            writer.tag(4, WireType.Varint).int64(message.dot);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string short_name = 6; */
        if (message.shortName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.shortName);
        /* string phone_number = 7; */
        if (message.phoneNumber !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.phoneNumber);
        /* string email = 8; */
        if (message.email !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.email);
        /* string billing_email = 9; */
        if (message.billingEmail !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.billingEmail);
        /* string address = 10; */
        if (message.address !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.address);
        /* bool active = 11; */
        if (message.active !== false)
            writer.tag(11, WireType.Varint).bool(message.active);
        /* bool deleted = 12; */
        if (message.deleted !== false)
            writer.tag(12, WireType.Varint).bool(message.deleted);
        /* string note = 13; */
        if (message.note !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.note);
        /* string updated_at = 14; */
        if (message.updatedAt !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.updatedAt);
        /* string created_at = 15; */
        if (message.createdAt !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrokerRetrieveReply.Broker
 */
export const BrokerRetrieveReply_Broker = new BrokerRetrieveReply_Broker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFMCSABrokersRequest$Type extends MessageType<GetFMCSABrokersRequest> {
    constructor() {
        super("GetFMCSABrokersRequest", [
            { no: 1, name: "search", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFMCSABrokersRequest>): GetFMCSABrokersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.search = "";
        if (value !== undefined)
            reflectionMergePartial<GetFMCSABrokersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFMCSABrokersRequest): GetFMCSABrokersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string search */ 1:
                    message.search = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFMCSABrokersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string search = 1; */
        if (message.search !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.search);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetFMCSABrokersRequest
 */
export const GetFMCSABrokersRequest = new GetFMCSABrokersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFMCSABrokersReply$Type extends MessageType<GetFMCSABrokersReply> {
    constructor() {
        super("GetFMCSABrokersReply", [
            { no: 1, name: "brokers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetFMCSABrokersReply_Broker }
        ]);
    }
    create(value?: PartialMessage<GetFMCSABrokersReply>): GetFMCSABrokersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokers = [];
        if (value !== undefined)
            reflectionMergePartial<GetFMCSABrokersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFMCSABrokersReply): GetFMCSABrokersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetFMCSABrokersReply.Broker brokers */ 1:
                    message.brokers.push(GetFMCSABrokersReply_Broker.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFMCSABrokersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetFMCSABrokersReply.Broker brokers = 1; */
        for (let i = 0; i < message.brokers.length; i++)
            GetFMCSABrokersReply_Broker.internalBinaryWrite(message.brokers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetFMCSABrokersReply
 */
export const GetFMCSABrokersReply = new GetFMCSABrokersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFMCSABrokersReply_Broker$Type extends MessageType<GetFMCSABrokersReply_Broker> {
    constructor() {
        super("GetFMCSABrokersReply.Broker", [
            { no: 1, name: "dot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "mc", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "short_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "address_short", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetFMCSABrokersReply_Broker>): GetFMCSABrokersReply_Broker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dot = 0;
        message.mc = 0;
        message.name = "";
        message.phone = "";
        message.email = "";
        message.shortName = "";
        message.address = "";
        message.addressShort = "";
        message.note = "";
        message.active = false;
        if (value !== undefined)
            reflectionMergePartial<GetFMCSABrokersReply_Broker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFMCSABrokersReply_Broker): GetFMCSABrokersReply_Broker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 dot */ 1:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* int64 mc */ 2:
                    message.mc = reader.int64().toNumber();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string phone */ 4:
                    message.phone = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string short_name */ 6:
                    message.shortName = reader.string();
                    break;
                case /* string address */ 7:
                    message.address = reader.string();
                    break;
                case /* string address_short */ 8:
                    message.addressShort = reader.string();
                    break;
                case /* string note */ 9:
                    message.note = reader.string();
                    break;
                case /* bool active */ 10:
                    message.active = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFMCSABrokersReply_Broker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 dot = 1; */
        if (message.dot !== 0)
            writer.tag(1, WireType.Varint).int64(message.dot);
        /* int64 mc = 2; */
        if (message.mc !== 0)
            writer.tag(2, WireType.Varint).int64(message.mc);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string phone = 4; */
        if (message.phone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phone);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string short_name = 6; */
        if (message.shortName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.shortName);
        /* string address = 7; */
        if (message.address !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.address);
        /* string address_short = 8; */
        if (message.addressShort !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.addressShort);
        /* string note = 9; */
        if (message.note !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.note);
        /* bool active = 10; */
        if (message.active !== false)
            writer.tag(10, WireType.Varint).bool(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetFMCSABrokersReply.Broker
 */
export const GetFMCSABrokersReply_Broker = new GetFMCSABrokersReply_Broker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrokerUsersRequest$Type extends MessageType<GetBrokerUsersRequest> {
    constructor() {
        super("GetBrokerUsersRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBrokerUsersRequest>): GetBrokerUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        if (value !== undefined)
            reflectionMergePartial<GetBrokerUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrokerUsersRequest): GetBrokerUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrokerUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBrokerUsersRequest
 */
export const GetBrokerUsersRequest = new GetBrokerUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrokerUsersReply$Type extends MessageType<GetBrokerUsersReply> {
    constructor() {
        super("GetBrokerUsersReply", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetBrokerUsersReply_User }
        ]);
    }
    create(value?: PartialMessage<GetBrokerUsersReply>): GetBrokerUsersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<GetBrokerUsersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrokerUsersReply): GetBrokerUsersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetBrokerUsersReply.User users */ 1:
                    message.users.push(GetBrokerUsersReply_User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrokerUsersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetBrokerUsersReply.User users = 1; */
        for (let i = 0; i < message.users.length; i++)
            GetBrokerUsersReply_User.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBrokerUsersReply
 */
export const GetBrokerUsersReply = new GetBrokerUsersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrokerUsersReply_User$Type extends MessageType<GetBrokerUsersReply_User> {
    constructor() {
        super("GetBrokerUsersReply.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "selfie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "selfie_thumb_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "internal_note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "status", kind: "enum", T: () => ["BrokerModel.User.Status", BrokerModel_User_Status, "STATUS_"] },
            { no: 14, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "invite", kind: "message", T: () => GetBrokerUsersReply_User_Invite }
        ]);
    }
    create(value?: PartialMessage<GetBrokerUsersReply_User>): GetBrokerUsersReply_User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.friendlyName = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.selfieUrl = "";
        message.selfieThumbUrl = "";
        message.title = "";
        message.internalNote = "";
        message.status = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetBrokerUsersReply_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrokerUsersReply_User): GetBrokerUsersReply_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string friendly_name */ 2:
                    message.friendlyName = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 7:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string selfie_url */ 9:
                    message.selfieUrl = reader.string();
                    break;
                case /* string selfie_thumb_url */ 10:
                    message.selfieThumbUrl = reader.string();
                    break;
                case /* string title */ 11:
                    message.title = reader.string();
                    break;
                case /* string internal_note */ 12:
                    message.internalNote = reader.string();
                    break;
                case /* BrokerModel.User.Status status */ 13:
                    message.status = reader.int32();
                    break;
                case /* string created_at */ 14:
                    message.createdAt = reader.string();
                    break;
                case /* optional GetBrokerUsersReply.User.Invite invite */ 15:
                    message.invite = GetBrokerUsersReply_User_Invite.internalBinaryRead(reader, reader.uint32(), options, message.invite);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrokerUsersReply_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string friendly_name = 2; */
        if (message.friendlyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyName);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 7; */
        if (message.passwordChangeRequired !== false)
            writer.tag(7, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string selfie_url = 9; */
        if (message.selfieUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.selfieUrl);
        /* string selfie_thumb_url = 10; */
        if (message.selfieThumbUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.selfieThumbUrl);
        /* string title = 11; */
        if (message.title !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.title);
        /* string internal_note = 12; */
        if (message.internalNote !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.internalNote);
        /* BrokerModel.User.Status status = 13; */
        if (message.status !== 0)
            writer.tag(13, WireType.Varint).int32(message.status);
        /* string created_at = 14; */
        if (message.createdAt !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.createdAt);
        /* optional GetBrokerUsersReply.User.Invite invite = 15; */
        if (message.invite)
            GetBrokerUsersReply_User_Invite.internalBinaryWrite(message.invite, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBrokerUsersReply.User
 */
export const GetBrokerUsersReply_User = new GetBrokerUsersReply_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrokerUsersReply_User_Invite$Type extends MessageType<GetBrokerUsersReply_User_Invite> {
    constructor() {
        super("GetBrokerUsersReply.User.Invite", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["BrokerModel.User.Invite.Status", BrokerModel_User_Invite_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<GetBrokerUsersReply_User_Invite>): GetBrokerUsersReply_User_Invite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetBrokerUsersReply_User_Invite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrokerUsersReply_User_Invite): GetBrokerUsersReply_User_Invite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* BrokerModel.User.Invite.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrokerUsersReply_User_Invite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* BrokerModel.User.Invite.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBrokerUsersReply.User.Invite
 */
export const GetBrokerUsersReply_User_Invite = new GetBrokerUsersReply_User_Invite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBrokerUserRequest$Type extends MessageType<CreateBrokerUserRequest> {
    constructor() {
        super("CreateBrokerUserRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "internal_note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBrokerUserRequest>): CreateBrokerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.friendlyName = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.title = "";
        message.internalNote = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<CreateBrokerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBrokerUserRequest): CreateBrokerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string friendly_name */ 2:
                    message.friendlyName = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string phone */ 6:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 7:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 8:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string title */ 9:
                    message.title = reader.string();
                    break;
                case /* string internal_note */ 10:
                    message.internalNote = reader.string();
                    break;
                case /* string password */ 11:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBrokerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string friendly_name = 2; */
        if (message.friendlyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyName);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string phone = 6; */
        if (message.phone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 7; */
        if (message.passwordChangeRequired !== false)
            writer.tag(7, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 8; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(8, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string title = 9; */
        if (message.title !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.title);
        /* string internal_note = 10; */
        if (message.internalNote !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.internalNote);
        /* string password = 11; */
        if (message.password !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateBrokerUserRequest
 */
export const CreateBrokerUserRequest = new CreateBrokerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBrokerUserReply$Type extends MessageType<CreateBrokerUserReply> {
    constructor() {
        super("CreateBrokerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBrokerUserReply>): CreateBrokerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateBrokerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBrokerUserReply): CreateBrokerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBrokerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateBrokerUserReply
 */
export const CreateBrokerUserReply = new CreateBrokerUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBrokerUserRequest$Type extends MessageType<UpdateBrokerUserRequest> {
    constructor() {
        super("UpdateBrokerUserRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "friendly_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "password_change_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "second_step_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "internal_note", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "status", kind: "enum", T: () => ["BrokerModel.User.Status", BrokerModel_User_Status, "STATUS_"] },
            { no: 13, name: "password", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateBrokerUserRequest>): UpdateBrokerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.userId = "";
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.phone = "";
        message.passwordChangeRequired = false;
        message.secondStepAuthEnabled = false;
        message.title = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateBrokerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBrokerUserRequest): UpdateBrokerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* optional string friendly_name */ 3:
                    message.friendlyName = reader.string();
                    break;
                case /* string first_name */ 4:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 5:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 6:
                    message.email = reader.string();
                    break;
                case /* string phone */ 7:
                    message.phone = reader.string();
                    break;
                case /* bool password_change_required */ 8:
                    message.passwordChangeRequired = reader.bool();
                    break;
                case /* bool second_step_auth_enabled */ 9:
                    message.secondStepAuthEnabled = reader.bool();
                    break;
                case /* string title */ 10:
                    message.title = reader.string();
                    break;
                case /* optional string internal_note */ 11:
                    message.internalNote = reader.string();
                    break;
                case /* BrokerModel.User.Status status */ 12:
                    message.status = reader.int32();
                    break;
                case /* optional string password */ 13:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBrokerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* optional string friendly_name = 3; */
        if (message.friendlyName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.friendlyName);
        /* string first_name = 4; */
        if (message.firstName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        /* string email = 6; */
        if (message.email !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        /* string phone = 7; */
        if (message.phone !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.phone);
        /* bool password_change_required = 8; */
        if (message.passwordChangeRequired !== false)
            writer.tag(8, WireType.Varint).bool(message.passwordChangeRequired);
        /* bool second_step_auth_enabled = 9; */
        if (message.secondStepAuthEnabled !== false)
            writer.tag(9, WireType.Varint).bool(message.secondStepAuthEnabled);
        /* string title = 10; */
        if (message.title !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.title);
        /* optional string internal_note = 11; */
        if (message.internalNote !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.internalNote);
        /* BrokerModel.User.Status status = 12; */
        if (message.status !== 0)
            writer.tag(12, WireType.Varint).int32(message.status);
        /* optional string password = 13; */
        if (message.password !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateBrokerUserRequest
 */
export const UpdateBrokerUserRequest = new UpdateBrokerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBrokerUserReply$Type extends MessageType<UpdateBrokerUserReply> {
    constructor() {
        super("UpdateBrokerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateBrokerUserReply>): UpdateBrokerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateBrokerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBrokerUserReply): UpdateBrokerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBrokerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateBrokerUserReply
 */
export const UpdateBrokerUserReply = new UpdateBrokerUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBrokerUserRequest$Type extends MessageType<DeleteBrokerUserRequest> {
    constructor() {
        super("DeleteBrokerUserRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteBrokerUserRequest>): DeleteBrokerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteBrokerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBrokerUserRequest): DeleteBrokerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBrokerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteBrokerUserRequest
 */
export const DeleteBrokerUserRequest = new DeleteBrokerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBrokerUserReply$Type extends MessageType<DeleteBrokerUserReply> {
    constructor() {
        super("DeleteBrokerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteBrokerUserReply>): DeleteBrokerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteBrokerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBrokerUserReply): DeleteBrokerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBrokerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteBrokerUserReply
 */
export const DeleteBrokerUserReply = new DeleteBrokerUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteBrokerUserRequest$Type extends MessageType<InviteBrokerUserRequest> {
    constructor() {
        super("InviteBrokerUserRequest", [
            { no: 1, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteBrokerUserRequest>): InviteBrokerUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brokerId = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<InviteBrokerUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteBrokerUserRequest): InviteBrokerUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker_id */ 1:
                    message.brokerId = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteBrokerUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker_id = 1; */
        if (message.brokerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brokerId);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteBrokerUserRequest
 */
export const InviteBrokerUserRequest = new InviteBrokerUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteBrokerUserReply$Type extends MessageType<InviteBrokerUserReply> {
    constructor() {
        super("InviteBrokerUserReply", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteBrokerUserReply>): InviteBrokerUserReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<InviteBrokerUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteBrokerUserReply): InviteBrokerUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteBrokerUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteBrokerUserReply
 */
export const InviteBrokerUserReply = new InviteBrokerUserReply$Type();
/**
 * @generated ServiceType for protobuf service BrokersService
 */
export const BrokersService = new ServiceType("BrokersService", [
    { name: "GetFMCSABrokers", options: {}, I: GetFMCSABrokersRequest, O: GetFMCSABrokersReply },
    { name: "BrokerCreate", options: {}, I: BrokerCreateRequest, O: BrokerCreateReply },
    { name: "BrokerDelete", options: {}, I: BrokerDeleteRequest, O: BrokerDeleteReply },
    { name: "BrokerGet", options: {}, I: BrokerGetRequest, O: BrokerGetReply },
    { name: "BrokerUpdate", options: {}, I: BrokerUpdateRequest, O: BrokerUpdateReply },
    { name: "BrokerRetrieve", options: {}, I: BrokerRetrieveRequest, O: BrokerRetrieveReply },
    { name: "GetBrokerUsers", options: {}, I: GetBrokerUsersRequest, O: GetBrokerUsersReply },
    { name: "CreateBrokerUser", options: {}, I: CreateBrokerUserRequest, O: CreateBrokerUserReply },
    { name: "UpdateBrokerUser", options: {}, I: UpdateBrokerUserRequest, O: UpdateBrokerUserReply },
    { name: "DeleteBrokerUser", options: {}, I: DeleteBrokerUserRequest, O: DeleteBrokerUserReply },
    { name: "InviteBrokerUser", options: {}, I: InviteBrokerUserRequest, O: InviteBrokerUserReply }
]);
