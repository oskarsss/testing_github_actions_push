// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/companies.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ConfigModel_ValueType } from "./models/model_config";
import { CountryCode } from "./models/country_code";
/**
 * CompanyCreate
 *
 * @generated from protobuf message CompanyCreateRequest
 */
export interface CompanyCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 3;
     */
    phone: string;
    /**
     * @generated from protobuf field: optional int64 dot = 4;
     */
    dot?: number;
    /**
     * @generated from protobuf field: string address_line1 = 5;
     */
    addressLine1: string;
    /**
     * @generated from protobuf field: string address_line2 = 6;
     */
    addressLine2: string;
    /**
     * @generated from protobuf field: string address_city = 7;
     */
    addressCity: string;
    /**
     * @generated from protobuf field: string address_state = 8;
     */
    addressState: string;
    /**
     * @generated from protobuf field: string address_postal_code = 9;
     */
    addressPostalCode: string;
    /**
     * @generated from protobuf field: optional CountryCode address_country = 10;
     */
    addressCountry?: CountryCode;
    /**
     * @generated from protobuf field: optional string referral_code = 11;
     */
    referralCode?: string;
    /**
     * @generated from protobuf field: optional string hear_about_us = 12;
     */
    hearAboutUs?: string;
}
/**
 * @generated from protobuf message CompanyCreateReply
 */
export interface CompanyCreateReply {
    /**
     * @generated from protobuf field: string company_id = 1;
     */
    companyId: string;
    /**
     * @generated from protobuf field: string admin_role_id = 2;
     */
    adminRoleId: string;
}
/**
 * @generated from protobuf message ConfigKeyGetRequest
 */
export interface ConfigKeyGetRequest {
}
/**
 * @generated from protobuf message ConfigKeyGetReply
 */
export interface ConfigKeyGetReply {
    /**
     * @generated from protobuf field: repeated ConfigKeyGetReply.ConfigKey config_keys = 1;
     */
    configKeys: ConfigKeyGetReply_ConfigKey[];
}
/**
 * @generated from protobuf message ConfigKeyGetReply.ConfigKey
 */
export interface ConfigKeyGetReply_ConfigKey {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: ConfigModel.ValueType value_type = 3;
     */
    valueType: ConfigModel_ValueType;
    /**
     * @generated from protobuf field: string value = 4;
     */
    value: string;
}
/**
 * @generated from protobuf message ConfigValueUpdateRequest
 */
export interface ConfigValueUpdateRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message ConfigValueUpdateReply
 */
export interface ConfigValueUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class CompanyCreateRequest$Type extends MessageType<CompanyCreateRequest> {
    constructor() {
        super("CompanyCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dot", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "address_line1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "address_line2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "address_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "address_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "address_postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "address_country", kind: "enum", opt: true, T: () => ["CountryCode", CountryCode, "COUNTRY_CODE_"] },
            { no: 11, name: "referral_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "hear_about_us", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CompanyCreateRequest>): CompanyCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.email = "";
        message.phone = "";
        message.addressLine1 = "";
        message.addressLine2 = "";
        message.addressCity = "";
        message.addressState = "";
        message.addressPostalCode = "";
        if (value !== undefined)
            reflectionMergePartial<CompanyCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompanyCreateRequest): CompanyCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string phone */ 3:
                    message.phone = reader.string();
                    break;
                case /* optional int64 dot */ 4:
                    message.dot = reader.int64().toNumber();
                    break;
                case /* string address_line1 */ 5:
                    message.addressLine1 = reader.string();
                    break;
                case /* string address_line2 */ 6:
                    message.addressLine2 = reader.string();
                    break;
                case /* string address_city */ 7:
                    message.addressCity = reader.string();
                    break;
                case /* string address_state */ 8:
                    message.addressState = reader.string();
                    break;
                case /* string address_postal_code */ 9:
                    message.addressPostalCode = reader.string();
                    break;
                case /* optional CountryCode address_country */ 10:
                    message.addressCountry = reader.int32();
                    break;
                case /* optional string referral_code */ 11:
                    message.referralCode = reader.string();
                    break;
                case /* optional string hear_about_us */ 12:
                    message.hearAboutUs = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompanyCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string phone = 3; */
        if (message.phone !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phone);
        /* optional int64 dot = 4; */
        if (message.dot !== undefined)
            writer.tag(4, WireType.Varint).int64(message.dot);
        /* string address_line1 = 5; */
        if (message.addressLine1 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.addressLine1);
        /* string address_line2 = 6; */
        if (message.addressLine2 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.addressLine2);
        /* string address_city = 7; */
        if (message.addressCity !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.addressCity);
        /* string address_state = 8; */
        if (message.addressState !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.addressState);
        /* string address_postal_code = 9; */
        if (message.addressPostalCode !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.addressPostalCode);
        /* optional CountryCode address_country = 10; */
        if (message.addressCountry !== undefined)
            writer.tag(10, WireType.Varint).int32(message.addressCountry);
        /* optional string referral_code = 11; */
        if (message.referralCode !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.referralCode);
        /* optional string hear_about_us = 12; */
        if (message.hearAboutUs !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.hearAboutUs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CompanyCreateRequest
 */
export const CompanyCreateRequest = new CompanyCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompanyCreateReply$Type extends MessageType<CompanyCreateReply> {
    constructor() {
        super("CompanyCreateReply", [
            { no: 1, name: "company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "admin_role_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CompanyCreateReply>): CompanyCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.companyId = "";
        message.adminRoleId = "";
        if (value !== undefined)
            reflectionMergePartial<CompanyCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompanyCreateReply): CompanyCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string company_id */ 1:
                    message.companyId = reader.string();
                    break;
                case /* string admin_role_id */ 2:
                    message.adminRoleId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompanyCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string company_id = 1; */
        if (message.companyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.companyId);
        /* string admin_role_id = 2; */
        if (message.adminRoleId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.adminRoleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CompanyCreateReply
 */
export const CompanyCreateReply = new CompanyCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigKeyGetRequest$Type extends MessageType<ConfigKeyGetRequest> {
    constructor() {
        super("ConfigKeyGetRequest", []);
    }
    create(value?: PartialMessage<ConfigKeyGetRequest>): ConfigKeyGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ConfigKeyGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigKeyGetRequest): ConfigKeyGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ConfigKeyGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConfigKeyGetRequest
 */
export const ConfigKeyGetRequest = new ConfigKeyGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigKeyGetReply$Type extends MessageType<ConfigKeyGetReply> {
    constructor() {
        super("ConfigKeyGetReply", [
            { no: 1, name: "config_keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConfigKeyGetReply_ConfigKey }
        ]);
    }
    create(value?: PartialMessage<ConfigKeyGetReply>): ConfigKeyGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.configKeys = [];
        if (value !== undefined)
            reflectionMergePartial<ConfigKeyGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigKeyGetReply): ConfigKeyGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ConfigKeyGetReply.ConfigKey config_keys */ 1:
                    message.configKeys.push(ConfigKeyGetReply_ConfigKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfigKeyGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ConfigKeyGetReply.ConfigKey config_keys = 1; */
        for (let i = 0; i < message.configKeys.length; i++)
            ConfigKeyGetReply_ConfigKey.internalBinaryWrite(message.configKeys[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConfigKeyGetReply
 */
export const ConfigKeyGetReply = new ConfigKeyGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigKeyGetReply_ConfigKey$Type extends MessageType<ConfigKeyGetReply_ConfigKey> {
    constructor() {
        super("ConfigKeyGetReply.ConfigKey", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value_type", kind: "enum", T: () => ["ConfigModel.ValueType", ConfigModel_ValueType] },
            { no: 4, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConfigKeyGetReply_ConfigKey>): ConfigKeyGetReply_ConfigKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.name = "";
        message.valueType = 0;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<ConfigKeyGetReply_ConfigKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigKeyGetReply_ConfigKey): ConfigKeyGetReply_ConfigKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* ConfigModel.ValueType value_type */ 3:
                    message.valueType = reader.int32();
                    break;
                case /* string value */ 4:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfigKeyGetReply_ConfigKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* ConfigModel.ValueType value_type = 3; */
        if (message.valueType !== 0)
            writer.tag(3, WireType.Varint).int32(message.valueType);
        /* string value = 4; */
        if (message.value !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConfigKeyGetReply.ConfigKey
 */
export const ConfigKeyGetReply_ConfigKey = new ConfigKeyGetReply_ConfigKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigValueUpdateRequest$Type extends MessageType<ConfigValueUpdateRequest> {
    constructor() {
        super("ConfigValueUpdateRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConfigValueUpdateRequest>): ConfigValueUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<ConfigValueUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigValueUpdateRequest): ConfigValueUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfigValueUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConfigValueUpdateRequest
 */
export const ConfigValueUpdateRequest = new ConfigValueUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigValueUpdateReply$Type extends MessageType<ConfigValueUpdateReply> {
    constructor() {
        super("ConfigValueUpdateReply", []);
    }
    create(value?: PartialMessage<ConfigValueUpdateReply>): ConfigValueUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ConfigValueUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigValueUpdateReply): ConfigValueUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ConfigValueUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConfigValueUpdateReply
 */
export const ConfigValueUpdateReply = new ConfigValueUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service CompaniesService
 */
export const CompaniesService = new ServiceType("CompaniesService", [
    { name: "CompanyCreate", options: {}, I: CompanyCreateRequest, O: CompanyCreateReply },
    { name: "ConfigKeyGet", options: {}, I: ConfigKeyGetRequest, O: ConfigKeyGetReply },
    { name: "ConfigValueUpdate", options: {}, I: ConfigValueUpdateRequest, O: ConfigValueUpdateReply }
]);
