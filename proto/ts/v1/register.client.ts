// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/register.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RegisterService } from "./register";
import type { GetByDotReply } from "./register";
import type { GetByDotRequest } from "./register";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RegisterReply } from "./register";
import type { RegisterRequest } from "./register";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service RegisterService
 */
export interface IRegisterServiceClient {
    /**
     * @generated from protobuf rpc: Register(RegisterRequest) returns (RegisterReply);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterReply>;
    /**
     * @generated from protobuf rpc: GetByDot(GetByDotRequest) returns (GetByDotReply);
     */
    getByDot(input: GetByDotRequest, options?: RpcOptions): UnaryCall<GetByDotRequest, GetByDotReply>;
}
/**
 * @generated from protobuf service RegisterService
 */
export class RegisterServiceClient implements IRegisterServiceClient, ServiceInfo {
    typeName = RegisterService.typeName;
    methods = RegisterService.methods;
    options = RegisterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Register(RegisterRequest) returns (RegisterReply);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, RegisterReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetByDot(GetByDotRequest) returns (GetByDotReply);
     */
    getByDot(input: GetByDotRequest, options?: RpcOptions): UnaryCall<GetByDotRequest, GetByDotReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetByDotRequest, GetByDotReply>("unary", this._transport, method, opt, input);
    }
}
