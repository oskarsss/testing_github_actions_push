// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/payouts.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PayoutModel_Status } from "./models/model_payout";
import { PayoutModel_Type } from "./models/model_payout";
import { PayoutModel } from "./models/model_payout";
/**
 * @generated from protobuf message PayoutGetRequest
 */
export interface PayoutGetRequest {
    /**
     * @generated from protobuf field: optional string settlement_id = 1;
     */
    settlementId?: string;
}
/**
 * @generated from protobuf message PayoutGetReply
 */
export interface PayoutGetReply {
    /**
     * @generated from protobuf field: repeated PayoutModel payouts = 1;
     */
    payouts: PayoutModel[];
}
/**
 * @generated from protobuf message PayoutCreateRequest
 */
export interface PayoutCreateRequest {
    /**
     * @generated from protobuf field: string entity_type = 1;
     */
    entityType: string;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
    /**
     * @generated from protobuf field: PayoutModel.Type type = 3;
     */
    type: PayoutModel_Type;
    /**
     * @generated from protobuf field: double amount = 4;
     */
    amount: number;
    /**
     * @generated from protobuf field: string bank_account_id = 5;
     */
    bankAccountId: string;
    /**
     * @generated from protobuf field: string payout_batch_id = 6;
     */
    payoutBatchId: string;
    /**
     * @generated from protobuf field: PayoutModel.Status status = 7;
     */
    status: PayoutModel_Status;
    /**
     * @generated from protobuf field: string settlement_id = 8;
     */
    settlementId: string;
    /**
     * @generated from protobuf field: string reference_id = 9;
     */
    referenceId: string;
}
/**
 * @generated from protobuf message PayoutCreateReply
 */
export interface PayoutCreateReply {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
}
/**
 * @generated from protobuf message PayoutDeleteRequest
 */
export interface PayoutDeleteRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
}
/**
 * @generated from protobuf message PayoutDeleteReply
 */
export interface PayoutDeleteReply {
}
/**
 * @generated from protobuf message PayoutStatusUpdateRequest
 */
export interface PayoutStatusUpdateRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
    /**
     * @generated from protobuf field: PayoutModel.Status status = 2;
     */
    status: PayoutModel_Status;
}
/**
 * @generated from protobuf message PayoutStatusUpdateReply
 */
export interface PayoutStatusUpdateReply {
}
/**
 * @generated from protobuf message PayoutTypeUpdateRequest
 */
export interface PayoutTypeUpdateRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
    /**
     * @generated from protobuf field: PayoutModel.Type type = 2;
     */
    type: PayoutModel_Type;
}
/**
 * @generated from protobuf message PayoutTypeUpdateReply
 */
export interface PayoutTypeUpdateReply {
}
/**
 * @generated from protobuf message PayoutUpdateRequest
 */
export interface PayoutUpdateRequest {
    /**
     * @generated from protobuf field: string payout_id = 1;
     */
    payoutId: string;
    /**
     * @generated from protobuf field: double amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: PayoutModel.Status status = 4;
     */
    status: PayoutModel_Status;
    /**
     * @generated from protobuf field: PayoutModel.Type type = 5;
     */
    type: PayoutModel_Type;
    /**
     * @generated from protobuf field: string bank_account_id = 6;
     */
    bankAccountId: string;
}
/**
 * @generated from protobuf message PayoutUpdateReply
 */
export interface PayoutUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class PayoutGetRequest$Type extends MessageType<PayoutGetRequest> {
    constructor() {
        super("PayoutGetRequest", [
            { no: 1, name: "settlement_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PayoutGetRequest>): PayoutGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PayoutGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutGetRequest): PayoutGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string settlement_id */ 1:
                    message.settlementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string settlement_id = 1; */
        if (message.settlementId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.settlementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutGetRequest
 */
export const PayoutGetRequest = new PayoutGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutGetReply$Type extends MessageType<PayoutGetReply> {
    constructor() {
        super("PayoutGetReply", [
            { no: 1, name: "payouts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PayoutModel }
        ]);
    }
    create(value?: PartialMessage<PayoutGetReply>): PayoutGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payouts = [];
        if (value !== undefined)
            reflectionMergePartial<PayoutGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutGetReply): PayoutGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PayoutModel payouts */ 1:
                    message.payouts.push(PayoutModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PayoutModel payouts = 1; */
        for (let i = 0; i < message.payouts.length; i++)
            PayoutModel.internalBinaryWrite(message.payouts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutGetReply
 */
export const PayoutGetReply = new PayoutGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutCreateRequest$Type extends MessageType<PayoutCreateRequest> {
    constructor() {
        super("PayoutCreateRequest", [
            { no: 1, name: "entity_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["PayoutModel.Type", PayoutModel_Type, "TYPE_"] },
            { no: 4, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "payout_batch_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["PayoutModel.Status", PayoutModel_Status, "STATUS_"] },
            { no: 8, name: "settlement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PayoutCreateRequest>): PayoutCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = "";
        message.entityId = "";
        message.type = 0;
        message.amount = 0;
        message.bankAccountId = "";
        message.payoutBatchId = "";
        message.status = 0;
        message.settlementId = "";
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<PayoutCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutCreateRequest): PayoutCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entity_type */ 1:
                    message.entityType = reader.string();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                case /* PayoutModel.Type type */ 3:
                    message.type = reader.int32();
                    break;
                case /* double amount */ 4:
                    message.amount = reader.double();
                    break;
                case /* string bank_account_id */ 5:
                    message.bankAccountId = reader.string();
                    break;
                case /* string payout_batch_id */ 6:
                    message.payoutBatchId = reader.string();
                    break;
                case /* PayoutModel.Status status */ 7:
                    message.status = reader.int32();
                    break;
                case /* string settlement_id */ 8:
                    message.settlementId = reader.string();
                    break;
                case /* string reference_id */ 9:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entity_type = 1; */
        if (message.entityType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entityType);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        /* PayoutModel.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* double amount = 4; */
        if (message.amount !== 0)
            writer.tag(4, WireType.Bit64).double(message.amount);
        /* string bank_account_id = 5; */
        if (message.bankAccountId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bankAccountId);
        /* string payout_batch_id = 6; */
        if (message.payoutBatchId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.payoutBatchId);
        /* PayoutModel.Status status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* string settlement_id = 8; */
        if (message.settlementId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.settlementId);
        /* string reference_id = 9; */
        if (message.referenceId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutCreateRequest
 */
export const PayoutCreateRequest = new PayoutCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutCreateReply$Type extends MessageType<PayoutCreateReply> {
    constructor() {
        super("PayoutCreateReply", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PayoutCreateReply>): PayoutCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        if (value !== undefined)
            reflectionMergePartial<PayoutCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutCreateReply): PayoutCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutCreateReply
 */
export const PayoutCreateReply = new PayoutCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutDeleteRequest$Type extends MessageType<PayoutDeleteRequest> {
    constructor() {
        super("PayoutDeleteRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PayoutDeleteRequest>): PayoutDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        if (value !== undefined)
            reflectionMergePartial<PayoutDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutDeleteRequest): PayoutDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutDeleteRequest
 */
export const PayoutDeleteRequest = new PayoutDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutDeleteReply$Type extends MessageType<PayoutDeleteReply> {
    constructor() {
        super("PayoutDeleteReply", []);
    }
    create(value?: PartialMessage<PayoutDeleteReply>): PayoutDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PayoutDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutDeleteReply): PayoutDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PayoutDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutDeleteReply
 */
export const PayoutDeleteReply = new PayoutDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutStatusUpdateRequest$Type extends MessageType<PayoutStatusUpdateRequest> {
    constructor() {
        super("PayoutStatusUpdateRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["PayoutModel.Status", PayoutModel_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<PayoutStatusUpdateRequest>): PayoutStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<PayoutStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutStatusUpdateRequest): PayoutStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                case /* PayoutModel.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        /* PayoutModel.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutStatusUpdateRequest
 */
export const PayoutStatusUpdateRequest = new PayoutStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutStatusUpdateReply$Type extends MessageType<PayoutStatusUpdateReply> {
    constructor() {
        super("PayoutStatusUpdateReply", []);
    }
    create(value?: PartialMessage<PayoutStatusUpdateReply>): PayoutStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PayoutStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutStatusUpdateReply): PayoutStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PayoutStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutStatusUpdateReply
 */
export const PayoutStatusUpdateReply = new PayoutStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutTypeUpdateRequest$Type extends MessageType<PayoutTypeUpdateRequest> {
    constructor() {
        super("PayoutTypeUpdateRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["PayoutModel.Type", PayoutModel_Type, "TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PayoutTypeUpdateRequest>): PayoutTypeUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<PayoutTypeUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutTypeUpdateRequest): PayoutTypeUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                case /* PayoutModel.Type type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutTypeUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        /* PayoutModel.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutTypeUpdateRequest
 */
export const PayoutTypeUpdateRequest = new PayoutTypeUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutTypeUpdateReply$Type extends MessageType<PayoutTypeUpdateReply> {
    constructor() {
        super("PayoutTypeUpdateReply", []);
    }
    create(value?: PartialMessage<PayoutTypeUpdateReply>): PayoutTypeUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PayoutTypeUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutTypeUpdateReply): PayoutTypeUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PayoutTypeUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutTypeUpdateReply
 */
export const PayoutTypeUpdateReply = new PayoutTypeUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutUpdateRequest$Type extends MessageType<PayoutUpdateRequest> {
    constructor() {
        super("PayoutUpdateRequest", [
            { no: 1, name: "payout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["PayoutModel.Status", PayoutModel_Status, "STATUS_"] },
            { no: 5, name: "type", kind: "enum", T: () => ["PayoutModel.Type", PayoutModel_Type, "TYPE_"] },
            { no: 6, name: "bank_account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PayoutUpdateRequest>): PayoutUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payoutId = "";
        message.amount = 0;
        message.referenceId = "";
        message.status = 0;
        message.type = 0;
        message.bankAccountId = "";
        if (value !== undefined)
            reflectionMergePartial<PayoutUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutUpdateRequest): PayoutUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payout_id */ 1:
                    message.payoutId = reader.string();
                    break;
                case /* double amount */ 2:
                    message.amount = reader.double();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* PayoutModel.Status status */ 4:
                    message.status = reader.int32();
                    break;
                case /* PayoutModel.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string bank_account_id */ 6:
                    message.bankAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayoutUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payout_id = 1; */
        if (message.payoutId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payoutId);
        /* double amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Bit64).double(message.amount);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* PayoutModel.Status status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* PayoutModel.Type type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string bank_account_id = 6; */
        if (message.bankAccountId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bankAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutUpdateRequest
 */
export const PayoutUpdateRequest = new PayoutUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayoutUpdateReply$Type extends MessageType<PayoutUpdateReply> {
    constructor() {
        super("PayoutUpdateReply", []);
    }
    create(value?: PartialMessage<PayoutUpdateReply>): PayoutUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PayoutUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayoutUpdateReply): PayoutUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PayoutUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PayoutUpdateReply
 */
export const PayoutUpdateReply = new PayoutUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service PayoutsService
 */
export const PayoutsService = new ServiceType("PayoutsService", [
    { name: "PayoutGet", options: {}, I: PayoutGetRequest, O: PayoutGetReply },
    { name: "PayoutCreate", options: {}, I: PayoutCreateRequest, O: PayoutCreateReply },
    { name: "PayoutDelete", options: {}, I: PayoutDeleteRequest, O: PayoutDeleteReply },
    { name: "PayoutStatusUpdate", options: {}, I: PayoutStatusUpdateRequest, O: PayoutStatusUpdateReply },
    { name: "PayoutTypeUpdate", options: {}, I: PayoutTypeUpdateRequest, O: PayoutTypeUpdateReply },
    { name: "PayoutUpdate", options: {}, I: PayoutUpdateRequest, O: PayoutUpdateReply }
]);
