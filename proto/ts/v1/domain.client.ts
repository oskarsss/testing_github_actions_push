// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/domain.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DomainService } from "./domain";
import type { DomainDeleteReply } from "./domain";
import type { DomainDeleteRequest } from "./domain";
import type { DomainCreateReply } from "./domain";
import type { DomainCreateRequest } from "./domain";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DomainGetReply } from "./domain";
import type { DomainGetRequest } from "./domain";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service DomainService
 */
export interface IDomainServiceClient {
    /**
     * @generated from protobuf rpc: DomainGet(DomainGetRequest) returns (DomainGetReply);
     */
    domainGet(input: DomainGetRequest, options?: RpcOptions): UnaryCall<DomainGetRequest, DomainGetReply>;
    /**
     * @generated from protobuf rpc: DomainCreate(DomainCreateRequest) returns (DomainCreateReply);
     */
    domainCreate(input: DomainCreateRequest, options?: RpcOptions): UnaryCall<DomainCreateRequest, DomainCreateReply>;
    /**
     * @generated from protobuf rpc: DomainDelete(DomainDeleteRequest) returns (DomainDeleteReply);
     */
    domainDelete(input: DomainDeleteRequest, options?: RpcOptions): UnaryCall<DomainDeleteRequest, DomainDeleteReply>;
}
/**
 * @generated from protobuf service DomainService
 */
export class DomainServiceClient implements IDomainServiceClient, ServiceInfo {
    typeName = DomainService.typeName;
    methods = DomainService.methods;
    options = DomainService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: DomainGet(DomainGetRequest) returns (DomainGetReply);
     */
    domainGet(input: DomainGetRequest, options?: RpcOptions): UnaryCall<DomainGetRequest, DomainGetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DomainGetRequest, DomainGetReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DomainCreate(DomainCreateRequest) returns (DomainCreateReply);
     */
    domainCreate(input: DomainCreateRequest, options?: RpcOptions): UnaryCall<DomainCreateRequest, DomainCreateReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DomainCreateRequest, DomainCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DomainDelete(DomainDeleteRequest) returns (DomainDeleteReply);
     */
    domainDelete(input: DomainDeleteRequest, options?: RpcOptions): UnaryCall<DomainDeleteRequest, DomainDeleteReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DomainDeleteRequest, DomainDeleteReply>("unary", this._transport, method, opt, input);
    }
}
