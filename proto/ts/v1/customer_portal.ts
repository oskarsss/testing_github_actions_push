// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/customer_portal.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CustomerPortalModel_CustomerPortal } from "./models/model_customer_portal";
/**
 * /////////////////////////
 * CustomerPortalGet
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalGetRequest
 */
export interface CustomerPortalGetRequest {
}
/**
 * @generated from protobuf message CustomerPortalGetReply
 */
export interface CustomerPortalGetReply {
    /**
     * @generated from protobuf field: repeated CustomerPortalModel.CustomerPortal customer_portals = 1;
     */
    customerPortals: CustomerPortalModel_CustomerPortal[];
}
/**
 * /////////////////////////
 * CustomerPortalCreate
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalCreateRequest
 */
export interface CustomerPortalCreateRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string; // must be unique
    /**
     * @generated from protobuf field: string dark_logo_path = 3;
     */
    darkLogoPath: string;
    /**
     * @generated from protobuf field: string light_logo_path = 4;
     */
    lightLogoPath: string;
    /**
     * @generated from protobuf field: string theme = 5;
     */
    theme: string;
    /**
     * @generated from protobuf field: string support_phone = 6;
     */
    supportPhone: string;
    /**
     * @generated from protobuf field: string support_email = 7;
     */
    supportEmail: string;
    /**
     * @generated from protobuf field: string link_linkedin_url = 8;
     */
    linkLinkedinUrl: string;
    /**
     * @generated from protobuf field: string link_instagram_url = 9;
     */
    linkInstagramUrl: string;
    /**
     * @generated from protobuf field: string link_facebook_url = 10;
     */
    linkFacebookUrl: string;
    /**
     * @generated from protobuf field: string link_website_url = 11;
     */
    linkWebsiteUrl: string;
}
/**
 * @generated from protobuf message CustomerPortalCreateReply
 */
export interface CustomerPortalCreateReply {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
}
/**
 * /////////////////////////
 * CustomerPortalUpdate
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalUpdateRequest
 */
export interface CustomerPortalUpdateRequest {
    /**
     * @generated from protobuf field: CustomerPortalModel.CustomerPortal customer_portal = 1;
     */
    customerPortal?: CustomerPortalModel_CustomerPortal;
}
/**
 * @generated from protobuf message CustomerPortalUpdateReply
 */
export interface CustomerPortalUpdateReply {
}
/**
 * /////////////////////////
 * CustomerPortalDelete
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalDeleteRequest
 */
export interface CustomerPortalDeleteRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
}
/**
 * @generated from protobuf message CustomerPortalDeleteReply
 */
export interface CustomerPortalDeleteReply {
}
/**
 * /////////////////////////
 * CustomerPortalDomainGet
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalDomainGetRequest
 */
export interface CustomerPortalDomainGetRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
}
/**
 * @generated from protobuf message CustomerPortalDomainGetReply
 */
export interface CustomerPortalDomainGetReply {
    /**
     * @generated from protobuf field: repeated CustomerPortalDomainGetReply.Domain domains = 1;
     */
    domains: CustomerPortalDomainGetReply_Domain[];
}
/**
 * @generated from protobuf message CustomerPortalDomainGetReply.Domain
 */
export interface CustomerPortalDomainGetReply_Domain {
    /**
     * @generated from protobuf field: string domain_id = 1;
     */
    domainId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: CustomerPortalDomainGetReply.Domain.DNS dns = 3;
     */
    dns?: CustomerPortalDomainGetReply_Domain_DNS;
}
/**
 * @generated from protobuf message CustomerPortalDomainGetReply.Domain.DNS
 */
export interface CustomerPortalDomainGetReply_Domain_DNS {
    /**
     * @generated from protobuf field: bool misconfigured = 1;
     */
    misconfigured: boolean;
    /**
     * @generated from protobuf field: bool verified = 2;
     */
    verified: boolean;
    /**
     * @generated from protobuf field: repeated CustomerPortalDomainGetReply.Domain.DNS.MissingRecord missing_records = 3;
     */
    missingRecords: CustomerPortalDomainGetReply_Domain_DNS_MissingRecord[];
    /**
     * @generated from protobuf field: repeated CustomerPortalDomainGetReply.Domain.DNS.RequiredVerification required_verifications = 4;
     */
    requiredVerifications: CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification[];
}
/**
 * @generated from protobuf message CustomerPortalDomainGetReply.Domain.DNS.MissingRecord
 */
export interface CustomerPortalDomainGetReply_Domain_DNS_MissingRecord {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message CustomerPortalDomainGetReply.Domain.DNS.RequiredVerification
 */
export interface CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string domain = 2;
     */
    domain: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * /////////////////////////
 * CustomerPortalDomainCreate
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalDomainCreateRequest
 */
export interface CustomerPortalDomainCreateRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
    /**
     * @generated from protobuf field: string domain_name = 2;
     */
    domainName: string;
}
/**
 * @generated from protobuf message CustomerPortalDomainCreateReply
 */
export interface CustomerPortalDomainCreateReply {
}
/**
 * /////////////////////////
 * CustomerPortalDomainClear
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalDomainDeleteRequest
 */
export interface CustomerPortalDomainDeleteRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
    /**
     * @generated from protobuf field: string domain_id = 2;
     */
    domainId: string;
}
/**
 * @generated from protobuf message CustomerPortalDomainDeleteReply
 */
export interface CustomerPortalDomainDeleteReply {
}
/**
 * /////////////////////////
 * CustomerPortalCodeSet
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalCodeSetRequest
 */
export interface CustomerPortalCodeSetRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
}
/**
 * @generated from protobuf message CustomerPortalCodeSetReply
 */
export interface CustomerPortalCodeSetReply {
}
/**
 * /////////////////////////
 * CustomerPortalCodeClear
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalCodeClearRequest
 */
export interface CustomerPortalCodeClearRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
}
/**
 * @generated from protobuf message CustomerPortalCodeClearReply
 */
export interface CustomerPortalCodeClearReply {
}
/**
 * /////////////////////////
 * CustomerPortalImageGet
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalImageGetRequest
 */
export interface CustomerPortalImageGetRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
}
/**
 * @generated from protobuf message CustomerPortalImageGetReply
 */
export interface CustomerPortalImageGetReply {
    /**
     * @generated from protobuf field: repeated CustomerPortalImageGetReply.Image images = 1;
     */
    images: CustomerPortalImageGetReply_Image[];
}
/**
 * @generated from protobuf message CustomerPortalImageGetReply.Image
 */
export interface CustomerPortalImageGetReply_Image {
    /**
     * @generated from protobuf field: string image_id = 1;
     */
    imageId: string;
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string;
    /**
     * @generated from protobuf field: int64 sort_sequence = 3;
     */
    sortSequence: number;
}
/**
 * /////////////////////////
 * CustomerPortalImageCreate
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalImageCreateRequest
 */
export interface CustomerPortalImageCreateRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string;
    /**
     * @generated from protobuf field: int64 sort_sequence = 3;
     */
    sortSequence: number;
}
/**
 * @generated from protobuf message CustomerPortalImageCreateReply
 */
export interface CustomerPortalImageCreateReply {
    /**
     * @generated from protobuf field: string image_id = 1;
     */
    imageId: string;
}
/**
 * /////////////////////////
 * CustomerPortalImageDelete
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalImageDeleteRequest
 */
export interface CustomerPortalImageDeleteRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
    /**
     * @generated from protobuf field: string image_id = 2;
     */
    imageId: string;
}
/**
 * @generated from protobuf message CustomerPortalImageDeleteReply
 */
export interface CustomerPortalImageDeleteReply {
}
/**
 * /////////////////////////
 * CustomerPortalImageUpdate
 * /////////////////////////
 *
 * @generated from protobuf message CustomerPortalImageUpdateRequest
 */
export interface CustomerPortalImageUpdateRequest {
    /**
     * @generated from protobuf field: string customer_portal_id = 1;
     */
    customerPortalId: string;
    /**
     * @generated from protobuf field: string image_id = 2;
     */
    imageId: string;
    /**
     * @generated from protobuf field: string path = 3;
     */
    path: string;
    /**
     * @generated from protobuf field: int64 sort_sequence = 4;
     */
    sortSequence: number;
}
/**
 * @generated from protobuf message CustomerPortalImageUpdateReply
 */
export interface CustomerPortalImageUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalGetRequest$Type extends MessageType<CustomerPortalGetRequest> {
    constructor() {
        super("CustomerPortalGetRequest", []);
    }
    create(value?: PartialMessage<CustomerPortalGetRequest>): CustomerPortalGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalGetRequest): CustomerPortalGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalGetRequest
 */
export const CustomerPortalGetRequest = new CustomerPortalGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalGetReply$Type extends MessageType<CustomerPortalGetReply> {
    constructor() {
        super("CustomerPortalGetReply", [
            { no: 1, name: "customer_portals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerPortalModel_CustomerPortal }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalGetReply>): CustomerPortalGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortals = [];
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalGetReply): CustomerPortalGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CustomerPortalModel.CustomerPortal customer_portals */ 1:
                    message.customerPortals.push(CustomerPortalModel_CustomerPortal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CustomerPortalModel.CustomerPortal customer_portals = 1; */
        for (let i = 0; i < message.customerPortals.length; i++)
            CustomerPortalModel_CustomerPortal.internalBinaryWrite(message.customerPortals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalGetReply
 */
export const CustomerPortalGetReply = new CustomerPortalGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalCreateRequest$Type extends MessageType<CustomerPortalCreateRequest> {
    constructor() {
        super("CustomerPortalCreateRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dark_logo_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "light_logo_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "support_phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "support_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "link_linkedin_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "link_instagram_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "link_facebook_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "link_website_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalCreateRequest>): CustomerPortalCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.code = "";
        message.darkLogoPath = "";
        message.lightLogoPath = "";
        message.theme = "";
        message.supportPhone = "";
        message.supportEmail = "";
        message.linkLinkedinUrl = "";
        message.linkInstagramUrl = "";
        message.linkFacebookUrl = "";
        message.linkWebsiteUrl = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalCreateRequest): CustomerPortalCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* string dark_logo_path */ 3:
                    message.darkLogoPath = reader.string();
                    break;
                case /* string light_logo_path */ 4:
                    message.lightLogoPath = reader.string();
                    break;
                case /* string theme */ 5:
                    message.theme = reader.string();
                    break;
                case /* string support_phone */ 6:
                    message.supportPhone = reader.string();
                    break;
                case /* string support_email */ 7:
                    message.supportEmail = reader.string();
                    break;
                case /* string link_linkedin_url */ 8:
                    message.linkLinkedinUrl = reader.string();
                    break;
                case /* string link_instagram_url */ 9:
                    message.linkInstagramUrl = reader.string();
                    break;
                case /* string link_facebook_url */ 10:
                    message.linkFacebookUrl = reader.string();
                    break;
                case /* string link_website_url */ 11:
                    message.linkWebsiteUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* string dark_logo_path = 3; */
        if (message.darkLogoPath !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.darkLogoPath);
        /* string light_logo_path = 4; */
        if (message.lightLogoPath !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lightLogoPath);
        /* string theme = 5; */
        if (message.theme !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.theme);
        /* string support_phone = 6; */
        if (message.supportPhone !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.supportPhone);
        /* string support_email = 7; */
        if (message.supportEmail !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.supportEmail);
        /* string link_linkedin_url = 8; */
        if (message.linkLinkedinUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.linkLinkedinUrl);
        /* string link_instagram_url = 9; */
        if (message.linkInstagramUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.linkInstagramUrl);
        /* string link_facebook_url = 10; */
        if (message.linkFacebookUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.linkFacebookUrl);
        /* string link_website_url = 11; */
        if (message.linkWebsiteUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.linkWebsiteUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalCreateRequest
 */
export const CustomerPortalCreateRequest = new CustomerPortalCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalCreateReply$Type extends MessageType<CustomerPortalCreateReply> {
    constructor() {
        super("CustomerPortalCreateReply", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalCreateReply>): CustomerPortalCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalCreateReply): CustomerPortalCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalCreateReply
 */
export const CustomerPortalCreateReply = new CustomerPortalCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalUpdateRequest$Type extends MessageType<CustomerPortalUpdateRequest> {
    constructor() {
        super("CustomerPortalUpdateRequest", [
            { no: 1, name: "customer_portal", kind: "message", T: () => CustomerPortalModel_CustomerPortal }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalUpdateRequest>): CustomerPortalUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalUpdateRequest): CustomerPortalUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CustomerPortalModel.CustomerPortal customer_portal */ 1:
                    message.customerPortal = CustomerPortalModel_CustomerPortal.internalBinaryRead(reader, reader.uint32(), options, message.customerPortal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CustomerPortalModel.CustomerPortal customer_portal = 1; */
        if (message.customerPortal)
            CustomerPortalModel_CustomerPortal.internalBinaryWrite(message.customerPortal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalUpdateRequest
 */
export const CustomerPortalUpdateRequest = new CustomerPortalUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalUpdateReply$Type extends MessageType<CustomerPortalUpdateReply> {
    constructor() {
        super("CustomerPortalUpdateReply", []);
    }
    create(value?: PartialMessage<CustomerPortalUpdateReply>): CustomerPortalUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalUpdateReply): CustomerPortalUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalUpdateReply
 */
export const CustomerPortalUpdateReply = new CustomerPortalUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDeleteRequest$Type extends MessageType<CustomerPortalDeleteRequest> {
    constructor() {
        super("CustomerPortalDeleteRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDeleteRequest>): CustomerPortalDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDeleteRequest): CustomerPortalDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDeleteRequest
 */
export const CustomerPortalDeleteRequest = new CustomerPortalDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDeleteReply$Type extends MessageType<CustomerPortalDeleteReply> {
    constructor() {
        super("CustomerPortalDeleteReply", []);
    }
    create(value?: PartialMessage<CustomerPortalDeleteReply>): CustomerPortalDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDeleteReply): CustomerPortalDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDeleteReply
 */
export const CustomerPortalDeleteReply = new CustomerPortalDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainGetRequest$Type extends MessageType<CustomerPortalDomainGetRequest> {
    constructor() {
        super("CustomerPortalDomainGetRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainGetRequest>): CustomerPortalDomainGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainGetRequest): CustomerPortalDomainGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainGetRequest
 */
export const CustomerPortalDomainGetRequest = new CustomerPortalDomainGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainGetReply$Type extends MessageType<CustomerPortalDomainGetReply> {
    constructor() {
        super("CustomerPortalDomainGetReply", [
            { no: 1, name: "domains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerPortalDomainGetReply_Domain }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainGetReply>): CustomerPortalDomainGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.domains = [];
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainGetReply): CustomerPortalDomainGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CustomerPortalDomainGetReply.Domain domains */ 1:
                    message.domains.push(CustomerPortalDomainGetReply_Domain.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CustomerPortalDomainGetReply.Domain domains = 1; */
        for (let i = 0; i < message.domains.length; i++)
            CustomerPortalDomainGetReply_Domain.internalBinaryWrite(message.domains[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainGetReply
 */
export const CustomerPortalDomainGetReply = new CustomerPortalDomainGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainGetReply_Domain$Type extends MessageType<CustomerPortalDomainGetReply_Domain> {
    constructor() {
        super("CustomerPortalDomainGetReply.Domain", [
            { no: 1, name: "domain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dns", kind: "message", T: () => CustomerPortalDomainGetReply_Domain_DNS }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainGetReply_Domain>): CustomerPortalDomainGetReply_Domain {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.domainId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainGetReply_Domain>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainGetReply_Domain): CustomerPortalDomainGetReply_Domain {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string domain_id */ 1:
                    message.domainId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* CustomerPortalDomainGetReply.Domain.DNS dns */ 3:
                    message.dns = CustomerPortalDomainGetReply_Domain_DNS.internalBinaryRead(reader, reader.uint32(), options, message.dns);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainGetReply_Domain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string domain_id = 1; */
        if (message.domainId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.domainId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* CustomerPortalDomainGetReply.Domain.DNS dns = 3; */
        if (message.dns)
            CustomerPortalDomainGetReply_Domain_DNS.internalBinaryWrite(message.dns, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainGetReply.Domain
 */
export const CustomerPortalDomainGetReply_Domain = new CustomerPortalDomainGetReply_Domain$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainGetReply_Domain_DNS$Type extends MessageType<CustomerPortalDomainGetReply_Domain_DNS> {
    constructor() {
        super("CustomerPortalDomainGetReply.Domain.DNS", [
            { no: 1, name: "misconfigured", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "missing_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerPortalDomainGetReply_Domain_DNS_MissingRecord },
            { no: 4, name: "required_verifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainGetReply_Domain_DNS>): CustomerPortalDomainGetReply_Domain_DNS {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.misconfigured = false;
        message.verified = false;
        message.missingRecords = [];
        message.requiredVerifications = [];
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainGetReply_Domain_DNS>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainGetReply_Domain_DNS): CustomerPortalDomainGetReply_Domain_DNS {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool misconfigured */ 1:
                    message.misconfigured = reader.bool();
                    break;
                case /* bool verified */ 2:
                    message.verified = reader.bool();
                    break;
                case /* repeated CustomerPortalDomainGetReply.Domain.DNS.MissingRecord missing_records */ 3:
                    message.missingRecords.push(CustomerPortalDomainGetReply_Domain_DNS_MissingRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CustomerPortalDomainGetReply.Domain.DNS.RequiredVerification required_verifications */ 4:
                    message.requiredVerifications.push(CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainGetReply_Domain_DNS, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool misconfigured = 1; */
        if (message.misconfigured !== false)
            writer.tag(1, WireType.Varint).bool(message.misconfigured);
        /* bool verified = 2; */
        if (message.verified !== false)
            writer.tag(2, WireType.Varint).bool(message.verified);
        /* repeated CustomerPortalDomainGetReply.Domain.DNS.MissingRecord missing_records = 3; */
        for (let i = 0; i < message.missingRecords.length; i++)
            CustomerPortalDomainGetReply_Domain_DNS_MissingRecord.internalBinaryWrite(message.missingRecords[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated CustomerPortalDomainGetReply.Domain.DNS.RequiredVerification required_verifications = 4; */
        for (let i = 0; i < message.requiredVerifications.length; i++)
            CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification.internalBinaryWrite(message.requiredVerifications[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainGetReply.Domain.DNS
 */
export const CustomerPortalDomainGetReply_Domain_DNS = new CustomerPortalDomainGetReply_Domain_DNS$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainGetReply_Domain_DNS_MissingRecord$Type extends MessageType<CustomerPortalDomainGetReply_Domain_DNS_MissingRecord> {
    constructor() {
        super("CustomerPortalDomainGetReply.Domain.DNS.MissingRecord", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainGetReply_Domain_DNS_MissingRecord>): CustomerPortalDomainGetReply_Domain_DNS_MissingRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.name = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainGetReply_Domain_DNS_MissingRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainGetReply_Domain_DNS_MissingRecord): CustomerPortalDomainGetReply_Domain_DNS_MissingRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainGetReply_Domain_DNS_MissingRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainGetReply.Domain.DNS.MissingRecord
 */
export const CustomerPortalDomainGetReply_Domain_DNS_MissingRecord = new CustomerPortalDomainGetReply_Domain_DNS_MissingRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification$Type extends MessageType<CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification> {
    constructor() {
        super("CustomerPortalDomainGetReply.Domain.DNS.RequiredVerification", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification>): CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.domain = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification): CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string domain */ 2:
                    message.domain = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string domain = 2; */
        if (message.domain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.domain);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainGetReply.Domain.DNS.RequiredVerification
 */
export const CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification = new CustomerPortalDomainGetReply_Domain_DNS_RequiredVerification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainCreateRequest$Type extends MessageType<CustomerPortalDomainCreateRequest> {
    constructor() {
        super("CustomerPortalDomainCreateRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "domain_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainCreateRequest>): CustomerPortalDomainCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        message.domainName = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainCreateRequest): CustomerPortalDomainCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                case /* string domain_name */ 2:
                    message.domainName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        /* string domain_name = 2; */
        if (message.domainName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.domainName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainCreateRequest
 */
export const CustomerPortalDomainCreateRequest = new CustomerPortalDomainCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainCreateReply$Type extends MessageType<CustomerPortalDomainCreateReply> {
    constructor() {
        super("CustomerPortalDomainCreateReply", []);
    }
    create(value?: PartialMessage<CustomerPortalDomainCreateReply>): CustomerPortalDomainCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainCreateReply): CustomerPortalDomainCreateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalDomainCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainCreateReply
 */
export const CustomerPortalDomainCreateReply = new CustomerPortalDomainCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainDeleteRequest$Type extends MessageType<CustomerPortalDomainDeleteRequest> {
    constructor() {
        super("CustomerPortalDomainDeleteRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "domain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalDomainDeleteRequest>): CustomerPortalDomainDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        message.domainId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainDeleteRequest): CustomerPortalDomainDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                case /* string domain_id */ 2:
                    message.domainId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalDomainDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        /* string domain_id = 2; */
        if (message.domainId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.domainId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainDeleteRequest
 */
export const CustomerPortalDomainDeleteRequest = new CustomerPortalDomainDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalDomainDeleteReply$Type extends MessageType<CustomerPortalDomainDeleteReply> {
    constructor() {
        super("CustomerPortalDomainDeleteReply", []);
    }
    create(value?: PartialMessage<CustomerPortalDomainDeleteReply>): CustomerPortalDomainDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalDomainDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalDomainDeleteReply): CustomerPortalDomainDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalDomainDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalDomainDeleteReply
 */
export const CustomerPortalDomainDeleteReply = new CustomerPortalDomainDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalCodeSetRequest$Type extends MessageType<CustomerPortalCodeSetRequest> {
    constructor() {
        super("CustomerPortalCodeSetRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalCodeSetRequest>): CustomerPortalCodeSetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalCodeSetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalCodeSetRequest): CustomerPortalCodeSetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalCodeSetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalCodeSetRequest
 */
export const CustomerPortalCodeSetRequest = new CustomerPortalCodeSetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalCodeSetReply$Type extends MessageType<CustomerPortalCodeSetReply> {
    constructor() {
        super("CustomerPortalCodeSetReply", []);
    }
    create(value?: PartialMessage<CustomerPortalCodeSetReply>): CustomerPortalCodeSetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalCodeSetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalCodeSetReply): CustomerPortalCodeSetReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalCodeSetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalCodeSetReply
 */
export const CustomerPortalCodeSetReply = new CustomerPortalCodeSetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalCodeClearRequest$Type extends MessageType<CustomerPortalCodeClearRequest> {
    constructor() {
        super("CustomerPortalCodeClearRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalCodeClearRequest>): CustomerPortalCodeClearRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalCodeClearRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalCodeClearRequest): CustomerPortalCodeClearRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalCodeClearRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalCodeClearRequest
 */
export const CustomerPortalCodeClearRequest = new CustomerPortalCodeClearRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalCodeClearReply$Type extends MessageType<CustomerPortalCodeClearReply> {
    constructor() {
        super("CustomerPortalCodeClearReply", []);
    }
    create(value?: PartialMessage<CustomerPortalCodeClearReply>): CustomerPortalCodeClearReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalCodeClearReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalCodeClearReply): CustomerPortalCodeClearReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalCodeClearReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalCodeClearReply
 */
export const CustomerPortalCodeClearReply = new CustomerPortalCodeClearReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageGetRequest$Type extends MessageType<CustomerPortalImageGetRequest> {
    constructor() {
        super("CustomerPortalImageGetRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageGetRequest>): CustomerPortalImageGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageGetRequest): CustomerPortalImageGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageGetRequest
 */
export const CustomerPortalImageGetRequest = new CustomerPortalImageGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageGetReply$Type extends MessageType<CustomerPortalImageGetReply> {
    constructor() {
        super("CustomerPortalImageGetReply", [
            { no: 1, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomerPortalImageGetReply_Image }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageGetReply>): CustomerPortalImageGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.images = [];
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageGetReply): CustomerPortalImageGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CustomerPortalImageGetReply.Image images */ 1:
                    message.images.push(CustomerPortalImageGetReply_Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CustomerPortalImageGetReply.Image images = 1; */
        for (let i = 0; i < message.images.length; i++)
            CustomerPortalImageGetReply_Image.internalBinaryWrite(message.images[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageGetReply
 */
export const CustomerPortalImageGetReply = new CustomerPortalImageGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageGetReply_Image$Type extends MessageType<CustomerPortalImageGetReply_Image> {
    constructor() {
        super("CustomerPortalImageGetReply.Image", [
            { no: 1, name: "image_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sort_sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageGetReply_Image>): CustomerPortalImageGetReply_Image {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imageId = "";
        message.path = "";
        message.sortSequence = 0;
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageGetReply_Image>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageGetReply_Image): CustomerPortalImageGetReply_Image {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image_id */ 1:
                    message.imageId = reader.string();
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                case /* int64 sort_sequence */ 3:
                    message.sortSequence = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageGetReply_Image, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image_id = 1; */
        if (message.imageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imageId);
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        /* int64 sort_sequence = 3; */
        if (message.sortSequence !== 0)
            writer.tag(3, WireType.Varint).int64(message.sortSequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageGetReply.Image
 */
export const CustomerPortalImageGetReply_Image = new CustomerPortalImageGetReply_Image$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageCreateRequest$Type extends MessageType<CustomerPortalImageCreateRequest> {
    constructor() {
        super("CustomerPortalImageCreateRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sort_sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageCreateRequest>): CustomerPortalImageCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        message.path = "";
        message.sortSequence = 0;
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageCreateRequest): CustomerPortalImageCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                case /* int64 sort_sequence */ 3:
                    message.sortSequence = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        /* int64 sort_sequence = 3; */
        if (message.sortSequence !== 0)
            writer.tag(3, WireType.Varint).int64(message.sortSequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageCreateRequest
 */
export const CustomerPortalImageCreateRequest = new CustomerPortalImageCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageCreateReply$Type extends MessageType<CustomerPortalImageCreateReply> {
    constructor() {
        super("CustomerPortalImageCreateReply", [
            { no: 1, name: "image_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageCreateReply>): CustomerPortalImageCreateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imageId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageCreateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageCreateReply): CustomerPortalImageCreateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image_id */ 1:
                    message.imageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageCreateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image_id = 1; */
        if (message.imageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageCreateReply
 */
export const CustomerPortalImageCreateReply = new CustomerPortalImageCreateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageDeleteRequest$Type extends MessageType<CustomerPortalImageDeleteRequest> {
    constructor() {
        super("CustomerPortalImageDeleteRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageDeleteRequest>): CustomerPortalImageDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        message.imageId = "";
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageDeleteRequest): CustomerPortalImageDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                case /* string image_id */ 2:
                    message.imageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        /* string image_id = 2; */
        if (message.imageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageDeleteRequest
 */
export const CustomerPortalImageDeleteRequest = new CustomerPortalImageDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageDeleteReply$Type extends MessageType<CustomerPortalImageDeleteReply> {
    constructor() {
        super("CustomerPortalImageDeleteReply", []);
    }
    create(value?: PartialMessage<CustomerPortalImageDeleteReply>): CustomerPortalImageDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageDeleteReply): CustomerPortalImageDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalImageDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageDeleteReply
 */
export const CustomerPortalImageDeleteReply = new CustomerPortalImageDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageUpdateRequest$Type extends MessageType<CustomerPortalImageUpdateRequest> {
    constructor() {
        super("CustomerPortalImageUpdateRequest", [
            { no: 1, name: "customer_portal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sort_sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CustomerPortalImageUpdateRequest>): CustomerPortalImageUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerPortalId = "";
        message.imageId = "";
        message.path = "";
        message.sortSequence = 0;
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageUpdateRequest): CustomerPortalImageUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_portal_id */ 1:
                    message.customerPortalId = reader.string();
                    break;
                case /* string image_id */ 2:
                    message.imageId = reader.string();
                    break;
                case /* string path */ 3:
                    message.path = reader.string();
                    break;
                case /* int64 sort_sequence */ 4:
                    message.sortSequence = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomerPortalImageUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_portal_id = 1; */
        if (message.customerPortalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerPortalId);
        /* string image_id = 2; */
        if (message.imageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageId);
        /* string path = 3; */
        if (message.path !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.path);
        /* int64 sort_sequence = 4; */
        if (message.sortSequence !== 0)
            writer.tag(4, WireType.Varint).int64(message.sortSequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageUpdateRequest
 */
export const CustomerPortalImageUpdateRequest = new CustomerPortalImageUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomerPortalImageUpdateReply$Type extends MessageType<CustomerPortalImageUpdateReply> {
    constructor() {
        super("CustomerPortalImageUpdateReply", []);
    }
    create(value?: PartialMessage<CustomerPortalImageUpdateReply>): CustomerPortalImageUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CustomerPortalImageUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomerPortalImageUpdateReply): CustomerPortalImageUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CustomerPortalImageUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomerPortalImageUpdateReply
 */
export const CustomerPortalImageUpdateReply = new CustomerPortalImageUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service CustomerPortalService
 */
export const CustomerPortalService = new ServiceType("CustomerPortalService", [
    { name: "CustomerPortalGet", options: {}, I: CustomerPortalGetRequest, O: CustomerPortalGetReply },
    { name: "CustomerPortalCreate", options: {}, I: CustomerPortalCreateRequest, O: CustomerPortalCreateReply },
    { name: "CustomerPortalUpdate", options: {}, I: CustomerPortalUpdateRequest, O: CustomerPortalUpdateReply },
    { name: "CustomerPortalDelete", options: {}, I: CustomerPortalDeleteRequest, O: CustomerPortalDeleteReply },
    { name: "CustomerPortalDomainGet", options: {}, I: CustomerPortalDomainGetRequest, O: CustomerPortalDomainGetReply },
    { name: "CustomerPortalDomainCreate", options: {}, I: CustomerPortalDomainCreateRequest, O: CustomerPortalDomainCreateReply },
    { name: "CustomerPortalDomainDelete", options: {}, I: CustomerPortalDomainDeleteRequest, O: CustomerPortalDomainDeleteReply },
    { name: "CustomerPortalCodeSet", options: {}, I: CustomerPortalCodeSetRequest, O: CustomerPortalCodeSetReply },
    { name: "CustomerPortalCodeClear", options: {}, I: CustomerPortalCodeClearRequest, O: CustomerPortalCodeClearReply },
    { name: "CustomerPortalImageGet", options: {}, I: CustomerPortalImageGetRequest, O: CustomerPortalImageGetReply },
    { name: "CustomerPortalImageCreate", options: {}, I: CustomerPortalImageCreateRequest, O: CustomerPortalImageCreateReply },
    { name: "CustomerPortalImageDelete", options: {}, I: CustomerPortalImageDeleteRequest, O: CustomerPortalImageDeleteReply },
    { name: "CustomerPortalImageUpdate", options: {}, I: CustomerPortalImageUpdateRequest, O: CustomerPortalImageUpdateReply }
]);
