// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/port_of_entry.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PortOfEntryModel } from "./models/model_port_of_entry";
/**
 * @generated from protobuf message PortOfEntryGetRequest
 */
export interface PortOfEntryGetRequest {
}
/**
 * @generated from protobuf message PortOfEntryGetReply
 */
export interface PortOfEntryGetReply {
    /**
     * @generated from protobuf field: repeated PortOfEntryModel port_of_entries = 1;
     */
    portOfEntries: PortOfEntryModel[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PortOfEntryGetRequest$Type extends MessageType<PortOfEntryGetRequest> {
    constructor() {
        super("PortOfEntryGetRequest", []);
    }
    create(value?: PartialMessage<PortOfEntryGetRequest>): PortOfEntryGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PortOfEntryGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PortOfEntryGetRequest): PortOfEntryGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PortOfEntryGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PortOfEntryGetRequest
 */
export const PortOfEntryGetRequest = new PortOfEntryGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortOfEntryGetReply$Type extends MessageType<PortOfEntryGetReply> {
    constructor() {
        super("PortOfEntryGetReply", [
            { no: 1, name: "port_of_entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PortOfEntryModel }
        ]);
    }
    create(value?: PartialMessage<PortOfEntryGetReply>): PortOfEntryGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.portOfEntries = [];
        if (value !== undefined)
            reflectionMergePartial<PortOfEntryGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PortOfEntryGetReply): PortOfEntryGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PortOfEntryModel port_of_entries */ 1:
                    message.portOfEntries.push(PortOfEntryModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PortOfEntryGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PortOfEntryModel port_of_entries = 1; */
        for (let i = 0; i < message.portOfEntries.length; i++)
            PortOfEntryModel.internalBinaryWrite(message.portOfEntries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PortOfEntryGetReply
 */
export const PortOfEntryGetReply = new PortOfEntryGetReply$Type();
/**
 * @generated ServiceType for protobuf service PortOfEntryService
 */
export const PortOfEntryService = new ServiceType("PortOfEntryService", [
    { name: "PortOfEntryGet", options: {}, I: PortOfEntryGetRequest, O: PortOfEntryGetReply }
]);
