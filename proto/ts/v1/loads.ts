// @generated by protobuf-ts 2.9.4 with parameter long_type_number,generate_dependencies,ts_nocheck,output_typescript
// @generated from protobuf file "v1/loads.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ManifestRouteModel_EtaState } from "./models/model_manifest";
import { ManifestRouteModel_Stop } from "./models/model_manifest";
import { FilterModel_Filter } from "./models/model_filter_type";
import { LoadModel_InvoiceType } from "./models/model_load";
import { NoteModel_EntityNote } from "./models/model_note";
import { ManifestModel_Manifest } from "./models/model_manifest";
import { LoadModel_Status } from "./models/model_load";
import { LoadModel_InvoiceStatus } from "./models/model_load";
/**
 * @generated from protobuf message LoadData
 */
export interface LoadData {
}
/**
 * @generated from protobuf message LoadData.Load
 */
export interface LoadData_Load {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string friendly_id = 2;
     */
    friendlyId: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
    /**
     * @generated from protobuf field: string dispatcher_id = 6;
     */
    dispatcherId: string;
    /**
     * @generated from protobuf field: string broker_id = 7;
     */
    brokerId: string;
    /**
     * @generated from protobuf field: string customer_id = 8;
     */
    customerId: string;
    /**
     * @generated from protobuf field: string invoice_amount = 9;
     */
    invoiceAmount: string;
    /**
     * @generated from protobuf field: string company_net = 10;
     */
    companyNet: string;
    /**
     * @generated from protobuf field: string driver_net = 11;
     */
    driverNet: string;
    /**
     * @generated from protobuf field: string dispatcher_net = 12;
     */
    dispatcherNet: string;
    /**
     * @generated from protobuf field: bool shipper_confirmed = 13;
     */
    shipperConfirmed: boolean;
    /**
     * @generated from protobuf field: bool driver_confirmed = 14;
     */
    driverConfirmed: boolean;
    /**
     * @generated from protobuf field: bool invoice_paperwork_verified = 15;
     */
    invoicePaperworkVerified: boolean;
    /**
     * @generated from protobuf field: string note = 16;
     */
    note: string;
    /**
     * @generated from protobuf field: int64 total_miles = 17;
     */
    totalMiles: number;
    /**
     * @generated from protobuf field: int64 loaded_miles = 18;
     */
    loadedMiles: number;
    /**
     * @generated from protobuf field: int64 empty_miles = 19;
     */
    emptyMiles: number;
    /**
     * @generated from protobuf field: double rate_per_mile = 20;
     */
    ratePerMile: number;
    /**
     * @generated from protobuf field: string rate_per_mile_formatted = 21;
     */
    ratePerMileFormatted: string;
    /**
     * @generated from protobuf field: string invoice_factoring_note = 22;
     */
    invoiceFactoringNote: string;
    /**
     * @generated from protobuf field: string invoice_factoring_company_id = 23;
     */
    invoiceFactoringCompanyId: string;
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus invoice_status = 24;
     */
    invoiceStatus: LoadModel_InvoiceStatus;
    /**
     * @generated from protobuf field: LoadModel.Status status = 25;
     */
    status: LoadModel_Status;
    /**
     * @generated from protobuf field: string commodity = 26;
     */
    commodity: string;
    /**
     * @generated from protobuf field: double weight = 27;
     */
    weight: number;
    /**
     * @generated from protobuf field: string weight_formatted = 28;
     */
    weightFormatted: string;
    /**
     * @generated from protobuf field: double temperature = 29;
     */
    temperature: number;
    /**
     * @generated from protobuf field: string temperature_formatted = 30;
     */
    temperatureFormatted: string;
    /**
     * @generated from protobuf field: string equipment_id = 31;
     */
    equipmentId: string;
    /**
     * @generated from protobuf field: string type_id = 32;
     */
    typeId: string;
    /**
     * string invoice_payment_total_amount = 33;
     *
     * @generated from protobuf field: double gross_amount = 34;
     */
    grossAmount: number;
    /**
     * @generated from protobuf field: string gross_amount_formatted = 35;
     */
    grossAmountFormatted: string;
    /**
     * @generated from protobuf field: bool driver_override_gross_amount = 36;
     */
    driverOverrideGrossAmount: boolean;
    /**
     * @generated from protobuf field: string driver_overriden_gross_amount_formatted = 37;
     */
    driverOverridenGrossAmountFormatted: string;
    /**
     * @generated from protobuf field: double driver_overriden_gross_amount = 38;
     */
    driverOverridenGrossAmount: number;
    /**
     * @generated from protobuf field: repeated ManifestModel.Manifest manifests = 39;
     */
    manifests: ManifestModel_Manifest[];
    /**
     * @generated from protobuf field: string active_manifest_id = 40;
     */
    activeManifestId: string;
    /**
     * @generated from protobuf field: repeated NoteModel.EntityNote invoice_billing_notes = 41;
     */
    invoiceBillingNotes: NoteModel_EntityNote[];
    /**
     * @generated from protobuf field: int64 invoice_billing_last_update_age = 42;
     */
    invoiceBillingLastUpdateAge: number;
    /**
     * @generated from protobuf field: int64 days_since_completed = 43;
     */
    daysSinceCompleted: number;
    /**
     * @generated from protobuf field: int64 stops_count = 44;
     */
    stopsCount: number;
    /**
     * @generated from protobuf field: string invoicing_company_id = 45;
     */
    invoicingCompanyId: string;
}
/**
 * @generated from protobuf message RetrieveLoadRequest
 */
export interface RetrieveLoadRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message RetrieveLoadReply
 */
export interface RetrieveLoadReply {
    /**
     * @generated from protobuf field: LoadData.Load load = 1;
     */
    load?: LoadData_Load;
}
/**
 * //////////////////////
 * / OrderUnarchivedGet //
 * Use it to get orders that are not archived, all orders, no filtering //
 * //////////////////////
 *
 * @generated from protobuf message OrderUnarchivedGetRequest
 */
export interface OrderUnarchivedGetRequest {
}
/**
 * @generated from protobuf message OrderUnarchivedGetReply
 */
export interface OrderUnarchivedGetReply {
    /**
     * @generated from protobuf field: repeated LoadData.Load orders = 1;
     */
    orders: LoadData_Load[];
}
/**
 * //////////////////////
 * / GetLoads ////////////
 * //////////////////////
 *
 * @generated from protobuf message GetLoadsRequest
 */
export interface GetLoadsRequest {
    /**
     * required
     *
     * @generated from protobuf field: int64 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int64 per_page = 2;
     */
    perPage: number;
    /**
     * @generated from protobuf field: GetLoadsRequest.SortBy sort_by = 3;
     */
    sortBy: GetLoadsRequest_SortBy;
    /**
     * optional
     *
     * @generated from protobuf field: optional string search = 4;
     */
    search?: string;
    /**
     * @generated from protobuf field: repeated LoadModel.Status statuses = 5;
     */
    statuses: LoadModel_Status[];
    /**
     * @generated from protobuf field: repeated LoadModel.InvoiceStatus invoice_statuses = 6;
     */
    invoiceStatuses: LoadModel_InvoiceStatus[];
    /**
     * @generated from protobuf field: repeated string dispatcher_ids = 7;
     */
    dispatcherIds: string[];
    /**
     * @generated from protobuf field: repeated string broker_ids = 8;
     */
    brokerIds: string[];
    /**
     * @generated from protobuf field: repeated string customer_ids = 9;
     */
    customerIds: string[];
    /**
     * @generated from protobuf field: repeated string driver_ids = 10;
     */
    driverIds: string[];
    /**
     * @generated from protobuf field: repeated string truck_ids = 11;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: optional string start_date = 12;
     */
    startDate?: string;
    /**
     * @generated from protobuf field: optional string end_date = 13;
     */
    endDate?: string;
    /**
     * @generated from protobuf field: optional bool late_pickups = 14;
     */
    latePickups?: boolean;
    /**
     * @generated from protobuf field: optional bool late_deliveries = 15;
     */
    lateDeliveries?: boolean;
    /**
     * @generated from protobuf field: optional bool gps_inactive = 16;
     */
    gpsInactive?: boolean;
    /**
     * @generated from protobuf field: optional LoadModel.InvoiceType invoice_type = 17;
     */
    invoiceType?: LoadModel_InvoiceType;
}
/**
 * @generated from protobuf enum GetLoadsRequest.SortBy
 */
export enum GetLoadsRequest_SortBy {
    /**
     * @generated from protobuf enum value: SORT_BY_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * default
     *
     * @generated from protobuf enum value: SORT_BY_LATEST = 1;
     */
    LATEST = 1,
    /**
     * used for active loads
     *
     * @generated from protobuf enum value: SORT_BY_OLDEST = 2;
     */
    OLDEST = 2,
    /**
     * used for smart dispatch [booked, assigned, in_progress, delivered]
     *
     * @generated from protobuf enum value: SORT_BY_SMART_DISPATCH = 3;
     */
    SMART_DISPATCH = 3,
    /**
     * @generated from protobuf enum value: SORT_BY_GROSS_AMOUNT_ASC = 4;
     */
    GROSS_AMOUNT_ASC = 4,
    /**
     * @generated from protobuf enum value: SORT_BY_GROSS_AMOUNT_DESC = 5;
     */
    GROSS_AMOUNT_DESC = 5,
    /**
     * @generated from protobuf enum value: SORT_BY_TRUCK_NUMBER_ASC = 6;
     */
    TRUCK_NUMBER_ASC = 6,
    /**
     * @generated from protobuf enum value: SORT_BY_TRUCK_NUMBER_DESC = 7;
     */
    TRUCK_NUMBER_DESC = 7,
    /**
     * @generated from protobuf enum value: SORT_BY_LOADED_MILES_ASC = 8;
     */
    LOADED_MILES_ASC = 8,
    /**
     * @generated from protobuf enum value: SORT_BY_LOADED_MILES_DESC = 9;
     */
    LOADED_MILES_DESC = 9
}
/**
 * @generated from protobuf message GetLoadsReply
 */
export interface GetLoadsReply {
    /**
     * @generated from protobuf field: repeated LoadData.Load loads = 1;
     */
    loads: LoadData_Load[];
    /**
     * @generated from protobuf field: GetLoadsReply.Totals totals = 2;
     */
    totals?: GetLoadsReply_Totals;
}
/**
 * @generated from protobuf message GetLoadsReply.Totals
 */
export interface GetLoadsReply_Totals {
    /**
     * @generated from protobuf field: string total_invoice_amount_formatted = 1;
     */
    totalInvoiceAmountFormatted: string;
    /**
     * @generated from protobuf field: string total_gross_amount_formatted = 2;
     */
    totalGrossAmountFormatted: string;
    /**
     * @generated from protobuf field: string total_driver_net_formatted = 3;
     */
    totalDriverNetFormatted: string;
    /**
     * @generated from protobuf field: string average_rate_per_mile_formatted = 4;
     */
    averageRatePerMileFormatted: string;
    /**
     * @generated from protobuf field: int64 total_loaded_miles = 5;
     */
    totalLoadedMiles: number;
    /**
     * @generated from protobuf field: int64 total_empty_miles = 6;
     */
    totalEmptyMiles: number;
}
/**
 * @generated from protobuf message LoadStatsGetRequest
 */
export interface LoadStatsGetRequest {
    /**
     * @generated from protobuf field: optional string start_date = 1;
     */
    startDate?: string;
    /**
     * @generated from protobuf field: optional string end_date = 2;
     */
    endDate?: string;
    /**
     * @generated from protobuf field: repeated string truck_ids = 3;
     */
    truckIds: string[];
    /**
     * @generated from protobuf field: repeated string driver_ids = 4;
     */
    driverIds: string[];
    /**
     * @generated from protobuf field: repeated string trailer_ids = 5;
     */
    trailerIds: string[];
    /**
     * @generated from protobuf field: repeated string broker_ids = 6;
     */
    brokerIds: string[];
    /**
     * @generated from protobuf field: repeated string dispatcher_ids = 7;
     */
    dispatcherIds: string[];
    /**
     * @generated from protobuf field: repeated LoadModel.Status statuses = 8;
     */
    statuses: LoadModel_Status[];
    /**
     * @generated from protobuf field: repeated LoadModel.InvoiceStatus invoice_statuses = 9;
     */
    invoiceStatuses: LoadModel_InvoiceStatus[];
    /**
     * @generated from protobuf field: optional LoadModel.InvoiceType invoice_type = 10;
     */
    invoiceType?: LoadModel_InvoiceType;
}
/**
 * @generated from protobuf message LoadStatsGetReply
 */
export interface LoadStatsGetReply {
    /**
     * @generated from protobuf field: int64 total_loads_count = 1;
     */
    totalLoadsCount: number;
    /**
     * @generated from protobuf field: repeated FilterModel.Filter filters = 2;
     */
    filters: FilterModel_Filter[];
}
/**
 * @generated from protobuf message GetLastLoadRequest
 */
export interface GetLastLoadRequest {
    /**
     * @generated from protobuf field: GetLastLoadRequest.Last_Load_Entity entity = 1;
     */
    entity: GetLastLoadRequest_Last_Load_Entity;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
}
/**
 * @generated from protobuf enum GetLastLoadRequest.Last_Load_Entity
 */
export enum GetLastLoadRequest_Last_Load_Entity {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: TRUCK = 1;
     */
    TRUCK = 1,
    /**
     * @generated from protobuf enum value: DRIVER = 2;
     */
    DRIVER = 2,
    /**
     * @generated from protobuf enum value: TRAILER = 3;
     */
    TRAILER = 3
}
/**
 * @generated from protobuf message GetLastLoadResponse
 */
export interface GetLastLoadResponse {
    /**
     * @generated from protobuf field: string last_load_datetime = 1;
     */
    lastLoadDatetime: string;
}
/**
 * @generated from protobuf message GetLoadEtaStatesRequest
 */
export interface GetLoadEtaStatesRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message GetLoadEtaStatesReply
 */
export interface GetLoadEtaStatesReply {
    /**
     * @generated from protobuf field: repeated GetLoadEtaStatesReply.EtaState load_eta_states = 1;
     */
    loadEtaStates: GetLoadEtaStatesReply_EtaState[];
}
/**
 * @generated from protobuf message GetLoadEtaStatesReply.EtaState
 */
export interface GetLoadEtaStatesReply_EtaState {
    /**
     * @generated from protobuf field: string stop_id = 1;
     */
    stopId: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
    /**
     * @generated from protobuf field: string state_id = 3;
     */
    stateId: string;
    /**
     * @generated from protobuf field: int64 sequence = 4;
     */
    sequence: number;
    /**
     * @generated from protobuf field: GetLoadEtaStatesReply.EtaState.Type type = 5;
     */
    type: GetLoadEtaStatesReply_EtaState_Type;
    /**
     * @generated from protobuf field: double stop_lat = 6;
     */
    stopLat: number;
    /**
     * @generated from protobuf field: double stop_lon = 7;
     */
    stopLon: number;
    /**
     * @generated from protobuf field: double truck_lat = 8;
     */
    truckLat: number;
    /**
     * @generated from protobuf field: double truck_lon = 9;
     */
    truckLon: number;
    /**
     * @generated from protobuf field: string arrives_at = 10;
     */
    arrivesAt: string;
    /**
     * @generated from protobuf field: string departs_at = 11;
     */
    departsAt: string;
    /**
     * @generated from protobuf field: int64 eta = 12;
     */
    eta: number;
    /**
     * @generated from protobuf field: int64 loads_in_truck = 13;
     */
    loadsInTruck: number;
    /**
     * @generated from protobuf field: double distance = 14;
     */
    distance: number;
    /**
     * @generated from protobuf field: int64 duration = 15;
     */
    duration: number;
    /**
     * @generated from protobuf field: int64 deroute = 16;
     */
    deroute: number;
    /**
     * @generated from protobuf field: int64 lateness = 17;
     */
    lateness: number;
    /**
     * @generated from protobuf field: int64 earliness = 18;
     */
    earliness: number;
    /**
     * @generated from protobuf field: string created_at = 19;
     */
    createdAt: string;
}
/**
 * @generated from protobuf enum GetLoadEtaStatesReply.EtaState.Type
 */
export enum GetLoadEtaStatesReply_EtaState_Type {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PICKUP = 1;
     */
    PICKUP = 1,
    /**
     * @generated from protobuf enum value: DROPOFF = 2;
     */
    DROPOFF = 2
}
/**
 * @generated from protobuf message LoadUpdateLoadedMilesRequest
 */
export interface LoadUpdateLoadedMilesRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: int64 loaded_miles = 2;
     */
    loadedMiles: number;
}
/**
 * @generated from protobuf message LoadUpdateLoadedMilesReply
 */
export interface LoadUpdateLoadedMilesReply {
}
/**
 * @generated from protobuf message LoadUpdateEmptyMilesRequest
 */
export interface LoadUpdateEmptyMilesRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: int64 empty_miles = 2;
     */
    emptyMiles: number;
}
/**
 * @generated from protobuf message LoadUpdateEmptyMilesReply
 */
export interface LoadUpdateEmptyMilesReply {
}
/**
 * @generated from protobuf message LoadUpdateRequest
 */
export interface LoadUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string type_id = 2;
     */
    typeId: string;
    /**
     * @generated from protobuf field: string equipment_id = 3;
     */
    equipmentId: string;
    /**
     * @generated from protobuf field: string note = 6;
     */
    note: string;
    /**
     * @generated from protobuf field: bool shipper_confirmed = 7;
     */
    shipperConfirmed: boolean;
    /**
     * @generated from protobuf field: bool driver_confirmed = 8;
     */
    driverConfirmed: boolean;
    /**
     * @generated from protobuf field: double weight = 9;
     */
    weight: number;
    /**
     * @generated from protobuf field: string commodity = 10;
     */
    commodity: string;
}
/**
 * @generated from protobuf message LoadUpdateReply
 */
export interface LoadUpdateReply {
}
/**
 * @generated from protobuf message LoadTemperatureUpdateRequest
 */
export interface LoadTemperatureUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: double temperature = 2;
     */
    temperature: number;
}
/**
 * @generated from protobuf message LoadTemperatureUpdateReply
 */
export interface LoadTemperatureUpdateReply {
}
/**
 * @generated from protobuf message LoadDispatcherUpdateRequest
 */
export interface LoadDispatcherUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string dispatcher_id = 2;
     */
    dispatcherId: string;
}
/**
 * @generated from protobuf message LoadDispatcherUpdateReply
 */
export interface LoadDispatcherUpdateReply {
}
/**
 * @generated from protobuf message LoadInvoiceFactoringCompanyUpdateRequest
 */
export interface LoadInvoiceFactoringCompanyUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string invoice_factoring_company_id = 2;
     */
    invoiceFactoringCompanyId: string;
}
/**
 * @generated from protobuf message LoadInvoiceFactoringCompanyUpdateReply
 */
export interface LoadInvoiceFactoringCompanyUpdateReply {
}
/**
 * @generated from protobuf message LoadInvoiceDownloadRequest
 */
export interface LoadInvoiceDownloadRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadInvoiceDownloadReply
 */
export interface LoadInvoiceDownloadReply {
    /**
     * @generated from protobuf field: string file_path = 1;
     */
    filePath: string;
    /**
     * @generated from protobuf field: string filename = 2;
     */
    filename: string;
}
/**
 * @generated from protobuf message LoadInvoiceBatchDownloadRequest
 */
export interface LoadInvoiceBatchDownloadRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
}
/**
 * @generated from protobuf message LoadInvoiceBatchDownloadReply
 */
export interface LoadInvoiceBatchDownloadReply {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
}
/**
 * @generated from protobuf message LoadInvoiceStatusBatchUpdateRequest
 */
export interface LoadInvoiceStatusBatchUpdateRequest {
    /**
     * @generated from protobuf field: repeated string load_ids = 1;
     */
    loadIds: string[];
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus new_invoice_status = 2;
     */
    newInvoiceStatus: LoadModel_InvoiceStatus;
}
/**
 * @generated from protobuf message LoadInvoiceStatusBatchUpdateReply
 */
export interface LoadInvoiceStatusBatchUpdateReply {
}
/**
 * @generated from protobuf message OrderInvoiceBatchSendRequest
 */
export interface OrderInvoiceBatchSendRequest {
    /**
     * @generated from protobuf field: repeated OrderInvoiceBatchSendRequest.Order orders = 1;
     */
    orders: OrderInvoiceBatchSendRequest_Order[];
    /**
     * @generated from protobuf field: bool send_to_company_cc_emails = 2;
     */
    sendToCompanyCcEmails: boolean;
}
/**
 * @generated from protobuf message OrderInvoiceBatchSendRequest.Order
 */
export interface OrderInvoiceBatchSendRequest_Order {
    /**
     * @generated from protobuf field: string order_id = 1;
     */
    orderId: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string subject = 4;
     */
    subject: string;
    /**
     * @generated from protobuf field: string body = 5;
     */
    body: string;
}
/**
 * @generated from protobuf message OrderInvoiceBatchSendReply
 */
export interface OrderInvoiceBatchSendReply {
}
/**
 * @generated from protobuf message LoadDeleteRequest
 */
export interface LoadDeleteRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadDeleteReply
 */
export interface LoadDeleteReply {
}
/**
 * @generated from protobuf message OverrideGrossAmountRequest
 */
export interface OverrideGrossAmountRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: double gross_amount = 2;
     */
    grossAmount: number;
}
/**
 * @generated from protobuf message OverrideGrossAmountReply
 */
export interface OverrideGrossAmountReply {
}
/**
 * @generated from protobuf message RestoreGrossAmountRequest
 */
export interface RestoreGrossAmountRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message RestoreGrossAmountReply
 */
export interface RestoreGrossAmountReply {
}
/**
 * Tracking Link
 *
 * @generated from protobuf message LoadCreateTrackingLinkRequest
 */
export interface LoadCreateTrackingLinkRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadCreateTrackingLinkReply
 */
export interface LoadCreateTrackingLinkReply {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * Revoke Tracking Link
 *
 * @generated from protobuf message LoadRevokeTrackingLinkRequest
 */
export interface LoadRevokeTrackingLinkRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadRevokeTrackingLinkReply
 */
export interface LoadRevokeTrackingLinkReply {
}
/**
 * Get Tracking Link
 *
 * @generated from protobuf message LoadGetTrackingLinkRequest
 */
export interface LoadGetTrackingLinkRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadGetTrackingLinkReply
 */
export interface LoadGetTrackingLinkReply {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: bool can_view_eta = 2;
     */
    canViewEta: boolean;
    /**
     * @generated from protobuf field: bool can_view_documents = 3;
     */
    canViewDocuments: boolean;
    /**
     * @generated from protobuf field: bool can_view_driver_contact = 4;
     */
    canViewDriverContact: boolean;
    /**
     * @generated from protobuf field: bool can_view_truck_availability = 5;
     */
    canViewTruckAvailability: boolean;
    /**
     * @generated from protobuf field: bool can_chat = 6;
     */
    canChat: boolean;
    /**
     * @generated from protobuf field: bool show_other_load_stops = 7;
     */
    showOtherLoadStops: boolean;
}
/**
 * Update Tracking Link
 *
 * @generated from protobuf message LoadUpdateTrackingLinkRequest
 */
export interface LoadUpdateTrackingLinkRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: bool can_view_eta = 2;
     */
    canViewEta: boolean;
    /**
     * @generated from protobuf field: bool can_view_documents = 3;
     */
    canViewDocuments: boolean;
    /**
     * @generated from protobuf field: bool can_view_driver_contact = 4;
     */
    canViewDriverContact: boolean;
    /**
     * @generated from protobuf field: bool can_view_truck_availability = 5;
     */
    canViewTruckAvailability: boolean;
    /**
     * @generated from protobuf field: bool can_chat = 6;
     */
    canChat: boolean;
    /**
     * @generated from protobuf field: bool show_other_load_stops = 7;
     */
    showOtherLoadStops: boolean;
}
/**
 * @generated from protobuf message LoadUpdateTrackingLinkReply
 */
export interface LoadUpdateTrackingLinkReply {
}
/**
 * @generated from protobuf message LoadAssignTruckRequest
 */
export interface LoadAssignTruckRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string truck_id = 2;
     */
    truckId: string;
}
/**
 * @generated from protobuf message LoadAssignTruckReply
 */
export interface LoadAssignTruckReply {
}
/**
 * @generated from protobuf message LoadUnassignTruckRequest
 */
export interface LoadUnassignTruckRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadUnassignTruckReply
 */
export interface LoadUnassignTruckReply {
}
/**
 * @generated from protobuf message LoadClientReferenceIDCheckDuplicateRequest
 */
export interface LoadClientReferenceIDCheckDuplicateRequest {
    /**
     * @generated from protobuf field: LoadClientReferenceIDCheckDuplicateRequest.EntityType entity_type = 1;
     */
    entityType: LoadClientReferenceIDCheckDuplicateRequest_EntityType;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
    /**
     * @generated from protobuf field: string reference_id = 3;
     */
    referenceId: string;
}
/**
 * @generated from protobuf enum LoadClientReferenceIDCheckDuplicateRequest.EntityType
 */
export enum LoadClientReferenceIDCheckDuplicateRequest_EntityType {
    /**
     * @generated from protobuf enum value: BROKER = 0;
     */
    BROKER = 0,
    /**
     * @generated from protobuf enum value: CUSTOMER = 1;
     */
    CUSTOMER = 1
}
/**
 * @generated from protobuf message LoadClientReferenceIDCheckDuplicateReply
 */
export interface LoadClientReferenceIDCheckDuplicateReply {
    /**
     * @generated from protobuf field: bool is_duplicate = 1;
     */
    isDuplicate: boolean;
    /**
     * @generated from protobuf field: string load_id = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string load_friendly_id = 3;
     */
    loadFriendlyId: string;
}
/**
 * @generated from protobuf message LoadClientReferenceIDUpdateRequest
 */
export interface LoadClientReferenceIDUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string new_client_reference_id = 2;
     */
    newClientReferenceId: string;
}
/**
 * @generated from protobuf message LoadClientReferenceIDUpdateReply
 */
export interface LoadClientReferenceIDUpdateReply {
}
/**
 * @generated from protobuf message LoadClientUpdateCheckDuplicateRequest
 */
export interface LoadClientUpdateCheckDuplicateRequest {
    /**
     * @generated from protobuf field: LoadClientUpdateCheckDuplicateRequest.EntityType entity_type = 1;
     */
    entityType: LoadClientUpdateCheckDuplicateRequest_EntityType;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
}
/**
 * @generated from protobuf enum LoadClientUpdateCheckDuplicateRequest.EntityType
 */
export enum LoadClientUpdateCheckDuplicateRequest_EntityType {
    /**
     * @generated from protobuf enum value: BROKER = 0;
     */
    BROKER = 0,
    /**
     * @generated from protobuf enum value: CUSTOMER = 1;
     */
    CUSTOMER = 1
}
/**
 * @generated from protobuf message LoadClientUpdateCheckDuplicateReply
 */
export interface LoadClientUpdateCheckDuplicateReply {
    /**
     * @generated from protobuf field: bool is_duplicate = 1;
     */
    isDuplicate: boolean;
    /**
     * @generated from protobuf field: string load_id = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf field: int64 load_friendly_id = 3;
     */
    loadFriendlyId: number;
}
/**
 * @generated from protobuf message LoadClientUpdateRequest
 */
export interface LoadClientUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string entity_id = 2;
     */
    entityId: string;
    /**
     * @generated from protobuf field: LoadClientUpdateRequest.EntityType entity_type = 3;
     */
    entityType: LoadClientUpdateRequest_EntityType;
}
/**
 * @generated from protobuf enum LoadClientUpdateRequest.EntityType
 */
export enum LoadClientUpdateRequest_EntityType {
    /**
     * @generated from protobuf enum value: BROKER = 0;
     */
    BROKER = 0,
    /**
     * @generated from protobuf enum value: CUSTOMER = 1;
     */
    CUSTOMER = 1
}
/**
 * @generated from protobuf message LoadClientUpdateReply
 */
export interface LoadClientUpdateReply {
}
/**
 * @generated from protobuf message LoadStatusUpdateRequest
 */
export interface LoadStatusUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: LoadModel.Status new_status = 2;
     */
    newStatus: LoadModel_Status;
}
/**
 * @generated from protobuf message LoadStatusUpdateReply
 */
export interface LoadStatusUpdateReply {
}
/**
 * @generated from protobuf message LoadInvoiceStatusUpdateRequest
 */
export interface LoadInvoiceStatusUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: LoadModel.InvoiceStatus new_invoice_status = 2;
     */
    newInvoiceStatus: LoadModel_InvoiceStatus;
}
/**
 * @generated from protobuf message LoadInvoiceStatusUpdateReply
 */
export interface LoadInvoiceStatusUpdateReply {
}
/**
 * @generated from protobuf message LoadInvoicePaperworkVerifiedUpdateRequest
 */
export interface LoadInvoicePaperworkVerifiedUpdateRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: bool invoice_paperwork_verified = 2;
     */
    invoicePaperworkVerified: boolean;
}
/**
 * @generated from protobuf message LoadInvoicePaperworkVerifiedUpdateReply
 */
export interface LoadInvoicePaperworkVerifiedUpdateReply {
}
/**
 * @generated from protobuf message LoadTruckRouteRetrieveRequest
 */
export interface LoadTruckRouteRetrieveRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message LoadTruckRouteRetrieveReply
 */
export interface LoadTruckRouteRetrieveReply {
    /**
     * @generated from protobuf field: string polyline_from_truck_location_to_first_active_stop = 1;
     */
    polylineFromTruckLocationToFirstActiveStop: string;
    /**
     * @generated from protobuf field: repeated ManifestRouteModel.Stop stops = 2;
     */
    stops: ManifestRouteModel_Stop[];
    /**
     * @generated from protobuf field: repeated ManifestRouteModel.EtaState eta_states = 3;
     */
    etaStates: ManifestRouteModel_EtaState[];
}
/**
 * @generated from protobuf message OrderInvoiceSendRequest
 */
export interface OrderInvoiceSendRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: string recipient_email = 2;
     */
    recipientEmail: string;
    /**
     * @generated from protobuf field: string recipient_name = 3;
     */
    recipientName: string;
    /**
     * @generated from protobuf field: string subject = 4;
     */
    subject: string;
    /**
     * @generated from protobuf field: string body = 5;
     */
    body: string;
    /**
     * @generated from protobuf field: repeated string document_type_ids = 6;
     */
    documentTypeIds: string[];
    /**
     * @generated from protobuf field: repeated string cc_user_ids = 7;
     */
    ccUserIds: string[];
    /**
     * @generated from protobuf field: repeated string customer_user_ids = 8;
     */
    customerUserIds: string[];
    /**
     * @generated from protobuf field: repeated string broker_user_ids = 9;
     */
    brokerUserIds: string[];
    /**
     * @generated from protobuf field: bool send_to_company_cc_emails = 10;
     */
    sendToCompanyCcEmails: boolean;
}
/**
 * @generated from protobuf message OrderInvoiceSendReply
 */
export interface OrderInvoiceSendReply {
}
/**
 * @generated from protobuf message OrderCustomerUserAssignRequest
 */
export interface OrderCustomerUserAssignRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: repeated string user_ids = 2;
     */
    userIds: string[];
}
/**
 * @generated from protobuf message OrderCustomerUserAssignReply
 */
export interface OrderCustomerUserAssignReply {
}
/**
 * @generated from protobuf message OrderCustomerUserRemoveRequest
 */
export interface OrderCustomerUserRemoveRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: repeated string user_ids = 2;
     */
    userIds: string[];
}
/**
 * @generated from protobuf message OrderCustomerUserRemoveReply
 */
export interface OrderCustomerUserRemoveReply {
}
/**
 * @generated from protobuf message OrderBrokerUserAssignRequest
 */
export interface OrderBrokerUserAssignRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: repeated string user_ids = 2;
     */
    userIds: string[];
}
/**
 * @generated from protobuf message OrderBrokerUserAssignReply
 */
export interface OrderBrokerUserAssignReply {
}
/**
 * @generated from protobuf message OrderBrokerUserRemoveRequest
 */
export interface OrderBrokerUserRemoveRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
    /**
     * @generated from protobuf field: repeated string user_ids = 2;
     */
    userIds: string[];
}
/**
 * @generated from protobuf message OrderBrokerUserRemoveReply
 */
export interface OrderBrokerUserRemoveReply {
}
/**
 * @generated from protobuf message OrderClientGetRequest
 */
export interface OrderClientGetRequest {
    /**
     * @generated from protobuf field: string load_id = 1;
     */
    loadId: string;
}
/**
 * @generated from protobuf message OrderClientGetReply
 */
export interface OrderClientGetReply {
    /**
     * @generated from protobuf field: OrderClientGetReply.EntityType entity_type = 1;
     */
    entityType: OrderClientGetReply_EntityType;
    /**
     * @generated from protobuf field: repeated string user_ids = 2;
     */
    userIds: string[];
}
/**
 * @generated from protobuf enum OrderClientGetReply.EntityType
 */
export enum OrderClientGetReply_EntityType {
    /**
     * @generated from protobuf enum value: BROKER = 0;
     */
    BROKER = 0,
    /**
     * @generated from protobuf enum value: CUSTOMER = 1;
     */
    CUSTOMER = 1
}
/**
 * //////////////////////
 * OrderInvoicingCompanyUpdate
 * //////////////////////
 *
 * @generated from protobuf message OrderInvoicingCompanyUpdateRequest
 */
export interface OrderInvoicingCompanyUpdateRequest {
    /**
     * @generated from protobuf field: string order_id = 1;
     */
    orderId: string;
    /**
     * @generated from protobuf field: string invoicing_company_id = 2;
     */
    invoicingCompanyId: string;
}
/**
 * @generated from protobuf message OrderInvoicingCompanyUpdateReply
 */
export interface OrderInvoicingCompanyUpdateReply {
}
// //////////////////////
// RetrieveNewFriendlyId
// //////////////////////

/**
 * @generated from protobuf message OrderFriendlyIdUpdateRequest
 */
export interface OrderFriendlyIdUpdateRequest {
    /**
     * @generated from protobuf field: string order_id = 1;
     */
    orderId: string;
}
/**
 * @generated from protobuf message OrderFriendlyIdUpdateReply
 */
export interface OrderFriendlyIdUpdateReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class LoadData$Type extends MessageType<LoadData> {
    constructor() {
        super("LoadData", []);
    }
    create(value?: PartialMessage<LoadData>): LoadData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadData): LoadData {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadData
 */
export const LoadData = new LoadData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadData_Load$Type extends MessageType<LoadData_Load> {
    constructor() {
        super("LoadData.Load", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "friendly_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "dispatcher_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "broker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "invoice_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "company_net", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "driver_net", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "dispatcher_net", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "shipper_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "driver_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "invoice_paperwork_verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "total_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 18, name: "loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 19, name: "empty_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 20, name: "rate_per_mile", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "rate_per_mile_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "invoice_factoring_note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "invoice_factoring_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 25, name: "status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 26, name: "commodity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "weight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 28, name: "weight_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "temperature", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 30, name: "temperature_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "equipment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "gross_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 35, name: "gross_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "driver_override_gross_amount", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 37, name: "driver_overriden_gross_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "driver_overriden_gross_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 39, name: "manifests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestModel_Manifest },
            { no: 40, name: "active_manifest_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "invoice_billing_notes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NoteModel_EntityNote },
            { no: 42, name: "invoice_billing_last_update_age", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 43, name: "days_since_completed", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 44, name: "stops_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 45, name: "invoicing_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadData_Load>): LoadData_Load {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.friendlyId = "";
        message.referenceId = "";
        message.dispatcherId = "";
        message.brokerId = "";
        message.customerId = "";
        message.invoiceAmount = "";
        message.companyNet = "";
        message.driverNet = "";
        message.dispatcherNet = "";
        message.shipperConfirmed = false;
        message.driverConfirmed = false;
        message.invoicePaperworkVerified = false;
        message.note = "";
        message.totalMiles = 0;
        message.loadedMiles = 0;
        message.emptyMiles = 0;
        message.ratePerMile = 0;
        message.ratePerMileFormatted = "";
        message.invoiceFactoringNote = "";
        message.invoiceFactoringCompanyId = "";
        message.invoiceStatus = 0;
        message.status = 0;
        message.commodity = "";
        message.weight = 0;
        message.weightFormatted = "";
        message.temperature = 0;
        message.temperatureFormatted = "";
        message.equipmentId = "";
        message.typeId = "";
        message.grossAmount = 0;
        message.grossAmountFormatted = "";
        message.driverOverrideGrossAmount = false;
        message.driverOverridenGrossAmountFormatted = "";
        message.driverOverridenGrossAmount = 0;
        message.manifests = [];
        message.activeManifestId = "";
        message.invoiceBillingNotes = [];
        message.invoiceBillingLastUpdateAge = 0;
        message.daysSinceCompleted = 0;
        message.stopsCount = 0;
        message.invoicingCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadData_Load>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadData_Load): LoadData_Load {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string friendly_id */ 2:
                    message.friendlyId = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                case /* string dispatcher_id */ 6:
                    message.dispatcherId = reader.string();
                    break;
                case /* string broker_id */ 7:
                    message.brokerId = reader.string();
                    break;
                case /* string customer_id */ 8:
                    message.customerId = reader.string();
                    break;
                case /* string invoice_amount */ 9:
                    message.invoiceAmount = reader.string();
                    break;
                case /* string company_net */ 10:
                    message.companyNet = reader.string();
                    break;
                case /* string driver_net */ 11:
                    message.driverNet = reader.string();
                    break;
                case /* string dispatcher_net */ 12:
                    message.dispatcherNet = reader.string();
                    break;
                case /* bool shipper_confirmed */ 13:
                    message.shipperConfirmed = reader.bool();
                    break;
                case /* bool driver_confirmed */ 14:
                    message.driverConfirmed = reader.bool();
                    break;
                case /* bool invoice_paperwork_verified */ 15:
                    message.invoicePaperworkVerified = reader.bool();
                    break;
                case /* string note */ 16:
                    message.note = reader.string();
                    break;
                case /* int64 total_miles */ 17:
                    message.totalMiles = reader.int64().toNumber();
                    break;
                case /* int64 loaded_miles */ 18:
                    message.loadedMiles = reader.int64().toNumber();
                    break;
                case /* int64 empty_miles */ 19:
                    message.emptyMiles = reader.int64().toNumber();
                    break;
                case /* double rate_per_mile */ 20:
                    message.ratePerMile = reader.double();
                    break;
                case /* string rate_per_mile_formatted */ 21:
                    message.ratePerMileFormatted = reader.string();
                    break;
                case /* string invoice_factoring_note */ 22:
                    message.invoiceFactoringNote = reader.string();
                    break;
                case /* string invoice_factoring_company_id */ 23:
                    message.invoiceFactoringCompanyId = reader.string();
                    break;
                case /* LoadModel.InvoiceStatus invoice_status */ 24:
                    message.invoiceStatus = reader.int32();
                    break;
                case /* LoadModel.Status status */ 25:
                    message.status = reader.int32();
                    break;
                case /* string commodity */ 26:
                    message.commodity = reader.string();
                    break;
                case /* double weight */ 27:
                    message.weight = reader.double();
                    break;
                case /* string weight_formatted */ 28:
                    message.weightFormatted = reader.string();
                    break;
                case /* double temperature */ 29:
                    message.temperature = reader.double();
                    break;
                case /* string temperature_formatted */ 30:
                    message.temperatureFormatted = reader.string();
                    break;
                case /* string equipment_id */ 31:
                    message.equipmentId = reader.string();
                    break;
                case /* string type_id */ 32:
                    message.typeId = reader.string();
                    break;
                case /* double gross_amount */ 34:
                    message.grossAmount = reader.double();
                    break;
                case /* string gross_amount_formatted */ 35:
                    message.grossAmountFormatted = reader.string();
                    break;
                case /* bool driver_override_gross_amount */ 36:
                    message.driverOverrideGrossAmount = reader.bool();
                    break;
                case /* string driver_overriden_gross_amount_formatted */ 37:
                    message.driverOverridenGrossAmountFormatted = reader.string();
                    break;
                case /* double driver_overriden_gross_amount */ 38:
                    message.driverOverridenGrossAmount = reader.double();
                    break;
                case /* repeated ManifestModel.Manifest manifests */ 39:
                    message.manifests.push(ManifestModel_Manifest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string active_manifest_id */ 40:
                    message.activeManifestId = reader.string();
                    break;
                case /* repeated NoteModel.EntityNote invoice_billing_notes */ 41:
                    message.invoiceBillingNotes.push(NoteModel_EntityNote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 invoice_billing_last_update_age */ 42:
                    message.invoiceBillingLastUpdateAge = reader.int64().toNumber();
                    break;
                case /* int64 days_since_completed */ 43:
                    message.daysSinceCompleted = reader.int64().toNumber();
                    break;
                case /* int64 stops_count */ 44:
                    message.stopsCount = reader.int64().toNumber();
                    break;
                case /* string invoicing_company_id */ 45:
                    message.invoicingCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadData_Load, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string friendly_id = 2; */
        if (message.friendlyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.friendlyId);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        /* string dispatcher_id = 6; */
        if (message.dispatcherId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.dispatcherId);
        /* string broker_id = 7; */
        if (message.brokerId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.brokerId);
        /* string customer_id = 8; */
        if (message.customerId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.customerId);
        /* string invoice_amount = 9; */
        if (message.invoiceAmount !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.invoiceAmount);
        /* string company_net = 10; */
        if (message.companyNet !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.companyNet);
        /* string driver_net = 11; */
        if (message.driverNet !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.driverNet);
        /* string dispatcher_net = 12; */
        if (message.dispatcherNet !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.dispatcherNet);
        /* bool shipper_confirmed = 13; */
        if (message.shipperConfirmed !== false)
            writer.tag(13, WireType.Varint).bool(message.shipperConfirmed);
        /* bool driver_confirmed = 14; */
        if (message.driverConfirmed !== false)
            writer.tag(14, WireType.Varint).bool(message.driverConfirmed);
        /* bool invoice_paperwork_verified = 15; */
        if (message.invoicePaperworkVerified !== false)
            writer.tag(15, WireType.Varint).bool(message.invoicePaperworkVerified);
        /* string note = 16; */
        if (message.note !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.note);
        /* int64 total_miles = 17; */
        if (message.totalMiles !== 0)
            writer.tag(17, WireType.Varint).int64(message.totalMiles);
        /* int64 loaded_miles = 18; */
        if (message.loadedMiles !== 0)
            writer.tag(18, WireType.Varint).int64(message.loadedMiles);
        /* int64 empty_miles = 19; */
        if (message.emptyMiles !== 0)
            writer.tag(19, WireType.Varint).int64(message.emptyMiles);
        /* double rate_per_mile = 20; */
        if (message.ratePerMile !== 0)
            writer.tag(20, WireType.Bit64).double(message.ratePerMile);
        /* string rate_per_mile_formatted = 21; */
        if (message.ratePerMileFormatted !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.ratePerMileFormatted);
        /* string invoice_factoring_note = 22; */
        if (message.invoiceFactoringNote !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.invoiceFactoringNote);
        /* string invoice_factoring_company_id = 23; */
        if (message.invoiceFactoringCompanyId !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.invoiceFactoringCompanyId);
        /* LoadModel.InvoiceStatus invoice_status = 24; */
        if (message.invoiceStatus !== 0)
            writer.tag(24, WireType.Varint).int32(message.invoiceStatus);
        /* LoadModel.Status status = 25; */
        if (message.status !== 0)
            writer.tag(25, WireType.Varint).int32(message.status);
        /* string commodity = 26; */
        if (message.commodity !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.commodity);
        /* double weight = 27; */
        if (message.weight !== 0)
            writer.tag(27, WireType.Bit64).double(message.weight);
        /* string weight_formatted = 28; */
        if (message.weightFormatted !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.weightFormatted);
        /* double temperature = 29; */
        if (message.temperature !== 0)
            writer.tag(29, WireType.Bit64).double(message.temperature);
        /* string temperature_formatted = 30; */
        if (message.temperatureFormatted !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.temperatureFormatted);
        /* string equipment_id = 31; */
        if (message.equipmentId !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.equipmentId);
        /* string type_id = 32; */
        if (message.typeId !== "")
            writer.tag(32, WireType.LengthDelimited).string(message.typeId);
        /* double gross_amount = 34; */
        if (message.grossAmount !== 0)
            writer.tag(34, WireType.Bit64).double(message.grossAmount);
        /* string gross_amount_formatted = 35; */
        if (message.grossAmountFormatted !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.grossAmountFormatted);
        /* bool driver_override_gross_amount = 36; */
        if (message.driverOverrideGrossAmount !== false)
            writer.tag(36, WireType.Varint).bool(message.driverOverrideGrossAmount);
        /* string driver_overriden_gross_amount_formatted = 37; */
        if (message.driverOverridenGrossAmountFormatted !== "")
            writer.tag(37, WireType.LengthDelimited).string(message.driverOverridenGrossAmountFormatted);
        /* double driver_overriden_gross_amount = 38; */
        if (message.driverOverridenGrossAmount !== 0)
            writer.tag(38, WireType.Bit64).double(message.driverOverridenGrossAmount);
        /* repeated ManifestModel.Manifest manifests = 39; */
        for (let i = 0; i < message.manifests.length; i++)
            ManifestModel_Manifest.internalBinaryWrite(message.manifests[i], writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* string active_manifest_id = 40; */
        if (message.activeManifestId !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.activeManifestId);
        /* repeated NoteModel.EntityNote invoice_billing_notes = 41; */
        for (let i = 0; i < message.invoiceBillingNotes.length; i++)
            NoteModel_EntityNote.internalBinaryWrite(message.invoiceBillingNotes[i], writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* int64 invoice_billing_last_update_age = 42; */
        if (message.invoiceBillingLastUpdateAge !== 0)
            writer.tag(42, WireType.Varint).int64(message.invoiceBillingLastUpdateAge);
        /* int64 days_since_completed = 43; */
        if (message.daysSinceCompleted !== 0)
            writer.tag(43, WireType.Varint).int64(message.daysSinceCompleted);
        /* int64 stops_count = 44; */
        if (message.stopsCount !== 0)
            writer.tag(44, WireType.Varint).int64(message.stopsCount);
        /* string invoicing_company_id = 45; */
        if (message.invoicingCompanyId !== "")
            writer.tag(45, WireType.LengthDelimited).string(message.invoicingCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadData.Load
 */
export const LoadData_Load = new LoadData_Load$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveLoadRequest$Type extends MessageType<RetrieveLoadRequest> {
    constructor() {
        super("RetrieveLoadRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveLoadRequest>): RetrieveLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveLoadRequest): RetrieveLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveLoadRequest
 */
export const RetrieveLoadRequest = new RetrieveLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveLoadReply$Type extends MessageType<RetrieveLoadReply> {
    constructor() {
        super("RetrieveLoadReply", [
            { no: 1, name: "load", kind: "message", T: () => LoadData_Load }
        ]);
    }
    create(value?: PartialMessage<RetrieveLoadReply>): RetrieveLoadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RetrieveLoadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveLoadReply): RetrieveLoadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LoadData.Load load */ 1:
                    message.load = LoadData_Load.internalBinaryRead(reader, reader.uint32(), options, message.load);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveLoadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LoadData.Load load = 1; */
        if (message.load)
            LoadData_Load.internalBinaryWrite(message.load, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RetrieveLoadReply
 */
export const RetrieveLoadReply = new RetrieveLoadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderUnarchivedGetRequest$Type extends MessageType<OrderUnarchivedGetRequest> {
    constructor() {
        super("OrderUnarchivedGetRequest", []);
    }
    create(value?: PartialMessage<OrderUnarchivedGetRequest>): OrderUnarchivedGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderUnarchivedGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderUnarchivedGetRequest): OrderUnarchivedGetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderUnarchivedGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderUnarchivedGetRequest
 */
export const OrderUnarchivedGetRequest = new OrderUnarchivedGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderUnarchivedGetReply$Type extends MessageType<OrderUnarchivedGetReply> {
    constructor() {
        super("OrderUnarchivedGetReply", [
            { no: 1, name: "orders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadData_Load }
        ]);
    }
    create(value?: PartialMessage<OrderUnarchivedGetReply>): OrderUnarchivedGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orders = [];
        if (value !== undefined)
            reflectionMergePartial<OrderUnarchivedGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderUnarchivedGetReply): OrderUnarchivedGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadData.Load orders */ 1:
                    message.orders.push(LoadData_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderUnarchivedGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadData.Load orders = 1; */
        for (let i = 0; i < message.orders.length; i++)
            LoadData_Load.internalBinaryWrite(message.orders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderUnarchivedGetReply
 */
export const OrderUnarchivedGetReply = new OrderUnarchivedGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsRequest$Type extends MessageType<GetLoadsRequest> {
    constructor() {
        super("GetLoadsRequest", [
            { no: 1, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "per_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "sort_by", kind: "enum", T: () => ["GetLoadsRequest.SortBy", GetLoadsRequest_SortBy, "SORT_BY_"] },
            { no: 4, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 6, name: "invoice_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 7, name: "dispatcher_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "broker_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "customer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "late_pickups", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "late_deliveries", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "gps_inactive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "invoice_type", kind: "enum", opt: true, T: () => ["LoadModel.InvoiceType", LoadModel_InvoiceType, "INVOICE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<GetLoadsRequest>): GetLoadsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.perPage = 0;
        message.sortBy = 0;
        message.statuses = [];
        message.invoiceStatuses = [];
        message.dispatcherIds = [];
        message.brokerIds = [];
        message.customerIds = [];
        message.driverIds = [];
        message.truckIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetLoadsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsRequest): GetLoadsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page */ 1:
                    message.page = reader.int64().toNumber();
                    break;
                case /* int64 per_page */ 2:
                    message.perPage = reader.int64().toNumber();
                    break;
                case /* GetLoadsRequest.SortBy sort_by */ 3:
                    message.sortBy = reader.int32();
                    break;
                case /* optional string search */ 4:
                    message.search = reader.string();
                    break;
                case /* repeated LoadModel.Status statuses */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statuses.push(reader.int32());
                    else
                        message.statuses.push(reader.int32());
                    break;
                case /* repeated LoadModel.InvoiceStatus invoice_statuses */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.invoiceStatuses.push(reader.int32());
                    else
                        message.invoiceStatuses.push(reader.int32());
                    break;
                case /* repeated string dispatcher_ids */ 7:
                    message.dispatcherIds.push(reader.string());
                    break;
                case /* repeated string broker_ids */ 8:
                    message.brokerIds.push(reader.string());
                    break;
                case /* repeated string customer_ids */ 9:
                    message.customerIds.push(reader.string());
                    break;
                case /* repeated string driver_ids */ 10:
                    message.driverIds.push(reader.string());
                    break;
                case /* repeated string truck_ids */ 11:
                    message.truckIds.push(reader.string());
                    break;
                case /* optional string start_date */ 12:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 13:
                    message.endDate = reader.string();
                    break;
                case /* optional bool late_pickups */ 14:
                    message.latePickups = reader.bool();
                    break;
                case /* optional bool late_deliveries */ 15:
                    message.lateDeliveries = reader.bool();
                    break;
                case /* optional bool gps_inactive */ 16:
                    message.gpsInactive = reader.bool();
                    break;
                case /* optional LoadModel.InvoiceType invoice_type */ 17:
                    message.invoiceType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int64(message.page);
        /* int64 per_page = 2; */
        if (message.perPage !== 0)
            writer.tag(2, WireType.Varint).int64(message.perPage);
        /* GetLoadsRequest.SortBy sort_by = 3; */
        if (message.sortBy !== 0)
            writer.tag(3, WireType.Varint).int32(message.sortBy);
        /* optional string search = 4; */
        if (message.search !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.search);
        /* repeated LoadModel.Status statuses = 5; */
        if (message.statuses.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statuses.length; i++)
                writer.int32(message.statuses[i]);
            writer.join();
        }
        /* repeated LoadModel.InvoiceStatus invoice_statuses = 6; */
        if (message.invoiceStatuses.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.invoiceStatuses.length; i++)
                writer.int32(message.invoiceStatuses[i]);
            writer.join();
        }
        /* repeated string dispatcher_ids = 7; */
        for (let i = 0; i < message.dispatcherIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.dispatcherIds[i]);
        /* repeated string broker_ids = 8; */
        for (let i = 0; i < message.brokerIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.brokerIds[i]);
        /* repeated string customer_ids = 9; */
        for (let i = 0; i < message.customerIds.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.customerIds[i]);
        /* repeated string driver_ids = 10; */
        for (let i = 0; i < message.driverIds.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.driverIds[i]);
        /* repeated string truck_ids = 11; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.truckIds[i]);
        /* optional string start_date = 12; */
        if (message.startDate !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 13; */
        if (message.endDate !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.endDate);
        /* optional bool late_pickups = 14; */
        if (message.latePickups !== undefined)
            writer.tag(14, WireType.Varint).bool(message.latePickups);
        /* optional bool late_deliveries = 15; */
        if (message.lateDeliveries !== undefined)
            writer.tag(15, WireType.Varint).bool(message.lateDeliveries);
        /* optional bool gps_inactive = 16; */
        if (message.gpsInactive !== undefined)
            writer.tag(16, WireType.Varint).bool(message.gpsInactive);
        /* optional LoadModel.InvoiceType invoice_type = 17; */
        if (message.invoiceType !== undefined)
            writer.tag(17, WireType.Varint).int32(message.invoiceType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsRequest
 */
export const GetLoadsRequest = new GetLoadsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsReply$Type extends MessageType<GetLoadsReply> {
    constructor() {
        super("GetLoadsReply", [
            { no: 1, name: "loads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LoadData_Load },
            { no: 2, name: "totals", kind: "message", T: () => GetLoadsReply_Totals }
        ]);
    }
    create(value?: PartialMessage<GetLoadsReply>): GetLoadsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loads = [];
        if (value !== undefined)
            reflectionMergePartial<GetLoadsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsReply): GetLoadsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LoadData.Load loads */ 1:
                    message.loads.push(LoadData_Load.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GetLoadsReply.Totals totals */ 2:
                    message.totals = GetLoadsReply_Totals.internalBinaryRead(reader, reader.uint32(), options, message.totals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LoadData.Load loads = 1; */
        for (let i = 0; i < message.loads.length; i++)
            LoadData_Load.internalBinaryWrite(message.loads[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetLoadsReply.Totals totals = 2; */
        if (message.totals)
            GetLoadsReply_Totals.internalBinaryWrite(message.totals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsReply
 */
export const GetLoadsReply = new GetLoadsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadsReply_Totals$Type extends MessageType<GetLoadsReply_Totals> {
    constructor() {
        super("GetLoadsReply.Totals", [
            { no: 1, name: "total_invoice_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_gross_amount_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_driver_net_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "average_rate_per_mile_formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total_loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "total_empty_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetLoadsReply_Totals>): GetLoadsReply_Totals {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalInvoiceAmountFormatted = "";
        message.totalGrossAmountFormatted = "";
        message.totalDriverNetFormatted = "";
        message.averageRatePerMileFormatted = "";
        message.totalLoadedMiles = 0;
        message.totalEmptyMiles = 0;
        if (value !== undefined)
            reflectionMergePartial<GetLoadsReply_Totals>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadsReply_Totals): GetLoadsReply_Totals {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string total_invoice_amount_formatted */ 1:
                    message.totalInvoiceAmountFormatted = reader.string();
                    break;
                case /* string total_gross_amount_formatted */ 2:
                    message.totalGrossAmountFormatted = reader.string();
                    break;
                case /* string total_driver_net_formatted */ 3:
                    message.totalDriverNetFormatted = reader.string();
                    break;
                case /* string average_rate_per_mile_formatted */ 4:
                    message.averageRatePerMileFormatted = reader.string();
                    break;
                case /* int64 total_loaded_miles */ 5:
                    message.totalLoadedMiles = reader.int64().toNumber();
                    break;
                case /* int64 total_empty_miles */ 6:
                    message.totalEmptyMiles = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadsReply_Totals, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string total_invoice_amount_formatted = 1; */
        if (message.totalInvoiceAmountFormatted !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.totalInvoiceAmountFormatted);
        /* string total_gross_amount_formatted = 2; */
        if (message.totalGrossAmountFormatted !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalGrossAmountFormatted);
        /* string total_driver_net_formatted = 3; */
        if (message.totalDriverNetFormatted !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.totalDriverNetFormatted);
        /* string average_rate_per_mile_formatted = 4; */
        if (message.averageRatePerMileFormatted !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.averageRatePerMileFormatted);
        /* int64 total_loaded_miles = 5; */
        if (message.totalLoadedMiles !== 0)
            writer.tag(5, WireType.Varint).int64(message.totalLoadedMiles);
        /* int64 total_empty_miles = 6; */
        if (message.totalEmptyMiles !== 0)
            writer.tag(6, WireType.Varint).int64(message.totalEmptyMiles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadsReply.Totals
 */
export const GetLoadsReply_Totals = new GetLoadsReply_Totals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadStatsGetRequest$Type extends MessageType<LoadStatsGetRequest> {
    constructor() {
        super("LoadStatsGetRequest", [
            { no: 1, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "truck_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "driver_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "trailer_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "broker_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "dispatcher_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["LoadModel.Status", LoadModel_Status] },
            { no: 9, name: "invoice_statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] },
            { no: 10, name: "invoice_type", kind: "enum", opt: true, T: () => ["LoadModel.InvoiceType", LoadModel_InvoiceType, "INVOICE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<LoadStatsGetRequest>): LoadStatsGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.truckIds = [];
        message.driverIds = [];
        message.trailerIds = [];
        message.brokerIds = [];
        message.dispatcherIds = [];
        message.statuses = [];
        message.invoiceStatuses = [];
        if (value !== undefined)
            reflectionMergePartial<LoadStatsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStatsGetRequest): LoadStatsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string start_date */ 1:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 2:
                    message.endDate = reader.string();
                    break;
                case /* repeated string truck_ids */ 3:
                    message.truckIds.push(reader.string());
                    break;
                case /* repeated string driver_ids */ 4:
                    message.driverIds.push(reader.string());
                    break;
                case /* repeated string trailer_ids */ 5:
                    message.trailerIds.push(reader.string());
                    break;
                case /* repeated string broker_ids */ 6:
                    message.brokerIds.push(reader.string());
                    break;
                case /* repeated string dispatcher_ids */ 7:
                    message.dispatcherIds.push(reader.string());
                    break;
                case /* repeated LoadModel.Status statuses */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statuses.push(reader.int32());
                    else
                        message.statuses.push(reader.int32());
                    break;
                case /* repeated LoadModel.InvoiceStatus invoice_statuses */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.invoiceStatuses.push(reader.int32());
                    else
                        message.invoiceStatuses.push(reader.int32());
                    break;
                case /* optional LoadModel.InvoiceType invoice_type */ 10:
                    message.invoiceType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadStatsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string start_date = 1; */
        if (message.startDate !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 2; */
        if (message.endDate !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.endDate);
        /* repeated string truck_ids = 3; */
        for (let i = 0; i < message.truckIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.truckIds[i]);
        /* repeated string driver_ids = 4; */
        for (let i = 0; i < message.driverIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.driverIds[i]);
        /* repeated string trailer_ids = 5; */
        for (let i = 0; i < message.trailerIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.trailerIds[i]);
        /* repeated string broker_ids = 6; */
        for (let i = 0; i < message.brokerIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.brokerIds[i]);
        /* repeated string dispatcher_ids = 7; */
        for (let i = 0; i < message.dispatcherIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.dispatcherIds[i]);
        /* repeated LoadModel.Status statuses = 8; */
        if (message.statuses.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statuses.length; i++)
                writer.int32(message.statuses[i]);
            writer.join();
        }
        /* repeated LoadModel.InvoiceStatus invoice_statuses = 9; */
        if (message.invoiceStatuses.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.invoiceStatuses.length; i++)
                writer.int32(message.invoiceStatuses[i]);
            writer.join();
        }
        /* optional LoadModel.InvoiceType invoice_type = 10; */
        if (message.invoiceType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.invoiceType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadStatsGetRequest
 */
export const LoadStatsGetRequest = new LoadStatsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadStatsGetReply$Type extends MessageType<LoadStatsGetReply> {
    constructor() {
        super("LoadStatsGetReply", [
            { no: 1, name: "total_loads_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterModel_Filter }
        ]);
    }
    create(value?: PartialMessage<LoadStatsGetReply>): LoadStatsGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalLoadsCount = 0;
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<LoadStatsGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStatsGetReply): LoadStatsGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_loads_count */ 1:
                    message.totalLoadsCount = reader.int64().toNumber();
                    break;
                case /* repeated FilterModel.Filter filters */ 2:
                    message.filters.push(FilterModel_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadStatsGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_loads_count = 1; */
        if (message.totalLoadsCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalLoadsCount);
        /* repeated FilterModel.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            FilterModel_Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadStatsGetReply
 */
export const LoadStatsGetReply = new LoadStatsGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLastLoadRequest$Type extends MessageType<GetLastLoadRequest> {
    constructor() {
        super("GetLastLoadRequest", [
            { no: 1, name: "entity", kind: "enum", T: () => ["GetLastLoadRequest.Last_Load_Entity", GetLastLoadRequest_Last_Load_Entity] },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetLastLoadRequest>): GetLastLoadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entity = 0;
        message.entityId = "";
        if (value !== undefined)
            reflectionMergePartial<GetLastLoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLastLoadRequest): GetLastLoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetLastLoadRequest.Last_Load_Entity entity */ 1:
                    message.entity = reader.int32();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLastLoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetLastLoadRequest.Last_Load_Entity entity = 1; */
        if (message.entity !== 0)
            writer.tag(1, WireType.Varint).int32(message.entity);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLastLoadRequest
 */
export const GetLastLoadRequest = new GetLastLoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLastLoadResponse$Type extends MessageType<GetLastLoadResponse> {
    constructor() {
        super("GetLastLoadResponse", [
            { no: 1, name: "last_load_datetime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetLastLoadResponse>): GetLastLoadResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastLoadDatetime = "";
        if (value !== undefined)
            reflectionMergePartial<GetLastLoadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLastLoadResponse): GetLastLoadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string last_load_datetime */ 1:
                    message.lastLoadDatetime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLastLoadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string last_load_datetime = 1; */
        if (message.lastLoadDatetime !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.lastLoadDatetime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLastLoadResponse
 */
export const GetLastLoadResponse = new GetLastLoadResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadEtaStatesRequest$Type extends MessageType<GetLoadEtaStatesRequest> {
    constructor() {
        super("GetLoadEtaStatesRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetLoadEtaStatesRequest>): GetLoadEtaStatesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<GetLoadEtaStatesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadEtaStatesRequest): GetLoadEtaStatesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadEtaStatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadEtaStatesRequest
 */
export const GetLoadEtaStatesRequest = new GetLoadEtaStatesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadEtaStatesReply$Type extends MessageType<GetLoadEtaStatesReply> {
    constructor() {
        super("GetLoadEtaStatesReply", [
            { no: 1, name: "load_eta_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetLoadEtaStatesReply_EtaState }
        ]);
    }
    create(value?: PartialMessage<GetLoadEtaStatesReply>): GetLoadEtaStatesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadEtaStates = [];
        if (value !== undefined)
            reflectionMergePartial<GetLoadEtaStatesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadEtaStatesReply): GetLoadEtaStatesReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetLoadEtaStatesReply.EtaState load_eta_states */ 1:
                    message.loadEtaStates.push(GetLoadEtaStatesReply_EtaState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadEtaStatesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetLoadEtaStatesReply.EtaState load_eta_states = 1; */
        for (let i = 0; i < message.loadEtaStates.length; i++)
            GetLoadEtaStatesReply_EtaState.internalBinaryWrite(message.loadEtaStates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadEtaStatesReply
 */
export const GetLoadEtaStatesReply = new GetLoadEtaStatesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoadEtaStatesReply_EtaState$Type extends MessageType<GetLoadEtaStatesReply_EtaState> {
    constructor() {
        super("GetLoadEtaStatesReply.EtaState", [
            { no: 1, name: "stop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sequence", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["GetLoadEtaStatesReply.EtaState.Type", GetLoadEtaStatesReply_EtaState_Type] },
            { no: 6, name: "stop_lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "stop_lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "truck_lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "truck_lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "arrives_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "departs_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "eta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "loads_in_truck", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 16, name: "deroute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 17, name: "lateness", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 18, name: "earliness", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 19, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetLoadEtaStatesReply_EtaState>): GetLoadEtaStatesReply_EtaState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stopId = "";
        message.truckId = "";
        message.stateId = "";
        message.sequence = 0;
        message.type = 0;
        message.stopLat = 0;
        message.stopLon = 0;
        message.truckLat = 0;
        message.truckLon = 0;
        message.arrivesAt = "";
        message.departsAt = "";
        message.eta = 0;
        message.loadsInTruck = 0;
        message.distance = 0;
        message.duration = 0;
        message.deroute = 0;
        message.lateness = 0;
        message.earliness = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetLoadEtaStatesReply_EtaState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoadEtaStatesReply_EtaState): GetLoadEtaStatesReply_EtaState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stop_id */ 1:
                    message.stopId = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                case /* string state_id */ 3:
                    message.stateId = reader.string();
                    break;
                case /* int64 sequence */ 4:
                    message.sequence = reader.int64().toNumber();
                    break;
                case /* GetLoadEtaStatesReply.EtaState.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* double stop_lat */ 6:
                    message.stopLat = reader.double();
                    break;
                case /* double stop_lon */ 7:
                    message.stopLon = reader.double();
                    break;
                case /* double truck_lat */ 8:
                    message.truckLat = reader.double();
                    break;
                case /* double truck_lon */ 9:
                    message.truckLon = reader.double();
                    break;
                case /* string arrives_at */ 10:
                    message.arrivesAt = reader.string();
                    break;
                case /* string departs_at */ 11:
                    message.departsAt = reader.string();
                    break;
                case /* int64 eta */ 12:
                    message.eta = reader.int64().toNumber();
                    break;
                case /* int64 loads_in_truck */ 13:
                    message.loadsInTruck = reader.int64().toNumber();
                    break;
                case /* double distance */ 14:
                    message.distance = reader.double();
                    break;
                case /* int64 duration */ 15:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* int64 deroute */ 16:
                    message.deroute = reader.int64().toNumber();
                    break;
                case /* int64 lateness */ 17:
                    message.lateness = reader.int64().toNumber();
                    break;
                case /* int64 earliness */ 18:
                    message.earliness = reader.int64().toNumber();
                    break;
                case /* string created_at */ 19:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoadEtaStatesReply_EtaState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stop_id = 1; */
        if (message.stopId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stopId);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        /* string state_id = 3; */
        if (message.stateId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.stateId);
        /* int64 sequence = 4; */
        if (message.sequence !== 0)
            writer.tag(4, WireType.Varint).int64(message.sequence);
        /* GetLoadEtaStatesReply.EtaState.Type type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* double stop_lat = 6; */
        if (message.stopLat !== 0)
            writer.tag(6, WireType.Bit64).double(message.stopLat);
        /* double stop_lon = 7; */
        if (message.stopLon !== 0)
            writer.tag(7, WireType.Bit64).double(message.stopLon);
        /* double truck_lat = 8; */
        if (message.truckLat !== 0)
            writer.tag(8, WireType.Bit64).double(message.truckLat);
        /* double truck_lon = 9; */
        if (message.truckLon !== 0)
            writer.tag(9, WireType.Bit64).double(message.truckLon);
        /* string arrives_at = 10; */
        if (message.arrivesAt !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.arrivesAt);
        /* string departs_at = 11; */
        if (message.departsAt !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.departsAt);
        /* int64 eta = 12; */
        if (message.eta !== 0)
            writer.tag(12, WireType.Varint).int64(message.eta);
        /* int64 loads_in_truck = 13; */
        if (message.loadsInTruck !== 0)
            writer.tag(13, WireType.Varint).int64(message.loadsInTruck);
        /* double distance = 14; */
        if (message.distance !== 0)
            writer.tag(14, WireType.Bit64).double(message.distance);
        /* int64 duration = 15; */
        if (message.duration !== 0)
            writer.tag(15, WireType.Varint).int64(message.duration);
        /* int64 deroute = 16; */
        if (message.deroute !== 0)
            writer.tag(16, WireType.Varint).int64(message.deroute);
        /* int64 lateness = 17; */
        if (message.lateness !== 0)
            writer.tag(17, WireType.Varint).int64(message.lateness);
        /* int64 earliness = 18; */
        if (message.earliness !== 0)
            writer.tag(18, WireType.Varint).int64(message.earliness);
        /* string created_at = 19; */
        if (message.createdAt !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetLoadEtaStatesReply.EtaState
 */
export const GetLoadEtaStatesReply_EtaState = new GetLoadEtaStatesReply_EtaState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateLoadedMilesRequest$Type extends MessageType<LoadUpdateLoadedMilesRequest> {
    constructor() {
        super("LoadUpdateLoadedMilesRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "loaded_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LoadUpdateLoadedMilesRequest>): LoadUpdateLoadedMilesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.loadedMiles = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateLoadedMilesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateLoadedMilesRequest): LoadUpdateLoadedMilesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* int64 loaded_miles */ 2:
                    message.loadedMiles = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadUpdateLoadedMilesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* int64 loaded_miles = 2; */
        if (message.loadedMiles !== 0)
            writer.tag(2, WireType.Varint).int64(message.loadedMiles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateLoadedMilesRequest
 */
export const LoadUpdateLoadedMilesRequest = new LoadUpdateLoadedMilesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateLoadedMilesReply$Type extends MessageType<LoadUpdateLoadedMilesReply> {
    constructor() {
        super("LoadUpdateLoadedMilesReply", []);
    }
    create(value?: PartialMessage<LoadUpdateLoadedMilesReply>): LoadUpdateLoadedMilesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateLoadedMilesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateLoadedMilesReply): LoadUpdateLoadedMilesReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadUpdateLoadedMilesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateLoadedMilesReply
 */
export const LoadUpdateLoadedMilesReply = new LoadUpdateLoadedMilesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateEmptyMilesRequest$Type extends MessageType<LoadUpdateEmptyMilesRequest> {
    constructor() {
        super("LoadUpdateEmptyMilesRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "empty_miles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LoadUpdateEmptyMilesRequest>): LoadUpdateEmptyMilesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.emptyMiles = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateEmptyMilesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateEmptyMilesRequest): LoadUpdateEmptyMilesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* int64 empty_miles */ 2:
                    message.emptyMiles = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadUpdateEmptyMilesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* int64 empty_miles = 2; */
        if (message.emptyMiles !== 0)
            writer.tag(2, WireType.Varint).int64(message.emptyMiles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateEmptyMilesRequest
 */
export const LoadUpdateEmptyMilesRequest = new LoadUpdateEmptyMilesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateEmptyMilesReply$Type extends MessageType<LoadUpdateEmptyMilesReply> {
    constructor() {
        super("LoadUpdateEmptyMilesReply", []);
    }
    create(value?: PartialMessage<LoadUpdateEmptyMilesReply>): LoadUpdateEmptyMilesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateEmptyMilesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateEmptyMilesReply): LoadUpdateEmptyMilesReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadUpdateEmptyMilesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateEmptyMilesReply
 */
export const LoadUpdateEmptyMilesReply = new LoadUpdateEmptyMilesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateRequest$Type extends MessageType<LoadUpdateRequest> {
    constructor() {
        super("LoadUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "equipment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "shipper_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "driver_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "weight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "commodity", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadUpdateRequest>): LoadUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.typeId = "";
        message.equipmentId = "";
        message.note = "";
        message.shipperConfirmed = false;
        message.driverConfirmed = false;
        message.weight = 0;
        message.commodity = "";
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateRequest): LoadUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string type_id */ 2:
                    message.typeId = reader.string();
                    break;
                case /* string equipment_id */ 3:
                    message.equipmentId = reader.string();
                    break;
                case /* string note */ 6:
                    message.note = reader.string();
                    break;
                case /* bool shipper_confirmed */ 7:
                    message.shipperConfirmed = reader.bool();
                    break;
                case /* bool driver_confirmed */ 8:
                    message.driverConfirmed = reader.bool();
                    break;
                case /* double weight */ 9:
                    message.weight = reader.double();
                    break;
                case /* string commodity */ 10:
                    message.commodity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string type_id = 2; */
        if (message.typeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.typeId);
        /* string equipment_id = 3; */
        if (message.equipmentId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.equipmentId);
        /* string note = 6; */
        if (message.note !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.note);
        /* bool shipper_confirmed = 7; */
        if (message.shipperConfirmed !== false)
            writer.tag(7, WireType.Varint).bool(message.shipperConfirmed);
        /* bool driver_confirmed = 8; */
        if (message.driverConfirmed !== false)
            writer.tag(8, WireType.Varint).bool(message.driverConfirmed);
        /* double weight = 9; */
        if (message.weight !== 0)
            writer.tag(9, WireType.Bit64).double(message.weight);
        /* string commodity = 10; */
        if (message.commodity !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.commodity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateRequest
 */
export const LoadUpdateRequest = new LoadUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateReply$Type extends MessageType<LoadUpdateReply> {
    constructor() {
        super("LoadUpdateReply", []);
    }
    create(value?: PartialMessage<LoadUpdateReply>): LoadUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateReply): LoadUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateReply
 */
export const LoadUpdateReply = new LoadUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTemperatureUpdateRequest$Type extends MessageType<LoadTemperatureUpdateRequest> {
    constructor() {
        super("LoadTemperatureUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "temperature", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTemperatureUpdateRequest>): LoadTemperatureUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.temperature = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadTemperatureUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTemperatureUpdateRequest): LoadTemperatureUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* double temperature */ 2:
                    message.temperature = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTemperatureUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* double temperature = 2; */
        if (message.temperature !== 0)
            writer.tag(2, WireType.Bit64).double(message.temperature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTemperatureUpdateRequest
 */
export const LoadTemperatureUpdateRequest = new LoadTemperatureUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTemperatureUpdateReply$Type extends MessageType<LoadTemperatureUpdateReply> {
    constructor() {
        super("LoadTemperatureUpdateReply", []);
    }
    create(value?: PartialMessage<LoadTemperatureUpdateReply>): LoadTemperatureUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadTemperatureUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTemperatureUpdateReply): LoadTemperatureUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadTemperatureUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTemperatureUpdateReply
 */
export const LoadTemperatureUpdateReply = new LoadTemperatureUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDispatcherUpdateRequest$Type extends MessageType<LoadDispatcherUpdateRequest> {
    constructor() {
        super("LoadDispatcherUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dispatcher_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDispatcherUpdateRequest>): LoadDispatcherUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.dispatcherId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDispatcherUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDispatcherUpdateRequest): LoadDispatcherUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string dispatcher_id */ 2:
                    message.dispatcherId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDispatcherUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string dispatcher_id = 2; */
        if (message.dispatcherId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dispatcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDispatcherUpdateRequest
 */
export const LoadDispatcherUpdateRequest = new LoadDispatcherUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDispatcherUpdateReply$Type extends MessageType<LoadDispatcherUpdateReply> {
    constructor() {
        super("LoadDispatcherUpdateReply", []);
    }
    create(value?: PartialMessage<LoadDispatcherUpdateReply>): LoadDispatcherUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDispatcherUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDispatcherUpdateReply): LoadDispatcherUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDispatcherUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDispatcherUpdateReply
 */
export const LoadDispatcherUpdateReply = new LoadDispatcherUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceFactoringCompanyUpdateRequest$Type extends MessageType<LoadInvoiceFactoringCompanyUpdateRequest> {
    constructor() {
        super("LoadInvoiceFactoringCompanyUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_factoring_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceFactoringCompanyUpdateRequest>): LoadInvoiceFactoringCompanyUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoiceFactoringCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceFactoringCompanyUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceFactoringCompanyUpdateRequest): LoadInvoiceFactoringCompanyUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string invoice_factoring_company_id */ 2:
                    message.invoiceFactoringCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceFactoringCompanyUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string invoice_factoring_company_id = 2; */
        if (message.invoiceFactoringCompanyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoiceFactoringCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceFactoringCompanyUpdateRequest
 */
export const LoadInvoiceFactoringCompanyUpdateRequest = new LoadInvoiceFactoringCompanyUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceFactoringCompanyUpdateReply$Type extends MessageType<LoadInvoiceFactoringCompanyUpdateReply> {
    constructor() {
        super("LoadInvoiceFactoringCompanyUpdateReply", []);
    }
    create(value?: PartialMessage<LoadInvoiceFactoringCompanyUpdateReply>): LoadInvoiceFactoringCompanyUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceFactoringCompanyUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceFactoringCompanyUpdateReply): LoadInvoiceFactoringCompanyUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoiceFactoringCompanyUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceFactoringCompanyUpdateReply
 */
export const LoadInvoiceFactoringCompanyUpdateReply = new LoadInvoiceFactoringCompanyUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceDownloadRequest$Type extends MessageType<LoadInvoiceDownloadRequest> {
    constructor() {
        super("LoadInvoiceDownloadRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceDownloadRequest>): LoadInvoiceDownloadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceDownloadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceDownloadRequest): LoadInvoiceDownloadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceDownloadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceDownloadRequest
 */
export const LoadInvoiceDownloadRequest = new LoadInvoiceDownloadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceDownloadReply$Type extends MessageType<LoadInvoiceDownloadReply> {
    constructor() {
        super("LoadInvoiceDownloadReply", [
            { no: 1, name: "file_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceDownloadReply>): LoadInvoiceDownloadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        message.filename = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceDownloadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceDownloadReply): LoadInvoiceDownloadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_path */ 1:
                    message.filePath = reader.string();
                    break;
                case /* string filename */ 2:
                    message.filename = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceDownloadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_path = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        /* string filename = 2; */
        if (message.filename !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceDownloadReply
 */
export const LoadInvoiceDownloadReply = new LoadInvoiceDownloadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceBatchDownloadRequest$Type extends MessageType<LoadInvoiceBatchDownloadRequest> {
    constructor() {
        super("LoadInvoiceBatchDownloadRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceBatchDownloadRequest>): LoadInvoiceBatchDownloadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceBatchDownloadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceBatchDownloadRequest): LoadInvoiceBatchDownloadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceBatchDownloadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceBatchDownloadRequest
 */
export const LoadInvoiceBatchDownloadRequest = new LoadInvoiceBatchDownloadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceBatchDownloadReply$Type extends MessageType<LoadInvoiceBatchDownloadReply> {
    constructor() {
        super("LoadInvoiceBatchDownloadReply", [
            { no: 1, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceBatchDownloadReply>): LoadInvoiceBatchDownloadReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceBatchDownloadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceBatchDownloadReply): LoadInvoiceBatchDownloadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_id */ 1:
                    message.fileId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceBatchDownloadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_id = 1; */
        if (message.fileId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceBatchDownloadReply
 */
export const LoadInvoiceBatchDownloadReply = new LoadInvoiceBatchDownloadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceStatusBatchUpdateRequest$Type extends MessageType<LoadInvoiceStatusBatchUpdateRequest> {
    constructor() {
        super("LoadInvoiceStatusBatchUpdateRequest", [
            { no: 1, name: "load_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceStatusBatchUpdateRequest>): LoadInvoiceStatusBatchUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadIds = [];
        message.newInvoiceStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceStatusBatchUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceStatusBatchUpdateRequest): LoadInvoiceStatusBatchUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string load_ids */ 1:
                    message.loadIds.push(reader.string());
                    break;
                case /* LoadModel.InvoiceStatus new_invoice_status */ 2:
                    message.newInvoiceStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceStatusBatchUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string load_ids = 1; */
        for (let i = 0; i < message.loadIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.loadIds[i]);
        /* LoadModel.InvoiceStatus new_invoice_status = 2; */
        if (message.newInvoiceStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.newInvoiceStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceStatusBatchUpdateRequest
 */
export const LoadInvoiceStatusBatchUpdateRequest = new LoadInvoiceStatusBatchUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceStatusBatchUpdateReply$Type extends MessageType<LoadInvoiceStatusBatchUpdateReply> {
    constructor() {
        super("LoadInvoiceStatusBatchUpdateReply", []);
    }
    create(value?: PartialMessage<LoadInvoiceStatusBatchUpdateReply>): LoadInvoiceStatusBatchUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceStatusBatchUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceStatusBatchUpdateReply): LoadInvoiceStatusBatchUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoiceStatusBatchUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceStatusBatchUpdateReply
 */
export const LoadInvoiceStatusBatchUpdateReply = new LoadInvoiceStatusBatchUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoiceBatchSendRequest$Type extends MessageType<OrderInvoiceBatchSendRequest> {
    constructor() {
        super("OrderInvoiceBatchSendRequest", [
            { no: 1, name: "orders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderInvoiceBatchSendRequest_Order },
            { no: 2, name: "send_to_company_cc_emails", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OrderInvoiceBatchSendRequest>): OrderInvoiceBatchSendRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orders = [];
        message.sendToCompanyCcEmails = false;
        if (value !== undefined)
            reflectionMergePartial<OrderInvoiceBatchSendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoiceBatchSendRequest): OrderInvoiceBatchSendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated OrderInvoiceBatchSendRequest.Order orders */ 1:
                    message.orders.push(OrderInvoiceBatchSendRequest_Order.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool send_to_company_cc_emails */ 2:
                    message.sendToCompanyCcEmails = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderInvoiceBatchSendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated OrderInvoiceBatchSendRequest.Order orders = 1; */
        for (let i = 0; i < message.orders.length; i++)
            OrderInvoiceBatchSendRequest_Order.internalBinaryWrite(message.orders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool send_to_company_cc_emails = 2; */
        if (message.sendToCompanyCcEmails !== false)
            writer.tag(2, WireType.Varint).bool(message.sendToCompanyCcEmails);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoiceBatchSendRequest
 */
export const OrderInvoiceBatchSendRequest = new OrderInvoiceBatchSendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoiceBatchSendRequest_Order$Type extends MessageType<OrderInvoiceBatchSendRequest_Order> {
    constructor() {
        super("OrderInvoiceBatchSendRequest.Order", [
            { no: 1, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "subject", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderInvoiceBatchSendRequest_Order>): OrderInvoiceBatchSendRequest_Order {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderId = "";
        message.email = "";
        message.subject = "";
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<OrderInvoiceBatchSendRequest_Order>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoiceBatchSendRequest_Order): OrderInvoiceBatchSendRequest_Order {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_id */ 1:
                    message.orderId = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string subject */ 4:
                    message.subject = reader.string();
                    break;
                case /* string body */ 5:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderInvoiceBatchSendRequest_Order, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_id = 1; */
        if (message.orderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderId);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string subject = 4; */
        if (message.subject !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subject);
        /* string body = 5; */
        if (message.body !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoiceBatchSendRequest.Order
 */
export const OrderInvoiceBatchSendRequest_Order = new OrderInvoiceBatchSendRequest_Order$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoiceBatchSendReply$Type extends MessageType<OrderInvoiceBatchSendReply> {
    constructor() {
        super("OrderInvoiceBatchSendReply", []);
    }
    create(value?: PartialMessage<OrderInvoiceBatchSendReply>): OrderInvoiceBatchSendReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderInvoiceBatchSendReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoiceBatchSendReply): OrderInvoiceBatchSendReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderInvoiceBatchSendReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoiceBatchSendReply
 */
export const OrderInvoiceBatchSendReply = new OrderInvoiceBatchSendReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDeleteRequest$Type extends MessageType<LoadDeleteRequest> {
    constructor() {
        super("LoadDeleteRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDeleteRequest>): LoadDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDeleteRequest): LoadDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDeleteRequest
 */
export const LoadDeleteRequest = new LoadDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDeleteReply$Type extends MessageType<LoadDeleteReply> {
    constructor() {
        super("LoadDeleteReply", []);
    }
    create(value?: PartialMessage<LoadDeleteReply>): LoadDeleteReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadDeleteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDeleteReply): LoadDeleteReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadDeleteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadDeleteReply
 */
export const LoadDeleteReply = new LoadDeleteReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverrideGrossAmountRequest$Type extends MessageType<OverrideGrossAmountRequest> {
    constructor() {
        super("OverrideGrossAmountRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gross_amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<OverrideGrossAmountRequest>): OverrideGrossAmountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.grossAmount = 0;
        if (value !== undefined)
            reflectionMergePartial<OverrideGrossAmountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OverrideGrossAmountRequest): OverrideGrossAmountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* double gross_amount */ 2:
                    message.grossAmount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OverrideGrossAmountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* double gross_amount = 2; */
        if (message.grossAmount !== 0)
            writer.tag(2, WireType.Bit64).double(message.grossAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OverrideGrossAmountRequest
 */
export const OverrideGrossAmountRequest = new OverrideGrossAmountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OverrideGrossAmountReply$Type extends MessageType<OverrideGrossAmountReply> {
    constructor() {
        super("OverrideGrossAmountReply", []);
    }
    create(value?: PartialMessage<OverrideGrossAmountReply>): OverrideGrossAmountReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OverrideGrossAmountReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OverrideGrossAmountReply): OverrideGrossAmountReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OverrideGrossAmountReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OverrideGrossAmountReply
 */
export const OverrideGrossAmountReply = new OverrideGrossAmountReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestoreGrossAmountRequest$Type extends MessageType<RestoreGrossAmountRequest> {
    constructor() {
        super("RestoreGrossAmountRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RestoreGrossAmountRequest>): RestoreGrossAmountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<RestoreGrossAmountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestoreGrossAmountRequest): RestoreGrossAmountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestoreGrossAmountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RestoreGrossAmountRequest
 */
export const RestoreGrossAmountRequest = new RestoreGrossAmountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestoreGrossAmountReply$Type extends MessageType<RestoreGrossAmountReply> {
    constructor() {
        super("RestoreGrossAmountReply", []);
    }
    create(value?: PartialMessage<RestoreGrossAmountReply>): RestoreGrossAmountReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RestoreGrossAmountReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestoreGrossAmountReply): RestoreGrossAmountReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RestoreGrossAmountReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RestoreGrossAmountReply
 */
export const RestoreGrossAmountReply = new RestoreGrossAmountReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadCreateTrackingLinkRequest$Type extends MessageType<LoadCreateTrackingLinkRequest> {
    constructor() {
        super("LoadCreateTrackingLinkRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadCreateTrackingLinkRequest>): LoadCreateTrackingLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadCreateTrackingLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadCreateTrackingLinkRequest): LoadCreateTrackingLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadCreateTrackingLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadCreateTrackingLinkRequest
 */
export const LoadCreateTrackingLinkRequest = new LoadCreateTrackingLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadCreateTrackingLinkReply$Type extends MessageType<LoadCreateTrackingLinkReply> {
    constructor() {
        super("LoadCreateTrackingLinkReply", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadCreateTrackingLinkReply>): LoadCreateTrackingLinkReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<LoadCreateTrackingLinkReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadCreateTrackingLinkReply): LoadCreateTrackingLinkReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadCreateTrackingLinkReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadCreateTrackingLinkReply
 */
export const LoadCreateTrackingLinkReply = new LoadCreateTrackingLinkReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadRevokeTrackingLinkRequest$Type extends MessageType<LoadRevokeTrackingLinkRequest> {
    constructor() {
        super("LoadRevokeTrackingLinkRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadRevokeTrackingLinkRequest>): LoadRevokeTrackingLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadRevokeTrackingLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadRevokeTrackingLinkRequest): LoadRevokeTrackingLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadRevokeTrackingLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadRevokeTrackingLinkRequest
 */
export const LoadRevokeTrackingLinkRequest = new LoadRevokeTrackingLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadRevokeTrackingLinkReply$Type extends MessageType<LoadRevokeTrackingLinkReply> {
    constructor() {
        super("LoadRevokeTrackingLinkReply", []);
    }
    create(value?: PartialMessage<LoadRevokeTrackingLinkReply>): LoadRevokeTrackingLinkReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadRevokeTrackingLinkReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadRevokeTrackingLinkReply): LoadRevokeTrackingLinkReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadRevokeTrackingLinkReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadRevokeTrackingLinkReply
 */
export const LoadRevokeTrackingLinkReply = new LoadRevokeTrackingLinkReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadGetTrackingLinkRequest$Type extends MessageType<LoadGetTrackingLinkRequest> {
    constructor() {
        super("LoadGetTrackingLinkRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadGetTrackingLinkRequest>): LoadGetTrackingLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadGetTrackingLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadGetTrackingLinkRequest): LoadGetTrackingLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadGetTrackingLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadGetTrackingLinkRequest
 */
export const LoadGetTrackingLinkRequest = new LoadGetTrackingLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadGetTrackingLinkReply$Type extends MessageType<LoadGetTrackingLinkReply> {
    constructor() {
        super("LoadGetTrackingLinkReply", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "can_view_eta", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "can_view_documents", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "can_view_driver_contact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "can_view_truck_availability", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "can_chat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "show_other_load_stops", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LoadGetTrackingLinkReply>): LoadGetTrackingLinkReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.canViewEta = false;
        message.canViewDocuments = false;
        message.canViewDriverContact = false;
        message.canViewTruckAvailability = false;
        message.canChat = false;
        message.showOtherLoadStops = false;
        if (value !== undefined)
            reflectionMergePartial<LoadGetTrackingLinkReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadGetTrackingLinkReply): LoadGetTrackingLinkReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* bool can_view_eta */ 2:
                    message.canViewEta = reader.bool();
                    break;
                case /* bool can_view_documents */ 3:
                    message.canViewDocuments = reader.bool();
                    break;
                case /* bool can_view_driver_contact */ 4:
                    message.canViewDriverContact = reader.bool();
                    break;
                case /* bool can_view_truck_availability */ 5:
                    message.canViewTruckAvailability = reader.bool();
                    break;
                case /* bool can_chat */ 6:
                    message.canChat = reader.bool();
                    break;
                case /* bool show_other_load_stops */ 7:
                    message.showOtherLoadStops = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadGetTrackingLinkReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* bool can_view_eta = 2; */
        if (message.canViewEta !== false)
            writer.tag(2, WireType.Varint).bool(message.canViewEta);
        /* bool can_view_documents = 3; */
        if (message.canViewDocuments !== false)
            writer.tag(3, WireType.Varint).bool(message.canViewDocuments);
        /* bool can_view_driver_contact = 4; */
        if (message.canViewDriverContact !== false)
            writer.tag(4, WireType.Varint).bool(message.canViewDriverContact);
        /* bool can_view_truck_availability = 5; */
        if (message.canViewTruckAvailability !== false)
            writer.tag(5, WireType.Varint).bool(message.canViewTruckAvailability);
        /* bool can_chat = 6; */
        if (message.canChat !== false)
            writer.tag(6, WireType.Varint).bool(message.canChat);
        /* bool show_other_load_stops = 7; */
        if (message.showOtherLoadStops !== false)
            writer.tag(7, WireType.Varint).bool(message.showOtherLoadStops);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadGetTrackingLinkReply
 */
export const LoadGetTrackingLinkReply = new LoadGetTrackingLinkReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateTrackingLinkRequest$Type extends MessageType<LoadUpdateTrackingLinkRequest> {
    constructor() {
        super("LoadUpdateTrackingLinkRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "can_view_eta", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "can_view_documents", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "can_view_driver_contact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "can_view_truck_availability", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "can_chat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "show_other_load_stops", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LoadUpdateTrackingLinkRequest>): LoadUpdateTrackingLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.canViewEta = false;
        message.canViewDocuments = false;
        message.canViewDriverContact = false;
        message.canViewTruckAvailability = false;
        message.canChat = false;
        message.showOtherLoadStops = false;
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateTrackingLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateTrackingLinkRequest): LoadUpdateTrackingLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* bool can_view_eta */ 2:
                    message.canViewEta = reader.bool();
                    break;
                case /* bool can_view_documents */ 3:
                    message.canViewDocuments = reader.bool();
                    break;
                case /* bool can_view_driver_contact */ 4:
                    message.canViewDriverContact = reader.bool();
                    break;
                case /* bool can_view_truck_availability */ 5:
                    message.canViewTruckAvailability = reader.bool();
                    break;
                case /* bool can_chat */ 6:
                    message.canChat = reader.bool();
                    break;
                case /* bool show_other_load_stops */ 7:
                    message.showOtherLoadStops = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadUpdateTrackingLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* bool can_view_eta = 2; */
        if (message.canViewEta !== false)
            writer.tag(2, WireType.Varint).bool(message.canViewEta);
        /* bool can_view_documents = 3; */
        if (message.canViewDocuments !== false)
            writer.tag(3, WireType.Varint).bool(message.canViewDocuments);
        /* bool can_view_driver_contact = 4; */
        if (message.canViewDriverContact !== false)
            writer.tag(4, WireType.Varint).bool(message.canViewDriverContact);
        /* bool can_view_truck_availability = 5; */
        if (message.canViewTruckAvailability !== false)
            writer.tag(5, WireType.Varint).bool(message.canViewTruckAvailability);
        /* bool can_chat = 6; */
        if (message.canChat !== false)
            writer.tag(6, WireType.Varint).bool(message.canChat);
        /* bool show_other_load_stops = 7; */
        if (message.showOtherLoadStops !== false)
            writer.tag(7, WireType.Varint).bool(message.showOtherLoadStops);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateTrackingLinkRequest
 */
export const LoadUpdateTrackingLinkRequest = new LoadUpdateTrackingLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateTrackingLinkReply$Type extends MessageType<LoadUpdateTrackingLinkReply> {
    constructor() {
        super("LoadUpdateTrackingLinkReply", []);
    }
    create(value?: PartialMessage<LoadUpdateTrackingLinkReply>): LoadUpdateTrackingLinkReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateTrackingLinkReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateTrackingLinkReply): LoadUpdateTrackingLinkReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadUpdateTrackingLinkReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUpdateTrackingLinkReply
 */
export const LoadUpdateTrackingLinkReply = new LoadUpdateTrackingLinkReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadAssignTruckRequest$Type extends MessageType<LoadAssignTruckRequest> {
    constructor() {
        super("LoadAssignTruckRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "truck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadAssignTruckRequest>): LoadAssignTruckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.truckId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadAssignTruckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadAssignTruckRequest): LoadAssignTruckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string truck_id */ 2:
                    message.truckId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadAssignTruckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string truck_id = 2; */
        if (message.truckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.truckId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadAssignTruckRequest
 */
export const LoadAssignTruckRequest = new LoadAssignTruckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadAssignTruckReply$Type extends MessageType<LoadAssignTruckReply> {
    constructor() {
        super("LoadAssignTruckReply", []);
    }
    create(value?: PartialMessage<LoadAssignTruckReply>): LoadAssignTruckReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadAssignTruckReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadAssignTruckReply): LoadAssignTruckReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadAssignTruckReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadAssignTruckReply
 */
export const LoadAssignTruckReply = new LoadAssignTruckReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUnassignTruckRequest$Type extends MessageType<LoadUnassignTruckRequest> {
    constructor() {
        super("LoadUnassignTruckRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadUnassignTruckRequest>): LoadUnassignTruckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadUnassignTruckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUnassignTruckRequest): LoadUnassignTruckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadUnassignTruckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUnassignTruckRequest
 */
export const LoadUnassignTruckRequest = new LoadUnassignTruckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUnassignTruckReply$Type extends MessageType<LoadUnassignTruckReply> {
    constructor() {
        super("LoadUnassignTruckReply", []);
    }
    create(value?: PartialMessage<LoadUnassignTruckReply>): LoadUnassignTruckReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadUnassignTruckReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUnassignTruckReply): LoadUnassignTruckReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadUnassignTruckReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadUnassignTruckReply
 */
export const LoadUnassignTruckReply = new LoadUnassignTruckReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientReferenceIDCheckDuplicateRequest$Type extends MessageType<LoadClientReferenceIDCheckDuplicateRequest> {
    constructor() {
        super("LoadClientReferenceIDCheckDuplicateRequest", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["LoadClientReferenceIDCheckDuplicateRequest.EntityType", LoadClientReferenceIDCheckDuplicateRequest_EntityType] },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadClientReferenceIDCheckDuplicateRequest>): LoadClientReferenceIDCheckDuplicateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.entityId = "";
        message.referenceId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadClientReferenceIDCheckDuplicateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientReferenceIDCheckDuplicateRequest): LoadClientReferenceIDCheckDuplicateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LoadClientReferenceIDCheckDuplicateRequest.EntityType entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                case /* string reference_id */ 3:
                    message.referenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadClientReferenceIDCheckDuplicateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LoadClientReferenceIDCheckDuplicateRequest.EntityType entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        /* string reference_id = 3; */
        if (message.referenceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.referenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientReferenceIDCheckDuplicateRequest
 */
export const LoadClientReferenceIDCheckDuplicateRequest = new LoadClientReferenceIDCheckDuplicateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientReferenceIDCheckDuplicateReply$Type extends MessageType<LoadClientReferenceIDCheckDuplicateReply> {
    constructor() {
        super("LoadClientReferenceIDCheckDuplicateReply", [
            { no: 1, name: "is_duplicate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "load_friendly_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadClientReferenceIDCheckDuplicateReply>): LoadClientReferenceIDCheckDuplicateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isDuplicate = false;
        message.loadId = "";
        message.loadFriendlyId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadClientReferenceIDCheckDuplicateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientReferenceIDCheckDuplicateReply): LoadClientReferenceIDCheckDuplicateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_duplicate */ 1:
                    message.isDuplicate = reader.bool();
                    break;
                case /* string load_id */ 2:
                    message.loadId = reader.string();
                    break;
                case /* string load_friendly_id */ 3:
                    message.loadFriendlyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadClientReferenceIDCheckDuplicateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_duplicate = 1; */
        if (message.isDuplicate !== false)
            writer.tag(1, WireType.Varint).bool(message.isDuplicate);
        /* string load_id = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* string load_friendly_id = 3; */
        if (message.loadFriendlyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loadFriendlyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientReferenceIDCheckDuplicateReply
 */
export const LoadClientReferenceIDCheckDuplicateReply = new LoadClientReferenceIDCheckDuplicateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientReferenceIDUpdateRequest$Type extends MessageType<LoadClientReferenceIDUpdateRequest> {
    constructor() {
        super("LoadClientReferenceIDUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_client_reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadClientReferenceIDUpdateRequest>): LoadClientReferenceIDUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.newClientReferenceId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadClientReferenceIDUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientReferenceIDUpdateRequest): LoadClientReferenceIDUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string new_client_reference_id */ 2:
                    message.newClientReferenceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadClientReferenceIDUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string new_client_reference_id = 2; */
        if (message.newClientReferenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newClientReferenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientReferenceIDUpdateRequest
 */
export const LoadClientReferenceIDUpdateRequest = new LoadClientReferenceIDUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientReferenceIDUpdateReply$Type extends MessageType<LoadClientReferenceIDUpdateReply> {
    constructor() {
        super("LoadClientReferenceIDUpdateReply", []);
    }
    create(value?: PartialMessage<LoadClientReferenceIDUpdateReply>): LoadClientReferenceIDUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadClientReferenceIDUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientReferenceIDUpdateReply): LoadClientReferenceIDUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadClientReferenceIDUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientReferenceIDUpdateReply
 */
export const LoadClientReferenceIDUpdateReply = new LoadClientReferenceIDUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientUpdateCheckDuplicateRequest$Type extends MessageType<LoadClientUpdateCheckDuplicateRequest> {
    constructor() {
        super("LoadClientUpdateCheckDuplicateRequest", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["LoadClientUpdateCheckDuplicateRequest.EntityType", LoadClientUpdateCheckDuplicateRequest_EntityType] },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadClientUpdateCheckDuplicateRequest>): LoadClientUpdateCheckDuplicateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.entityId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadClientUpdateCheckDuplicateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientUpdateCheckDuplicateRequest): LoadClientUpdateCheckDuplicateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LoadClientUpdateCheckDuplicateRequest.EntityType entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadClientUpdateCheckDuplicateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LoadClientUpdateCheckDuplicateRequest.EntityType entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientUpdateCheckDuplicateRequest
 */
export const LoadClientUpdateCheckDuplicateRequest = new LoadClientUpdateCheckDuplicateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientUpdateCheckDuplicateReply$Type extends MessageType<LoadClientUpdateCheckDuplicateReply> {
    constructor() {
        super("LoadClientUpdateCheckDuplicateReply", [
            { no: 1, name: "is_duplicate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "load_friendly_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LoadClientUpdateCheckDuplicateReply>): LoadClientUpdateCheckDuplicateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isDuplicate = false;
        message.loadId = "";
        message.loadFriendlyId = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadClientUpdateCheckDuplicateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientUpdateCheckDuplicateReply): LoadClientUpdateCheckDuplicateReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_duplicate */ 1:
                    message.isDuplicate = reader.bool();
                    break;
                case /* string load_id */ 2:
                    message.loadId = reader.string();
                    break;
                case /* int64 load_friendly_id */ 3:
                    message.loadFriendlyId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadClientUpdateCheckDuplicateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_duplicate = 1; */
        if (message.isDuplicate !== false)
            writer.tag(1, WireType.Varint).bool(message.isDuplicate);
        /* string load_id = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* int64 load_friendly_id = 3; */
        if (message.loadFriendlyId !== 0)
            writer.tag(3, WireType.Varint).int64(message.loadFriendlyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientUpdateCheckDuplicateReply
 */
export const LoadClientUpdateCheckDuplicateReply = new LoadClientUpdateCheckDuplicateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientUpdateRequest$Type extends MessageType<LoadClientUpdateRequest> {
    constructor() {
        super("LoadClientUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "entity_type", kind: "enum", T: () => ["LoadClientUpdateRequest.EntityType", LoadClientUpdateRequest_EntityType] }
        ]);
    }
    create(value?: PartialMessage<LoadClientUpdateRequest>): LoadClientUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.entityId = "";
        message.entityType = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadClientUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientUpdateRequest): LoadClientUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string entity_id */ 2:
                    message.entityId = reader.string();
                    break;
                case /* LoadClientUpdateRequest.EntityType entity_type */ 3:
                    message.entityType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadClientUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string entity_id = 2; */
        if (message.entityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entityId);
        /* LoadClientUpdateRequest.EntityType entity_type = 3; */
        if (message.entityType !== 0)
            writer.tag(3, WireType.Varint).int32(message.entityType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientUpdateRequest
 */
export const LoadClientUpdateRequest = new LoadClientUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadClientUpdateReply$Type extends MessageType<LoadClientUpdateReply> {
    constructor() {
        super("LoadClientUpdateReply", []);
    }
    create(value?: PartialMessage<LoadClientUpdateReply>): LoadClientUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadClientUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadClientUpdateReply): LoadClientUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadClientUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadClientUpdateReply
 */
export const LoadClientUpdateReply = new LoadClientUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadStatusUpdateRequest$Type extends MessageType<LoadStatusUpdateRequest> {
    constructor() {
        super("LoadStatusUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_status", kind: "enum", T: () => ["LoadModel.Status", LoadModel_Status] }
        ]);
    }
    create(value?: PartialMessage<LoadStatusUpdateRequest>): LoadStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.newStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStatusUpdateRequest): LoadStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* LoadModel.Status new_status */ 2:
                    message.newStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* LoadModel.Status new_status = 2; */
        if (message.newStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.newStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadStatusUpdateRequest
 */
export const LoadStatusUpdateRequest = new LoadStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadStatusUpdateReply$Type extends MessageType<LoadStatusUpdateReply> {
    constructor() {
        super("LoadStatusUpdateReply", []);
    }
    create(value?: PartialMessage<LoadStatusUpdateReply>): LoadStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStatusUpdateReply): LoadStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadStatusUpdateReply
 */
export const LoadStatusUpdateReply = new LoadStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceStatusUpdateRequest$Type extends MessageType<LoadInvoiceStatusUpdateRequest> {
    constructor() {
        super("LoadInvoiceStatusUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_invoice_status", kind: "enum", T: () => ["LoadModel.InvoiceStatus", LoadModel_InvoiceStatus] }
        ]);
    }
    create(value?: PartialMessage<LoadInvoiceStatusUpdateRequest>): LoadInvoiceStatusUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.newInvoiceStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceStatusUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceStatusUpdateRequest): LoadInvoiceStatusUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* LoadModel.InvoiceStatus new_invoice_status */ 2:
                    message.newInvoiceStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoiceStatusUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* LoadModel.InvoiceStatus new_invoice_status = 2; */
        if (message.newInvoiceStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.newInvoiceStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceStatusUpdateRequest
 */
export const LoadInvoiceStatusUpdateRequest = new LoadInvoiceStatusUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoiceStatusUpdateReply$Type extends MessageType<LoadInvoiceStatusUpdateReply> {
    constructor() {
        super("LoadInvoiceStatusUpdateReply", []);
    }
    create(value?: PartialMessage<LoadInvoiceStatusUpdateReply>): LoadInvoiceStatusUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoiceStatusUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoiceStatusUpdateReply): LoadInvoiceStatusUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoiceStatusUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoiceStatusUpdateReply
 */
export const LoadInvoiceStatusUpdateReply = new LoadInvoiceStatusUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaperworkVerifiedUpdateRequest$Type extends MessageType<LoadInvoicePaperworkVerifiedUpdateRequest> {
    constructor() {
        super("LoadInvoicePaperworkVerifiedUpdateRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoice_paperwork_verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LoadInvoicePaperworkVerifiedUpdateRequest>): LoadInvoicePaperworkVerifiedUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.invoicePaperworkVerified = false;
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaperworkVerifiedUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaperworkVerifiedUpdateRequest): LoadInvoicePaperworkVerifiedUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* bool invoice_paperwork_verified */ 2:
                    message.invoicePaperworkVerified = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadInvoicePaperworkVerifiedUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* bool invoice_paperwork_verified = 2; */
        if (message.invoicePaperworkVerified !== false)
            writer.tag(2, WireType.Varint).bool(message.invoicePaperworkVerified);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaperworkVerifiedUpdateRequest
 */
export const LoadInvoicePaperworkVerifiedUpdateRequest = new LoadInvoicePaperworkVerifiedUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadInvoicePaperworkVerifiedUpdateReply$Type extends MessageType<LoadInvoicePaperworkVerifiedUpdateReply> {
    constructor() {
        super("LoadInvoicePaperworkVerifiedUpdateReply", []);
    }
    create(value?: PartialMessage<LoadInvoicePaperworkVerifiedUpdateReply>): LoadInvoicePaperworkVerifiedUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadInvoicePaperworkVerifiedUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadInvoicePaperworkVerifiedUpdateReply): LoadInvoicePaperworkVerifiedUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LoadInvoicePaperworkVerifiedUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadInvoicePaperworkVerifiedUpdateReply
 */
export const LoadInvoicePaperworkVerifiedUpdateReply = new LoadInvoicePaperworkVerifiedUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTruckRouteRetrieveRequest$Type extends MessageType<LoadTruckRouteRetrieveRequest> {
    constructor() {
        super("LoadTruckRouteRetrieveRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadTruckRouteRetrieveRequest>): LoadTruckRouteRetrieveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<LoadTruckRouteRetrieveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTruckRouteRetrieveRequest): LoadTruckRouteRetrieveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTruckRouteRetrieveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTruckRouteRetrieveRequest
 */
export const LoadTruckRouteRetrieveRequest = new LoadTruckRouteRetrieveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadTruckRouteRetrieveReply$Type extends MessageType<LoadTruckRouteRetrieveReply> {
    constructor() {
        super("LoadTruckRouteRetrieveReply", [
            { no: 1, name: "polyline_from_truck_location_to_first_active_stop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestRouteModel_Stop },
            { no: 3, name: "eta_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManifestRouteModel_EtaState }
        ]);
    }
    create(value?: PartialMessage<LoadTruckRouteRetrieveReply>): LoadTruckRouteRetrieveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.polylineFromTruckLocationToFirstActiveStop = "";
        message.stops = [];
        message.etaStates = [];
        if (value !== undefined)
            reflectionMergePartial<LoadTruckRouteRetrieveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadTruckRouteRetrieveReply): LoadTruckRouteRetrieveReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string polyline_from_truck_location_to_first_active_stop */ 1:
                    message.polylineFromTruckLocationToFirstActiveStop = reader.string();
                    break;
                case /* repeated ManifestRouteModel.Stop stops */ 2:
                    message.stops.push(ManifestRouteModel_Stop.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ManifestRouteModel.EtaState eta_states */ 3:
                    message.etaStates.push(ManifestRouteModel_EtaState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadTruckRouteRetrieveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string polyline_from_truck_location_to_first_active_stop = 1; */
        if (message.polylineFromTruckLocationToFirstActiveStop !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.polylineFromTruckLocationToFirstActiveStop);
        /* repeated ManifestRouteModel.Stop stops = 2; */
        for (let i = 0; i < message.stops.length; i++)
            ManifestRouteModel_Stop.internalBinaryWrite(message.stops[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ManifestRouteModel.EtaState eta_states = 3; */
        for (let i = 0; i < message.etaStates.length; i++)
            ManifestRouteModel_EtaState.internalBinaryWrite(message.etaStates[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LoadTruckRouteRetrieveReply
 */
export const LoadTruckRouteRetrieveReply = new LoadTruckRouteRetrieveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoiceSendRequest$Type extends MessageType<OrderInvoiceSendRequest> {
    constructor() {
        super("OrderInvoiceSendRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "recipient_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "recipient_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "subject", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "document_type_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "cc_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "customer_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "broker_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "send_to_company_cc_emails", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OrderInvoiceSendRequest>): OrderInvoiceSendRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.recipientEmail = "";
        message.recipientName = "";
        message.subject = "";
        message.body = "";
        message.documentTypeIds = [];
        message.ccUserIds = [];
        message.customerUserIds = [];
        message.brokerUserIds = [];
        message.sendToCompanyCcEmails = false;
        if (value !== undefined)
            reflectionMergePartial<OrderInvoiceSendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoiceSendRequest): OrderInvoiceSendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* string recipient_email */ 2:
                    message.recipientEmail = reader.string();
                    break;
                case /* string recipient_name */ 3:
                    message.recipientName = reader.string();
                    break;
                case /* string subject */ 4:
                    message.subject = reader.string();
                    break;
                case /* string body */ 5:
                    message.body = reader.string();
                    break;
                case /* repeated string document_type_ids */ 6:
                    message.documentTypeIds.push(reader.string());
                    break;
                case /* repeated string cc_user_ids */ 7:
                    message.ccUserIds.push(reader.string());
                    break;
                case /* repeated string customer_user_ids */ 8:
                    message.customerUserIds.push(reader.string());
                    break;
                case /* repeated string broker_user_ids */ 9:
                    message.brokerUserIds.push(reader.string());
                    break;
                case /* bool send_to_company_cc_emails */ 10:
                    message.sendToCompanyCcEmails = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderInvoiceSendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* string recipient_email = 2; */
        if (message.recipientEmail !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientEmail);
        /* string recipient_name = 3; */
        if (message.recipientName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipientName);
        /* string subject = 4; */
        if (message.subject !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subject);
        /* string body = 5; */
        if (message.body !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.body);
        /* repeated string document_type_ids = 6; */
        for (let i = 0; i < message.documentTypeIds.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.documentTypeIds[i]);
        /* repeated string cc_user_ids = 7; */
        for (let i = 0; i < message.ccUserIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.ccUserIds[i]);
        /* repeated string customer_user_ids = 8; */
        for (let i = 0; i < message.customerUserIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.customerUserIds[i]);
        /* repeated string broker_user_ids = 9; */
        for (let i = 0; i < message.brokerUserIds.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.brokerUserIds[i]);
        /* bool send_to_company_cc_emails = 10; */
        if (message.sendToCompanyCcEmails !== false)
            writer.tag(10, WireType.Varint).bool(message.sendToCompanyCcEmails);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoiceSendRequest
 */
export const OrderInvoiceSendRequest = new OrderInvoiceSendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoiceSendReply$Type extends MessageType<OrderInvoiceSendReply> {
    constructor() {
        super("OrderInvoiceSendReply", []);
    }
    create(value?: PartialMessage<OrderInvoiceSendReply>): OrderInvoiceSendReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderInvoiceSendReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoiceSendReply): OrderInvoiceSendReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderInvoiceSendReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoiceSendReply
 */
export const OrderInvoiceSendReply = new OrderInvoiceSendReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderCustomerUserAssignRequest$Type extends MessageType<OrderCustomerUserAssignRequest> {
    constructor() {
        super("OrderCustomerUserAssignRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderCustomerUserAssignRequest>): OrderCustomerUserAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<OrderCustomerUserAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderCustomerUserAssignRequest): OrderCustomerUserAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* repeated string user_ids */ 2:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderCustomerUserAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* repeated string user_ids = 2; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderCustomerUserAssignRequest
 */
export const OrderCustomerUserAssignRequest = new OrderCustomerUserAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderCustomerUserAssignReply$Type extends MessageType<OrderCustomerUserAssignReply> {
    constructor() {
        super("OrderCustomerUserAssignReply", []);
    }
    create(value?: PartialMessage<OrderCustomerUserAssignReply>): OrderCustomerUserAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderCustomerUserAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderCustomerUserAssignReply): OrderCustomerUserAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderCustomerUserAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderCustomerUserAssignReply
 */
export const OrderCustomerUserAssignReply = new OrderCustomerUserAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderCustomerUserRemoveRequest$Type extends MessageType<OrderCustomerUserRemoveRequest> {
    constructor() {
        super("OrderCustomerUserRemoveRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderCustomerUserRemoveRequest>): OrderCustomerUserRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<OrderCustomerUserRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderCustomerUserRemoveRequest): OrderCustomerUserRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* repeated string user_ids */ 2:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderCustomerUserRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* repeated string user_ids = 2; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderCustomerUserRemoveRequest
 */
export const OrderCustomerUserRemoveRequest = new OrderCustomerUserRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderCustomerUserRemoveReply$Type extends MessageType<OrderCustomerUserRemoveReply> {
    constructor() {
        super("OrderCustomerUserRemoveReply", []);
    }
    create(value?: PartialMessage<OrderCustomerUserRemoveReply>): OrderCustomerUserRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderCustomerUserRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderCustomerUserRemoveReply): OrderCustomerUserRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderCustomerUserRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderCustomerUserRemoveReply
 */
export const OrderCustomerUserRemoveReply = new OrderCustomerUserRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBrokerUserAssignRequest$Type extends MessageType<OrderBrokerUserAssignRequest> {
    constructor() {
        super("OrderBrokerUserAssignRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderBrokerUserAssignRequest>): OrderBrokerUserAssignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<OrderBrokerUserAssignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBrokerUserAssignRequest): OrderBrokerUserAssignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* repeated string user_ids */ 2:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderBrokerUserAssignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* repeated string user_ids = 2; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderBrokerUserAssignRequest
 */
export const OrderBrokerUserAssignRequest = new OrderBrokerUserAssignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBrokerUserAssignReply$Type extends MessageType<OrderBrokerUserAssignReply> {
    constructor() {
        super("OrderBrokerUserAssignReply", []);
    }
    create(value?: PartialMessage<OrderBrokerUserAssignReply>): OrderBrokerUserAssignReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderBrokerUserAssignReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBrokerUserAssignReply): OrderBrokerUserAssignReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderBrokerUserAssignReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderBrokerUserAssignReply
 */
export const OrderBrokerUserAssignReply = new OrderBrokerUserAssignReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBrokerUserRemoveRequest$Type extends MessageType<OrderBrokerUserRemoveRequest> {
    constructor() {
        super("OrderBrokerUserRemoveRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderBrokerUserRemoveRequest>): OrderBrokerUserRemoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<OrderBrokerUserRemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBrokerUserRemoveRequest): OrderBrokerUserRemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                case /* repeated string user_ids */ 2:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderBrokerUserRemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        /* repeated string user_ids = 2; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderBrokerUserRemoveRequest
 */
export const OrderBrokerUserRemoveRequest = new OrderBrokerUserRemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBrokerUserRemoveReply$Type extends MessageType<OrderBrokerUserRemoveReply> {
    constructor() {
        super("OrderBrokerUserRemoveReply", []);
    }
    create(value?: PartialMessage<OrderBrokerUserRemoveReply>): OrderBrokerUserRemoveReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderBrokerUserRemoveReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBrokerUserRemoveReply): OrderBrokerUserRemoveReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderBrokerUserRemoveReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderBrokerUserRemoveReply
 */
export const OrderBrokerUserRemoveReply = new OrderBrokerUserRemoveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderClientGetRequest$Type extends MessageType<OrderClientGetRequest> {
    constructor() {
        super("OrderClientGetRequest", [
            { no: 1, name: "load_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderClientGetRequest>): OrderClientGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.loadId = "";
        if (value !== undefined)
            reflectionMergePartial<OrderClientGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderClientGetRequest): OrderClientGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string load_id */ 1:
                    message.loadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderClientGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string load_id = 1; */
        if (message.loadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.loadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderClientGetRequest
 */
export const OrderClientGetRequest = new OrderClientGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderClientGetReply$Type extends MessageType<OrderClientGetReply> {
    constructor() {
        super("OrderClientGetReply", [
            { no: 1, name: "entity_type", kind: "enum", T: () => ["OrderClientGetReply.EntityType", OrderClientGetReply_EntityType] },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderClientGetReply>): OrderClientGetReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityType = 0;
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<OrderClientGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderClientGetReply): OrderClientGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OrderClientGetReply.EntityType entity_type */ 1:
                    message.entityType = reader.int32();
                    break;
                case /* repeated string user_ids */ 2:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderClientGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OrderClientGetReply.EntityType entity_type = 1; */
        if (message.entityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.entityType);
        /* repeated string user_ids = 2; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderClientGetReply
 */
export const OrderClientGetReply = new OrderClientGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoicingCompanyUpdateRequest$Type extends MessageType<OrderInvoicingCompanyUpdateRequest> {
    constructor() {
        super("OrderInvoicingCompanyUpdateRequest", [
            { no: 1, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invoicing_company_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderInvoicingCompanyUpdateRequest>): OrderInvoicingCompanyUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderId = "";
        message.invoicingCompanyId = "";
        if (value !== undefined)
            reflectionMergePartial<OrderInvoicingCompanyUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoicingCompanyUpdateRequest): OrderInvoicingCompanyUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_id */ 1:
                    message.orderId = reader.string();
                    break;
                case /* string invoicing_company_id */ 2:
                    message.invoicingCompanyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderInvoicingCompanyUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_id = 1; */
        if (message.orderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderId);
        /* string invoicing_company_id = 2; */
        if (message.invoicingCompanyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invoicingCompanyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoicingCompanyUpdateRequest
 */
export const OrderInvoicingCompanyUpdateRequest = new OrderInvoicingCompanyUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderInvoicingCompanyUpdateReply$Type extends MessageType<OrderInvoicingCompanyUpdateReply> {
    constructor() {
        super("OrderInvoicingCompanyUpdateReply", []);
    }
    create(value?: PartialMessage<OrderInvoicingCompanyUpdateReply>): OrderInvoicingCompanyUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderInvoicingCompanyUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderInvoicingCompanyUpdateReply): OrderInvoicingCompanyUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderInvoicingCompanyUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderInvoicingCompanyUpdateReply
 */
export const OrderInvoicingCompanyUpdateReply = new OrderInvoicingCompanyUpdateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderFriendlyIdUpdateRequest$Type extends MessageType<OrderFriendlyIdUpdateRequest> {
    constructor() {
        super("OrderFriendlyIdUpdateRequest", [
            { no: 1, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderFriendlyIdUpdateRequest>): OrderFriendlyIdUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderId = "";
        if (value !== undefined)
            reflectionMergePartial<OrderFriendlyIdUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderFriendlyIdUpdateRequest): OrderFriendlyIdUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_id */ 1:
                    message.orderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderFriendlyIdUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_id = 1; */
        if (message.orderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderFriendlyIdUpdateRequest
 */
export const OrderFriendlyIdUpdateRequest = new OrderFriendlyIdUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderFriendlyIdUpdateReply$Type extends MessageType<OrderFriendlyIdUpdateReply> {
    constructor() {
        super("OrderFriendlyIdUpdateReply", []);
    }
    create(value?: PartialMessage<OrderFriendlyIdUpdateReply>): OrderFriendlyIdUpdateReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OrderFriendlyIdUpdateReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderFriendlyIdUpdateReply): OrderFriendlyIdUpdateReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: OrderFriendlyIdUpdateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderFriendlyIdUpdateReply
 */
export const OrderFriendlyIdUpdateReply = new OrderFriendlyIdUpdateReply$Type();
/**
 * @generated ServiceType for protobuf service LoadsService
 */
export const LoadsService = new ServiceType("LoadsService", [
    { name: "RetrieveLoad", options: {}, I: RetrieveLoadRequest, O: RetrieveLoadReply },
    { name: "GetLoads", options: {}, I: GetLoadsRequest, O: GetLoadsReply },
    { name: "OrderUnarchivedGet", options: {}, I: OrderUnarchivedGetRequest, O: OrderUnarchivedGetReply },
    { name: "LoadStatsGet", options: {}, I: LoadStatsGetRequest, O: LoadStatsGetReply },
    { name: "GetLastLoad", options: {}, I: GetLastLoadRequest, O: GetLastLoadResponse },
    { name: "GetLoadEtaStates", options: {}, I: GetLoadEtaStatesRequest, O: GetLoadEtaStatesReply },
    { name: "UpdateLoadedMiles", options: {}, I: LoadUpdateLoadedMilesRequest, O: LoadUpdateLoadedMilesReply },
    { name: "UpdateEmptyMiles", options: {}, I: LoadUpdateEmptyMilesRequest, O: LoadUpdateEmptyMilesReply },
    { name: "LoadUpdate", options: {}, I: LoadUpdateRequest, O: LoadUpdateReply },
    { name: "LoadTemperatureUpdate", options: {}, I: LoadTemperatureUpdateRequest, O: LoadTemperatureUpdateReply },
    { name: "LoadDispatcherUpdate", options: {}, I: LoadDispatcherUpdateRequest, O: LoadDispatcherUpdateReply },
    { name: "LoadInvoiceFactoringCompanyUpdate", options: {}, I: LoadInvoiceFactoringCompanyUpdateRequest, O: LoadInvoiceFactoringCompanyUpdateReply },
    { name: "LoadInvoiceDownload", options: {}, I: LoadInvoiceDownloadRequest, O: LoadInvoiceDownloadReply },
    { name: "LoadInvoiceBatchDownload", options: {}, I: LoadInvoiceBatchDownloadRequest, O: LoadInvoiceBatchDownloadReply },
    { name: "LoadInvoiceStatusBatchUpdate", options: {}, I: LoadInvoiceStatusBatchUpdateRequest, O: LoadInvoiceStatusBatchUpdateReply },
    { name: "OrderInvoiceBatchSend", options: {}, I: OrderInvoiceBatchSendRequest, O: OrderInvoiceBatchSendReply },
    { name: "LoadDelete", options: {}, I: LoadDeleteRequest, O: LoadDeleteReply },
    { name: "OverrideGrossAmount", options: {}, I: OverrideGrossAmountRequest, O: OverrideGrossAmountReply },
    { name: "RestoreGrossAmount", options: {}, I: RestoreGrossAmountRequest, O: RestoreGrossAmountReply },
    { name: "LoadCreateTrackingLink", options: {}, I: LoadCreateTrackingLinkRequest, O: LoadCreateTrackingLinkReply },
    { name: "LoadRevokeTrackingLink", options: {}, I: LoadRevokeTrackingLinkRequest, O: LoadRevokeTrackingLinkReply },
    { name: "LoadGetTrackingLink", options: {}, I: LoadGetTrackingLinkRequest, O: LoadGetTrackingLinkReply },
    { name: "LoadUpdateTrackingLink", options: {}, I: LoadUpdateTrackingLinkRequest, O: LoadUpdateTrackingLinkReply },
    { name: "AssignTruck", options: {}, I: LoadAssignTruckRequest, O: LoadAssignTruckReply },
    { name: "UnassignTruck", options: {}, I: LoadUnassignTruckRequest, O: LoadUnassignTruckReply },
    { name: "LoadClientReferenceIDCheckDuplicate", options: {}, I: LoadClientReferenceIDCheckDuplicateRequest, O: LoadClientReferenceIDCheckDuplicateReply },
    { name: "LoadClientReferenceIDUpdate", options: {}, I: LoadClientReferenceIDUpdateRequest, O: LoadClientReferenceIDUpdateReply },
    { name: "LoadClientUpdateCheckDuplicate", options: {}, I: LoadClientUpdateCheckDuplicateRequest, O: LoadClientUpdateCheckDuplicateReply },
    { name: "LoadClientUpdate", options: {}, I: LoadClientUpdateRequest, O: LoadClientUpdateReply },
    { name: "LoadStatusUpdate", options: {}, I: LoadStatusUpdateRequest, O: LoadStatusUpdateReply },
    { name: "LoadInvoiceStatusUpdate", options: {}, I: LoadInvoiceStatusUpdateRequest, O: LoadInvoiceStatusUpdateReply },
    { name: "LoadInvoicePaperworkVerifiedUpdate", options: {}, I: LoadInvoicePaperworkVerifiedUpdateRequest, O: LoadInvoicePaperworkVerifiedUpdateReply },
    { name: "LoadTruckRouteRetrieve", options: {}, I: LoadTruckRouteRetrieveRequest, O: LoadTruckRouteRetrieveReply },
    { name: "OrderInvoiceSend", options: {}, I: OrderInvoiceSendRequest, O: OrderInvoiceSendReply },
    { name: "OrderCustomerUserAssign", options: {}, I: OrderCustomerUserAssignRequest, O: OrderCustomerUserAssignReply },
    { name: "OrderCustomerUserRemove", options: {}, I: OrderCustomerUserRemoveRequest, O: OrderCustomerUserRemoveReply },
    { name: "OrderBrokerUserAssign", options: {}, I: OrderBrokerUserAssignRequest, O: OrderBrokerUserAssignReply },
    { name: "OrderBrokerUserRemove", options: {}, I: OrderBrokerUserRemoveRequest, O: OrderBrokerUserRemoveReply },
    { name: "OrderClientGet", options: {}, I: OrderClientGetRequest, O: OrderClientGetReply },
    { name: "OrderInvoicingCompanyUpdate", options: {}, I: OrderInvoicingCompanyUpdateRequest, O: OrderInvoicingCompanyUpdateReply },
    { name: "OrderFriendlyIdUpdate", options: {}, I: OrderFriendlyIdUpdateRequest, O: OrderFriendlyIdUpdateReply }
]);
